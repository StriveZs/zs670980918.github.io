<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2-3-4树学习</title>
    <url>/2018/05/21/2-3-4-shu-xue-xi-1/</url>
    <content><![CDATA[<p>首先先对二叉树进行介绍： 二叉树表面上理解是：只有两个分叉 如图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/1-6.png" alt=""> 需要注意的是每一个的结点的左子节点都比该节点的值小，同理该节点的右节点都比该节点的值大。还有就是每一个节点都只能有一个key值。相对的来讲二叉树的的结点越多，高度也越高，那么查找效率也就越低。   2-3-4数：  <strong>需要注意的无论什么操作都要保证所有的结点高度一样！</strong> <strong>特点是高度平衡</strong> 有名字就可以看出来的它的结点可以有2个3个4个。 具体的定义：</p>
<ol>
<li>一个key有两个儿子结点。</li>
</ol>
<p>如图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/2-6.png" alt=""> 2.两个key有三个儿子结点 如图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/3-5.png" alt=""> 3.三个key有四个儿子结点 如图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/4-5.png" alt=""> 一个例子： <img src="http://47.100.4.8/wp-content/uploads/2018/05/5-3.png" alt=""> 分析上面的例子： 对于一个key值两个孩子结点的情况就和普通的二叉树一样。 对于两个key值三个孩子结点情况： 那中间的MO双key为例：L的值比M的值小所以为左孩子，N的值大于M但是小于O的值所以作为中间孩子，最后是Q它的值大于O的值所以作为右孩子。（需要注意的一点是：key M的值小于O的值） 对于三个key值的四个孩子结点情况： 只能以上上面的图为例： abc三个key是由小到大排列的，p的值小于a，q的值大于a但是小于b，r的值大于b但是小于c的值，s的值大于c的值。 2-3-4数的查找其实和不同的二叉树查找相差不多，主要是都是通过递归实现。 主要流程：</p>
<ol>
<li>首先和根节点比较如果小则以左孩子作为作为下一次的根节点</li>
<li>如果大则以右孩子作为下一次的根节点</li>
</ol>
<p>（但是有一点不同的是这里可能有两个key或者三个key值所以需要进行分区，以便于能够选择到每个孩子）</p>
<ol start="3">
<li>如果最终能找到相同的值，则返回并提示查找成功，否则当遍历完该树时，结束并且返回查找失败。</li>
</ol>
<p>图解： <img src="http://47.100.4.8/wp-content/uploads/2018/05/6-2.png" alt=""> 2-3-4插入   插入分别几种情况： 1. 如果是向2 key值的结点插入数据的话，那么直接将它转换为3 key值的结点就好了。 如图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/7-2.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/8.png" alt=""> 3.如果是向一个3 key值的结点插入，则就将3 key值的结点变换为4 key值的结点 如图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/9.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/10.png" alt="">、 4.向四结点的插入节点的情况： 就需要对节点进行变化。 第一种情况： 向3 key值的结点插入，其父结点不是3 key值的结点，则进行如图操作： <img src="http://47.100.4.8/wp-content/uploads/2018/05/11-1.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/12.png" alt=""> 则将FGJ中的G提到父结点中（注意这里的父结点不是3 key值的结点） <img src="http://47.100.4.8/wp-content/uploads/2018/05/13.png" alt=""> 3 key结点的父结点分别为1 key结点和2 key结点不是3 key结点： <img src="http://47.100.4.8/wp-content/uploads/2018/05/14.png" alt=""> 会在明天的 博文中讨论向一个三key值的结点插入数据时父结点也是3key值结点时的情况。 在这里要感谢：<a href="https://www.jianshu.com/p/37c845a5add6">https://www.jianshu.com/p/37c845a5add6</a>   博主提供的讲解，上面的图均取自其的博文，再次感谢。</p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>2-3-4树</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda`s problem of pip</title>
    <url>/2020/01/13/Anaconda%E5%9C%A8%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%90%8E%E5%AE%89%E8%A3%85pip%E5%B9%B6%E8%A7%A3%E5%86%B3%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1>Anaconda`s problem of pip</h1>
<h2 id="Anaconda安装pip"><a class="header-anchor" href="#Anaconda安装pip">¶</a>Anaconda安装pip</h2>
<p><strong>步骤</strong></p>
<ol>
<li>在对应的环境中打开terminal</li>
<li>输入conda install setuptools，安装相关的包下载工具</li>
<li>然后输入 conda install pip 即可安装</li>
</ol>
<h2 id="给pip更换国内源"><a class="header-anchor" href="#给pip更换国内源">¶</a>给pip更换国内源</h2>
<p><strong>步骤</strong></p>
<ol>
<li>使用windows+R打开运行</li>
<li>输入%HOMEPATH%</li>
<li>在用户目录文件夹下创建pip.ini用txt打开（如果有则直接打开）</li>
<li>更换国内源</li>
</ol>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">global</span>]</span><br><span class="line">timeout = <span class="number">10</span> # 设置超时，单位s</span><br><span class="line"><span class="keyword">index</span>-url =  http://mirrors.aliyun.com/pypi/simple/   # 指定优先下载源</span><br><span class="line">extra-<span class="keyword">index</span>-url= http://pypi.douban.com/simple/   # 第二下载源</span><br><span class="line">[install]</span><br><span class="line"><span class="keyword">trusted</span>-host=</span><br><span class="line">    mirrors.aliyun.com</span><br><span class="line">    pypi.douban.com</span><br></pre></td></tr></table></figure>
<h2 id="解决SSL问题"><a class="header-anchor" href="#解决SSL问题">¶</a>解决SSL问题</h2>
<p>在更换完国内源之后仍然出现SSL，连接失败问题的话，则给出下述办法。<br>
<strong>步骤</strong></p>
<ol>
<li>找到该地址<strong>D:\Anaconda\pkgs\openssl-1.0.2p-hfa6e2cd_0\Library\bin</strong></li>
<li>然后将它添加到User的系统环境变量中即可。</li>
</ol>
]]></content>
      <categories>
        <category>文章页</category>
        <category>Python</category>
        <category>Anaconda</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Anaconda</tag>
        <tag>pip</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo中Next主题在主页添加粒子效果时钟</title>
    <url>/2019/12/31/Hexo%E4%B8%ADNext%E4%B8%BB%E9%A2%98%E5%9C%A8%E4%B8%BB%E9%A1%B5%E6%B7%BB%E5%8A%A0%E7%B2%92%E5%AD%90%E6%95%88%E6%9E%9C%E6%97%B6%E9%92%9F/</url>
    <content><![CDATA[<h1>Hexo中Next主题在主页添加粒子效果时钟</h1>
<h2 id="创建配置文件"><a class="header-anchor" href="#创建配置文件">¶</a>创建配置文件</h2>
<p>在\themes\next\layout_custom\目录下，新建clock.swig文件，内容如下：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div style=<span class="string">""</span>&gt;</span><br><span class="line">  &lt;canvas id=<span class="string">"canvas"</span> style=<span class="string">"width:60%;"</span>&gt;当前浏览器不支持canvas，请更换浏览器后再试&lt;/canvas&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(function()&#123;</span><br><span class="line"></span><br><span class="line">   var digit=</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">        ],//<span class="number">0</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">        ],//<span class="number">1</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">        ],//<span class="number">2</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">        ],//<span class="number">3</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">        ],//<span class="number">4</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">        ],//<span class="number">5</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">        ],//<span class="number">6</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">        ],//<span class="number">7</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">        ],//<span class="number">8</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">        ],//<span class="number">9</span></span><br><span class="line">        [</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">        ]//:</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">var canvas = document.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"></span><br><span class="line">if(canvas.getContext)&#123;</span><br><span class="line">    var cxt = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    //声明canvas的宽高</span><br><span class="line">    var <span class="symbol">H</span> = <span class="number">100</span>,<span class="symbol">W</span> = <span class="number">700</span>;</span><br><span class="line">    canvas.height = <span class="symbol">H</span>;</span><br><span class="line">    canvas.width = <span class="symbol">W</span>;</span><br><span class="line">    cxt.fillStyle = <span class="string">'#f00'</span>;</span><br><span class="line">    cxt.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">    //存储时间数据</span><br><span class="line">    var data = [];</span><br><span class="line">    //存储运动的小球</span><br><span class="line">    var balls = [];</span><br><span class="line">    //设置粒子半径</span><br><span class="line">    var <span class="symbol">R</span> = canvas.height/<span class="number">20</span><span class="number">-1</span>;</span><br><span class="line">    (function()&#123;</span><br><span class="line">        var temp = /(\d)(\d):(\d)(\d):(\d)(\d)/.exec(new <span class="symbol">Date</span>());</span><br><span class="line">        //存储时间数字，由十位小时、个位小时、冒号、十位分钟、个位分钟、冒号、十位秒钟、个位秒钟这<span class="number">7</span>个数字组成</span><br><span class="line">        data.push(temp[<span class="number">1</span>],temp[<span class="number">2</span>],<span class="number">10</span>,temp[<span class="number">3</span>],temp[<span class="number">4</span>],<span class="number">10</span>,temp[<span class="number">5</span>],temp[<span class="number">6</span>]);</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*生成点阵数字*/</span></span><br><span class="line">    function renderDigit(index,num)&#123;</span><br><span class="line">        for(var i = <span class="number">0</span>; i &lt; digit[num].length; i++)&#123;</span><br><span class="line">            for(var j = <span class="number">0</span>; j &lt; digit[num][i].length; j++)&#123;</span><br><span class="line">                if(digit[num][i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    cxt.beginPath();</span><br><span class="line">                    cxt.arc(<span class="number">14</span>*(<span class="symbol">R</span>+<span class="number">2</span>)*index + j*<span class="number">2</span>*(<span class="symbol">R</span>+<span class="number">1</span>)+(<span class="symbol">R</span>+<span class="number">1</span>),i*<span class="number">2</span>*(<span class="symbol">R</span>+<span class="number">1</span>)+(<span class="symbol">R</span>+<span class="number">1</span>),<span class="symbol">R</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="symbol">Math</span>.<span class="symbol">PI</span>);</span><br><span class="line">                    cxt.closePath();</span><br><span class="line">                    cxt.fill();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*更新时钟*/</span></span><br><span class="line">    function updateDigitTime()&#123;</span><br><span class="line">        var changeNumArray = [];</span><br><span class="line">        var temp = /(\d)(\d):(\d)(\d):(\d)(\d)/.exec(new <span class="symbol">Date</span>());</span><br><span class="line">        var <span class="symbol">NewData</span> = [];</span><br><span class="line">        <span class="symbol">NewData</span>.push(temp[<span class="number">1</span>],temp[<span class="number">2</span>],<span class="number">10</span>,temp[<span class="number">3</span>],temp[<span class="number">4</span>],<span class="number">10</span>,temp[<span class="number">5</span>],temp[<span class="number">6</span>]);</span><br><span class="line">        for(var i = data.length<span class="number">-1</span>; i &gt;=<span class="number">0</span> ; i--)&#123;</span><br><span class="line">            //时间发生变化</span><br><span class="line">            if(<span class="symbol">NewData</span>[i] !== data[i])&#123;</span><br><span class="line">                //将变化的数字值和在data数组中的索引存储在changeNumArray数组中</span><br><span class="line">                changeNumArray.push(i+<span class="string">'_'</span>+(<span class="symbol">Number</span>(data[i])+<span class="number">1</span>)<span class="comment">%10);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        //增加小球</span><br><span class="line">        for(var i = <span class="number">0</span>; i&lt; changeNumArray.length; i++)&#123;</span><br><span class="line">            addBalls.apply(this,changeNumArray[i].split(<span class="string">'_'</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        data = <span class="symbol">NewData</span>.concat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*更新小球状态*/</span></span><br><span class="line">    function updateBalls()&#123;</span><br><span class="line">        for(var i = <span class="number">0</span>; i &lt; balls.length; i++)&#123;</span><br><span class="line">            balls[i].stepY += balls[i].disY;</span><br><span class="line">            balls[i].x += balls[i].stepX;</span><br><span class="line">            balls[i].y += balls[i].stepY;</span><br><span class="line">            if(balls[i].x &gt; <span class="symbol">W</span> + <span class="symbol">R</span> || balls[i].y &gt; <span class="symbol">H</span> + <span class="symbol">R</span>)&#123;</span><br><span class="line">                balls.splice(i,<span class="number">1</span>);</span><br><span class="line">                i--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*增加要运动的小球*/</span></span><br><span class="line">    function addBalls(index,num)&#123;</span><br><span class="line">        var numArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">        var colorArray =  [<span class="string">"#3BE"</span>,<span class="string">"#09C"</span>,<span class="string">"#A6C"</span>,<span class="string">"#93C"</span>,<span class="string">"#9C0"</span>,<span class="string">"#690"</span>,<span class="string">"#FB3"</span>,<span class="string">"#F80"</span>,<span class="string">"#F44"</span>,<span class="string">"#C00"</span>];</span><br><span class="line">        for(var i = <span class="number">0</span>; i &lt; digit[num].length; i++)&#123;</span><br><span class="line">            for(var j = <span class="number">0</span>; j &lt; digit[num][i].length; j++)&#123;</span><br><span class="line">                if(digit[num][i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">                    var ball = &#123;</span><br><span class="line">                        x:<span class="number">14</span>*(<span class="symbol">R</span>+<span class="number">2</span>)*index + j*<span class="number">2</span>*(<span class="symbol">R</span>+<span class="number">1</span>)+(<span class="symbol">R</span>+<span class="number">1</span>),</span><br><span class="line">                        y:i*<span class="number">2</span>*(<span class="symbol">R</span>+<span class="number">1</span>)+(<span class="symbol">R</span>+<span class="number">1</span>),</span><br><span class="line">                        stepX:<span class="symbol">Math</span>.floor(<span class="symbol">Math</span>.random() * <span class="number">4</span> <span class="number">-2</span>),</span><br><span class="line">                        stepY:-<span class="number">2</span>*numArray[<span class="symbol">Math</span>.floor(<span class="symbol">Math</span>.random()*numArray.length)],</span><br><span class="line">                        color:colorArray[<span class="symbol">Math</span>.floor(<span class="symbol">Math</span>.random()*colorArray.length)],</span><br><span class="line">                        disY:<span class="number">1</span></span><br><span class="line">                    &#125;;</span><br><span class="line">                    balls.push(ball);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*渲染*/</span></span><br><span class="line">    function render()&#123;</span><br><span class="line">        //重置画布宽度，达到清空画布的效果</span><br><span class="line">        canvas.height = <span class="number">100</span>;</span><br><span class="line">        //渲染时钟</span><br><span class="line">        for(var i = <span class="number">0</span>; i &lt; data.length; i++)&#123;</span><br><span class="line">            renderDigit(i,data[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        //渲染小球</span><br><span class="line">        for(var i = <span class="number">0</span>; i &lt; balls.length; i++)&#123;</span><br><span class="line">            cxt.beginPath();</span><br><span class="line">            cxt.arc(balls[i].x,balls[i].y,<span class="symbol">R</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="symbol">Math</span>.<span class="symbol">PI</span>);</span><br><span class="line">            cxt.fillStyle = balls[i].color;</span><br><span class="line">            cxt.closePath();</span><br><span class="line">            cxt.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    clearInterval(oTimer);</span><br><span class="line">    var oTimer = setInterval(function()&#123;</span><br><span class="line">        //更新时钟</span><br><span class="line">        updateDigitTime();</span><br><span class="line">        //更新小球状态</span><br><span class="line">        updateBalls();</span><br><span class="line">        //渲染</span><br><span class="line">        render();</span><br><span class="line">    &#125;,<span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="通过配置文件配置"><a class="header-anchor" href="#通过配置文件配置">¶</a>通过配置文件配置</h2>
<ol>
<li>在博客目录\themes\next\layout_macro\sidebar.swig尾部中引入：</li>
</ol>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"># 侧栏粒子时钟</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.diy_time.clock %&#125;</span></span><br><span class="line"><span class="xml">  <span class="comment">&lt;!-- canvas粒子时钟 --&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> '../_custom/clock.swig' %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>
<p>在最后添加即可。<br>
2. 在主题的配置文件中加入应用代码，配置文件位置是博客目录\themes\next_config.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 侧栏粒子时钟</span></span><br><span class="line"><span class="attr">diy_time:</span></span><br><span class="line">  <span class="attr">runtime:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">clock:</span> <span class="literal">true</span> <span class="comment"># 粒子时钟</span></span><br></pre></td></tr></table></figure>
<h2 id="显示效果"><a class="header-anchor" href="#显示效果">¶</a>显示效果</h2>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/WrCh5H.png" alt="figure1"></p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>Hexo</category>
        <category>Next主题</category>
      </categories>
      <tags>
        <tag>美化</tag>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>侧边栏</tag>
        <tag>时钟</tag>
      </tags>
  </entry>
  <entry>
    <title>2-3-4树学习（续）</title>
    <url>/2018/05/22/2-3-4-shu-xue-xi-xu-1/</url>
    <content><![CDATA[<p>向四结点的插入节点的情况： 第二种情况： 向3 key结点插入，父结点也是3 key结点的处理情况。 如图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/1-7.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/2-7.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/3-6.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/4-6.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/5-4.png" alt=""> 主要核心的思想是：向3 key结点插入数值，父结点也为3 key结点的话，则父结点也要进行中间值提到父结点的父结点的操作，知道结点不再是3 key值结点为止。   下面给出2-3-4数创建的过程（大家可自行分析理解我个人认为已经很好理解了） 如图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/6-3.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/7-3.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/8-1.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/9-1.png" alt=""> 最后会形成一个所有高度都一样的树： <img src="http://47.100.4.8/wp-content/uploads/2018/05/10-1.png" alt=""> 在很多数据的情况下： 2-3-4树的效率比平衡二叉树要好的很多。 2-3-4的高度的最坏情况（全是2-node），也就相当于演变成了平衡二叉树 ： 相当于平衡二叉树 lgN 2-3-4树高度的最好情况（全是4-node），log4 N = 1/2 lg N   删除操作：要保证结点在同一高度，有必要时要进行合并 如图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/11-2.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/12-1.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/13-1.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/14-1.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/15.png" alt=""> 在这里要感谢：<a href="https://www.jianshu.com/p/37c845a5add6">https://www.jianshu.com/p/37c845a5add6</a> <a href="http://www.cnblogs.com/nullzx/p/6111175.html">http://www.cnblogs.com/nullzx/p/6111175.html</a> 两位博主 提供的讲解，上面的图均取自二者的博文，再次感谢。   C++实现难点：要有三种结点分别有三个两个一个键值，要进行他们之间的转换，以及处理所以比较麻烦。 由于代码比较难于实现所里这里只进行了分析。 为了以后的红黑树做准备。   因此这给出伪代码： 结点数据结构：</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1键值的结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="type">Node1</span>&#123;</span><br><span class="line"></span><br><span class="line">    Elem data1;</span><br><span class="line"></span><br><span class="line">    Node1 *rNode; <span class="comment">//右子节点</span></span><br><span class="line"></span><br><span class="line">    Node1 *lNode; <span class="comment">//左子节点</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node1 root; <span class="comment">//根结点一定是为1个键值的结点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2键值的结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="type">Node2</span>&#123;</span><br><span class="line"></span><br><span class="line">    Elem data1;</span><br><span class="line"></span><br><span class="line">    Elem data2;</span><br><span class="line"></span><br><span class="line">    Node2 *rNode;</span><br><span class="line"></span><br><span class="line">    Node2 *zNode;<span class="comment">//中间子节点</span></span><br><span class="line"></span><br><span class="line">    Node2 *lNode;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3键值的结点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="type">Node3</span>&#123;</span><br><span class="line"></span><br><span class="line">    Elem data1;</span><br><span class="line"></span><br><span class="line">    Elem data2;</span><br><span class="line"></span><br><span class="line">    Elem data3;</span><br><span class="line"></span><br><span class="line">    Node3 *rNode;</span><br><span class="line"></span><br><span class="line">    Node3 *rzNode; <span class="comment">//右二子节点</span></span><br><span class="line"></span><br><span class="line">    Node3 *lzNode;  <span class="comment">//左二子节点</span></span><br><span class="line"></span><br><span class="line">    Node3 *lNode;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">    插入操作的伪代码：  </span><br><span class="line"></span><br><span class="line">void <span class="built_in">insert</span>(<span class="built_in">Key</span> <span class="built_in">key</span>,Elem Val)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    Node x=root;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (x.getTheCorrectChild(<span class="built_in">key</span>) != <span class="built_in">null</span>) <span class="comment">//查找到子节点为止 如果不为空则一直继续向下寻找</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        x = x.getTheCorrectChild(<span class="built_in">key</span>);  <span class="comment">//跳转到下一个节点根据给出的key</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x.is4Node()) <span class="comment">//如x所在键值是3个的结点还要在插入一个则将该节点分解，</span></span><br><span class="line"></span><br><span class="line">            x.split();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x.is2Node())  <span class="comment">//如果为两键值节点</span></span><br><span class="line"></span><br><span class="line">        x.make3Node(<span class="built_in">key</span>, val); <span class="comment">//则进行插入操作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (x.is3Node())   <span class="comment">//如果为三键值结点</span></span><br><span class="line"></span><br><span class="line">        x.make4Node(<span class="built_in">key</span>, val); <span class="comment">//则进行插入操作</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>2-3-4树</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda配置清华源并且安装PyTorch.md</title>
    <url>/2020/04/22/Anaconda%E9%85%8D%E7%BD%AE%E6%B8%85%E5%8D%8E%E6%BA%90%E5%B9%B6%E4%B8%94%E5%AE%89%E8%A3%85PyTorch.md/</url>
    <content><![CDATA[<h1>Anaconda配置清华源并且安装PyTorch</h1>
<h2 id="配置清华源"><a class="header-anchor" href="#配置清华源">¶</a>配置清华源</h2>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">配置基础包：</span><br><span class="line">conda config --add channels http:<span class="regexp">//mi</span>rror.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>pkgs<span class="regexp">/main/</span></span><br><span class="line">conda config --add channels http:<span class="regexp">//mi</span>rror.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>pkgs<span class="regexp">/free/</span></span><br><span class="line"></span><br><span class="line">配置拓展包比如PyTorch</span><br><span class="line">conda config --add channels https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>cloud<span class="regexp">/conda-forge/</span> </span><br><span class="line">conda config --add channels https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>cloud<span class="regexp">/msys2/</span> </span><br><span class="line">conda config --add channels https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>cloud<span class="regexp">/bioconda/</span> </span><br><span class="line">conda config --add channels https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>cloud<span class="regexp">/menpo/</span> </span><br><span class="line">conda config --add channels https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>cloud<span class="regexp">/pytorch/</span></span><br><span class="line"></span><br><span class="line">执行：</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure>
<h2 id="安装PyTorch"><a class="header-anchor" href="#安装PyTorch">¶</a>安装PyTorch</h2>
<p>去官网选择对应的版本安装，<strong>需要注意的是要去掉 -c pytorch 否则安装的源来自于官网而不是自己之前设置的源</strong></p>
<p>如下：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision <span class="attribute">cudatoolkit</span>=9.0 -c pytorch</span><br><span class="line">改为</span><br><span class="line">conda install pytorch torchvision <span class="attribute">cudatoolkit</span>=9.0</span><br></pre></td></tr></table></figure>
<p>建议：在我们搭建好环境之后，最好就先添加镜像站到Anaconda中，这样安装包的时候，速度会得到大大的提升</p>
]]></content>
  </entry>
  <entry>
    <title>Hexo中Next主题添加主页标签页以及美化标签页</title>
    <url>/2019/12/31/Hexo%E4%B8%ADNext%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E4%B8%BB%E9%A1%B5%E6%A0%87%E7%AD%BE%E9%A1%B5%E4%BB%A5%E5%8F%8A%E7%BE%8E%E5%8C%96%E6%A0%87%E7%AD%BE%E9%A1%B5/</url>
    <content><![CDATA[<h1>Hexo中Next主题添加主页标签页以及美化标签页</h1>
<h2 id="添加主页标签云"><a class="header-anchor" href="#添加主页标签云">¶</a>添加主页标签云</h2>
<h3 id="使用-tag-cloud-插件"><a class="header-anchor" href="#使用-tag-cloud-插件">¶</a>使用 tag-cloud 插件</h3>
<p>hexo-tag-cloud插件是作者写的一个Hexo博客的标签云插件，旨在直观的展示标签的种类，美观大方且非常优雅。</p>
<p>插件地址：<br>
<a href="https://github.com/MikeCoder/hexo-tag-cloud">插件的GitHub地址</a></p>
<p>安装插件<br>
进入到 hexo 的根目录，在 package.json 中添加依赖: “hexo-tag-cloud”: “2.0.*” 操作如下：<br>
使用命令行进行安装</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">npm install hexo-tag-<span class="symbol">cloud@</span>^<span class="number">2.0</span>.* --save</span><br></pre></td></tr></table></figure>
<h3 id="配置文件"><a class="header-anchor" href="#配置文件">¶</a>配置文件</h3>
<p>在主题文件夹找到文件 theme/next/layout/_macro/sidebar.swig, 然后添加如下代码:</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> site.tags.length &gt; 1 %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">src</span>=<span class="string">"/js/tagcloud.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">src</span>=<span class="string">"/js/tagcanvas.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"widget-wrap"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"widget-title"</span>&gt;</span>Tag Cloud<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myCanvasContainer"</span> <span class="attr">class</span>=<span class="string">"widget tagcloud"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"250"</span> <span class="attr">id</span>=<span class="string">"resCanvas"</span> <span class="attr">style</span>=<span class="string">"width=100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-variable">&#123;&#123; list_tags() &#125;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>
<p>代码添加到内容最后面即可如下：<br>
<img src="https://gitee.com/zyp521/upload_image/raw/master/F9Uxht.png" alt="figure1"></p>
<h3 id="主题配置"><a class="header-anchor" href="#主题配置">¶</a>主题配置</h3>
<p>在博客根目录，找到 _config.yml配置文件然后在最后添加如下的配置项，可以自定义标签云的字体和颜色，还有突出高亮:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-tag-cloud</span></span><br><span class="line"><span class="attr">tag_cloud:</span></span><br><span class="line">    <span class="attr">textFont:</span> <span class="string">Trebuchet</span> <span class="string">MS,</span> <span class="string">Helvetica</span></span><br><span class="line">    <span class="attr">textColor:</span> <span class="string">'#333'</span></span><br><span class="line">    <span class="attr">textHeight:</span> <span class="number">25</span></span><br><span class="line">    <span class="attr">outlineColor:</span> <span class="string">'#E2E1D1'</span></span><br><span class="line">    <span class="attr">maxSpeed:</span> <span class="number">0.1</span></span><br></pre></td></tr></table></figure>
<p>textColor: ‘#333’ 字体颜色<br>
textHeight: 25 字体高度，根据部署的效果调整<br>
maxSpeed: 0.1 文字滚动速度，根据自己喜好调整</p>
<h3 id="显示效果"><a class="header-anchor" href="#显示效果">¶</a>显示效果</h3>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/YEbyBB.png" alt="figure5"></p>
<h2 id="美化标签页面"><a class="header-anchor" href="#美化标签页面">¶</a>美化标签页面</h2>
<h3 id="添加球形标签页面"><a class="header-anchor" href="#添加球形标签页面">¶</a>添加球形标签页面</h3>
<ol>
<li>在/themes/next/layout/目录下，新建tag-bubble.swig文件，内容如下：</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line">    margin: 0 auto;</span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line">    width: 700px;</span><br><span class="line">    min-width: 100px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.tagbubble</span> &#123;</span></span><br><span class="line">    position: relative;</span><br><span class="line">    margin-top: 300px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.tagbubble</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">    display: block;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line">    font-weight: bold;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.b0</span>&#123;</span></span><br><span class="line">      width: 95px;</span><br><span class="line">      height: 90px;</span><br><span class="line">      line-height: 90px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.b1</span>&#123;</span></span><br><span class="line">      width: 70px;</span><br><span class="line">      height: 70px;</span><br><span class="line">      line-height: 55px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.b2</span>&#123;</span></span><br><span class="line">      width: 60px;</span><br><span class="line">      height: 60px;</span><br><span class="line">      line-height: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.b3</span>&#123;</span></span><br><span class="line">      width: 45px;</span><br><span class="line">      height: 45px;</span><br><span class="line">      line-height: 40px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.c0</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#d1e5fd</span> 0%, <span class="selector-id">#3d86f4</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#d1e5fd</span> 0%,<span class="selector-id">#3d86f4</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#d1e5fd</span> 0%,<span class="selector-id">#3d86f4</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#d1e5fd</span> 0%,<span class="selector-id">#3d86f4</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-id">#d1e5fd</span> 0%,<span class="selector-id">#3d86f4</span> 100%);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.c1</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#b9f8ff</span> 0%, <span class="selector-id">#1de7ff</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#b9f8ff</span> 0%,<span class="selector-id">#1de7ff</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#b9f8ff</span> 0%,<span class="selector-id">#1de7ff</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#b9f8ff</span> 0%,<span class="selector-id">#1de7ff</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-id">#b9f8ff</span> 0%,<span class="selector-id">#1de7ff</span> 100%);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.c2</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fff4e2</span> 0%, <span class="selector-id">#ffd79c</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fff4e2</span> 0%,<span class="selector-id">#ffd79c</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fff4e2</span> 0%,<span class="selector-id">#ffd79c</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fff4e2</span> 0%,<span class="selector-id">#ffd79c</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-id">#fff4e2</span> 0%,<span class="selector-id">#ffd79c</span> 100%);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.c3</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fef4fa</span> 0%, <span class="selector-id">#fbbae0</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fef4fa</span> 0%,<span class="selector-id">#fbbae0</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fef4fa</span> 0%,<span class="selector-id">#fbbae0</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fef4fa</span> 0%,<span class="selector-id">#fbbae0</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-id">#fef4fa</span> 0%,<span class="selector-id">#fbbae0</span> 100%);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.c4</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fedc90</span> 0%, <span class="selector-id">#ffb515</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fedc90</span> 0%,<span class="selector-id">#ffb515</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fedc90</span> 0%,<span class="selector-id">#ffb515</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#fedc90</span> 0%,<span class="selector-id">#ffb515</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-id">#fedc90</span> 0%,<span class="selector-id">#ffb515</span> 100%);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.c5</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#bcf7ca</span> 0%, <span class="selector-id">#1fda4b</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#bcf7ca</span> 0%,<span class="selector-id">#1fda4b</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#bcf7ca</span> 0%,<span class="selector-id">#1fda4b</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#bcf7ca</span> 0%,<span class="selector-id">#1fda4b</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-id">#bcf7ca</span> 0%,<span class="selector-id">#1fda4b</span> 100%);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.c6</span>&#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#f7cdf8</span> 0%, <span class="selector-id">#db43e7</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#f7cdf8</span> 0%,<span class="selector-id">#db43e7</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-o-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#f7cdf8</span> 0%,<span class="selector-id">#db43e7</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">-ms-linear-gradient</span>(<span class="selector-tag">top</span>, <span class="selector-id">#f7cdf8</span> 0%,<span class="selector-id">#db43e7</span> 100%);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">bottom</span>, <span class="selector-id">#f7cdf8</span> 0%,<span class="selector-id">#db43e7</span> 100%);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="comment">/* 移动端样式 */</span></span></span><br><span class="line"><span class="css">  <span class="keyword">@media</span> (<span class="attribute">max-width:</span> <span class="number">767px</span>)&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line">        width: 10px;</span><br><span class="line"><span class="css">        <span class="selector-tag">margin-left</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">        min-width: 0px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.tagbubble</span>&#123;</span></span><br><span class="line">        width: 300px;</span><br><span class="line">        min-width: 0px;</span><br><span class="line">        margin-top: 200px;</span><br><span class="line">        margin-left: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.tagbubble</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line">      font-size: 13px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.b0</span>&#123;</span></span><br><span class="line">        width: 65px;</span><br><span class="line">        height: 65px;</span><br><span class="line">        line-height: 60px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.b1</span>&#123;</span></span><br><span class="line">        width: 50px;</span><br><span class="line">        height: 50px;</span><br><span class="line">        line-height: 45px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.b2</span>&#123;</span></span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line">        line-height: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.b3</span>&#123;</span></span><br><span class="line">        width: 35px;</span><br><span class="line">        height: 35px;</span><br><span class="line">        line-height: 35px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tagbubble"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> alltags = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'tag-cloud-tags'</span>);</span></span><br><span class="line"><span class="actionscript">     <span class="keyword">var</span> tags = alltags[<span class="number">0</span>].getElementsByTagName(<span class="string">'a'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> bo = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> co = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></span><br><span class="line"><span class="actionscript">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span></span><br><span class="line"><span class="actionscript">        bo.push(<span class="string">"b"</span> + i);</span></span><br><span class="line">     &#125;</span><br><span class="line"><span class="actionscript">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)&#123;</span></span><br><span class="line"><span class="actionscript">        co.push(<span class="string">"c"</span> + i);</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> divDom = <span class="built_in">document</span>.querySelector(<span class="string">'.tagbubble'</span>)</span></span><br><span class="line"><span class="actionscript">     <span class="comment">//var divDom = document.getElementsByClassName('tagbubble')[0];</span></span></span><br><span class="line"><span class="actionscript">     <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;tags.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> atag = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> boStyle = bo[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">4</span>)];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> coStyle = co[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">7</span>)];</span></span><br><span class="line">        if(tags[i].innerText.length &gt; 10)&#123;</span><br><span class="line"><span class="actionscript">            boStyle = <span class="string">"b0"</span>;</span></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(tags[i].innerText.length &gt; <span class="number">5</span> &amp;&amp; tags[i].innerText.length &lt; <span class="number">10</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            boStyle = <span class="string">"b1"</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        atag.setAttribute(<span class="string">"class"</span>, boStyle+<span class="string">" "</span>+coStyle);</span></span><br><span class="line"><span class="actionscript">        atag.setAttribute(<span class="string">"href"</span>, tags[i].href);</span></span><br><span class="line">        atag.innerText = tags[i].innerText;</span><br><span class="line">        divDom.appendChild(atag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">browserRedirect</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> sUserAgent = navigator.userAgent.toLowerCase();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsIpad = sUserAgent.match(<span class="regexp">/ipad/i</span>) == <span class="string">"ipad"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsIphoneOs = sUserAgent.match(<span class="regexp">/iphone os/i</span>) == <span class="string">"iphone os"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsMidp = sUserAgent.match(<span class="regexp">/midp/i</span>) == <span class="string">"midp"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsUc7 = sUserAgent.match(<span class="regexp">/rv:1.2.3.4/i</span>) == <span class="string">"rv:1.2.3.4"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsUc = sUserAgent.match(<span class="regexp">/ucweb/i</span>) == <span class="string">"ucweb"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsAndroid = sUserAgent.match(<span class="regexp">/android/i</span>) == <span class="string">"android"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsCE = sUserAgent.match(<span class="regexp">/windows ce/i</span>) == <span class="string">"windows ce"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> bIsWM = sUserAgent.match(<span class="regexp">/windows mobile/i</span>) == <span class="string">"windows mobile"</span>;</span></span><br><span class="line">        if (bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM) &#123;</span><br><span class="line"><span class="actionscript">            <span class="comment">//移动端页面</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="number">80</span>;</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//pc端页面</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> <span class="number">150</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> tagRadius = browserRedirect();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">/*3D标签云*/</span></span></span><br><span class="line">    tagcloud(&#123;</span><br><span class="line"><span class="actionscript">        selector: <span class="string">".tagbubble"</span>,   <span class="comment">//元素选择器</span></span></span><br><span class="line"><span class="actionscript">        fontsize: <span class="number">14</span>,             <span class="comment">//基本字体大小, 单位px</span></span></span><br><span class="line"><span class="actionscript">        radius: tagRadius,        <span class="comment">//滚动半径, 单位px 页面宽度和高度的五分之一</span></span></span><br><span class="line"><span class="actionscript">        mspeed: <span class="string">"slow"</span>,           <span class="comment">//滚动最大速度, 取值: slow, normal(默认), fast</span></span></span><br><span class="line"><span class="actionscript">        ispeed: <span class="string">"slow"</span>,           <span class="comment">//滚动初速度, 取值: slow, normal(默认), fast</span></span></span><br><span class="line"><span class="actionscript">        direction: <span class="number">135</span>,           <span class="comment">//初始滚动方向, 取值角度(顺时针360): 0对应top, 90对应left, 135对应right-bottom(默认)...</span></span></span><br><span class="line"><span class="actionscript">        keep: <span class="literal">false</span>               <span class="comment">//鼠标移出组件后是否继续随鼠标滚动, 取值: false, true(默认) 对应 减速至初速度滚动, 随鼠标滚动</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在/themes/next/source/js/src/目录下，新建其依赖的bubble.js，内容如下:</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 3d标签云</span></span><br><span class="line"><span class="comment">* 功能：鼠标移入标签，当前标签静止放大</span></span><br><span class="line"><span class="comment">* 说明：</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">window.tagcloud = (<span class="function"><span class="keyword">function</span><span class="params">(win, doc)</span> </span>&#123; <span class="comment">// ns</span></span><br><span class="line">    <span class="comment">// 判断对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isObject</span> <span class="params">(obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Object.prototype.toString.call(obj) === <span class="string">'[object Object]'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">TagCloud</span> <span class="params">(options)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">self</span> = this;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.config = TagCloud._getConfig(options);</span><br><span class="line">        <span class="keyword">self</span>.box = <span class="keyword">self</span>.config.element;  <span class="comment">//组件元素</span></span><br><span class="line">        <span class="keyword">self</span>.fontsize = <span class="keyword">self</span>.config.fontsize; <span class="comment">//平均字体大小</span></span><br><span class="line">        <span class="keyword">self</span>.radius = <span class="keyword">self</span>.config.radius; <span class="comment">//滚动半径</span></span><br><span class="line">        <span class="keyword">self</span>.depth = <span class="number">2</span> * <span class="keyword">self</span>.radius;   <span class="comment">//滚动深度</span></span><br><span class="line">        <span class="keyword">self</span>.size = <span class="number">2</span> * <span class="keyword">self</span>.radius;    <span class="comment">//随鼠标滚动变速作用区域</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.mspeed = TagCloud._getMsSpeed(<span class="keyword">self</span>.config.mspeed);</span><br><span class="line">        <span class="keyword">self</span>.ispeed = TagCloud._getIsSpeed(<span class="keyword">self</span>.config.ispeed);</span><br><span class="line">        <span class="keyword">self</span>.items = <span class="keyword">self</span>._getItems();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.direction = <span class="keyword">self</span>.config.direction;   <span class="comment">//初始滚动方向</span></span><br><span class="line">        <span class="keyword">self</span>.keep = <span class="keyword">self</span>.config.keep; <span class="comment">//鼠标移出后是否保持之前滚动</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">self</span>.active = <span class="keyword">false</span>;   <span class="comment">//是否为激活状态</span></span><br><span class="line">        <span class="keyword">self</span>.lasta = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">self</span>.lastb = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">self</span>.mouseX0 = <span class="keyword">self</span>.ispeed * Math.sin(<span class="keyword">self</span>.direction * Math.PI / <span class="number">180</span>);    <span class="comment">//鼠标与滚动圆心x轴初始距离</span></span><br><span class="line">        <span class="keyword">self</span>.mouseY0 = -<span class="keyword">self</span>.ispeed * Math.cos(<span class="keyword">self</span>.direction * Math.PI / <span class="number">180</span>);   <span class="comment">//鼠标与滚动圆心y轴初始距离</span></span><br><span class="line">        <span class="keyword">self</span>.mouseX = <span class="keyword">self</span>.mouseX0;   <span class="comment">//鼠标与滚动圆心x轴距离</span></span><br><span class="line">        <span class="keyword">self</span>.mouseY = <span class="keyword">self</span>.mouseY0;   <span class="comment">//鼠标与滚动圆心y轴距离</span></span><br><span class="line">        <span class="keyword">self</span>.index = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//鼠标移入</span></span><br><span class="line">        TagCloud._on(<span class="keyword">self</span>.box, <span class="string">'mouseover'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">self</span>.active = <span class="keyword">true</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//鼠标移出</span></span><br><span class="line">        TagCloud._on(<span class="keyword">self</span>.box, <span class="string">'mouseout'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">self</span>.active = <span class="keyword">false</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//鼠标在内移动</span></span><br><span class="line">        TagCloud._on(<span class="keyword">self</span>.keep ? win : <span class="keyword">self</span>.box, <span class="string">'mousemove'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(ev)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> oEvent = win.event || ev;</span><br><span class="line">            <span class="keyword">var</span> boxPosition = <span class="keyword">self</span>.box.getBoundingClientRect();</span><br><span class="line">            <span class="keyword">self</span>.mouseX = (oEvent.clientX - (boxPosition.left + <span class="keyword">self</span>.box.offsetWidth / <span class="number">2</span>)) / <span class="number">5</span>;</span><br><span class="line">            <span class="keyword">self</span>.mouseY = (oEvent.clientY - (boxPosition.top + <span class="keyword">self</span>.box.offsetHeight / <span class="number">2</span>)) / <span class="number">5</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, len = <span class="keyword">self</span>.items.length; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">self</span>.items[j].element.index=j;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//鼠标移出子元素,当前元素静止放大</span></span><br><span class="line">            <span class="keyword">self</span>.items[j].element.onmouseover = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">self</span>.index = this.index;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//鼠标移出子元素,当前元素继续滚动</span></span><br><span class="line">            <span class="keyword">self</span>.items[j].element.onmouseout = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">self</span>.index = <span class="number">-1</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定时更新</span></span><br><span class="line">        TagCloud.boxs.push(<span class="keyword">self</span>.box);</span><br><span class="line">        <span class="keyword">self</span>.update(<span class="keyword">self</span>);    <span class="comment">//初始更新</span></span><br><span class="line">        <span class="keyword">self</span>.box.style.visibility = <span class="string">"visible"</span>;</span><br><span class="line">        <span class="keyword">self</span>.box.style.position = <span class="string">"relative"</span>;</span><br><span class="line">        <span class="comment">// self.box.style.minHeight = 1.2 * self.size + "px";</span></span><br><span class="line">        <span class="comment">// self.box.style.minWidth = 2.5 * self.size + "px";</span></span><br><span class="line">        <span class="keyword">self</span>.box.style.minHeight = <span class="number">0</span> * <span class="keyword">self</span>.size + <span class="string">"px"</span>;</span><br><span class="line">        <span class="keyword">self</span>.box.style.minWidth = <span class="number">0</span> * <span class="keyword">self</span>.size + <span class="string">"px"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, len = <span class="keyword">self</span>.items.length; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="keyword">self</span>.items[j].element.style.position = <span class="string">"absolute"</span>;</span><br><span class="line">            <span class="keyword">self</span>.items[j].element.style.zIndex = j + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.up = setInterval(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">self</span>.update(<span class="keyword">self</span>);</span><br><span class="line">        &#125;, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例</span></span><br><span class="line">    TagCloud.boxs = []; <span class="comment">//实例元素数组</span></span><br><span class="line">    <span class="comment">// 静态方法们</span></span><br><span class="line">    TagCloud._set = <span class="function"><span class="keyword">function</span> <span class="params">(element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (TagCloud.boxs.indexOf(element) == <span class="number">-1</span>) &#123;<span class="comment">//ie8不支持数组的indexOf方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加数组IndexOf方法</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">Array</span>.prototype.indexOf)&#123;</span><br><span class="line">        <span class="keyword">Array</span>.prototype.indexOf = <span class="function"><span class="keyword">function</span><span class="params">(elt <span class="comment">/*, from*/</span>)</span></span>&#123;</span><br><span class="line">            <span class="keyword">var</span> len = this.length &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">var</span> from = Number(arguments[<span class="number">1</span>]) || <span class="number">0</span>;</span><br><span class="line">            from = (from &lt; <span class="number">0</span>)</span><br><span class="line">                ? Math.ceil(from)</span><br><span class="line">                : Math.floor(from);</span><br><span class="line">            <span class="keyword">if</span> (from &lt; <span class="number">0</span>)</span><br><span class="line">                from += len;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; from &lt; len; from++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (from in this &amp;&amp; this[from] === elt)</span><br><span class="line">                    <span class="keyword">return</span> from;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TagCloud._getConfig = <span class="function"><span class="keyword">function</span> <span class="params">(config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> defaultConfig = &#123;   <span class="comment">//默认值</span></span><br><span class="line">            fontsize: <span class="number">16</span>,       <span class="comment">//基本字体大小, 单位px</span></span><br><span class="line">            radius: <span class="number">60</span>,         <span class="comment">//滚动半径, 单位px</span></span><br><span class="line">            mspeed: <span class="string">"normal"</span>,   <span class="comment">//滚动最大速度, 取值: slow, normal(默认), fast</span></span><br><span class="line">            ispeed: <span class="string">"normal"</span>,   <span class="comment">//滚动初速度, 取值: slow, normal(默认), fast</span></span><br><span class="line">            direction: <span class="number">135</span>,     <span class="comment">//初始滚动方向, 取值角度(顺时针360): 0对应top, 90对应left, 135对应right-bottom(默认)...</span></span><br><span class="line">            keep: <span class="keyword">true</span>          <span class="comment">//鼠标移出组件后是否继续随鼠标滚动, 取值: false, true(默认) 对应 减速至初速度滚动, 随鼠标滚动</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(isObject(config)) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i in config) &#123;</span><br><span class="line">                <span class="keyword">if</span>(config.hasOwnProperty(i)) &#123;<span class="comment">//hasOwnProperty()用来判断一个属性是定义在对象本身而不是继承自原型链</span></span><br><span class="line">                    defaultConfig[i] = config[i]; <span class="comment">//用户配置</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> defaultConfig;<span class="comment">// 配置 Merge</span></span><br><span class="line">    &#125;;</span><br><span class="line">    TagCloud._getMsSpeed = <span class="function"><span class="keyword">function</span> <span class="params">(mspeed)</span> </span>&#123;    <span class="comment">//滚动最大速度</span></span><br><span class="line">        <span class="keyword">var</span> speedMap = &#123;</span><br><span class="line">            slow: <span class="number">1.5</span>, </span><br><span class="line">            normal: <span class="number">3</span>,</span><br><span class="line">            fast: <span class="number">5</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> speedMap[mspeed] || <span class="number">3</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    TagCloud._getIsSpeed = <span class="function"><span class="keyword">function</span> <span class="params">(ispeed)</span> </span>&#123;    <span class="comment">//滚动初速度</span></span><br><span class="line">        <span class="keyword">var</span> speedMap = &#123;</span><br><span class="line">            slow: <span class="number">10</span>,</span><br><span class="line">            normal: <span class="number">25</span>,</span><br><span class="line">            fast: <span class="number">50</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> speedMap[ispeed] || <span class="number">25</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    TagCloud._getSc = <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> l = Math.PI / <span class="number">180</span>;</span><br><span class="line">        <span class="comment">//数组顺序0,1,2,3表示asin,acos,bsin,bcos</span></span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            Math.sin(a * l),</span><br><span class="line">            Math.cos(a * l),</span><br><span class="line">            Math.sin(b * l),</span><br><span class="line">            Math.cos(b * l)</span><br><span class="line">        ];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    TagCloud._on = <span class="function"><span class="keyword">function</span> <span class="params">(ele, eve, handler, cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ele.addEventListener) &#123;</span><br><span class="line">            ele.addEventListener(eve, handler, cap);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ele.attachEvent) &#123;</span><br><span class="line">            ele.attachEvent(<span class="string">'on'</span> + eve, handler);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ele[<span class="string">'on'</span> + eve] = handler;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原型方法</span></span><br><span class="line">    TagCloud.prototype = &#123;</span><br><span class="line">        constructor: TagCloud, <span class="comment">// 反向引用构造器</span></span><br><span class="line"></span><br><span class="line">        update: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">self</span> = this, a, b;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">self</span>.active &amp;&amp; !<span class="keyword">self</span>.keep) &#123;</span><br><span class="line">                <span class="keyword">self</span>.mouseX = Math.abs(<span class="keyword">self</span>.mouseX - <span class="keyword">self</span>.mouseX0) &lt; <span class="number">1</span> ? <span class="keyword">self</span>.mouseX0 : (<span class="keyword">self</span>.mouseX + <span class="keyword">self</span>.mouseX0) / <span class="number">2</span>;   <span class="comment">//重置鼠标与滚动圆心x轴距离</span></span><br><span class="line">                <span class="keyword">self</span>.mouseY = Math.abs(<span class="keyword">self</span>.mouseY - <span class="keyword">self</span>.mouseY0) &lt; <span class="number">1</span> ? <span class="keyword">self</span>.mouseY0 : (<span class="keyword">self</span>.mouseY + <span class="keyword">self</span>.mouseY0) / <span class="number">2</span>;   <span class="comment">//重置鼠标与滚动圆心y轴距离</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            a = -(Math.min(Math.max(-<span class="keyword">self</span>.mouseY, -<span class="keyword">self</span>.size), <span class="keyword">self</span>.size) / <span class="keyword">self</span>.radius ) * <span class="keyword">self</span>.mspeed;</span><br><span class="line">            b = (Math.min(Math.max(-<span class="keyword">self</span>.mouseX, -<span class="keyword">self</span>.size), <span class="keyword">self</span>.size) / <span class="keyword">self</span>.radius ) * <span class="keyword">self</span>.mspeed;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (Math.abs(a) &lt;= <span class="number">0.01</span> &amp;&amp; Math.abs(b) &lt;= <span class="number">0.01</span>) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">self</span>.lasta = a;</span><br><span class="line">            <span class="keyword">self</span>.lastb = b;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> sc = TagCloud._getSc(a, b);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, len = <span class="keyword">self</span>.items.length; j &lt; len; j++) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> rx1 = <span class="keyword">self</span>.items[j].x,</span><br><span class="line">                    ry1 = <span class="keyword">self</span>.items[j].y*sc[<span class="number">1</span>] + <span class="keyword">self</span>.items[j].z*(-sc[<span class="number">0</span>]),</span><br><span class="line">                    rz1 = <span class="keyword">self</span>.items[j].y*sc[<span class="number">0</span>] + <span class="keyword">self</span>.items[j].z*sc[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> rx2 = rx1 * sc[<span class="number">3</span>] + rz1 * sc[<span class="number">2</span>],</span><br><span class="line">                    ry2 = ry1,</span><br><span class="line">                    rz2 = rz1 * sc[<span class="number">3</span>] - rx1 * sc[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">self</span>.index==j)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">self</span>.items[j].scale = <span class="number">1</span>; <span class="comment">//取值范围0.6 ~ 3</span></span><br><span class="line">                    <span class="keyword">self</span>.items[j].fontsize = <span class="number">16</span>;</span><br><span class="line">                    <span class="keyword">self</span>.items[j].alpha = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">self</span>.items[j].element.style.zIndex = <span class="number">99</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> per = <span class="keyword">self</span>.depth / (<span class="keyword">self</span>.depth + rz2);</span><br><span class="line">                    <span class="keyword">self</span>.items[j].x = rx2;</span><br><span class="line">                    <span class="keyword">self</span>.items[j].y = ry2;</span><br><span class="line">                    <span class="keyword">self</span>.items[j].z = rz2;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">self</span>.items[j].scale = per; <span class="comment">//取值范围0.6 ~ 3</span></span><br><span class="line">                    <span class="keyword">self</span>.items[j].fontsize = Math.ceil(per * <span class="number">2</span>) + <span class="keyword">self</span>.fontsize - <span class="number">6</span>;</span><br><span class="line">                    <span class="keyword">self</span>.items[j].alpha = <span class="number">1.5</span> * per - <span class="number">0.5</span>;</span><br><span class="line">                    <span class="keyword">self</span>.items[j].element.style.zIndex = Math.ceil(per*<span class="number">10</span><span class="number">-5</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//self.items[j].element.style.fontSize = self.items[j].fontsize + "px";//字体变大小</span></span><br><span class="line">                <span class="keyword">self</span>.items[j].element.style.left = <span class="keyword">self</span>.items[j].x + (<span class="keyword">self</span>.box.offsetWidth - <span class="keyword">self</span>.items[j].offsetWidth) / <span class="number">2</span> + <span class="string">"px"</span>;</span><br><span class="line">                <span class="keyword">self</span>.items[j].element.style.top = <span class="keyword">self</span>.items[j].y + (<span class="keyword">self</span>.box.offsetHeight - <span class="keyword">self</span>.items[j].offsetHeight) / <span class="number">2</span> + <span class="string">"px"</span>;</span><br><span class="line">                <span class="keyword">self</span>.items[j].element.style.filter = <span class="string">"alpha(opacity="</span> + <span class="number">100</span> * <span class="keyword">self</span>.items[j].alpha + <span class="string">")"</span>;</span><br><span class="line">                <span class="keyword">self</span>.items[j].element.style.opacity = <span class="keyword">self</span>.items[j].alpha;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        _getItems: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">self</span> = this,</span><br><span class="line">                items = [],</span><br><span class="line">                element = <span class="keyword">self</span>.box.children, <span class="comment">// children 全部是Element</span></span><br><span class="line">                length = element.length,</span><br><span class="line">                item;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                item = &#123;&#125;;</span><br><span class="line">                item.angle = &#123;&#125;;</span><br><span class="line">                item.angle.phi = Math.acos(<span class="number">-1</span> + (<span class="number">2</span> * i + <span class="number">1</span>) / length);</span><br><span class="line">                item.angle.theta = Math.sqrt((length + <span class="number">1</span>) * Math.PI) * item.angle.phi;</span><br><span class="line">                item.element = element[i];</span><br><span class="line">                item.offsetWidth = item.element.offsetWidth;</span><br><span class="line">                item.offsetHeight = item.element.offsetHeight;</span><br><span class="line">                item.x = <span class="keyword">self</span>.radius * <span class="number">1.5</span> * Math.cos(item.angle.theta) * Math.sin(item.angle.phi);</span><br><span class="line">                item.y = <span class="keyword">self</span>.radius * <span class="number">1.5</span> * Math.sin(item.angle.theta) * Math.sin(item.angle.phi);</span><br><span class="line">                item.z = <span class="keyword">self</span>.radius * <span class="number">1.5</span> * Math.cos(item.angle.phi);</span><br><span class="line">                item.element.style.left = item.x + (<span class="keyword">self</span>.box.offsetWidth - item.offsetWidth) / <span class="number">2</span> + <span class="string">"px"</span>;</span><br><span class="line">                item.element.style.top = item.y + (<span class="keyword">self</span>.box.offsetHeight - item.offsetHeight) / <span class="number">2</span> + <span class="string">"px"</span>;</span><br><span class="line">                items.push(item);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> items;   <span class="comment">//单元素数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!doc.querySelectorAll) &#123;<span class="comment">//ie7不支持querySelectorAll，所以要重新定义</span></span><br><span class="line">        doc.querySelectorAll = <span class="function"><span class="keyword">function</span> <span class="params">(selectors)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> style = doc.createElement(<span class="string">'style'</span>), elements = [], element;</span><br><span class="line">            doc.documentElement.firstChild.appendChild(style);</span><br><span class="line">            doc._qsa = [];</span><br><span class="line"></span><br><span class="line">            style.styleSheet.cssText = selectors + <span class="string">'&#123;x-qsa:expression(document._qsa &amp;&amp; document._qsa.push(this))&#125;'</span>;</span><br><span class="line">            window.scrollBy(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            style.parentNode.removeChild(style);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (doc._qsa.length) &#123;</span><br><span class="line">                element = doc._qsa.shift();</span><br><span class="line">                element.style.removeAttribute(<span class="string">'x-qsa'</span>);</span><br><span class="line">                elements.push(element);</span><br><span class="line">            &#125;</span><br><span class="line">            doc._qsa = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> elements;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">(options)</span> </span>&#123; <span class="comment">// factory</span></span><br><span class="line">        options = options || &#123;&#125;; <span class="comment">// 短路语法</span></span><br><span class="line">        <span class="keyword">var</span> selector = options.selector || <span class="string">'.tagcloud'</span>, <span class="comment">//默认选择class为tagcloud的元素</span></span><br><span class="line">            elements = doc.querySelectorAll(selector),</span><br><span class="line">            instance = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>, len = elements.length; index &lt; len; index++) &#123;</span><br><span class="line">            options.element = elements[index];</span><br><span class="line">            <span class="keyword">if</span> (!!TagCloud._set(options.element)) &#123;</span><br><span class="line">                instance.push(<span class="keyword">new</span> TagCloud(options));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;)(window, document);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>在/themes/next/layout/_layout.swig中，引入上边的bubble.js，引入位置在head标签内，比如这样:<br>
<img src="https://gitee.com/zyp521/upload_image/raw/master/42Ku3z.png" alt="figure2"></li>
<li>在/themes/next/layout/page.swig中，引入tag-bubble.swig,具体如下：<br>
<img src="https://gitee.com/zyp521/upload_image/raw/master/wuAtL9.png" alt="figure3"></li>
</ol>
<h3 id="显示效果-v2"><a class="header-anchor" href="#显示效果-v2">¶</a>显示效果</h3>
<p>具体显示效果如下：<br>
<img src="https://gitee.com/zyp521/upload_image/raw/master/NBI7PD.png" alt="figure4"></p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>Hexo</category>
        <category>Next主题</category>
      </categories>
      <tags>
        <tag>美化</tag>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>tags</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo中添加动态2d二次元人物模型</title>
    <url>/2019/12/31/Hexo%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%8A%A8%E6%80%812d%E4%BA%8C%E6%AC%A1%E5%85%83%E4%BA%BA%E7%89%A9%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h1>Hexo中添加动态2d二次元人物模型</h1>
<p>Hexo添加helper-live2d模型插件</p>
<p><a href="https://github.com/EYHN/hexo-helper-live2d/blob/master/README.zh-CN.md">插件的github地址</a></p>
<p>插件作者提供了较为详细的安装步骤，我结合自己操作和图示，提供大家。</p>
<h2 id="插件效果"><a class="header-anchor" href="#插件效果">¶</a>插件效果</h2>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/szEDae.png" alt="miku"></p>
<h2 id="安装插件"><a class="header-anchor" href="#安装插件">¶</a>安装插件</h2>
<p>hexo博客根目录使用git bash 输入以下代码，安装插件：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> <span class="comment">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure>
<h2 id="下载模型"><a class="header-anchor" href="#下载模型">¶</a>下载模型</h2>
<p>作者提供以下模型的模型包，模型包预览地址见下面的链接，选择你想用的模型，记住名字，选择对应的后缀模型包</p>
<p><a href="https://github.com/xiazeyu/live2d-widget-models">作者各种模型包展示</a></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">live2d-widget-<span class="keyword">model</span>-chitose</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-epsilon2_1</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-gf</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-haru/<span class="number">01</span> (use npm install --save live2d-widget-<span class="keyword">model</span>-haru)</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-haru/<span class="number">02</span> (use npm install --save live2d-widget-<span class="keyword">model</span>-haru)</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-haruto</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-hibiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-hijiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-izumi</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-koharu</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-miku</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-ni-j</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nico</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nietzsche</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nipsilon</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-nito</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-shizuku</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-tororo</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-tsumiki</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-unitychan</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-wanko</span><br><span class="line">live2d-widget-<span class="keyword">model</span>-z16</span><br></pre></td></tr></table></figure>
<p>选择好对应的模型，使用 npm install 模型的包名来安装，比如我选择的的是live2d-widget-model-miku 模型包(大爱公主殿下)</p>
<h2 id="配置"><a class="header-anchor" href="#配置">¶</a>配置</h2>
<p>打开个人Hexo博客文件根目录下的 _config.yml 文件，在最后添加一下代码</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-koharu</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="重启项目"><a class="header-anchor" href="#重启项目">¶</a>重启项目</h2>
<p>输入</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">hexo clean <span class="variable">&amp;&amp;</span> hexo g <span class="variable">&amp;&amp;</span> hexo s</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>文章页</category>
        <category>Hexo</category>
        <category>Next主题</category>
      </categories>
      <tags>
        <tag>美化</tag>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>2D</tag>
        <tag>二次元</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo中归档页美化</title>
    <url>/2019/12/31/Hexo%E4%B8%AD%E5%BD%92%E6%A1%A3%E9%A1%B5%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h1>Hexo中归档页美化</h1>
<h2 id="配置"><a class="header-anchor" href="#配置">¶</a>配置</h2>
<h3 id="配置代码"><a class="header-anchor" href="#配置代码">¶</a>配置代码</h3>
<ol>
<li>修改 /themes/next/layout/_macro/post-collapse.swig 后的代码如下：</li>
</ol>
<figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">macro</span></span> render(post) %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"my-post post-type-</span></span></span><span class="template-variable">&#123;&#123; post.type | default('normal') &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/Article"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"my-post-header"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"my-post-meta"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">time</span> <span class="attr">class</span>=<span class="string">"my-post-time"</span> <span class="attr">itemprop</span>=<span class="string">"dateCreated"</span></span></span></span><br><span class="line"><span class="xml">              datetime="</span><span class="template-variable">&#123;&#123; moment(post.<span class="name">date</span>).format() &#125;&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">              content="</span><span class="template-variable">&#123;&#123; <span class="name">date</span><span class="params">(post.date, config.date_format)</span> &#125;&#125;</span><span class="xml">" &gt;</span></span><br><span class="line"><span class="xml">          </span><span class="template-variable">&#123;&#123; <span class="name">date</span><span class="params">(post.date, 'MM-DD')</span> &#125;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">time</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">      <span class="tag">&lt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> theme.seo %&#125;</span><span class="xml"><span class="tag"><span class="attr">h3</span></span></span><span class="template-tag">&#123;% <span class="name">else</span> %&#125;</span><span class="xml"><span class="tag"><span class="attr">h2</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="xml"><span class="tag"> <span class="attr">class</span>=<span class="string">"my-post-title"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> post.link %&#125;</span><span class="comment">&#123;# Link posts #&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"my-post-title-link post-title-link-external"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(post.link) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">itemprop</span>=<span class="string">"url"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-variable">&#123;&#123; post.title or post.link &#125;&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-external-link"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name">else</span> %&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"my-post-title-link"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(post.path) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">itemprop</span>=<span class="string">"url"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> post.type === 'picture' %&#125;</span></span><br><span class="line"><span class="xml">                </span><span class="template-variable">&#123;&#123; post.content &#125;&#125;</span></span><br><span class="line"><span class="xml">              </span><span class="template-tag">&#123;% <span class="name">else</span> %&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span></span><span class="template-variable">&#123;&#123; post.title | default(__('post.untitled')) &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">              </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/</span></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> theme.seo %&#125;</span><span class="xml"><span class="tag"><span class="attr">h3</span></span></span><span class="template-tag">&#123;% <span class="name">else</span> %&#125;</span><span class="xml"><span class="tag"><span class="attr">h2</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="xml"><span class="tag">&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">endmacro</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在 /themes/next/source/css/_custom/custom.styl 新增如下样式:</li>
</ol>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 归档页样式 began */</span></span><br><span class="line"><span class="selector-class">.page-archive</span> <span class="selector-class">.archive-page-counter</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-post-time</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">11px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mypost</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -o-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.my-post-title-link</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">"📚"</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font</span>: normal normal normal <span class="number">14px</span>/<span class="number">1</span> FontAwesome;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">18px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-post</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: scale(<span class="number">1.1</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">2px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">12</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> rgba(<span class="number">104</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">0.15s</span>;</span><br><span class="line">  +mobile()&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">260px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">18px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//display:flex;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-class">.my-post-title-link</span>&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">400</span>;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-post-title</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">4.5rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#4c4948</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">font-size</span>: .<span class="number">8rem</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  +mobile() &#123;</span><br><span class="line">    <span class="comment">//margin-left: 4rem;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.my-post-header</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: top;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1rem</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -moz-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -o-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  -ms-<span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//.my-post-title-link&#123;</span></span><br><span class="line"><span class="comment">//  font-size: 16px;</span></span><br><span class="line"><span class="comment">//  font-weight: 500;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="selector-class">.my-post-meta</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#99a9bf</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#114142</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.post-block</span><span class="selector-class">.tag</span> <span class="selector-class">.collection-title</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">border-width</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#3f3f3f</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#b4e8fa</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">1.5px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#3f3f3f</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  +mobile()&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.category-list-link</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: scale(<span class="number">1.1</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">15px</span> <span class="number">2px</span> rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">12</span>), <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> rgba(<span class="number">104</span>, <span class="number">104</span>, <span class="number">105</span>, <span class="number">0.1</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span> <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">transition-duration</span>: <span class="number">0.15s</span>;</span><br><span class="line">  <span class="comment">//display:flex;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 归档页样式 end */</span></span><br></pre></td></tr></table></figure>
<h2 id="效果图"><a class="header-anchor" href="#效果图">¶</a>效果图</h2>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/svg2B6.png" alt="figure"></p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>Hexo</category>
        <category>Next主题</category>
      </categories>
      <tags>
        <tag>美化</tag>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>archive</tag>
      </tags>
  </entry>
  <entry>
    <title>Learning In RNN Part I</title>
    <url>/2020/01/30/Learning%20In%20RNN%20Part%20I/</url>
    <content><![CDATA[<h1>Learning In RNN</h1>
<p><strong>Recurrent Neural Network(RNN)</strong><br>
The chinese name is 循环神经网络.</p>
<h2 id="The-introduction-of-RNN-by-Dr-Mofan-Zhou"><a class="header-anchor" href="#The-introduction-of-RNN-by-Dr-Mofan-Zhou">¶</a>The introduction of RNN by Dr.Mofan Zhou</h2>
<p>If you want some  dramatic explanations, please check here.<a href="https://www.youtube.com/watch?v=EEtf4kNsk7Q">What is Recurrent Neural NetWorks?</a><br>
ps:If you don’t have SSR, you can find the video in BiliBili.</p>
<p>For the input x(t), we can compute the Y(t) by RNN.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/H7xlDk.png" alt="figure1"></p>
<p>Then we can call the value S(t) that RNN compute.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/7eJKIX.png" alt="figure2"></p>
<p>Next RNN will compute the value in X(t+1) and get S(t+1). After that, Y(t+1) is equal S(t) add S(t+1).</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/4pNecb.png" alt="figure3"></p>
<p>In generally, RNN is look like this:</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/deH7Ml.png" alt="figure4"></p>
<p>RNN has many structures and can do many things, like classification、regression and so on.</p>
<h2 id="The-introduction-by-Dr-Hongyi-Li"><a class="header-anchor" href="#The-introduction-by-Dr-Hongyi-Li">¶</a>The introduction by Dr.Hongyi Li</h2>
<p>The original video: <a href="https://www.youtube.com/watch?v=xCGidAeyS4M">check here</a></p>
<h3 id="Example-Application"><a class="header-anchor" href="#Example-Application">¶</a>Example Application</h3>
<h4 id="Slot-Filling-填槽"><a class="header-anchor" href="#Slot-Filling-填槽">¶</a>Slot Filling(填槽)</h4>
<p>In many aspects in the life, we can use the slot filling, just like: intelligence customer service、ticket book system and so on.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/MsmWaq.png" alt="figure5"></p>
<p>In this picture, we need the ticket book system can automatically slot the text in suitable loaction.</p>
<h5 id="Solving-slot-filling-by-Feedforward-network"><a class="header-anchor" href="#Solving-slot-filling-by-Feedforward-network">¶</a>Solving slot filling by Feedforward network?</h5>
<p><strong>Net structure:</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/UcqxoK.png" alt="figure10"></p>
<p>input: a ward (Each word is represented as a vector)</p>
<p>output: Probability distribution(概率分布) that the input word belonging to the slots.</p>
<p><ins>If we can make our neural network have the ==memory==, so the network will classify if it is a destination or departure.</ins></p>
<p>==The way of make a word be represented as a vector==</p>
<p><strong>1-of-N encoding</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/1LQDzw.png" alt="figure7"></p>
<p>If we have n words, we can create a vector of length n. And each word will has a value equals one in different index.</p>
<p><strong>Beyond 1-of-N encoding</strong></p>
<p>If we have a word that not in our dictionary, we will classify it as other, So we must add a dimension for “other”.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/SlKJF2.png" alt="figure8"></p>
<p><strong>Word hashing</strong><br>
We can also use the word hashing to represent the word. We can make a letter vetcor.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/Vz6XVL.png" alt="figure9"></p>
<h3 id="Recurrent-Neural-NetWork"><a class="header-anchor" href="#Recurrent-Neural-NetWork">¶</a>Recurrent Neural NetWork</h3>
<p>The output of hidden layer are stored in the memory.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/i9WLXR.png" alt="figure10"></p>
<h4 id="Example"><a class="header-anchor" href="#Example">¶</a>Example</h4>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/RSc0zS.png" alt="figure11"></p>
<p>Presumed:</p>
<p>ALL the weights are “1”, no bias.</p>
<p>All the activation functions are lienar.</p>
<p>Input sequence: <code>$ \left[ \begin{matrix}1\\1 \end{matrix} \right] \left[ \begin{matrix}1\\ 1 \end{matrix} \right] \left[ \begin{matrix}2 \\ 2 \end{matrix} \right] \dots \dots$</code></p>
<p>First, we must give the initial values of a. Default: 0</p>
<p><strong>Step1:</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/zsXfrl.png" alt="figure12"></p>
<p>Input 1 and 1, compute 0 and 1 will get the 2 and 2. And compute 2 and 2 will get 4 and 4. The first output will be 4 and 4, and the memory are 2 and 2.</p>
<p><strong>Step2:</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/lrOq8c.png" alt="figure13"></p>
<p>Input 1 and 1, compute 1 and 2 will get 6 and 6, And compute 6 and 6 will get 12 and 12. The second output will be 12 and 12, and the memory are 6 and 6.</p>
<p><strong>Step3:</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/4aDfln.png" alt="figure14"></p>
<p>Input 2 and 2, compute 2 and 6 will get 16 and 16, And compute 16 and 16 will get 32 and 32. The second output will be 32 and 32, and the memory are 16 and 16.</p>
<h3 id="RNN"><a class="header-anchor" href="#RNN">¶</a>RNN</h3>
<h4 id="Ticket-Book-System-apply-in-RNN"><a class="header-anchor" href="#Ticket-Book-System-apply-in-RNN">¶</a>Ticket Book System apply in RNN</h4>
<p><strong>Step1:</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/WBXdFc.png" alt="figure15"></p>
<p>In the figure, arrive is inputed as x1, compute a1 by RNN and store it.</p>
<p><strong>Step2:</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/ogz7xD.png" alt="figure16"></p>
<p>In this figure, Taipei is inputed as x2, use x2 and a1 to compute a2 and store it.</p>
<p><strong>Step3:</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/Wy8uKU.png" alt="figure17"></p>
<p>In this figure, on is inputed as x3, use x3 and a2 to compute a 3 and store it.</p>
<p><strong>So on</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/M9kqVh.png" alt="figure18"></p>
<p>==Attention:== we are not have only one hidden layer. It can be so many.</p>
<h4 id="Elman-Network-Jordan-Network"><a class="header-anchor" href="#Elman-Network-Jordan-Network">¶</a>Elman Network &amp; Jordan Network</h4>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/Kw2gPZ.png" alt="figure19"></p>
<p>Elman Network we have talked above, and the Jordan Network is the new one we want to introduce.</p>
<p>Actually, the differnece between Jordan Network and Elman Network is that Jordan Network make the output to compute with next step computation.</p>
<h4 id="Bidirectional-双向的-RNN"><a class="header-anchor" href="#Bidirectional-双向的-RNN">¶</a>Bidirectional(双向的) RNN</h4>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/Iq4InB.png" alt="figure20"></p>
<p>由上图所示，我们可以同时训练一个正向的循环神经网络，又可以训练一个逆向的神经网络，然后在将他们结果都输入到一个新的隐藏层进行计算产生<code>$ y^{t}\:\:\:y^{t+1}\:\:\:y^{y+2} \dots $</code>.</p>
<h3 id="Long-Short-term-Memory-LSTM"><a class="header-anchor" href="#Long-Short-term-Memory-LSTM">¶</a>Long Short-term Memory(LSTM)</h3>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/R9BUka.png" alt="figure21"></p>
<p>The LSTM has three gates, like input gate, forget gate, output gate.</p>
<p>For all gates, they have own neural network that can learning by themselves to decide how to control the Gate.</p>
<p>If the output of other part of the network want to input the memory cell, it must pass the input gate. And input gate also be controled by other part of the network. This action can study by itself, it can decide when to open the input gate.</p>
<p>By the way, the output gate and forget gate also have similar structure.</p>
<p><strong>Sepcial Neuron(特殊神经元):</strong></p>
<ul>
<li>4 inputs</li>
<li>1 output</li>
</ul>
<p>4 input:</p>
<ul>
<li>Other part of the network of Input Gate</li>
<li>Signal control the input gate</li>
<li>Signal control the output gate</li>
<li>Signal control the forget gate</li>
</ul>
<p>1 output:</p>
<ul>
<li>Other part of the network of Output Gate</li>
</ul>
<p><ins>The LSTM can remember many memory cells in long time.</ins></p>
<h4 id="Other-expression"><a class="header-anchor" href="#Other-expression">¶</a>Other expression</h4>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/uMcAkq.png" alt="figure21"></p>
<p>==Activation funcion f is usually a sigmoid function.==</p>
<p>The sigmoid function can support between 0 and 1. <strong>0 stand for gate closed, 1 symbolic gate opened.</strong> Mimic open and close gate.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/cfRYnW.png" alt="figure22"></p>
<p><code>$ g(z)f(z_{i}) = g(z)\:multiply\: f(z_{i}) $</code></p>
<p><code>$ c\:multiply\:f(z_{f}) = cf(z_{f})$</code></p>
<p><code>$ c^{'}=g(z)g(z_{i})+cf(z_{f}) $</code></p>
<p><code>$ a = h(c')\:multiply\:f(z_{0}) $</code></p>
<h4 id="LSTM-Example"><a class="header-anchor" href="#LSTM-Example">¶</a>LSTM - Example</h4>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/RrkPFk.png" alt="figure23"></p>
<h5 id="Init"><a class="header-anchor" href="#Init">¶</a><strong>Init:</strong></h5>
<ul>
<li>one LSTM cell Memory</li>
<li>3 dimension input</li>
<li>1 dimension output</li>
</ul>
<h5 id="Condition"><a class="header-anchor" href="#Condition">¶</a><strong>Condition:</strong></h5>
<ul>
<li>When <code>$ x_{2}=1$</code>, add the numbers of <code>$ x_{1} $</code> into the memory</li>
<li>When <code>$ x_{2}=-1$</code>, reset the memory</li>
<li>When <code>$ x_{3}=1 $</code>, output the number in the memory.</li>
</ul>
<h5 id="Process"><a class="header-anchor" href="#Process">¶</a><strong>Process:</strong></h5>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/aBOGRx.png" alt="figure24"></p>
<p><strong>step1:</strong></p>
<p>cell memory=0, <code>$ x_{1}=1\:\:x_{2}=0\:\:x_{3}=0$</code></p>
<p><strong>step2:</strong></p>
<p>cell memory=0，<code>$ x_{1}=3\:\:x_{2}=1\:\:x_{3}=0$</code>, because of <code>$ x_{2}=1 $</code> , add the numbers of <code>$ x_{1} $</code> into the cell memory.</p>
<p><strong>step3:</strong></p>
<p>cell memory=0, <code>$ x_{1}=2\:\:x_{2}=0\:\:x_{3}=0$</code>, no action</p>
<p><strong>step4:</strong></p>
<p>cell memory=3,<code>$ x_{1}=4\:\:x_{2}=1\:\:x_{3}=0$</code>,add the number of <code>$ x_{1}=4 $</code> into the memory(3+4=7)</p>
<p><strong>step5:</strong></p>
<p>cell memory=7,<code>$ x_{1}=2\:\:x_{2}=0\:\:x_{3}=0$</code>, no action</p>
<p><strong>step6:</strong></p>
<p>cell memory=7,<code>$ x_{1}=1\:\:x_{2}=0\:\:x_{3}=1$</code>, <code>$ x_{3}=1 $</code> output the number in the memory, y=7</p>
<p><strong>step7:</strong></p>
<p>cell memroy=7,<code>$ x_{1}=3\:\:x_{2}=-1\:\:x_{3}=0$</code>, <code>$ x_{2}=-1 $</code> reset the memory, make the cell memory equal 0</p>
<p><strong>step8:</strong></p>
<p>cell memmory=0,<code>$ x_{1}=6\:\:x_{2}=1\:\:x_{3}=0$</code>, <code>$ x_{2}=1$</code> add the number of <code>$ x_{1}$</code> into the memory, cell memory=6(0+6=6)</p>
<p><strong>step9:</strong></p>
<p>cell mempry=6,<code>$ x_{1}=1\:\:x_{2}=0\:\:x_{3}=1$</code>, <code>$ x_{3}=1 $</code> output the number in the memory, y=6</p>
<h4 id="Other-Example"><a class="header-anchor" href="#Other-Example">¶</a>Other Example</h4>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/Ngl75m.png" alt="figure25"></p>
<h5 id="Init-v2"><a class="header-anchor" href="#Init-v2">¶</a>Init</h5>
<ul>
<li>four input</li>
<li>one output</li>
<li>cell memory=0</li>
<li>every number of line represent weight</li>
</ul>
<h5 id="Process-v2"><a class="header-anchor" href="#Process-v2">¶</a>Process</h5>
<p><strong>step1:</strong></p>
<p>for <code>$ x_{1}=3,x_{2}=1,x_{3}=0$</code></p>
<p>Input=3×1+1×0+0×0+1×0=3</p>
<p>Input Gate=3×0+1×100+0×0+1×(-10)=90≈1</p>
<p>Forget Gate=3×0+1×100+0×0+1×10=110≈1</p>
<p>Output Gate=3×0+1×0+0×100+1×(-10)=-10≈0</p>
<p>Because outputgate=0 close the output gate, so y=0. And forget gate=1 add the number to cell memory, so cell memory=3.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/JA1A62.png" alt="figure26"></p>
<p><strong>step2:</strong></p>
<p>for <code>$ x_{1}=4,x_{2}=1,x_{3}=0$</code></p>
<p>Input=4×1+1×0+0×1+1×0=4</p>
<p>Input Gate=4×0+1×100+0×0+1×(-10)=90≈1</p>
<p>Forget Gate=4×0+100×1+0×0+10×1=110≈1</p>
<p>Output Gate=4×0+1×0+100×0+1×(-10)=-10≈0</p>
<p>Because outputgate=0 close the output gate, so y=0. And forget gate=1 add the number to cell memory, so cell memory=7.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/XaaX7E.png" alt="figure27"></p>
<p><strong>step3:</strong></p>
<p>for <code>$ x_{1}=2,x_{2}=0,x_{3}=0$</code></p>
<p>Input=2×1+0×0+0×1+1×0=2</p>
<p>Input Gate=2×0+0×100+0×0+1×(-10)=-10≈0</p>
<p>Forget Gate=2×0+100×0+0×0+10×1=10≈1</p>
<p>Output Gate=2×0+0×0+100×0+1×(-10)=-10≈0</p>
<p>Because inputgate gate=0 close the input gate,so input equal 0, outputgate=0 close the output gate, so y=0. And forget gate=1 add the number to cell memory, so cell memory=7.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/TwEYUM.png" alt="figure28"></p>
<p><strong>step4:</strong></p>
<p>for <code>$ x_{1}=1,x_{2}=0,x_{3}=1$</code></p>
<p>Input=1×1+0×0+1×0+1×0=1</p>
<p>Input Gate=1×0+0×100+1×0+1×(-10)=-10≈0</p>
<p>Forget Gate=1×0+100×0+1×0+10×1=10≈1</p>
<p>Output Gate=1×0+0×0+100×1+1×(-10)=90≈1</p>
<p>Because inputgate gate=0 close the input gate,so input equal 0, outputgate=1 open the output gate, so y=7. And forget gate=1 add the number to cell memory, so cell memory=7.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/WDb4wS.png" alt="figure29"></p>
<h4 id="Original-NetWork"><a class="header-anchor" href="#Original-NetWork">¶</a>Original NetWork</h4>
<h5 id="Simply-replace-the-neurons-with-LSTM"><a class="header-anchor" href="#Simply-replace-the-neurons-with-LSTM">¶</a>Simply replace the neurons with LSTM</h5>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/iRUofA.png" alt="figure30"></p>
<p>replace neurons:</p>
<p>enter each group of x into the corresponding gate</p>
<p>4 time of parameters</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/tPL86E.png" alt="figure31"></p>
<h5 id="Comprehend-cell-memory-deeply"><a class="header-anchor" href="#Comprehend-cell-memory-deeply">¶</a>Comprehend cell memory deeply</h5>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/DdnHMP.png" alt="figure32"></p>
<p>Let <code>$ x^{t} $</code> multiply a vector to get <code>$ z^{f}\:\:z^{i}\:\:z\:\:z^{o}$</code>.</p>
<p>Each of them(<code>$ z^{f}\:\:z^{i}\:\:z\:\:z^{o}$</code>) to be used as input vector.</p>
<h6 id="Simplify-Structure"><a class="header-anchor" href="#Simplify-Structure">¶</a>Simplify Structure</h6>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/k4eGul.png" alt="figure33"></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/801t0i.png" alt="figure34"></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/TNudQf.png" alt="figure35"></p>
<h5 id="Multiple-layer-LSTM"><a class="header-anchor" href="#Multiple-layer-LSTM">¶</a>Multiple-layer LSTM</h5>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/0STWjj.png" alt="figure36"></p>
<p>This is quite standard now, and don’t worry if you cannot understand this, Keras can handle it.(Kearas supports “LSTM”,“GRU”,“SimpleRNN” layers)</p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>Python</category>
        <category>Machine Learning</category>
        <category>Neural NetWork</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
        <tag>RNN</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo中适用于Next主题的评论功能Gitalk</title>
    <url>/2019/12/31/Hexo%E4%B8%AD%E9%80%82%E7%94%A8%E4%BA%8ENext%E4%B8%BB%E9%A2%98%E7%9A%84%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BDGitalk/</url>
    <content><![CDATA[<h1>Hexo中适用于Next主题的评论功能Gitalk</h1>
<p>Gitalk 是一款基于 Github Issue 和 Preact 开发的评论插件，评论时需使用 Github 账号进行登录，另一款 Gitment 与之类似。这里记录下在 NexT 主题中集成 Gitalk 的相关步骤。</p>
<h2 id="注册应用"><a class="header-anchor" href="#注册应用">¶</a>注册应用</h2>
<p>可直接打开：<a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a> 进行注册（此操作需要登录）</p>
<ol>
<li>填写注册信息<br>
<img src="https://gitee.com/zyp521/upload_image/raw/master/9TUhWA.png" alt="figure"></li>
<li>参数详解</li>
</ol>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 参数说明:</span></span><br><span class="line"></span><br><span class="line">Application name： <span class="meta"># 应用名称，随意填写</span></span><br><span class="line"></span><br><span class="line">Homepage URL： <span class="meta"># 网站URL，如 http:<span class="comment">//blog.strivezs.com/</span></span></span><br><span class="line"></span><br><span class="line">Application description <span class="meta"># 描述，随意填写</span></span><br><span class="line"></span><br><span class="line">Authorization callback URL：<span class="meta"># 网站URL，http:<span class="comment">//blog.strivezs.com/</span></span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>管理界面<br>
<img src="https://gitee.com/zyp521/upload_image/raw/master/jEtsnW.png" alt="figure"></li>
</ol>
<h2 id="配置"><a class="header-anchor" href="#配置">¶</a>配置</h2>
<h3 id="创建gitalk-swig文件"><a class="header-anchor" href="#创建gitalk-swig文件">¶</a>创建gitalk.swig文件</h3>
<p>定位到路径/themes/next/layout/_third-party/comments/，创建gitalk.swig文件，内容：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">   </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page.comments &amp;&amp; theme.gitalk.enable %&#125;</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        var gitalk = new Gitalk(&#123;</span></span><br><span class="line"><span class="xml">          clientID: '</span><span class="template-variable">&#123;&#123; theme.gitalk.ClientID &#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">          clientSecret: '</span><span class="template-variable">&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">          repo: '</span><span class="template-variable">&#123;&#123; theme.gitalk.repo &#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">          owner: '</span><span class="template-variable">&#123;&#123; theme.gitalk.githubID &#125;&#125;</span><span class="xml">',</span></span><br><span class="line"><span class="xml">          admin: ['</span><span class="template-variable">&#123;&#123; theme.gitalk.adminUser &#125;&#125;</span><span class="xml">'],</span></span><br><span class="line"><span class="xml">          id: md5(window.location.pathname),</span></span><br><span class="line"><span class="xml">          distractionFreeMode: '</span><span class="template-variable">&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;</span><span class="xml">'</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"><span class="xml">        gitalk.render('gitalk-container')</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="引入gitalk-swig"><a class="header-anchor" href="#引入gitalk-swig">¶</a>引入gitalk.swig</h3>
<p>在同级目录下的index.swig里面加入</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'gitalk.swig' %&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="修改comments-swig，添加gitalk"><a class="header-anchor" href="#修改comments-swig，添加gitalk">¶</a>修改comments.swig，添加gitalk</h3>
<p>修改 /themes/next/layout/_partials/comments.swig，添加内容如下，与前面的elseif同一级别上:</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">elseif</span> theme.gitalk.enable %&#125;</span></span><br><span class="line"><span class="xml"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="新建gitalk-styl样式"><a class="header-anchor" href="#新建gitalk-styl样式">¶</a>新建gitalk.styl样式</h3>
<p>定位到/themes/next/source/css/_common/components/third-party/然后创建gitalk.styl文件，内容如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gt-header</span> <span class="selector-tag">a</span>, <span class="selector-class">.gt-comments</span> <span class="selector-tag">a</span>, <span class="selector-class">.gt-popup</span> a</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line"><span class="selector-class">.gt-container</span> <span class="selector-class">.gt-popup</span> <span class="selector-class">.gt-action</span><span class="selector-class">.is--active</span>:before</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0.7em</span>;</span><br></pre></td></tr></table></figure>
<h3 id="引入gitalk-styl样式"><a class="header-anchor" href="#引入gitalk-styl样式">¶</a>引入gitalk.styl样式</h3>
<p>然后在同级别的third-party.styl中导入:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">"gitalk"</span>;</span><br></pre></td></tr></table></figure>
<h3 id="修改主题配置文件"><a class="header-anchor" href="#修改主题配置文件">¶</a>修改主题配置文件</h3>
<p>在主题配置文件theme/next/_config.yml中添加如下内容:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitalk评论</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">githubID:</span> <span class="string">StriveZs</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">name.github.io</span></span><br><span class="line">  <span class="attr">ClientID:</span> <span class="string">4a8689xxxxxxxxde63c1</span></span><br><span class="line">  <span class="attr">ClientSecret:</span> <span class="string">f21bbd96c4b9963086479xxxxxxx6d0f1e3936348</span></span><br><span class="line">  <span class="attr">adminUser:</span> <span class="string">StriveZs</span></span><br><span class="line">  <span class="attr">distractionFreeMode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>==说明==</p>
<figure class="highlight ldif"><table><tr><td class="code"><pre><span class="line"><span class="attribute">githubID </span>: 你的github ID，用来说明你是个人还是某个组织的；</span><br><span class="line"></span><br><span class="line"><span class="attribute">repo </span>: 你要新建一个repo来保存这些comments，这里repo就随便新建一个就行；</span><br><span class="line"></span><br><span class="line"><span class="attribute">ClientID 和 ClientSecret </span>: 就是文章开头新建APP的那些，请注意，这个一定要和你部署的网站的对应起来，一个网站对应一个这个client；</span><br><span class="line"></span><br><span class="line"><span class="attribute">adminUser</span>: 你的admin 用户名，通常就是你自己</span><br></pre></td></tr></table></figure>
<p>以上就是NexT中添加gitalk评论的配置，博客上传到GitHub上后，打开页面进入某一博客内容下，就可看到评论处。</p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>Hexo</category>
        <category>Next主题</category>
      </categories>
      <tags>
        <tag>美化</tag>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>评论</tag>
        <tag>Gitalk</tag>
      </tags>
  </entry>
  <entry>
    <title>Learning In RNN Part II</title>
    <url>/2020/02/16/Learning%20In%20RNN%20Part%20II/</url>
    <content><![CDATA[<h1>Learning In RNN Part II</h1>
<p><strong>Learning Tager:</strong> Make the loss be minimize that evaluating by cost function.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/kHcMXX.png" alt="figure1"></p>
<h2 id="Unfortunately"><a class="header-anchor" href="#Unfortunately">¶</a>Unfortunately</h2>
<ul>
<li>RNN-based network is not always easy to learn.</li>
</ul>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/8bJy2V.png" alt="figure2"></p>
<ul>
<li>Th error surface is rought</li>
</ul>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/dy4doG.png" alt="figure3"></p>
<h2 id="Helpful-Techniques"><a class="header-anchor" href="#Helpful-Techniques">¶</a>Helpful Techniques</h2>
<h3 id="Long-Short-term-Memory-LSTM"><a class="header-anchor" href="#Long-Short-term-Memory-LSTM">¶</a>Long Short-term Memory(LSTM)</h3>
<h4 id="Why-replace-RNN-to-LSTM"><a class="header-anchor" href="#Why-replace-RNN-to-LSTM">¶</a>Why replace RNN to LSTM?</h4>
<p>Can deal with gradient vanishing(消灭，等于0) (not gradient explode爆炸激增)<br>
It can make your error surface to be flatting nor not steep.<br>
The specify performance is that it can remove the flat regions and solve the problem of gradient vanishing, but not gradient explode.</p>
<h4 id="How-to-work"><a class="header-anchor" href="#How-to-work">¶</a>How to work:</h4>
<p>The different operation between RNN and LSTM is that RNN can reomve value in memory after each computation and store new value. But LSTM can add the previous value to new value in cell memory after each computation.(Concretely depend on the value of forget gate)<br>
So the difference of RNN and LSTM is if a weight influence value of memory, the influence never disappears unless forget gate is closed.<br>
If forget gate is opened, there no gradient vanishing.</p>
<h4 id="Summarization"><a class="header-anchor" href="#Summarization">¶</a>Summarization</h4>
<ul>
<li>can deal with gradient vanishing(not gradient explode)</li>
<li>Memory and input are <ins>added</ins></li>
<li>The influence never disappears<br>
unless forget gate is closed</li>
<li>No Gradient vanishing(If forget gate is opened)</li>
</ul>
<p>Gated Recurrent Unit(GRU):simpier thant LSTM</p>
<p><strong>Other helpful techniques:</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/EDrdli.png" alt="figure4"></p>
<h2 id="More-Applications"><a class="header-anchor" href="#More-Applications">¶</a>More Applications</h2>
<h3 id="Many-to-one"><a class="header-anchor" href="#Many-to-one">¶</a>Many to one</h3>
<ul>
<li>Input is a vector sequence, but output is only one vector.</li>
</ul>
<p><strong>Sentiment Analysis:(意见分析)</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/K5bxC0.png" alt="figure5"></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/XKwMQM.png" alt="figure6"></p>
<h3 id="Many-to-Many-Output-is-shorter"><a class="header-anchor" href="#Many-to-Many-Output-is-shorter">¶</a>Many to Many (Output is shorter)</h3>
<ul>
<li>Both input and output are both sequences, <strong>but the output is shorter</strong>.</li>
</ul>
<p><strong>Speech Recognition:</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/QuBJ2j.png" alt="figure7"></p>
<h4 id="How-to-differentiate"><a class="header-anchor" href="#How-to-differentiate">¶</a>How to differentiate?</h4>
<ul>
<li>Connectionist Temporal Classification(<strong>CTC</strong>，联结主义时间分类)</li>
</ul>
<p>==Add an extra symbol “Φ” representing “null”.==</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/kCJIsg.png" alt="figure8"></p>
<p>Use this method to slove the problem like differentiate “好棒” or “好棒棒”.</p>
<h4 id="CTC-Training"><a class="header-anchor" href="#CTC-Training">¶</a>CTC Training</h4>
<p><strong>Acoustic Features:(声音特征)</strong><br>
ALL possible alignments(序列/顺序) are considered as correct because we don’t know what alignment is correct. So we can list all alignments to train.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/WPPHRn.png" alt="figure9"></p>
<h4 id="CTC-example"><a class="header-anchor" href="#CTC-example">¶</a>CTC: example</h4>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/3yexBF.png" alt="figure10"></p>
<h3 id="Many-to-Many-No-Limitation"><a class="header-anchor" href="#Many-to-Many-No-Limitation">¶</a>Many to Many (No Limitation)</h3>
<ul>
<li>Both input and output are both sequences <strong>with differnet lengths</strong>. ➡ <strong>Sequence to sequence learning</strong><br>
<strong>Machine Translate</strong>(Machine Learning ➡ 机器学习)</li>
</ul>
<p><strong>bag-of-word:</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/HjyAMK.png" alt="figure11"></p>
<p>Above model can’t stop until it’s interrupted.</p>
<h4 id="How-to-make-the-network-stop"><a class="header-anchor" href="#How-to-make-the-network-stop">¶</a>How to make the network stop</h4>
<ul>
<li>Adda a symbol ‘===’(断)</li>
</ul>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/8Gu1j2.png" alt="figure12"></p>
<h3 id="Beyond-Sequence"><a class="header-anchor" href="#Beyond-Sequence">¶</a>Beyond Sequence</h3>
<ul>
<li>Syntactic parsing(句法分析)</li>
</ul>
<h4 id="Transform-Tree-Structure-to-sequence"><a class="header-anchor" href="#Transform-Tree-Structure-to-sequence">¶</a>Transform Tree Structure to sequence</h4>
<p><strong>Conversion principle:</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/BRp1UF.png" alt="figure13"></p>
<p>We can transform sentence tree to sequence by using this principle and train a sequence model to recognize sentence.</p>
<h3 id="Sequence-to-sequence"><a class="header-anchor" href="#Sequence-to-sequence">¶</a>Sequence-to-sequence</h3>
<h4 id="Auto-encoder-Text"><a class="header-anchor" href="#Auto-encoder-Text">¶</a>Auto-encoder-Text</h4>
<ul>
<li>To understand the meaning of a word sequence, the order of the words can not be ignored.</li>
</ul>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/By7XBu.png" alt="figure14"></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/wYKkpA.png" alt="figure15"></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/eCiGf3.png" alt="figure16"></p>
<h4 id="Auto-encoder-Speech"><a class="header-anchor" href="#Auto-encoder-Speech">¶</a>Auto-encoder-Speech</h4>
<ul>
<li>Dimension reduction for a sequence with variable length</li>
</ul>
<p>audio segments()word-level-&gt;Fixed-length vector</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/RARIzh.png" alt="figure17"></p>
<h5 id="Audio-Search-Principle"><a class="header-anchor" href="#Audio-Search-Principle">¶</a><strong>Audio Search Principle:</strong></h5>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/zYlxJy.png" alt="figure18"></p>
<h5 id="How-to-transform-audio-segment-to-vector"><a class="header-anchor" href="#How-to-transform-audio-segment-to-vector">¶</a>How to transform audio segment to vector</h5>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/tTKbLU.png" alt="figure19"></p>
<p>ps: jointly 共同地 同时地 similarity 相似 类似 embedding 埋入/埋葬</p>
<h5 id="Visualizing-embedding-vectors-of-the-words"><a class="header-anchor" href="#Visualizing-embedding-vectors-of-the-words">¶</a>Visualizing embedding vectors of the words</h5>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/CGfD3r.png" alt="figure20"></p>
<h4 id="Sequence-to-sequence-Learning-Demo-Chat-bot"><a class="header-anchor" href="#Sequence-to-sequence-Learning-Demo-Chat-bot">¶</a>Sequence-to-sequence Learning Demo:Chat-bot</h4>
<p><strong>Learning Principle:</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/0szRES.png" alt="figure21"></p>
<p><strong>Data Set:</strong><br>
40000 sentences in Movie album and discussion of presidential election in American.</p>
<h2 id="Attention-based-Model"><a class="header-anchor" href="#Attention-based-Model">¶</a>Attention-based Model</h2>
<p><strong>Structure Version 1:</strong></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/Ajbf8o.png" alt="figure22"></p>
<p><strong>Structure Version 2:</strong><br>
==Neural Turing Machine(神经图灵机)==</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/h4FdpY.png" alt="figure23"></p>
<h3 id="Reading-Comprehension"><a class="header-anchor" href="#Reading-Comprehension">¶</a>Reading Comprehension</h3>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/ErGx83.png" alt="figure24"></p>
<h3 id="Visual-Question-Answering"><a class="header-anchor" href="#Visual-Question-Answering">¶</a>Visual Question Answering</h3>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/opnM0d.png" alt="figure25"></p>
<p><strong>Principle:</strong><br>
==A vector for each region==</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/QyhNhJ.png" alt="figure26"></p>
<h3 id="Speech-Question-Answering"><a class="header-anchor" href="#Speech-Question-Answering">¶</a>Speech Question Answering</h3>
<ul>
<li>TOEFL Listening Comprehension Test By Machine</li>
</ul>
<p><strong>Example:</strong></p>
<ol>
<li>Audio Story: the original story is 5 min long</li>
<li>Question: “what is possible of Venus’ clouds?”</li>
<li>Choices:
<ol>
<li>gased released as a result of volcanic activity</li>
<li>chemical reactions caused by high surface temperatures</li>
<li>bursts of radio energy from the plane’s surface</li>
<li>strong winds that blow dust into the atmosphere</li>
</ol>
</li>
</ol>
<h4 id="Model-Architecture"><a class="header-anchor" href="#Model-Architecture">¶</a>Model Architecture</h4>
<p>Everything is learned from training examples.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/ADclLS.png" alt="figure27"></p>
<h2 id="Deep-Structure"><a class="header-anchor" href="#Deep-Structure">¶</a>Deep &amp; Structure</h2>
<h3 id="Integrated-together"><a class="header-anchor" href="#Integrated-together">¶</a>Integrated together</h3>
<ul>
<li>Speech Recognition: CNN/LSTM/DNN+HMM<br>
<img src="https://gitee.com/zyp521/upload_image/raw/master/JKDhvu.jpg" alt="figure28"></li>
</ul>
<p>Bayes theorem</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/ssXaWg.png" alt="figure29"></p>
<ul>
<li>Sematic Tagging: Bi-directional LSTM+CRF/Structured SVM<br>
Testing:<br>
<img src="https://gitee.com/zyp521/upload_image/raw/master/zryrFy.jpg" alt="figure31"></li>
</ul>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/GJhyYd.png" alt="figure30"></p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>Python</category>
        <category>Machine Learning</category>
        <category>Neural NetWork</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
        <tag>RNN</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac+PyCharm+Anaconda配置QtDesigner.md</title>
    <url>/2020/06/17/Mac+PyCharm+Anaconda%E9%85%8D%E7%BD%AEQtDesigner.md/</url>
    <content><![CDATA[<h1>Mac+PyCharm+Anaconda配置QtDesigner</h1>
<p>打开Pycharm-&gt;Perference-&gt;Tools-&gt;ExternalTools 添加下面两个外部工具。</p>
<h2 id="配置QtDesigner"><a class="header-anchor" href="#配置QtDesigner">¶</a>配置QtDesigner</h2>
<p>首先说明一下由于我这里是使用Anaconda进行配置的，因此我的路径可能和你默认使用的路径不同，下面我给出两种路径:</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">Anaconda:</span></span><br><span class="line">~opt<span class="meta-keyword">/anaconda3/</span>bin/Designer.app</span><br><span class="line"></span><br><span class="line">Mac默认路径：</span><br><span class="line"><span class="meta-keyword">/usr/</span>localCellar<span class="meta-keyword">/qt/</span><span class="number">5.10</span><span class="number">.1</span>/libexec</span><br></pre></td></tr></table></figure>
<p>下面是QtDesigner的配置信息，按照下图配置即可：</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/H2IeEC.png" alt="figure.1"></p>
<h2 id="配置PyUIC"><a class="header-anchor" href="#配置PyUIC">¶</a>配置PyUIC</h2>
<p>下面添加将.ui文件转换为.py文件的外部工具。</p>
<p>具体配置如下图：</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/GQ8xLh.png" alt="figure.2"></p>
<ul>
<li>Program：选择python就可以了地址为：~/opt/anaconda3/bin/python3.7</li>
<li>Arguments：-m PyQt5.uic.pyuic $FileName$ -o $<a href="http://FileNameWithoutExtension$.py">FileNameWithoutExtension$.py</a></li>
<li>Working directory：$ProjectFileDir$</li>
</ul>
<h2 id="启动"><a class="header-anchor" href="#启动">¶</a>启动</h2>
<p>直接在Tools-&gt;Externel Tools中选择QtDesigner。</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/d0dsHg.png" alt="figure.3"></p>
<p>保存的文件一定要放在工作目录下，然后在选择PyUIC外部工具将ui选择为py文件。</p>
]]></content>
  </entry>
  <entry>
    <title>MAC+XAMPP+PHPStorm+XDebug</title>
    <url>/2020/05/06/MAC+XAMPP+PHPStorm+XDebug/</url>
    <content><![CDATA[<h1>MAC+XAMPP+PHPStorm+XDebug</h1>
<p>在网上找了半天，花费了很长时间，总结了网上的内容，发现写的都不是十分全面，这里我写了从头到尾的配置过程。</p>
<h2 id="下载并安装XAMPP"><a class="header-anchor" href="#下载并安装XAMPP">¶</a>下载并安装XAMPP</h2>
<p>首先先去官网下载：<a href="https://www.apachefriends.org/zh_cn/index.html">click here</a></p>
<p>ps:个人补充一点，由于我上来先安装的是最新版本的导致我出现了许多问题，后来我尝试更换成了php7.3版本的XAMPP使用。</p>
<h2 id="下载并安装PHPStorm"><a class="header-anchor" href="#下载并安装PHPStorm">¶</a>下载并安装PHPStorm</h2>
<p>直接去官网下载并且安装即可，注意如果你不是教育版或者企业版，则需要购买或者使用密钥（自行查找吧）。 <a href="https://www.jetbrains.com/phpstorm/">click here</a></p>
<h2 id="配置XAMPP"><a class="header-anchor" href="#配置XAMPP">¶</a>配置XAMPP</h2>
<p>安装XMAPP之后，我们首先要配置一下conf文件.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/U8PIJ1.png" alt="figure.1"></p>
<p>添加上你的端口，这里phpstorm默认使用的63342端口，因此我在配置文件中添加上了63342端口。</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/gEdJga.png" alt="figure.2"></p>
<p>修改成你想要的主站文件夹地址，由于它默认需要你将写好的文件放入到htdocs文件夹中，因此这里我为了方便自定义，我就修改了默认的主站地址。<strong>注意这里写的内容将会成为你的localhost映射的地址</strong>，在后面phpstorm项目配置的时候要注意，这里建议给一个比较大的文件范围作为默认的主站地址。</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/URpdu4.png" alt="figure.3"></p>
<p>如果没有权限的话，则将User 改成你自己的用户名即可。</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/IiOE3f.png" alt="figure.4"></p>
<p>按照上述过程配置好之后，重启以下apache就可以监听对应端口了。至于MySQL的我暂时没有到放在以后去写了。</p>
<h2 id="PHPStorm配置"><a class="header-anchor" href="#PHPStorm配置">¶</a>PHPStorm配置</h2>
<p>首先是创建一个PHP项目，然后打开Preferences-&gt;Debugger设置一下端口号，这里我们直接使用的默认63342的，如果你不使用默认的话，这里修改了对应着conf配置文件也要修改。</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/Ql0vJT.png" alt="figure.5"></p>
<p>然后打开Deployment设置部署事宜。</p>
<p>创建一个local or mounted folder，然后设置一下项目地址，以及启动的网站，这里如果不是默认80端口的话，都要添加上自己端口号。</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/POJUXS.png" alt="figure.6"></p>
<p>点开映射部分，设置一下自己的映射，<strong>注意这里之前在conf文件夹中设置了父级主站目录</strong>，因此我们需要在Web Path一栏中设置一下详细的目录，并且在local path中添加上项目地址。具体如下：</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/4DEfk5.png" alt="figure.7"></p>
<p>配置完成之后一定要点一下那个小对勾，将该服务器设置为默认服务器。</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/DdckXH.png" alt="figure.8"></p>
<h2 id="配置PHP"><a class="header-anchor" href="#配置PHP">¶</a>配置PHP</h2>
<p>注意如果你是mac系统的话，则不需要使用xampp的php，可以直接使用你mac自导的php，在终端输入php-version可以查看当前php的版本，然后你打开Preferences-&gt;-&gt; Language -&gt; PHP 来选择你的解释器，默认是没有选择的。</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/mNJ27O.png" alt="figure.9"></p>
<p>注意两个栏的版本要一直，如果想要使用xampp中的php，则新建一个php，然后找到XAMPP/xamppfiles/bin/php-7.3.17来创建一个新的php。</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/SQdQUu.png" alt="figure.13"></p>
<h2 id="配置XDebug"><a class="header-anchor" href="#配置XDebug">¶</a>配置XDebug</h2>
<h3 id="安装xdebug扩展"><a class="header-anchor" href="#安装xdebug扩展">¶</a>安装xdebug扩展</h3>
<ul>
<li>查询与当前环境匹配的 xdebug 版本 <a href="https://xdebug.org/wizard">click here</a></li>
<li>进入bin文件夹，cd /Applications/XAMPP/bin</li>
<li>sudo ./pecl search xdebug-2.x.x 这里的版本号根据上面查找到的</li>
<li>sudo ./pecl install xdebug-2.x.x  安装</li>
<li>在etc文件夹中找到php.ini的最后添加如下内容</li>
</ul>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">zend_extension</span>=/Applications/XAMPP/xamppfiles/lib/php/extensions/<span class="literal">no</span>-debug-non-zts-<span class="number">20180731</span>/xdebug.so <span class="comment">;该行内容在安装完 xdebug 后，可从安装结束语中获取</span></span><br><span class="line"><span class="attr">xdebug.remote_enable</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">xdebug.remote_host</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">xdebug.remote_port</span> = <span class="number">9000</span></span><br><span class="line"><span class="attr">xdebug.idekey</span> = PHPSTORM</span><br><span class="line"><span class="attr">xdebug.auto_start</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li>重启apache服务器</li>
</ul>
<h3 id="配置PHP-v2"><a class="header-anchor" href="#配置PHP-v2">¶</a>配置PHP</h3>
<p>打开Perference-&gt;Language-&gt;Debuger, 设置端口号为9000</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/fz3haO.png" alt="figure.13"></p>
<p>打开Perference-&gt;Language-&gt;Debuger-&gt;DBGp Proxy 配置代理信息</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/dlnNw2.png" alt="figure.14"></p>
<p>配置Server</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/fFrJL9.png" alt="figure.15"></p>
<p>创建PHP Web并进行配置</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/4uL0fc.png" alt="figure.16"></p>
<h3 id="安装Chrome插件"><a class="header-anchor" href="#安装Chrome插件">¶</a>安装Chrome插件</h3>
<p>安装Chrome xdebug 插件，并且配置为debug模式 <a href="https://chrome.google.com/webstore/detail/xdebug-helper/eadndfjplgieldjbigjakmdgkmoaaaoc?utm_source=chrome-ntp-icon">click here</a></p>
<h3 id="PHPSTORM开启监听"><a class="header-anchor" href="#PHPSTORM开启监听">¶</a>PHPSTORM开启监听</h3>
<p>绿色小电话！！！</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/t2AJ2X.png" alt="figure.17"></p>
<h2 id="运行"><a class="header-anchor" href="#运行">¶</a>运行</h2>
<p>当你配置完成之后，创建一个php文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>id<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"> <span class="keyword">echo</span> <span class="string">"hello world"</span>;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>单击chrome运行即可以在浏览器中查看项目。</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/ENYizv.png" alt="figure.10"></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/HSYcz5.png" alt="figure.11"></p>
<p>ps：补充一年，如果你想设置运行按钮单击直接显示网页的话，则添加一个PHP Web Page</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/yCmBS9.png" alt="figure.12"></p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>PHPStorm</tag>
        <tag>XAMPP</tag>
        <tag>XDebug</tag>
      </tags>
  </entry>
  <entry>
    <title>Word Embedding</title>
    <url>/2020/04/04/Word%20Embedding/</url>
    <content><![CDATA[<h1>Word Embedding</h1>
<h2 id="Introduction"><a class="header-anchor" href="#Introduction">¶</a>Introduction</h2>
<h3 id="引入One-Hot"><a class="header-anchor" href="#引入One-Hot">¶</a>引入One-Hot</h3>
<p>自然语言处理主要研究语言信息，语言（词、句子等）属于人类认知过程中产生的高层认知抽象实体，而语言和图像属于较低层的元时输入信号。语音、图像和数据表达不需要特殊的编码，并且有天生的顺序性和关联性，近似的数字会被认为是近似的特征集合。正如图像是由像素的组成，语言是由词或字组成，可以把语言转换为词或字表示的结合。<br>
然后，不同于像素的大小天生具有色彩信息，词的数值大小很难表征词的含义。最后，人们为了方便，<strong>采用One-Hot编码格式</strong>，以一个只有10个不同词的语料库为例，我们可以用一个10位的向量来表示每个词，该向量在词下标位置的值为1，而其他全部为0.</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">第一个词：[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">第二个词: [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">·····</span><br><span class="line">第十个词：[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>这种词的表示方法十分简单，也很容易实现，充分解决了分类器难以处理属性数据的问题。但是它的<strong>缺点</strong>也很明显：冗余太多、无法体现词与词之间的关系。可以看到，这10个词的表示，彼此之间都是相互正交的。同时，随着词数的，One-Hot向量的维度也会急剧增长，如果有3000个不同的词，那么每个One-Hot词向量都是3k维，而且只有一个位置为1，其余位置都是0。（<strong>这里感觉为了节省的可以采用（300，3000）来表示长度为3k的向量第300个位置上为1，其余都为0</strong>）。虽然One-Hot编码格式在传统任务上表现出色，但是由于词的维度太高了，应用在深度学习上时，常常出现维度灾难，<ins>所以在深度学习中一般采用词向量的表示形式</ins>。</p>
<h3 id="引入词向量"><a class="header-anchor" href="#引入词向量">¶</a>引入词向量</h3>
<p>词向量(Word Vector)，也称为词嵌入(Word Embedding),并没有严格统一的定义。从概念上讲，<strong>它是指把一个维数为所有词的数量的高维空间(几万几十万个字)嵌入一个维数低得多的连续向量空间(128或256维)中，每个单词或词组被映射为实数域上的向量</strong>。<br>
词向量有专门的训练方法，这里不会细讲，感兴趣的可以学习斯坦福的CS224系列课程。这里只需要了解<strong>词向量最重要的特征是相似词的词向量距离相近。每个词的词向量维度都是固定的，每一维都是连续的数。</strong></p>
<p>举个例子，如果我们用二维的词向量表示十个词：足球、比赛、教练、队伍、裤子、长裤、上衣和编制、折叠、拉，那么可视化出来的结果如下所示:</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/YorrIg.png" alt="figure.1"></p>
<p>可以看出，<strong>同类词彼此聚集，相互之间的距离较近</strong>。</p>
<p>由此可见，用词向量表示词，不仅所有维度会变少（十维变为二维），其中也会包含更合理的语义信息。除了相邻词距离更近之外，词向量还有不少有趣的特征，如下图所示：</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/AlftfF.png" alt="figure.2"></p>
<p>虚线的的两端分别是男性词和女性词，例如：叔叔和阿姨、兄弟和姐妹、先生和女士。可以看出，虚线的方向和长度都差不多，因此可以认为：国王-女王≈男人-女人，即国王可以看成男性君主，女王可以看出女性君主，国王减去男性，只剩下君主的特征，女王减去女性，也只剩下君主的特征，所以这二者近似。</p>
<h2 id="具体介绍"><a class="header-anchor" href="#具体介绍">¶</a>具体介绍</h2>
<p>英文一般是用一个向量表示一个单词，也有使用一个向量表示一个字母的情况。中文同样也有一个词或者一个字的词向量表示，与英文采用空格来区分词不同，中文的词与词之间没有间隔，因此**如果采用基于词的词向量表示，需要先进行中文分词*。</p>
<p>这里只对词向量做一个概要性的介绍，让我们有一个直观地认知。我们只需要掌握词向量技术用向量表证词，相似词之间的向量距离近，</p>
<h3 id="PyTorch使用"><a class="header-anchor" href="#PyTorch使用">¶</a>PyTorch使用</h3>
<p>在PyTorch中，针对词向量有一个专门的层<strong>nn.Embedding</strong>，<ins>用来实现词与词向量的映射</ins>。nn.Embedding具有一个权重，形状是(num_words,embedding_dim)，例如：对上述句子中的10个词，每个词用2维向量表征，对应的权重就是一个10×2的矩阵。<strong>Embedding的输入形状是N×W，N是batch size， W是序列长度，输出的形状是N×W×embedding_dim.输入必须是LongTensor，FloatTensor须通过tensor.long（）方法转成LongTensor</strong>。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"># coding:utf8</span><br><span class="line"><span class="keyword">import</span> torch as t</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line">embedding = t.nn.Embedding(<span class="number">10</span>,<span class="number">2</span>) # 十个词，每个词用二维词向量表示</span><br><span class="line">input = t.arrange(<span class="number">0</span>,<span class="number">6</span>).view(<span class="number">3</span>,<span class="number">2</span>).long() # 三个句子，每个句子有两个词 N为<span class="number">3</span> W为<span class="number">2</span></span><br><span class="line">input = t.<span class="built_in">auto</span>grad.Variable(input)</span><br><span class="line">output = embedding(input)</span><br><span class="line">print(output.size())</span><br><span class="line">print(embedding.weight.size())</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>L,<span class="number">2</span>L,<span class="number">2</span>L)</span><br><span class="line">(<span class="number">10</span>L,<span class="number">2</span>L)</span><br></pre></td></tr></table></figure>
<p>需要注意的是，Embedding的权重也是可以训练的，既可以采用随机初始化，也可以采用预训练好的词向量初始化。</p>
<h2 id="简单总结"><a class="header-anchor" href="#简单总结">¶</a>简单总结</h2>
<p>可以使用torch.nn.Embedding(num_words,embedding_dim)来生成一个大小为num_words×embedding_dim词向量，<br>
其中共有num_words个单词，每个单词用一个二维词向量表示 类似横纵坐标</p>
<p>输入到embedding中的tensor必须是LongTensor，如果是FloatTensor必须用long（）转换<br>
Embedding的输入为N×W N是batch_size W是每个batch的单词数 如输入三个句子 每个句子包含两个单词<br>
Embedding的输出为N×W×embedding 即为输出还是三个句子 每个句子仍然是两个单词表示 但是每个单词则用一个二维向量表示</p>
]]></content>
      <categories>
        <category>Knowledge</category>
        <category>Nerual Network</category>
      </categories>
      <tags>
        <tag>word embedding</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch中nn.Linear()理解</title>
    <url>/2020/06/21/PyTorch%E4%B8%ADnn.Linear()%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<h1>PyTorch中nn.Linear()理解</h1>
<h2 id="计算公式"><a class="header-anchor" href="#计算公式">¶</a>计算公式</h2>
<p><code>$ y = xA^{T}+b$</code></p>
<p>这里A为weight，b为bias。</p>
<h2 id="代码部分"><a class="header-anchor" href="#代码部分">¶</a>代码部分</h2>
<h3 id="初始化部分代码"><a class="header-anchor" href="#初始化部分代码">¶</a>初始化部分代码</h3>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="constructor">Linear(Module)</span>:</span><br><span class="line">	...</span><br><span class="line">	__constants__ = <span class="literal">['<span class="identifier">bias</span>']</span></span><br><span class="line">	</span><br><span class="line">	def <span class="constructor">__init__(<span class="params">self</span>, <span class="params">in_features</span>, <span class="params">out_features</span>, <span class="params">bias</span>=True)</span>:</span><br><span class="line">	    super(Linear, self).<span class="constructor">__init__()</span></span><br><span class="line">	    self.in_features = in_features</span><br><span class="line">	    self.out_features = out_features</span><br><span class="line">	    self.weight = <span class="constructor">Parameter(<span class="params">torch</span>.Tensor(<span class="params">out_features</span>, <span class="params">in_features</span>)</span>)</span><br><span class="line">	    <span class="keyword">if</span> bias:</span><br><span class="line">	        self.bias = <span class="constructor">Parameter(<span class="params">torch</span>.Tensor(<span class="params">out_features</span>)</span>)</span><br><span class="line">	    <span class="keyword">else</span>:</span><br><span class="line">	        self.register<span class="constructor">_parameter('<span class="params">bias</span>', None)</span></span><br><span class="line">	    self.reset<span class="constructor">_parameters()</span></span><br></pre></td></tr></table></figure>
<h3 id="计算部分"><a class="header-anchor" href="#计算部分">¶</a>计算部分</h3>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">@weak_script_method</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(<span class="keyword">self</span>, input)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">return</span> F.linear(input, <span class="keyword">self</span>.weight, <span class="keyword">self</span>.bias)</span><br></pre></td></tr></table></figure>
<p>返回值为: input * weight + bias</p>
<h3 id="bias和weight"><a class="header-anchor" href="#bias和weight">¶</a>bias和weight</h3>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">weight</span>: the learnable weights of the module of shape</span><br><span class="line">    :<span class="attribute">math</span>:<span class="built_in">`(\text&#123;out\_features&#125;, \text&#123;in\_features&#125;)`</span>. The values are</span><br><span class="line">    initialized <span class="attribute">from </span>:<span class="attribute">math</span>:<span class="built_in">`\mathcal&#123;U&#125;(-\sqrt&#123;k&#125;, \sqrt&#123;k&#125;)`</span>, where</span><br><span class="line">    :<span class="attribute">math</span>:<span class="built_in">`k = \frac&#123;1&#125;&#123;\text&#123;in\_features&#125;&#125;`</span></span><br><span class="line"><span class="attribute">bias</span>:   the learnable bias of the module of <span class="attribute">shape </span>:<span class="attribute">math</span>:<span class="built_in">`(\text&#123;out\_features&#125;)`</span>.</span><br><span class="line">        <span class="attribute">If </span>:<span class="attribute">attr</span>:<span class="built_in">`bias`</span> is <span class="built_in">``</span>True<span class="built_in">``</span>, the values are initialized from</span><br><span class="line">        :<span class="attribute">math</span>:<span class="built_in">`\mathcal&#123;U&#125;(-\sqrt&#123;k&#125;, \sqrt&#123;k&#125;)`</span> where</span><br><span class="line">        :<span class="attribute">math</span>:<span class="built_in">`k = \frac&#123;1&#125;&#123;\text&#123;in\_features&#125;&#125;`</span></span><br></pre></td></tr></table></figure>
<h2 id="示例"><a class="header-anchor" href="#示例">¶</a>示例</h2>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; import torch</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; nn1 = torch.nn.Linear(<span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; input1 = torch.randn(<span class="number">140</span>, <span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; output1 = nn1(input1)</span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; output1.size()</span><br><span class="line">torch.Size([<span class="number">140</span>, <span class="number">50</span>])</span><br></pre></td></tr></table></figure>
<p>对于上述描述，我们创建一个input的维度为[140,100], 通过声明线性层会得到根据维度初始化的权重和偏差，其中weight的维度为[50,100]。对于公式中A表示的就是weight，而b表示的就是bias。由于对A进行了转置所以这里weight的维度为[50,100]而不是[100,50]。</p>
<p>具体计算为[140,100] × [50,100]的转置 + bias = [140,100] × [100,50] + bias最后得到的维度为[140,50]。</p>
<p>至于对于bias和weight的初始化，根绝网上所讲的是来有关维度值得均匀分布。</p>
]]></content>
      <categories>
        <category>PyTorch</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pytorch</tag>
        <tag>Linear</tag>
      </tags>
  </entry>
  <entry>
    <title>C++将十进制数转换为任意进制数</title>
    <url>/2019/02/08/c-jiang-shi-jin-zhi-shu-zhuan-huan-wei-ren-yi-jin-zhi-shu-1/</url>
    <content><![CDATA[<p>这里采用辗转相除法来进行十进制向其他进制的转换。 辗转相除法：以一个例子来看16 转换为8进制数 16%8=0 这是最低位，然后16/8=2，2%8=2，这是次低位，依次来得到最终的结果。 代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; qwe;</span><br><span class="line">    <span class="keyword">int</span> C,D;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;C&gt;&gt;D;</span><br><span class="line">    <span class="keyword">while</span>(C!=<span class="number">0</span>)&#123;</span><br><span class="line">       <span class="keyword">int</span> t = C % D;</span><br><span class="line">       qwe.push(t);</span><br><span class="line">       C = C / D;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!qwe.empty())&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;qwe.top();</span><br><span class="line">        qwe.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>辗转相除法</tag>
        <tag>进制转换</tag>
      </tags>
  </entry>
  <entry>
    <title>C++程序性能分析</title>
    <url>/2018/04/25/c-cheng-xu-xing-neng-fen-xi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180425215619.png" alt=""> 程序性能是指运行这个程序所需要的内存和时间的多少。 使用分析方法和实现方法来确定一个程序的性能。在性能分析时，采用分析方法，而在性能测量时，使用实验方法。 一个程序的空间复杂度是指该程序的运行所需内存的大小。 一个程序的时间复杂度是指运行程序所需要的时间。 <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180425220108.png" alt=""> 程序的空间复杂度主要由以下部分构成：</p>
<ol>
<li>指令空间 编译之后的程序指令所需要的存储空间</li>
<li>数据空间 由常量和动态对象所需要的空间组成</li>
<li>环境栈空间 环境栈是用来保存暂停的函数和方法在恢复运行时所需要的信息</li>
</ol>
<p>指令空间的数量取决于： 把程序转换成机器代码的编译器 在编译时的编译器选项 目标计算机   数据空间： 32位计算机上C++数据类型通常占用的空间 <img src="http://47.100.4.8/wp-content/uploads/2018/04/1235413.png" alt=""> 环境栈空间： 当一个函数被调用时，下面的数据将被保存在环境栈中：</p>
<ul>
<li>返回地址</li>
<li>正在调用的函数的所有局部变量的值以及形式参数的值</li>
</ul>
<p>注：实际使用的编辑器影响环境栈所需空间大小。 <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180425215858.png" alt=""> 时间复杂度： 影响空间复杂度的因素也影响时间复杂度。 一个算数操作的时间取决于操作数的类型，所以要精确地计算运行时间，必须按照数据类型对操作进行分类。 估计一个程序的运行时间两种方法： （1） 找出一个或多个关键操作，确定他们的执行时间 （2） 确定程序总的步数   一个程序的时间复杂度可以通过它进行的for循环次数进行计算。</p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>性能分析</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Performance Analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 冒泡排序&amp;折半查找</title>
    <url>/2018/05/02/c-mao-pao-pai-xu-zhe-ban-cha-zhao-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180502213608.png" alt=""> 冒泡策略：在一次循环中把最大元素移到序列最右端。 算法代码： 这里我以整型数组为例  数组类型大家可自行定义</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="comment">//一次冒泡</span></span><br><span class="line">void bubble<span class="comment">(int a\[\],int n)</span></span><br><span class="line">&#123;</span><br><span class="line">    for<span class="comment">(int i;i&lt;n-1;i++)</span></span><br><span class="line">        <span class="keyword">if</span><span class="comment">(a\[i\]&gt;a\[i+1\])</span></span><br><span class="line">           swap<span class="comment">(a\[i\],a\[i+1\])</span>;  <span class="comment">//进行值交换的库函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line">void bubbleSort<span class="comment">(int a\[\],int n)</span></span><br><span class="line">&#123;</span><br><span class="line">    for<span class="comment">(int i=n;i&gt;1;i--)</span></span><br><span class="line">        bubble<span class="comment">(a,i)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：这里数组的传递要使用指针，否则传递数组值只会最为形参使用，在原值里面不会改变   <img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180502213816.png" alt=""> 折半查找是在一个有序数组中查找元素x。  一定要是有序的序列 算法思想：设置两个端点一个为左端点一个为有端点，先求出当前端点的中值然后和需要求得的值进行比较如何相等则返回它的序号，如果大于则重置左端点为中值+1 然后继续上面的步骤，如果小于则重置右端点为中值—1然后继续上面的步骤 代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> a\[\],<span class="keyword">int</span> n ,<span class="keyword">int</span> x)</span>   <span class="comment">//折半查找的重要前提是需要的一个已经排序好的序列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;  <span class="comment">//数据段最左段</span></span><br><span class="line">    <span class="keyword">int</span> right = n<span class="number">-1</span>;  <span class="comment">//数据段最右端</span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> middle = (left + right) / <span class="number">2</span>;  <span class="comment">//计算出当前中值</span></span><br><span class="line">        <span class="keyword">if</span> (x == a\[middle\])</span><br><span class="line">            <span class="keyword">return</span> middle;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x &gt; a\[middle\])</span><br><span class="line">            left = middle + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            right = middle - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a\[<span class="number">5</span>\]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">-2</span>;</span><br><span class="line">    t = binarySearch(a,<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span>(t == <span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"没有在序列中找到对应的值！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"要查找的值在序列中的序号为:"</span>&lt;&lt;t+<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180502213910.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>折半查找</tag>
        <tag>冒泡排序</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ memset使用</title>
    <url>/2019/01/26/c-memset-shi-yong-1/</url>
    <content><![CDATA[<p>memset 函数是内存赋值函数，用来给某一块内存空间进行赋值的。 其原型是：void* memset(void *_Dst, int  _Val, size_t _Size)   _Dst是目标起始地址，_Val是要赋的值，_Size是要赋值的字节数。 例一：使用memset对字符数组进行快速初始化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> num\[<span class="number">12</span>\];</span><br><span class="line"><span class="built_in">memset</span>(num,<span class="string">'A'</span>,<span class="number">12</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)</span><br><span class="line">   <span class="built_in">cout</span>&lt;&lt;num\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://47.100.4.8/wp-content/uploads/2019/01/QQ%E5%9B%BE%E7%89%8720190126182812.png" alt=""> 要注意：memset是逐字节拷贝的 例二：使用memset初始化整形数组 首先要注意一个int是4个字节，因此在对长度赋值时要*4 代码：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> num1\[<span class="number">12</span>\];</span><br><span class="line">memset(num1,<span class="number">-1</span>,<span class="number">48</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)</span><br><span class="line">    cout&lt;&lt;num1\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2019/01/QQ%E5%9B%BE%E7%89%8720190126183303.png" alt=""> 例三：如果没有*4则话会出现如下问题 代码：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> num1\[<span class="number">12</span>\];</span><br><span class="line">memset(num1,<span class="number">-1</span>,<span class="number">32</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)</span><br><span class="line">    cout&lt;&lt;num1\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">c`ut&lt;&lt;endl;</span><br></pre></td></tr></table></figure>
<p>结果：这里只写了32没有写48 <img src="http://47.100.4.8/wp-content/uploads/2019/01/QQ%E5%9B%BE%E7%89%8720190126183713.png" alt=""> 总之，在memset使用时要千万小心，在给char以外的数组赋值时，只能初始化为0或者-1。</p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>memset</tag>
      </tags>
  </entry>
  <entry>
    <title>C++类中静态成员的使用</title>
    <url>/2018/05/25/c-lei-zhong-jing-tai-cheng-yuan-de-shi-yong-1/</url>
    <content><![CDATA[<p>总结一下C++中类静态成员以及成员函数的使用： 先说一下什么是静态成员，静态成员就是即使在重新声明一个对象时，类中的静态成员不会改变（比如下面代码中的ClientNum即使在声明一个新的对象时，没有发生改变二十继续递增）。ps：个人理解 我认为还是给出一个例子来说明是最好的 代码：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="built_in">CLIENT</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CLIENT</span>()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        ClientNum++;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual ~<span class="built_in">CLIENT</span>()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> ChangeServerName(<span class="keyword">char</span> new_name)  <span class="comment">//改变服务器名称</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">CLIENT</span>::ServerName=new_name;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual <span class="keyword">void</span> print();</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> ClientNum;  <span class="comment">//客户数量计数器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> ServerName;  <span class="comment">//保存服务器名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">CLIENT</span>::ClientNum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">CLIENT</span>::ServerName=<span class="string">'\\0'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">CLIENT</span>::print()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">"  当前服务器名称为："</span>&lt;&lt;<span class="built_in">CLIENT</span>::ServerName&lt;&lt;endl;;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">"  当前用户数量为："</span>&lt;&lt;<span class="built_in">CLIENT</span>::ClientNum&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">"第一个客户到达："</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CLIENT</span> client1;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CLIENT</span>::ChangeServerName(<span class="string">'A'</span>);</span><br><span class="line"></span><br><span class="line">    client1.print();</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">"第二个用户到达："</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CLIENT</span> client2;</span><br><span class="line"></span><br><span class="line">    client1.print();</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">"第三个用户到达并将服务器的名称修改为B:"</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CLIENT</span> client3;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">CLIENT</span>::ChangeServerName(<span class="string">'B'</span>);</span><br><span class="line"></span><br><span class="line">    client1.print();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果为： <img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180525114719.png" alt=""> 接下来对上面的代码进行总结： 静态成员函数： 首先需要注意的是在声明静态成员的类中所有非静态成员函数都需要以virtual开头（虚函数） 格式为：virtual 函数类型 函数名（参数表） {函数体} 然后是静态成员函数的声明，格式为 static 函数类型 函数名（参数表）{函数体} 这里貌似只能在类中对静态成员函数进行声明和定义，在外部定义貌似是需要使用到inline（内联函数）。 在使用静态成员函数时的格式为：类名：：函数名， 而不是通过对象名+点号进行引用。   接下来是静态成员的使用： 声明方面只需要在普通声明之前加上static即可，在使用方面的 格式其实和静态函数的使用相似为 类名：：成员名。对了还有一点需要的注意的是在使用静态成员时需要事先在所有函数外部给成员变量赋初值。格式为： 变量类型 类名：：成员名 = 初值。 这里我还稍微修改了一点内容，由于上面的代码没有在类中声明普通的成员，所以我起初感觉可能声明普通成员时需要特殊的格式，然而在经过我测试之后得到的结果是声明普通的成员变量时，不需要添加任何其他的关键词，正常使用即可。</p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>类</tag>
        <tag>静态成员</tag>
      </tags>
  </entry>
  <entry>
    <title>c++实现创建模板（template）结点类</title>
    <url>/2018/06/08/c-shi-xian-chuang-jian-mo-ban-template-jie-dian-lei-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/4-5.png" alt=""> Node.h头文件 代码：</p>
<figure class="highlight d"><table><tr><td class="code"><pre><span class="line">#ifndef NODE_LIBRARY</span><br><span class="line">#define NODE_LIBRARY</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> Node</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Node&lt;T&gt; *next;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        T data;</span><br><span class="line">        Node (<span class="keyword">const</span> T&amp; item, Node&lt;T&gt;* ptrnext = NULL);</span><br><span class="line">        <span class="keyword">void</span> InsertAfter(Node&lt;T&gt; *p);</span><br><span class="line">        Node&lt;T&gt; *DeleteAfter(<span class="keyword">void</span>);</span><br><span class="line">        Node&lt;T&gt; *NextNode(<span class="keyword">void</span>) <span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line">Node&lt;T&gt;::Node(<span class="keyword">const</span> T&amp; item, Node&lt;T&gt;* ptrnext) :data(item), next(ptrnext)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line">Node&lt;T&gt; *Node&lt;T&gt;::NextNode(<span class="keyword">void</span>) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> Node&lt;T&gt;::InsertAfter(Node&lt;T&gt; *p)</span><br><span class="line">&#123;</span><br><span class="line">    p-&gt;next = next;</span><br><span class="line">    next = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line">Node&lt;T&gt; *Node&lt;T&gt;::DeleteAfter(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">Node&lt;T&gt; *tempPtr = next;</span><br><span class="line">    <span class="keyword">if</span> (next == NULL)</span><br><span class="line">        <span class="keyword">return</span> NULL;</span><br><span class="line">    next = tempPtr-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> tempPtr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line">Node&lt;T&gt; \*GetNode(<span class="keyword">const</span> T&amp; item, Node&lt;T&gt; \*nextPtr = NULL)</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;T&gt;  *newNode;</span><br><span class="line">        newNode = <span class="keyword">new</span> Node&lt;T&gt;(item, nextPtr);</span><br><span class="line">    <span class="keyword">if</span> (newNode == NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        cerr &lt;&lt; <span class="string">"Memory allocation failure!"</span> &lt;&lt; endl;</span><br><span class="line">        exit(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> AppendNewline &#123;noNewline,addNewline&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> PrintList(Node&lt;T&gt; *head, AppendNewline addnl = noNewline)</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;T&gt; *currPtr = head;</span><br><span class="line">    <span class="keyword">while</span>(currPtr != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(addnl == addNewline)</span><br><span class="line">            cout &lt;&lt; currPtr-&gt;data &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cout &lt;&lt; currPtr-&gt;data &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line">        currPtr = currPtr-&gt;NextNode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">int</span> Find(Node&lt;T&gt; \*head, T&amp; item, Node&lt;T&gt;\* &amp;prevPtr)</span><br><span class="line">&#123;</span><br><span class="line">	Node&lt;T&gt; *currPtr = head;</span><br><span class="line">	prevPtr = NULL;</span><br><span class="line">	<span class="keyword">while</span>(currPtr != NULL)</span><br><span class="line">	&#123;</span><br><span class="line">	    <span class="keyword">if</span> (currPtr-&gt;data == item)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        prevPtr = currPtr;</span><br><span class="line">        currPtr = currPtr-&gt;NextNode();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> InsertFront(Node&lt;T&gt;* &amp; head, T item)</span><br><span class="line">&#123;</span><br><span class="line">       head = GetNode(item,head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> InsertRear(Node&lt;T&gt;* &amp; head, <span class="keyword">const</span> T&amp; item)</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;T&gt;  \*newNode, \*currPtr = head;</span><br><span class="line">	    <span class="keyword">if</span> (currPtr == NULL)</span><br><span class="line">            InsertFront(head,item);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(currPtr-&gt;NextNode() != NULL)</span><br><span class="line">            currPtr = currPtr-&gt;NextNode();</span><br><span class="line">        newNode = GetNode(item);</span><br><span class="line">        currPtr-&gt;InsertAfter(newNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> DeleteFront(Node&lt;T&gt;* &amp; head)</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;T&gt; *p = head;</span><br><span class="line">    <span class="keyword">if</span> (head != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        head = head-&gt;NextNode();</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> Delete (Node&lt;T&gt;* &amp; head, T key)</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;T&gt;  \*currPtr = head, \*prevPtr = NULL;</span><br><span class="line">    <span class="keyword">if</span> (currPtr == NULL)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span> (currPtr != NULL &amp;&amp; currPtr-&gt;data != key)</span><br><span class="line">        &#123;</span><br><span class="line">            prevPtr = currPtr;</span><br><span class="line">            currPtr = currPtr-&gt;NextNode();</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span> (currPtr != NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(prevPtr == NULL)</span><br><span class="line">                head = head-&gt;NextNode();</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                prevPtr-&gt;DeleteAfter();</span><br><span class="line">            <span class="keyword">delete</span> currPtr;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> InsertOrder(Node&lt;T&gt;* &amp; head, T item)</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;T&gt; \*currPtr, \*prevPtr, *newNode;</span><br><span class="line">    prevPtr = NULL;</span><br><span class="line">    currPtr = head;</span><br><span class="line">    <span class="keyword">while</span> (currPtr != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="keyword">if</span> (item &lt; currPtr-&gt;data)</span><br><span class="line">	      <span class="keyword">break</span>;</span><br><span class="line">        prevPtr = currPtr;</span><br><span class="line">        currPtr = currPtr-&gt;NextNode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (prevPtr == NULL)</span><br><span class="line">        InsertFront(head,item);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        newNode = GetNode(item);</span><br><span class="line">        prevPtr-&gt;InsertAfter(newNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">void</span> ClearList(Node&lt;T&gt; * &amp;head)</span><br><span class="line">&#123;</span><br><span class="line">    Node&lt;T&gt; \*currPtr, \*nextPtr;</span><br><span class="line">    currPtr = head;</span><br><span class="line">    <span class="keyword">while</span>(currPtr != NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        nextPtr = currPtr-&gt;NextNode();</span><br><span class="line">        <span class="keyword">delete</span> currPtr;</span><br><span class="line">        currPtr = nextPtr;</span><br><span class="line">    &#125;</span><br><span class="line">    head = NULL;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">使用： 代码：</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include <span class="string">"Node.h"</span></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">     Node&lt;<span class="keyword">int</span>&gt; \*head = NULL, \*prevPtr, *delPtr;</span><br><span class="line">    <span class="keyword">int</span> i, key, item;</span><br><span class="line">    cout&lt;&lt;<span class="string">"请输入十个数："</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">	    cin&gt;&gt;item;</span><br><span class="line">           InsertRear(head, item);</span><br><span class="line">	&#125;</span><br><span class="line">      cout &lt;&lt; <span class="string">"创建的结点表为: "</span>;</span><br><span class="line">    PrintList(head,noNewline);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">       cout &lt;&lt; <span class="string">"请输入你想要删除的一个整数: "</span>;</span><br><span class="line">    cin &gt;&gt; key;</span><br><span class="line">    prevPtr = head;</span><br><span class="line">    <span class="keyword">while</span> (Find(head,key,prevPtr) != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="keyword">if</span>(prevPtr == NULL)</span><br><span class="line">         head = head-&gt;NextNode();</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">              delPtr=prevPtr-&gt;DeleteAfter();</span><br><span class="line">      <span class="keyword">delete</span> delPtr;</span><br><span class="line">	&#125;</span><br><span class="line">       cout &lt;&lt; <span class="string">"删除后的结果为: "</span>;</span><br><span class="line">    PrintList(head,noNewline);</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">"查找一个结点是否存在于结点表中(请输入数值)："</span>;</span><br><span class="line">    <span class="keyword">int</span> a,t=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    t=Find(head,a,prevPtr);</span><br><span class="line">    cout&lt;&lt;<span class="string">"结果为："</span>&lt;&lt;(t==<span class="number">1</span>?<span class="string">"存在"</span>:<span class="string">"不存在"</span>)&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">"在表头插入一个数据（输入数值）:"</span>;</span><br><span class="line">    cin&gt;&gt;a;</span><br><span class="line">    InsertFront(head,a);</span><br><span class="line">    cout&lt;&lt;<span class="string">"插入之后的表为："</span>;</span><br><span class="line">    PrintList(head,noNewline);</span><br><span class="line">    cout&lt;&lt;endl&lt;&lt;<span class="string">"开始清除结点表！"</span>&lt;&lt;endl;</span><br><span class="line">    ClearList(head);</span><br><span class="line">    cout&lt;&lt;<span class="string">"成功清除结点表"</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/06/1235.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Template</tag>
      </tags>
  </entry>
  <entry>
    <title>C++动态内存的使用</title>
    <url>/2018/05/04/c-dong-tai-nei-cun-de-shi-yong-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/%E5%9B%BE%E7%89%87150.png" alt=""> 在C<ins>中动态内存分配技术可以保证程序在运行过程中按照实际需要申请适量的内存，使用结果后还会释放，这种在程序运行过程中申请和释放的存储单元也称为堆对象。 在C</ins>程序中建立和删除堆对象使用两个运算符：new和delete   运算符new的功能是动态内存分配，语法形式为： new 数据类型 （初始化参数列表）;   例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *t = <span class="keyword">new</span> <span class="keyword">int</span>;  <span class="comment">//这里是动态的创建了一个整形数据</span></span><br></pre></td></tr></table></figure>
<p>这里需要的注意的是如果格式为：int *t = new int(); 这里的括号为对数据的初始化如果没有则不进行初始化。   使用delete进行对内存的释放。 创建一个动态一维数组：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> *t = new <span class="built_in">int</span>\[<span class="number">5</span>\];  <span class="comment">//这里动态声明了一个一维数组</span></span><br></pre></td></tr></table></figure>
<p>释放一个一维动态数组：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="string">\[\]</span> t;</span><br></pre></td></tr></table></figure>
<p>创建一个动态二维数组</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">int (*t)<span class="symbol">\[</span>5<span class="symbol">\]</span> = new int <span class="symbol">\[</span>5<span class="symbol">\]</span><span class="symbol">\[</span>5<span class="symbol">\]</span>;</span><br></pre></td></tr></table></figure>
<p>释放：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="string">\[\]</span> t;</span><br></pre></td></tr></table></figure>
<p>一维数组用于字符串连接 （这里使用到了cstring头文件的strlen（）得到字符串长度） 代码：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#include&lt;cstring&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *string1 = <span class="keyword">new</span> <span class="keyword">char</span>\[<span class="number">100</span>\];</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">"输入第一个字符串："</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cin.getline(string1,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *string2 = <span class="keyword">new</span> <span class="keyword">char</span>\[<span class="number">100</span>\];</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">"输入第二个字符串："</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cin.getline(string2,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *string3 = <span class="keyword">new</span> <span class="keyword">char</span>\[<span class="number">100</span>\];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用string1连接string2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;strlen(string1)+strlen(string2);i++)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i&lt;strlen(string1))</span><br><span class="line"></span><br><span class="line">                string3\[i\]=string1\[i\];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">                string3\[i\]=string2\[i-strlen(string1)\];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    string3\[strlen(string1)+strlen(string2)\]=<span class="string">'\\0'</span>;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">"字符串连接结果为："</span>&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;string3&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    delete \[\] string1;</span><br><span class="line"></span><br><span class="line">    delete \[\] string2;</span><br><span class="line"></span><br><span class="line">    delete \[\] string3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/1-3.png" alt=""> 这里给出一个使用cstring头文件进行字符串的连接实例： 代码：使用string 声明字符串  + = 是重载的进行字符串连接操作的函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> string1,string2,string3;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入两个字符串二者之间用空格分隔:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;string1&gt;&gt;string2;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"前一个字符串合成后一个字符串:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    string3 = string1+string2;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;string3&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/2-3.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>动态内存</tag>
      </tags>
  </entry>
  <entry>
    <title>C++实现Chomsky文法类型判断</title>
    <url>/2018/11/05/c-shi-xian-chomsky-wen-fa-lei-xing-pan-duan-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/11/123123.png" alt=""> <strong>最近在学编译原理，实验课上也让写了文法类型的判断，这里是我自己写的一个Chomsky文法类型的判断</strong> 主要核心思想： 1.先判断是否属于0型文法（判断依据：α-&gt;β 其中α和β属于（非终结字符∪终结字符）的闭包的话，并且α至少含有一个非终结字符） 2.如果不是0型文法则结束，如果是0型文法的话，判断是否为1型文法（α的长度≤β的长度） 3.如果不是1型文法则结束，如果是1型文法的话，判断是否为2型文法（α是一个非终结字符，β同上的） 4.如果不是2型文法则结束，如果是2型文法的话，判断是否为3型文法（每个产生式的形式都是A-&gt;aB或者A-&gt;a） 5.还添加了右线型3型文法的判断和左线型3型文法的判断   <strong>系统流程图：</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/11/312312.png" alt=""> <strong>代码：</strong></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gramer</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> sentence;</span><br><span class="line">    <span class="keyword">int</span> sl;  <span class="comment">//-&gt;左侧的字符个数</span></span><br><span class="line">    <span class="keyword">int</span> sr;  <span class="comment">//-&gt;右侧的字符个数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Gramer gramer\[<span class="number">20</span>\];</span><br><span class="line"><span class="keyword">int</span> gramerFlag\[<span class="number">20</span>\]\[<span class="number">5</span>\] = &#123;<span class="number">0</span>&#125;; <span class="comment">//用来保存每个产生式的文法类型  第五个值用来标志如果是第3型文法那么他是右线型还是左线型</span></span><br><span class="line"><span class="keyword">int</span> sumnum = <span class="number">0</span>; <span class="comment">//输入的产生式总数</span></span><br><span class="line"><span class="built_in">string</span> Vn = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">string</span> Vt = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据输入和处理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StartAndHandle</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> over;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入规则："</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        sumnum = i+<span class="number">1</span>;</span><br><span class="line">        over = <span class="number">0</span>; <span class="comment">//用来处理如何不是该文法时直接结束本次循环</span></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;gramer\[i\].sentence;</span><br><span class="line">        <span class="keyword">if</span>(gramer\[i\].sentence == <span class="string">"$"</span>)&#123;   <span class="comment">//输入$符号表示规则输入结束</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = gramer\[i\].sentence.length();</span><br><span class="line">        <span class="keyword">int</span> numl = gramer\[i\].sentence.<span class="built_in">find</span>(<span class="string">'-'</span>);</span><br><span class="line">        <span class="keyword">int</span> numr = gramer\[i\].sentence.<span class="built_in">find</span>(<span class="string">'&gt;'</span>);</span><br><span class="line">        gramer\[i\].sl = numl;</span><br><span class="line">        gramer\[i\].sr = length - numr - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//判断是否为0型文法</span></span><br><span class="line">        <span class="keyword">if</span>(gramer\[i\].sl !=<span class="number">0</span> &amp;&amp; gramer\[i\].sr != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//判断是否有左部非终结字符</span></span><br><span class="line">            over = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; gramer\[i\].sl;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(gramer\[i\].sentence\[j\] &gt;= <span class="string">'A'</span> &amp;&amp; gramer\[i\].sentence\[j\] &lt;= <span class="string">'Z'</span>)&#123;</span><br><span class="line">                    over = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(over == <span class="number">0</span>)&#123;</span><br><span class="line">                gramerFlag\[i\]\[<span class="number">0</span>\] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            over = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//是否结束判断</span></span><br><span class="line">        <span class="keyword">if</span>(over == <span class="number">1</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//判断是否为1型文法</span></span><br><span class="line">            <span class="keyword">if</span>((gramer\[i\].sl &lt;= gramer\[i\].sr)&amp;&amp;(length != <span class="number">0</span>))&#123;</span><br><span class="line">                gramerFlag\[i\]\[<span class="number">1</span>\] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                over = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//是否结束判断</span></span><br><span class="line">            <span class="keyword">if</span>(over == <span class="number">1</span>)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//判断是否为2型文法</span></span><br><span class="line">                <span class="keyword">if</span>(gramer\[i\].sl == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(gramer\[i\].sentence\[<span class="number">0</span>\] &lt; <span class="string">'A'</span> || gramer\[i\].sentence\[<span class="number">0</span>\] &gt; <span class="string">'Z'</span>)&#123;</span><br><span class="line">                        over = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(over == <span class="number">0</span>)&#123;</span><br><span class="line">                        gramerFlag\[i\]\[<span class="number">2</span>\] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    over = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//判断是否结束</span></span><br><span class="line">                <span class="keyword">if</span>(over == <span class="number">1</span>)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//判断是否为3型文法</span></span><br><span class="line">                    <span class="keyword">if</span>(gramer\[i\].sr == <span class="number">2</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(gramer\[i\].sentence\[numr+<span class="number">1</span>\] &gt;= <span class="string">'a'</span> &amp;&amp; gramer\[i\].sentence\[numr+<span class="number">1</span>\] &lt;= <span class="string">'z'</span>)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(gramer\[i\].sentence\[numr+<span class="number">2</span>\] &gt;= <span class="string">'A'</span> &amp;&amp; gramer\[i\].sentence\[numr+<span class="number">2</span>\] &lt;= <span class="string">'Z'</span>)&#123;</span><br><span class="line">                                gramerFlag\[i\]\[<span class="number">3</span>\] = <span class="number">1</span>;</span><br><span class="line">                                gramerFlag\[i\]\[<span class="number">4</span>\] = <span class="number">1</span>; <span class="comment">//1表示右线型</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(gramer\[i\].sentence\[numr+<span class="number">1</span>\] &gt;= <span class="string">'A'</span> &amp;&amp; gramer\[i\].sentence\[numr+<span class="number">1</span>\] &lt;= <span class="string">'Z'</span>)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(gramer\[i\].sentence\[numr+<span class="number">2</span>\] &gt;= <span class="string">'a'</span> &amp;&amp; gramer\[i\].sentence\[numr+<span class="number">2</span>\] &lt;= <span class="string">'z'</span>)&#123;</span><br><span class="line">                                gramerFlag\[i\]\[<span class="number">3</span>\] = <span class="number">1</span>;</span><br><span class="line">                                gramerFlag\[i\]\[<span class="number">4</span>\] = <span class="number">2</span>; <span class="comment">//1表示左线型</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(gramer\[i\].sr == <span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">if</span>(gramer\[i\].sentence\[numr+<span class="number">1</span>\] &gt;= <span class="string">'a'</span> &amp;&amp; gramer\[i\].sentence\[numr+<span class="number">1</span>\] &lt;= <span class="string">'z'</span>)&#123;</span><br><span class="line">                                gramerFlag\[i\]\[<span class="number">3</span>\] = <span class="number">1</span>;</span><br><span class="line">                                gramerFlag\[i\]\[<span class="number">4</span>\] = <span class="number">0</span>; <span class="comment">//表示A-&gt;a形式的文法</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求数组中值的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxNum</span><span class="params">(<span class="keyword">int</span> a\[\],<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxs = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a\[i\]&gt;maxs)&#123;</span><br><span class="line">            maxs = a\[i\];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求数组中值的最小值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMinNum</span><span class="params">(<span class="keyword">int</span> a\[\],<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mins = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a\[i\] &lt; mins)&#123;</span><br><span class="line">            mins = a\[i\];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mins;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印一维函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Printer1</span><span class="params">(<span class="keyword">int</span> a\[\],<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印规则函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Printer2</span><span class="params">(Gramer a\[\],<span class="keyword">int</span> num1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num1;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"               "</span>&lt;&lt;a\[i\].sentence&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//规则文法类型的判断</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RuleJudge</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = sumnum <span class="number">-1</span>; <span class="comment">//实际产生式总数</span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>; <span class="comment">//文法类型标志</span></span><br><span class="line">    <span class="keyword">int</span> minFlag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sumFlag\[num\]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; num;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; <span class="number">5</span>;j++)&#123;</span><br><span class="line">            sumFlag\[i\] = sumFlag\[i\] + gramerFlag\[i\]\[j\];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> summin = getMinNum(sumFlag,num) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> summax = getMaxNum(sumFlag,num) - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//三型文法特殊处理</span></span><br><span class="line">    <span class="keyword">if</span>(summin == summax)&#123;</span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是3型文法，既是左线型又是右线型"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是3型右线型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是3型左线型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是2型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是1型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是0型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(summin &lt; summax)&#123;</span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">3</span> &amp;&amp; summax ==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是3型右线型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">3</span> &amp;&amp; summax ==<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是3型左线型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">4</span> &amp;&amp; summax ==<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是3型文法,既不是左线型又是右线型"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(summin == <span class="number">0</span> )</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是0型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span>(summin == <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是1型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span>(summin == <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是2型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(summax &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"不属于任何文法！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">0</span>; <span class="comment">//Vn长度</span></span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">0</span>; <span class="comment">//Vt长度</span></span><br><span class="line"><span class="comment">//辅助查找函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search1</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">    <span class="keyword">if</span>(Vn\[i\] == a)&#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search2</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">    <span class="keyword">if</span>(Vt\[i\] == a)&#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//统计非终结字符和终结字符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TongJi</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = sumnum <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sumnum;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = gramer\[i\].sentence.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(gramer\[i\].sentence\[j\]&gt;=<span class="string">'A'</span> &amp;&amp; gramer\[i\].sentence\[j\]&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Search1(gramer\[i\].sentence\[j\],num1) == <span class="number">1</span> &amp;&amp; gramer\[i\].sentence\[j\] != <span class="string">'-'</span> &amp;&amp; gramer\[i\].sentence\[j\] != <span class="string">'&gt;'</span>)&#123;</span><br><span class="line">                    Vn\[num1\] = gramer\[i\].sentence\[j\];</span><br><span class="line">                    num1++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(gramer\[i\].sentence\[j\]&gt;=<span class="string">'a'</span> &amp;&amp; gramer\[i\].sentence\[j\]&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Search2(gramer\[i\].sentence\[j\],num2) == <span class="number">1</span> &amp;&amp; gramer\[i\].sentence\[j\] != <span class="string">'-'</span> &amp;&amp; gramer\[i\].sentence\[j\] != <span class="string">'&gt;'</span>)&#123;</span><br><span class="line">                    Vt\[num2\] = gramer\[i\].sentence\[j\];</span><br><span class="line">                    num2++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StartAndHandle();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"打印输入的规则:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    Printer2(gramer,sumnum<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    RuleJudge();</span><br><span class="line">    TongJi();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"非终结字符集合："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"              Vn= "</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;num1;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;Vn\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"终结字符集合："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"            Vt= "</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;num2;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;Vt\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结果：</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/11/13433213123.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/11/123123123123.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Chomsky</tag>
        <tag>文法类型判断</tag>
        <tag>grammar</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 实现大数的加减乘除</title>
    <url>/2019/02/07/c-shi-xian-da-shu-de-jia-jian-cheng-chu-1/</url>
    <content><![CDATA[<p>这里采用了string来存储大数，其实之前还考虑了使用数组来存储但是感觉操作不如string所以最终还是采用了string来存储。 1.大数的加法： 核心思想：主要是将两个大数逐位相加（从低位到高），若相加的结果大于10则采用取余的方法来得到当前位的值，然后使用除来得到进位。 代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">BigNumberAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2,result(<span class="number">10000</span>,<span class="string">'0'</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">    reverse(s2.<span class="built_in">begin</span>(),s2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        result\[i\] = s1\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s2.length();i++)&#123;</span><br><span class="line">        temp += (result\[i\]-<span class="string">'0'</span> + s2\[i\] -<span class="string">'0'</span>);</span><br><span class="line">        result\[i\] = temp%<span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">        temp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    result\[s2.length()\] = (result\[s2.length()\]-<span class="string">'0'</span>) + temp + <span class="string">'0'</span>;</span><br><span class="line">    reverse(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> result.substr(result.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> result;</span><br><span class="line">    result = BigNumberAdd();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>大数的减法 核心思想：首先要注意的是要保证是大数减小数（都是绝对值），然后在结果出添加适当的负号即可，从低位到高位逐位相减，如果不够则从前以为借位然后加<span class="number">10</span>在相减。特别要注意对相等情况的处理（在这里被坑了因为后面除法时也用到了减法 咕~QAQ） 代码：</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getBiggerOne</span><span class="params">(<span class="built_in">string</span> s1,<span class="built_in">string</span> s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(s1.length() &gt; s2.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s1.length() &lt; s2.length())&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1\[i\] != s2\[i\])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp1,temp2;</span><br><span class="line">                temp1 = s1\[i\] - <span class="string">'0'</span>;</span><br><span class="line">                temp2 = s2\[i\] - <span class="string">'0'</span>;</span><br><span class="line">                <span class="keyword">if</span>(temp1 &gt; temp2)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">BigNumberJian</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2,result(<span class="number">10000</span>,<span class="string">'0'</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    <span class="keyword">if</span>(s1 == s2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag = getBiggerOne(s1,s2);</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        swap(s1,s2);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;"3"&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">    reverse(s2.<span class="built_in">begin</span>(),s2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">//cout&lt;&lt;s1&lt;&lt;" "&lt;&lt;s2&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        result\[i\] = s1\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s2.length();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp1,temp2;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;"1"&lt;&lt;endl;</span></span><br><span class="line">        temp1 = result\[i\] - <span class="string">'0'</span>;</span><br><span class="line">        temp2 = s2\[i\] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp1 &gt;= temp2)&#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;"1"&lt;&lt;endl;</span></span><br><span class="line">            result\[i\] = temp1 - temp2 + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;"2"&lt;&lt;endl;</span></span><br><span class="line">            result\[i+<span class="number">1</span>\] = result\[i+<span class="number">1</span>\] - <span class="string">'0'</span> - <span class="number">1</span> + <span class="string">'0'</span>;</span><br><span class="line">            result\[i\] = result\[i\] - <span class="string">'0'</span> + <span class="number">10</span> - (s2\[i\]-<span class="string">'0'</span>) + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">    result = result.substr(result.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>));</span><br><span class="line">    <span class="comment">//负号判断</span></span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        reverse(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">        result += <span class="string">'-'</span>;</span><br><span class="line">        reverse(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> result;</span><br><span class="line">    result = BigNumberJian();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">3.</span>大数的乘法 核心思想：这里主要参考了Comba乘法原理，具体这里：[https:<span class="comment">//www.cnblogs.com/starrybird/p/4419444.html](https://www.cnblogs.com/starrybird/p/4419444.html) 大体上的乘法过程同样是基于笔算乘法的思路来进行的，只不过先不考虑进位，先将每一行乘出来，然后将每一列加起来然后求取得到当前位的值并且使用除的来得到进位。 ![](http://47.100.4.8/wp-content/uploads/2019/02/QQ图片20190207122305.png)   代码：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">BigNumberMult</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2,s(<span class="number">10000</span>,<span class="string">'0'</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">    reverse(s2.<span class="built_in">begin</span>(),s2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s2.length();j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = (s1\[i\] - <span class="string">'0'</span>) * (s2\[j\] - <span class="string">'0'</span>);</span><br><span class="line">            s\[i+j+<span class="number">1</span>\] = s\[i+j+<span class="number">1</span>\] - <span class="string">'0'</span> + (s\[i+j\] - <span class="string">'0'</span> + temp) / <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">            s\[i+j\] = (s\[i+j\] - <span class="string">'0'</span> + temp) % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>) == <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.substr(s.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> result;</span><br><span class="line">    result = BigNumberMult();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>大数的除法（这里用到了之前编写的大数减法） 核心思想：这里主要是使用相减来得到最后的商和余数的，如 <span class="number">22</span> <span class="number">-20</span> =<span class="number">2</span> 由于减了一次所以商是<span class="number">1</span> 余数为<span class="number">2</span>  但是若为<span class="number">333333</span> - <span class="number">3</span> 则要进行很多次减法运算，这样时空复杂度都会大大的提高，所以这里采用补<span class="number">0</span>的减法，如：<span class="number">222</span> - <span class="number">3</span> 可以先进行 <span class="number">222</span> - <span class="number">300</span> 得到一个负数 则最高位为<span class="number">0</span>，然后进行<span class="number">222</span> - <span class="number">30</span> 进行了<span class="number">7</span>次相减 则次高位为<span class="number">7</span> 然后用减完的数再次进行 减法 <span class="number">12</span> <span class="number">-3</span> 进行了<span class="number">4</span>次相减 所以得到了商为<span class="number">74</span>。 代码：</span><br><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;<span class="built_in">string</span>.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getBiggerOne</span><span class="params">(<span class="built_in">string</span> s1,<span class="built_in">string</span> s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(s1.length() &gt; s2.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s1.length() &lt; s2.length())&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1\[i\] != s2\[i\])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp1,temp2;</span><br><span class="line">                temp1 = s1\[i\] - <span class="string">'0'</span>;</span><br><span class="line">                temp2 = s2\[i\] - <span class="string">'0'</span>;</span><br><span class="line">                <span class="keyword">if</span>(temp1 &gt; temp2)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">BigNumberJian</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2,result(<span class="number">10000</span>,<span class="string">'0'</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    <span class="keyword">if</span>(s1 == s2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag = getBiggerOne(s1,s2);</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        swap(s1,s2);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;"3"&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">    reverse(s2.<span class="built_in">begin</span>(),s2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">//cout&lt;&lt;s1&lt;&lt;" "&lt;&lt;s2&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        result\[i\] = s1\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s2.length();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp1,temp2;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;"1"&lt;&lt;endl;</span></span><br><span class="line">        temp1 = result\[i\] - <span class="string">'0'</span>;</span><br><span class="line">        temp2 = s2\[i\] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp1 &gt;= temp2)&#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;"1"&lt;&lt;endl;</span></span><br><span class="line">            result\[i\] = temp1 - temp2 + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;"2"&lt;&lt;endl;</span></span><br><span class="line">            result\[i+<span class="number">1</span>\] = result\[i+<span class="number">1</span>\] - <span class="string">'0'</span> - <span class="number">1</span> + <span class="string">'0'</span>;</span><br><span class="line">            result\[i\] = result\[i\] - <span class="string">'0'</span> + <span class="number">10</span> - (s2\[i\]-<span class="string">'0'</span>) + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">    result = result.substr(result.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>));</span><br><span class="line">    <span class="comment">//负号判断</span></span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        reverse(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">        result += <span class="string">'-'</span>;</span><br><span class="line">        reverse(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> result;</span><br><span class="line">    result = BigNumberJian();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>大数加减乘除</tag>
      </tags>
  </entry>
  <entry>
    <title>C++实现大数自减和判断为零</title>
    <url>/2019/01/26/c-shi-xian-da-shu-zi-jian-he-pan-duan-wei-ling-1/</url>
    <content><![CDATA[<p>这里我采用了一个比较简单的思想，主要是先用字符串存储大数，然后将其转换存储到一个数组中。 这里面实现自减比较简单，也是为了满足一个对于输入数据个数没有上限的问题的需求，自减是为了实现数据的输入，然后判断零来结束输入。其他的一些操作也在上面的改进，对于加法进位的话可以考虑采用队列来存储数据。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//自减</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zijian</span><span class="params">(<span class="keyword">int</span> n\[\],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = len;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((n\[t\]<span class="number">-1</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            n\[t\]--;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            n\[t\] = <span class="number">9</span>;</span><br><span class="line">            t--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(flag!=<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否为零</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equalZero</span><span class="params">(<span class="keyword">int</span> n\[\],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n\[i\]!=<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> number;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;number;</span><br><span class="line">    <span class="keyword">int</span> BigNum\[number.length()\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=number.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        BigNum\[i\] = number\[i\] - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    zijian(BigNum,number.length()<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;number.length();i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;BigNum\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Is 0?:"</span>;</span><br><span class="line">    <span class="keyword">if</span>(equalZero(BigNum,number.length())==<span class="number">1</span>)&#123;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">使用： ![](http:<span class="comment">//47.100.4.8/wp-content/uploads/2019/01/QQ图片20190126181320.png) 下面给出一个实现大数各种操作的C++类：</span></span><br><span class="line"></span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;iomanip&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;cstdlib&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">#define MAXN <span class="number">9999</span></span><br><span class="line">#define MAXSIZE <span class="number">1000</span></span><br><span class="line">#define DLEN <span class="number">4</span></span><br><span class="line"></span><br><span class="line">class BigNum</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> a\[MAXSIZE\];    <span class="comment">//可以控制大数的位数</span></span><br><span class="line">    <span class="keyword">int</span> len;       <span class="comment">//大数长度</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BigNum()&#123; len = <span class="number">1</span>;<span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a)); &#125;   <span class="comment">//构造函数</span></span><br><span class="line">    BigNum(<span class="keyword">const</span> <span class="keyword">int</span>);       <span class="comment">//将一个int类型的变量转化为大数</span></span><br><span class="line">    BigNum(<span class="keyword">const</span> <span class="keyword">char</span>*);     <span class="comment">//将一个字符串类型的变量转化为大数</span></span><br><span class="line">    BigNum(<span class="keyword">const</span> BigNum &amp;);  <span class="comment">//拷贝构造函数</span></span><br><span class="line">    BigNum &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> BigNum &amp;);   <span class="comment">//重载赋值运算符，大数之间进行赋值运算</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp;,  BigNum&amp;);   <span class="comment">//重载输入运算符</span></span><br><span class="line">    <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp;,  BigNum&amp;);   <span class="comment">//重载输出运算符</span></span><br><span class="line"></span><br><span class="line">    BigNum <span class="keyword">operator</span>+(<span class="keyword">const</span> BigNum &amp;) <span class="keyword">const</span>;   <span class="comment">//重载加法运算符，两个大数之间的相加运算</span></span><br><span class="line">    BigNum <span class="keyword">operator</span>-(<span class="keyword">const</span> BigNum &amp;) <span class="keyword">const</span>;   <span class="comment">//重载减法运算符，两个大数之间的相减运算</span></span><br><span class="line">    BigNum <span class="keyword">operator</span>*(<span class="keyword">const</span> BigNum &amp;) <span class="keyword">const</span>;   <span class="comment">//重载乘法运算符，两个大数之间的相乘运算</span></span><br><span class="line">    BigNum <span class="keyword">operator</span>/(<span class="keyword">const</span> <span class="keyword">int</span>   &amp;) <span class="keyword">const</span>;    <span class="comment">//重载除法运算符，大数对一个整数进行相除运算</span></span><br><span class="line"></span><br><span class="line">    BigNum <span class="keyword">operator</span>^(<span class="keyword">const</span> <span class="keyword">int</span>  &amp;) <span class="keyword">const</span>;    <span class="comment">//大数的n次方运算</span></span><br><span class="line">    <span class="keyword">int</span>    <span class="keyword">operator</span>%(<span class="keyword">const</span> <span class="keyword">int</span>  &amp;) <span class="keyword">const</span>;    <span class="comment">//大数对一个int类型的变量进行取模运算</span></span><br><span class="line">    <span class="keyword">bool</span>   <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> BigNum &amp; T)<span class="keyword">const</span>;   <span class="comment">//大数和另一个大数的大小比较</span></span><br><span class="line">    <span class="keyword">bool</span>   <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> <span class="keyword">int</span> &amp; t)<span class="keyword">const</span>;      <span class="comment">//大数和一个int类型的变量的大小比较</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="built_in">print</span>();       <span class="comment">//输出大数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">BigNum::BigNum(<span class="keyword">const</span> <span class="keyword">int</span> b)     <span class="comment">//将一个int类型的变量转化为大数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> c,d = b;</span><br><span class="line">    len = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">while</span>(d &gt; MAXN)</span><br><span class="line">    &#123;</span><br><span class="line">        c = d - (d / (MAXN + <span class="number">1</span>)) * (MAXN + <span class="number">1</span>);</span><br><span class="line">        d = d / (MAXN + <span class="number">1</span>);</span><br><span class="line">        a\[len++\] = c;</span><br><span class="line">    &#125;</span><br><span class="line">    a\[len++\] = d;</span><br><span class="line">&#125;</span><br><span class="line">BigNum::BigNum(<span class="keyword">const</span> <span class="keyword">char</span>*s)     <span class="comment">//将一个字符串类型的变量转化为大数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> t,k,index,l,i;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    l=<span class="built_in">strlen</span>(s);</span><br><span class="line">    len=l/DLEN;</span><br><span class="line">    <span class="keyword">if</span>(l%DLEN)</span><br><span class="line">        len++;</span><br><span class="line">    index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=l<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i-=DLEN)</span><br><span class="line">    &#123;</span><br><span class="line">        t=<span class="number">0</span>;</span><br><span class="line">        k=i-DLEN+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(k&lt;<span class="number">0</span>)</span><br><span class="line">            k=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=k;j&lt;=i;j++)</span><br><span class="line">            t=t*<span class="number">10</span>+s\[j\]-<span class="string">'0'</span>;</span><br><span class="line">        a\[index++\]=t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">BigNum::BigNum(<span class="keyword">const</span> BigNum &amp; T) : len(T.len)  <span class="comment">//拷贝构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; len ; i++)</span><br><span class="line">        a\[i\] = T.a\[i\];</span><br><span class="line">&#125;</span><br><span class="line">BigNum &amp; BigNum::<span class="keyword">operator</span>=(<span class="keyword">const</span> BigNum &amp; n)   <span class="comment">//重载赋值运算符，大数之间进行赋值运算</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    len = n.len;</span><br><span class="line">    <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; len ; i++)</span><br><span class="line">        a\[i\] = n.a\[i\];</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; in,  BigNum &amp; b)   <span class="comment">//重载输入运算符</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> ch\[MAXSIZE*<span class="number">4</span>\];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">-1</span>;</span><br><span class="line">    in&gt;&gt;ch;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">strlen</span>(ch);</span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=l<span class="number">-1</span>;i&gt;=<span class="number">0</span>;)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>&amp;&amp;i&gt;=<span class="number">0</span>;j++,i--,t*=<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=(ch\[i\]-<span class="string">'0'</span>)*t;</span><br><span class="line">        &#125;</span><br><span class="line">        b.a\[count\]=sum;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    b.len =count++;</span><br><span class="line">    <span class="keyword">return</span> in;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*ostream&amp; operator&lt;&lt;(ostream&amp; out,  BigNum&amp; b)   //重载输出运算符</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    int i;</span></span><br><span class="line"><span class="comment">    cout &lt;&lt; b.a\[b.len - 1\];</span></span><br><span class="line"><span class="comment">    for(i = b.len - 2 ; i &gt;= 0 ; i--)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        cout.width(DLEN);</span></span><br><span class="line"><span class="comment">        cout.fill('0');</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; b.a\[i\];</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return out;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>+(<span class="keyword">const</span> BigNum &amp; T) <span class="keyword">const</span>   <span class="comment">//两个大数之间的相加运算</span></span><br><span class="line">&#123;</span><br><span class="line">    BigNum t(*<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">int</span> i,big;      <span class="comment">//位数</span></span><br><span class="line">    big = T.len &gt; len ? T.len : len;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; big ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t.a\[i\] +=T.a\[i\];</span><br><span class="line">        <span class="keyword">if</span>(t.a\[i\] &gt; MAXN)</span><br><span class="line">        &#123;</span><br><span class="line">            t.a\[i + <span class="number">1</span>\]++;</span><br><span class="line">            t.a\[i\] -=MAXN+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(t.a\[big\] != <span class="number">0</span>)</span><br><span class="line">        t.len = big + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t.len = big;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>-(<span class="keyword">const</span> BigNum &amp; T) <span class="keyword">const</span>   <span class="comment">//两个大数之间的相减运算</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,big;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    BigNum t1,t2;</span><br><span class="line">    <span class="keyword">if</span>(*<span class="keyword">this</span>&gt;T)</span><br><span class="line">    &#123;</span><br><span class="line">        t1=*<span class="keyword">this</span>;</span><br><span class="line">        t2=T;</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        t1=T;</span><br><span class="line">        t2=*<span class="keyword">this</span>;</span><br><span class="line">        flag=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    big=t1.len;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; big ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(t1.a\[i\] &lt; t2.a\[i\])</span><br><span class="line">        &#123;</span><br><span class="line">            j = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(t1.a\[j\] == <span class="number">0</span>)</span><br><span class="line">                j++;</span><br><span class="line">            t1.a\[j--\]--;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; i)</span><br><span class="line">                t1.a\[j--\] += MAXN;</span><br><span class="line">            t1.a\[i\] += MAXN + <span class="number">1</span> - t2.a\[i\];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            t1.a\[i\] -= t2.a\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    t1.len = big;</span><br><span class="line">    <span class="keyword">while</span>(t1.a\[len - <span class="number">1</span>\] == <span class="number">0</span> &amp;&amp; t1.len &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t1.len--;</span><br><span class="line">        big--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)</span><br><span class="line">        t1.a\[big<span class="number">-1</span>\]=<span class="number">0</span>-t1.a\[big<span class="number">-1</span>\];</span><br><span class="line">    <span class="keyword">return</span> t1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>*(<span class="keyword">const</span> BigNum &amp; T) <span class="keyword">const</span>   <span class="comment">//两个大数之间的相乘运算</span></span><br><span class="line">&#123;</span><br><span class="line">    BigNum ret;</span><br><span class="line">    <span class="keyword">int</span> i,j,up;</span><br><span class="line">    <span class="keyword">int</span> temp,temp1;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span> ; i &lt; len ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        up = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span> ; j &lt; T.len ; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = a\[i\] * T.a\[j\] + ret.a\[i + j\] + up;</span><br><span class="line">            <span class="keyword">if</span>(temp &gt; MAXN)</span><br><span class="line">            &#123;</span><br><span class="line">                temp1 = temp - temp / (MAXN + <span class="number">1</span>) * (MAXN + <span class="number">1</span>);</span><br><span class="line">                up = temp / (MAXN + <span class="number">1</span>);</span><br><span class="line">                ret.a\[i + j\] = temp1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                up = <span class="number">0</span>;</span><br><span class="line">                ret.a\[i + j\] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(up != <span class="number">0</span>)</span><br><span class="line">            ret.a\[i + j\] = up;</span><br><span class="line">    &#125;</span><br><span class="line">    ret.len = i + j;</span><br><span class="line">    <span class="keyword">while</span>(ret.a\[ret.len - <span class="number">1</span>\] == <span class="number">0</span> &amp;&amp; ret.len &gt; <span class="number">1</span>)</span><br><span class="line">        ret.len--;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>/(<span class="keyword">const</span> <span class="keyword">int</span> &amp; b) <span class="keyword">const</span>   <span class="comment">//大数对一个整数进行相除运算</span></span><br><span class="line">&#123;</span><br><span class="line">    BigNum ret;</span><br><span class="line">    <span class="keyword">int</span> i,down = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = len - <span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        ret.a\[i\] = (a\[i\] + down * (MAXN + <span class="number">1</span>)) / b;</span><br><span class="line">        down = a\[i\] + down * (MAXN + <span class="number">1</span>) - ret.a\[i\] * b;</span><br><span class="line">    &#125;</span><br><span class="line">    ret.len = len;</span><br><span class="line">    <span class="keyword">while</span>(ret.a\[ret.len - <span class="number">1</span>\] == <span class="number">0</span> &amp;&amp; ret.len &gt; <span class="number">1</span>)</span><br><span class="line">        ret.len--;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> BigNum::<span class="keyword">operator</span> %(<span class="keyword">const</span> <span class="keyword">int</span> &amp; b) <span class="keyword">const</span>    <span class="comment">//大数对一个int类型的变量进行取模运算</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i,d=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = len<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        d = ((d * (MAXN+<span class="number">1</span>))% b + a\[i\])% b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">BigNum BigNum::<span class="keyword">operator</span>^(<span class="keyword">const</span> <span class="keyword">int</span> &amp; n) <span class="keyword">const</span>    <span class="comment">//大数的n次方运算</span></span><br><span class="line">&#123;</span><br><span class="line">    BigNum t,ret(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">int</span> m=n;</span><br><span class="line">    <span class="keyword">while</span>(m&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t=*<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>( i=<span class="number">1</span>;i&lt;&lt;<span class="number">1</span>&lt;=m;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            t=t*t;</span><br><span class="line">        &#125;</span><br><span class="line">        m-=i;</span><br><span class="line">        ret=ret*t;</span><br><span class="line">        <span class="keyword">if</span>(m==<span class="number">1</span>)</span><br><span class="line">            ret=ret*(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> BigNum::<span class="keyword">operator</span>&gt;(<span class="keyword">const</span> BigNum &amp; T) <span class="keyword">const</span>   <span class="comment">//大数和另一个大数的大小比较</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> ln;</span><br><span class="line">    <span class="keyword">if</span>(len &gt; T.len)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(len == T.len)</span><br><span class="line">    &#123;</span><br><span class="line">        ln = len - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(a\[ln\] == T.a\[ln\] &amp;&amp; ln &gt;= <span class="number">0</span>)</span><br><span class="line">            ln--;</span><br><span class="line">        <span class="keyword">if</span>(ln &gt;= <span class="number">0</span> &amp;&amp; a\[ln\] &gt; T.a\[ln\])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> BigNum::<span class="keyword">operator</span> &gt;(<span class="keyword">const</span> <span class="keyword">int</span> &amp; t) <span class="keyword">const</span>    <span class="comment">//大数和一个int类型的变量的大小比较</span></span><br><span class="line">&#123;</span><br><span class="line">    BigNum b(t);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BigNum::<span class="built_in">print</span>()    <span class="comment">//输出大数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; a\[len - 1\];</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,a\[len<span class="number">-1</span>\]);</span><br><span class="line">    <span class="keyword">for</span>(i = len - <span class="number">2</span> ; i &gt;= <span class="number">0</span> ; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/*cout.width(DLEN);</span></span><br><span class="line"><span class="comment">        cout.fill('0');</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; a\[i\];*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%04d"</span>,a\[i\]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout &lt;&lt; endl;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>大数自减</tag>
      </tags>
  </entry>
  <entry>
    <title>C++实现模板（template）实现队列类</title>
    <url>/2018/06/13/c-shi-xian-mo-ban-template-shi-xian-dui-lie-lei-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/%E5%9B%BE%E7%89%87150.png" alt="">   queue.h头文件 代码：</p>
<p>#ifndef QUEUE_CLASS<br>
#define QUEUE_CLASS<br>
#include <iostream><br>
#include <cstdlib><br>
#include “LinkedList.h”</p>
<p>using namespace std;</p>
<p>template <class T><br>
class Queue<br>
{<br>
private:<br>
LinkedList<T> queueList;<br>
public:<br>
Queue(void);<br>
void QInsert(const T&amp; elt);<br>
T QDelete(void);<br>
T QFront(void);<br>
int QLength(void) const;<br>
int QEmpty(void) const;<br>
void QClear(void);<br>
};<br>
template <class T><br>
Queue<T>::Queue(void)<br>
{}<br>
template <class T><br>
int Queue<T>::QLength(void) const<br>
{<br>
return queueList.ListSize();<br>
}<br>
template <class T><br>
int Queue<T>::QEmpty(void) const<br>
{<br>
return queueList.ListEmpty();<br>
}<br>
template <class T><br>
void Queue<T>::QClear(void)<br>
{<br>
queueList.ClearList();<br>
}<br>
template <class T><br>
void Queue<T>::QInsert(const T&amp; elt)<br>
{<br>
queueList.InsertRear(elt);<br>
}<br>
template <class T><br>
T Queue<T>::QDelete(void)<br>
{<br>
if (queueList.ListEmpty())<br>
{<br>
cerr &lt;&lt; “Calling QDelete for an empty queue!” &lt;&lt; endl;<br>
exit(1);<br>
}<br>
return queueList.DeleteFront();<br>
}<br>
template <class T><br>
T Queue<T>::QFront(void)<br>
{<br>
if (queueList.ListEmpty())<br>
{<br>
cerr &lt;&lt; “Calling QFront for an empty queue!” &lt;&lt; endl;<br>
exit(1);<br>
}<br>
queueList.Reset();<br>
return queueList.Data();<br>
}<br>
#endif</p>
<p>使用：</p>
<p>#include “queue.h”<br>
#include<iostream></p>
<p>using namespace std;<br>
int main()<br>
{<br>
Queue<int> A;<br>
cout&lt;&lt;“输入6个数值用来创建队列:”;<br>
int a=0;<br>
for(int i=0;i&lt;=5;i++)<br>
{<br>
cin&gt;&gt;a;<br>
A.QInsert(a);<br>
}<br>
cout&lt;&lt;“创建成功！”&lt;&lt;endl;<br>
cout &lt;&lt; “显示队列中的所有元素为：” ;<br>
while(!A.QEmpty())<br>
{<br>
cout &lt;&lt; A.QFront() &lt;&lt; &quot;   &quot;;<br>
A.QDelete();<br>
}<br>
cout&lt;&lt;endl;<br>
cout&lt;&lt;“判断队列是否为空：”&lt;&lt;(A.QEmpty()==0?“为空”:“不为空”)&lt;&lt;endl;<br>
cout &lt;&lt; endl;<br>
cout&lt;&lt;“开始清空队列！”&lt;&lt;endl;<br>
A.QClear();<br>
cout&lt;&lt;“队列成功清空！”&lt;&lt;endl;<br>
return 0;<br>
}</p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
  </entry>
  <entry>
    <title>C++实现银行家算法</title>
    <url>/2018/05/19/c-shi-xian-yin-xing-jia-suan-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180519215119.png" alt=""> 设计一个n个并发进程共享m个系统资源的程序实现银行家算法。要求包含：    (1) 能显示当前系统资源的占用和剩余情况； (2) 进程提出资源请求，如何可以满足则分配，如果不可以满足则阻塞。 (3) 将银行家算法和随机算法进行比较。 银行家算法 在避免死锁的方法中，所施加的限制条件较弱，有可能获得令人满意的系统性能。在该方法中把系统的状态分为安全状态和不安全状态，只要能使系统始终都处于安全状态，便可以避免发生死锁。 银行家算法的基本思想是分配资源之前，判断系统是否是安全的；若是，才分配。它是最具有代表性的避免死锁的算法。 设进程process提出请求REQUEST [i]，则银行家算法按如下规则进行判断。 (1)如果REQUEST [cusneed] [i]&lt;= NEED[cusneed][i]，则转（2)；否则，出错。 (2)如果REQUEST [cusneed] [i]&lt;= AVAILABLE[i]，则转（3)；否则，等待。 (3)系统试探分配资源，修改相关数据： AVAILABLE[i]-=REQUEST[cusneed][i]; ALLOCATION[cusneed][i]+=REQUEST[cusneed][i]; NEED[cusneed][i]-=REQUEST[cusneed][i]; (4)系统执行安全性检查，如安全，则分配成立；否则试探险性分配作废，系统恢复原状，进程等待。 安全性检查算法 （1）设置两个工作向量Work=AVAILABLE;FINISH （2）从进程集合中找到一个满足下述条件的进程， FINISH==false; NEED&lt;=Work; 如找到，执行（3)；否则，执行（4)   （3）设进程获得资源，可顺利执行，直至完成，从而释放资源。 Work=Work+ALLOCATION; Finish=true; GOTO 2 流程图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/%E4%B8%BB%E7%A8%8B%E5%BA%8F%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="">   代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> process 5 <span class="comment">//并发进程数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> resource 3 <span class="comment">//资源种数</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//PCB模块结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PCB</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Name;  <span class="comment">//进程名</span></span><br><span class="line">    <span class="keyword">char</span> State;  <span class="comment">//状态  R为就绪 N为没有就绪</span></span><br><span class="line">    <span class="keyword">int</span> Request\[resource\];  <span class="comment">//对资源的申请量</span></span><br><span class="line">    <span class="keyword">int</span> Need\[resource\];  <span class="comment">//资源的需求总量</span></span><br><span class="line">    <span class="keyword">int</span> Allocation\[resource\];  <span class="comment">//对于资源的占有量</span></span><br><span class="line">    <span class="keyword">int</span> Max\[resource\]; <span class="comment">//对资源的最大需求量</span></span><br><span class="line">    <span class="keyword">int</span> Wa\[resource\];  <span class="comment">//Work+Allocation的需求量</span></span><br><span class="line">    <span class="keyword">int</span> ZY\[resource\]; <span class="comment">//Work资源值</span></span><br><span class="line">    <span class="keyword">bool</span> Finish;  <span class="comment">//能执行完标志</span></span><br><span class="line">&#125;<span class="built_in">Process</span>\[<span class="built_in">process</span>\],Process_back\[<span class="built_in">process</span>\];</span><br><span class="line"><span class="comment">//Process_back\[process\] 作为预分配的备份数据 以便于恢复</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Available</span>&#123;</span>  <span class="comment">//资源模块</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">available</span>;  <span class="comment">//资源数目</span></span><br><span class="line">    <span class="keyword">int</span> work;  <span class="comment">//工作向量</span></span><br><span class="line">&#125;Resource\[resource\],Resource_back\[resource\];</span><br><span class="line"></span><br><span class="line"><span class="comment">//Resource_back\[resource\] 作为预分配的备份数据 以便于恢复</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a\[resource\]; <span class="comment">//临时数组</span></span><br><span class="line"><span class="keyword">int</span> safelist\[<span class="built_in">process</span>\];  <span class="comment">//安全序列</span></span><br><span class="line"><span class="keyword">int</span> p_num=<span class="number">0</span>;  <span class="comment">//当前完成的进程数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowZiYuan</span><span class="params">()</span>  <span class="comment">//绘制进程数据图</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前进程数据图："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"  进程名            Max            Allocation            Need            状态"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">process</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Process"</span>&lt;&lt;<span class="built_in">Process</span>\[i\].Name;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"           "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;resource;j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">Process</span>\[i\].Max\[j\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"           "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;resource;j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">Process</span>\[i\].Allocation\[j\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"              "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;resource;j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">Process</span>\[i\].Need\[j\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"           "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">Process</span>\[i\].State&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span>  <span class="comment">//初始化所有数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Maxs\[<span class="built_in">process</span>\]\[resource\]=&#123; &#123;<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>&#125;,&#123;<span class="number">9</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;,&#123;<span class="number">4</span>,<span class="number">3</span>,<span class="number">3</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> Allocations\[<span class="built_in">process</span>\]\[resource\]=&#123; &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">process</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Process</span>\[i\].Name=i+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">Process</span>\[i\].State=<span class="string">'R'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;resource;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">Process</span>\[i\].Request\[j\]=<span class="number">0</span>;</span><br><span class="line">                <span class="built_in">Process</span>\[i\].Wa\[j\]=<span class="number">0</span>;</span><br><span class="line">                <span class="built_in">Process</span>\[i\].ZY\[j\]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">Process</span>\[i\].Finish=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;resource;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">Process</span>\[i\].Max\[j\]=Maxs\[i\]\[j\];</span><br><span class="line">            <span class="built_in">Process</span>\[i\].Allocation\[j\]=Allocations\[i\]\[j\];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;resource;j++)</span><br><span class="line">            <span class="built_in">Process</span>\[i\].Need\[j\]=<span class="built_in">Process</span>\[i\].Max\[j\]-<span class="built_in">Process</span>\[i\].Allocation\[j\];</span><br><span class="line">    &#125;</span><br><span class="line">    Resource\[<span class="number">0</span>\].<span class="built_in">available</span> = <span class="number">10</span>;</span><br><span class="line">    Resource\[<span class="number">1</span>\].<span class="built_in">available</span> = <span class="number">12</span>;</span><br><span class="line">    Resource\[<span class="number">2</span>\].<span class="built_in">available</span> = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowSafeList</span><span class="params">()</span>  <span class="comment">//显示安全序列</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"安全序列为："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">process</span><span class="number">-1</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;safelist\[i\]&lt;&lt;<span class="string">"-&gt;"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;safelist\[<span class="built_in">process</span><span class="number">-1</span>\]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowYuFen</span><span class="params">()</span>  <span class="comment">//绘制成功预分配图</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"成功预分配图"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"  进程名            Work            Need            Allocation            Work+Allocation            Finish"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">process</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Process"</span>&lt;&lt;<span class="built_in">Process</span>\[i\].Name;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"           "</span>;</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;resource;j++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;a\[j\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"           "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;resource;j++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">Process</span>\[i\].ZY\[j\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"           "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;resource;j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">Process</span>\[i\].Need\[j\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"           "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;resource;j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">Process</span>\[i\].Allocation\[j\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"                "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;resource;j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">Process</span>\[i\].Wa\[j\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"                 "</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Process</span>\[i\].Finish == <span class="number">1</span>)</span><br><span class="line">           <span class="built_in">cout</span>&lt;&lt;<span class="string">"true"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"false"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    ShowSafeList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BackUp</span><span class="params">()</span>  <span class="comment">//数据备份</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">process</span>;i++)</span><br><span class="line">        Process_back\[i\]=<span class="built_in">Process</span>\[i\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;resource;i++)</span><br><span class="line">        Resource_back\[i\]=Resource\[i\];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReBack</span><span class="params">()</span>  <span class="comment">//数据还原</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">process</span>;i++)</span><br><span class="line">        <span class="built_in">Process</span>\[i\]=Process_back\[i\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;resource;i++)</span><br><span class="line">        Resource\[i\]=Resource_back\[i\];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">int</span> aff\[resource\];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InputRequest</span><span class="params">()</span>  <span class="comment">//输入请求</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入进程号以及请求的资源数目："</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;resource;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;aff\[i\];</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;resource;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Process</span>\[num<span class="number">-1</span>\].Need\[i\]&lt;aff\[i\])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"超出需求上限，请求操作失败"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Resource\[i\].<span class="built_in">available</span>&lt;aff\[i\])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"超过当前可获得的资源，请求操作失败"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ReBack();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;resource;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Process</span>\[num<span class="number">-1</span>\].Need\[i\] -= aff\[i\];</span><br><span class="line">        <span class="built_in">Process</span>\[num<span class="number">-1</span>\].Allocation\[i\] += aff\[i\];</span><br><span class="line">        Resource\[i\].<span class="built_in">available</span> -= aff\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//ShowZiYuan();</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">process</span>;i++)</span><br><span class="line">        <span class="built_in">Process</span>\[i\].Finish = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsSafe</span><span class="params">()</span>  <span class="comment">//安全性检测算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//ShowZiYuan();</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;resource;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a\[i\]=Resource\[i\].<span class="built_in">available</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">process</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;resource;j++)</span><br><span class="line">           &#123;</span><br><span class="line">               <span class="keyword">if</span>(<span class="built_in">Process</span>\[i\].Need\[i\]&gt;Resource\[i\].<span class="built_in">available</span>)</span><br><span class="line">              &#123;</span><br><span class="line">                  t++;</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="number">5</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;"测试"&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">int</span> counts=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(counts&lt;<span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">process</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;resource;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">Process</span>\[i\].Finish == <span class="literal">false</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(Resource\[j\].<span class="built_in">available</span> &lt; <span class="built_in">Process</span>\[i\].Need\[j\])</span><br><span class="line">                    &#123;</span><br><span class="line">                        flag1 = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    flag1 = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag1 == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                    safelist\[counts\]=i+<span class="number">1</span>;</span><br><span class="line">                    counts++;</span><br><span class="line">                    flag = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;resource;j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">Process</span>\[i\].Wa\[j\]=<span class="built_in">Process</span>\[i\].Allocation\[j\]+Resource\[j\].<span class="built_in">available</span>;</span><br><span class="line">                        <span class="built_in">Process</span>\[i\].ZY\[j\] = <span class="built_in">Process</span>\[i\].Wa\[j\];</span><br><span class="line">                        Resource\[j\].<span class="built_in">available</span> = Resource\[j\].<span class="built_in">available</span> + <span class="built_in">Process</span>\[i\].Allocation\[j\];</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">Process</span>\[i\].Finish = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ReBack();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">YinHangJia</span><span class="params">()</span>  <span class="comment">//银行家算法</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    BackUp();</span><br><span class="line">    <span class="keyword">bool</span> s=<span class="literal">true</span>;</span><br><span class="line">    s=InputRequest();</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    flag = IsSafe();</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">false</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ReBack();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"该请求指令被拒绝，无法找到一个有效的安全序列\\n请重新输入！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag = <span class="literal">true</span>&amp;&amp;s!=<span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ShowYuFen();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> t=<span class="literal">true</span>;</span><br><span class="line">    init();</span><br><span class="line">    t=IsSafe();</span><br><span class="line">    ShowZiYuan();</span><br><span class="line">    <span class="keyword">if</span>(t == <span class="literal">false</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"初始化的可获得值不满足条件找不到安全序列！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    ShowYuFen();</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">process</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Process</span>\[i\].Finish == <span class="literal">false</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    k++;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">if</span>(k!=<span class="built_in">process</span>)</span><br><span class="line">            <span class="keyword">if</span>(YinHangJia()==<span class="literal">false</span>)</span><br><span class="line">                YinHangJia();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>windows下的结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/3213123-1.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/4324234234-1.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>银行家算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C++实现直接插入排序、直接选择排序、冒泡排序</title>
    <url>/2018/06/15/c-shi-xian-zhi-jie-cha-ru-pai-xu-zhi-jie-xuan-ze-pai-xu-mao-pao-pai-xu-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/%E5%9B%BE%E7%89%87150.png" alt=""> 这里的排序算法进行处理的对象是通过array来创建的数组： 配合之前的队列来使用。 至于排序算法的思想，我感觉只要对C艹有一定了解得人大概都能看懂，所以这里不做过多的解释。 头文件代码：</p>
<p>#include “queue.h”<br>
#include<iostream></p>
<p>using namespace std;<br>
int main()<br>
{<br>
Queue<int> A;<br>
cout&lt;&lt;“输入6个数值用来创建队列:”;<br>
int a=0;<br>
for(int i=0;i&lt;=5;i++)<br>
{<br>
cin&gt;&gt;a;<br>
A.QInsert(a);<br>
}<br>
cout&lt;&lt;“创建成功！”&lt;&lt;endl;<br>
cout &lt;&lt; “显示队列中的所有元素为：” ;<br>
while(!A.QEmpty())<br>
{<br>
cout &lt;&lt; A.QFront() &lt;&lt; &quot;   &quot;;<br>
A.QDelete();<br>
}<br>
cout&lt;&lt;endl;<br>
cout&lt;&lt;“判断队列是否为空：”&lt;&lt;(A.QEmpty()==0?“为空”:“不为空”)&lt;&lt;endl;<br>
cout &lt;&lt; endl;<br>
cout&lt;&lt;“开始清空队列！”&lt;&lt;endl;<br>
A.QClear();<br>
cout&lt;&lt;“队列成功清空！”&lt;&lt;endl;<br>
return 0;<br>
}<br>
5.<br>
sort.h头文件：<br>
#ifndef SORT_H_INCLUDED<br>
#define SORT_H_INCLUDED<br>
#include<iostream><br>
#include<cstdlib><br>
using namespace std;</p>
<p>enum ErrorType<br>
{invalidArraySize, memoryAllocationError, indexOutOfRange};<br>
char <em>errorMsg[] =<br>
{<br>
“Invalid array size”, “Memory allocation error”,<br>
&quot;Invalid index: &quot;<br>
};<br>
template <class T><br>
class Array<br>
{<br>
private:<br>
T</em>  alist;<br>
int size;<br>
void Error(ErrorType error,int badIndex=0) const;<br>
public:<br>
Array(int sz = 50);<br>
Array(const Array<T>&amp; A);<br>
~Array(void);<br>
Array<T>&amp; operator= (const Array<T>&amp; rhs);<br>
T&amp; operator[](int i);<br>
operator T* (void) const;<br>
int ListSize(void) const;<br>
void Resize(int sz);<br>
void InsertionSort();<br>
void SelectionSort();<br>
void BubbleSort();<br>
int SeqSearch(T key);<br>
};<br>
template <class T><br>
void Array<T>::Error(ErrorType error, int badIndex) const<br>
{<br>
cerr &lt;&lt; errorMsg[error];<br>
if (error == indexOutOfRange)<br>
cerr &lt;&lt; badIndex;<br>
cerr &lt;&lt; endl;<br>
exit(1);<br>
}<br>
template <class T><br>
Array<T>::Array(int sz)<br>
{<br>
if (sz &lt;= 0)<br>
Error(invalidArraySize);<br>
size = sz;<br>
alist = new T[size];<br>
if (alist == NULL)<br>
Error(memoryAllocationError);<br>
}<br>
template <class T><br>
Array<T>::~Array(void)<br>
{<br>
delete [] alist;<br>
}<br>
template <class T><br>
Array<T>::Array(const Array<T>&amp; X)<br>
{<br>
int n = X.size;<br>
size = n;<br>
alist = new T[n];<br>
if (alist == NULL)<br>
Error(memoryAllocationError);<br>
T* srcptr = X.alist;<br>
T* destptr = alist;<br>
while (n–)<br>
*destptr++ = *srcptr++;<br>
}<br>
template <class T><br>
Array<T>&amp; Array<T>::operator= (const Array<T>&amp; rhs)<br>
{<br>
int n = rhs.size;<br>
if (size != n)<br>
{<br>
delete [] alist;<br>
alist = new T[n];<br>
if (alist == NULL)<br>
Error(memoryAllocationError);<br>
size = n;<br>
}<br>
T* destptr = alist;<br>
T* srcptr = rhs.alist;<br>
while (n–)<br>
*destptr++ = *srcptr++;<br>
return <em>this;<br>
}<br>
template <class T><br>
T&amp; Array<T>::operator[] (int n)<br>
{<br>
if (n &lt; 0 || n &gt; size-1)<br>
Error(indexOutOfRange,n);<br>
return alist[n];<br>
}<br>
template <class T><br>
Array<T>::operator T</em> (void) const<br>
{<br>
return alist;<br>
}<br>
template <class T><br>
int Array<T>::ListSize(void) const<br>
{<br>
return size;<br>
}<br>
template <class T><br>
void Array<T>::Resize(int sz)<br>
{<br>
if (sz &lt;= 0)<br>
Error(invalidArraySize);<br>
if (sz == size)<br>
return;<br>
T* newlist = new T[sz];<br>
if (newlist == NULL)<br>
Error(memoryAllocationError);<br>
int n = (sz &lt;= size) ? sz : size;<br>
T* srcptr = alist;<br>
T* destptr = newlist;<br>
while (n–)<br>
*destptr++ = *srcptr++;<br>
delete[] alist;<br>
alist = newlist;<br>
size = sz;<br>
}<br>
template <class T><br>
void Array<T>::InsertionSort()<br>
{<br>
int i, j;<br>
T   temp;<br>
for (i = 1; i &lt; size; i++)<br>
{<br>
j = i;<br>
temp = alist[i];<br>
while (j &gt; 0 &amp;&amp; temp &lt; alist[j-1])<br>
{<br>
alist[j] = alist[j-1];<br>
j–;<br>
}<br>
alist[j] = temp;<br>
}<br>
}<br>
template <class T><br>
void Array<T>::SelectionSort()<br>
{<br>
int smallIndex;<br>
int i, j;<br>
for (i = 0; i &lt; size-1; i++)<br>
{<br>
smallIndex = i;<br>
for (j = i+1; j &lt; size; j++)<br>
if (alist[j] &lt; alist[smallIndex])<br>
smallIndex = j;<br>
swap(alist[i], alist[smallIndex]);<br>
}<br>
}<br>
template <class T><br>
void Swap (T &amp;x, T &amp;y)<br>
{<br>
T temp;<br>
temp = x;<br>
x = y;<br>
y = temp;<br>
}<br>
template <class T><br>
void Array<T>::BubbleSort()<br>
{<br>
int i,j;<br>
int lastExchangeIndex;<br>
i = size-1;<br>
while (i &gt; 0)<br>
{<br>
lastExchangeIndex = 0;<br>
for (j = 0; j &lt; i; j++)<br>
if (alist[j+1] &lt; alist[j])<br>
{<br>
Swap(alist[j],alist[j+1]);<br>
lastExchangeIndex = j;<br>
}<br>
i = lastExchangeIndex;<br>
}<br>
}<br>
template <class T><br>
int Array<T>::SeqSearch(T key)<br>
{<br>
for(int i=0;i &lt; size;i++)<br>
if (alist[i] == key)<br>
return i;<br>
return -1;<br>
}</p>
<p>#endif // SORT_H_INCLUDED</p>
<p>代码：</p>
<p>#include <iostream><br>
#include <cstdlib><br>
#include &lt;time.h&gt;<br>
#include &lt;windows.h&gt;<br>
#include “Sort.h”<br>
using namespace std;<br>
int main()<br>
{<br>
Array<int> A(10);<br>
int i,k;<br>
int SearchNum;</p>
<pre><code>cout &lt;&lt; &quot;&lt;--------------使用直接插入排序--------------&gt;&quot; &lt;&lt;endl;
cout &lt;&lt; &quot;随机生成10个整数用来array数组&quot; &lt;&lt; endl;
srand(unsigned(time(NULL)));
for(i=0;i&lt;10;i++)
{
	A\[i\]=rand()%100;
}
cout &lt;&lt; &quot;创建的数组为：&quot; &lt;&lt; endl;
for(i=0;i&lt;10;i++)
	cout &lt;&lt; A\[i\] &lt;&lt; &quot;  &quot;;
cout&lt;&lt;endl;
A.InsertionSort();
cout &lt;&lt; &quot;排序后的数组为：&quot; &lt;&lt; endl;
for(i=0;i&lt;10;i++)
	cout &lt;&lt; A\[i\] &lt;&lt; &quot;  &quot;;
cout &lt;&lt; endl;

Sleep(700);
cout &lt;&lt; endl&lt;&lt;&quot;&lt;--------------使用直接选择排序--------------&gt;&quot; &lt;&lt;endl;
cout &lt;&lt; &quot;随机生成10个整数用来array数组&quot; &lt;&lt; endl;
srand(unsigned(time(NULL)));
for(i=0;i&lt;10;i++)
{
	A\[i\]=rand()%100;
}
cout &lt;&lt; &quot;创建的数组为：&quot; &lt;&lt; endl;
for(i=0;i&lt;10;i++)
	cout &lt;&lt; A\[i\] &lt;&lt; &quot;  &quot;;
cout&lt;&lt;endl;
A.SelectionSort();
cout &lt;&lt; &quot;排序后的数组为：&quot; &lt;&lt; endl;
for(i=0;i&lt;10;i++)
	cout &lt;&lt; A\[i\] &lt;&lt; &quot;  &quot;;
cout &lt;&lt; endl;

Sleep(600);
cout &lt;&lt;endl&lt;&lt; &quot;&lt;--------------使用冒泡排序--------------&gt;&quot;&lt;&lt;endl ;
cout &lt;&lt; &quot;随机生成10个整数用来array数组&quot; &lt;&lt; endl;
srand(unsigned(time(NULL)));
for(i=0;i&lt;10;i++)
{
	A\[i\]=rand()%100;
}
cout &lt;&lt; &quot;创建的数组为：&quot; &lt;&lt; endl;
for(i=0;i&lt;10;i++)
	cout &lt;&lt; A\[i\] &lt;&lt; &quot;  &quot;;
cout&lt;&lt;endl;
A.BubbleSort();
cout &lt;&lt; &quot;排序后的数组为：&quot; &lt;&lt; endl;
for(i=0;i&lt;10;i++)
	cout &lt;&lt; A\[i\] &lt;&lt; &quot;  &quot;;
cout &lt;&lt; endl;

cout &lt;&lt; endl&lt;&lt;&quot;对最后创建的数组进行查找数字的操作：&quot;;
cin &gt;&gt; SearchNum;
k= A.SeqSearch(SearchNum);
if (k&lt;0)
	cout &lt;&lt; &quot;没有找到数字&quot; &lt;&lt; SearchNum &lt;&lt; endl;
else
	cout &lt;&lt; SearchNum &lt;&lt; &quot;的下标为&quot; &lt;&lt; k &lt;&lt;endl;
</code></pre>
<p>}</p>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180615000636.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>C++实现字母表全排序</title>
    <url>/2018/05/15/c-shi-xian-zi-mu-biao-quan-pai-xu-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/%E5%9B%BE%E7%89%87150.png" alt=""> 全排列具体说明： 例如abc会有abc,acb,bac,bca,cab,abc六种情况 采用递归的方法： 先看a作为字母表首位时会有bc和cb两种排序 然后b作为字母表首位时会有ac和ca两种排序 最后是c作为字母表首位时会有ab和ba两种排序   这里就用到了swap（）进行交换。为了每次确保不重复， 第i个数分别与它后面的数字交换就能得到新的排列，这样可以构建一个递归   具体的代码：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#include&lt;cstdio&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//采用递归方式进行全排列</span></span><br><span class="line">bool IsSwap(<span class="keyword">char</span> *<span class="keyword">str</span>, <span class="keyword">int</span> Begin, <span class="keyword">int</span> End)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = Begin; i &lt; End; i++)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">str</span>\[i\] == <span class="keyword">str</span>\[End\])</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//k表示当前选取到第几个数,m表示共有多少数.</span></span><br><span class="line"><span class="keyword">void</span> AllRange(<span class="keyword">char</span> *<span class="keyword">str</span>, <span class="keyword">int</span> k, <span class="keyword">int</span> m)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> s = <span class="number">1</span>;</span><br><span class="line">        cout&lt;&lt;<span class="string">" 第"</span>&lt;&lt;s++&lt;&lt;<span class="string">"个排列"</span>&lt;&lt;<span class="keyword">str</span>&lt;&lt;endl;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = k; i &lt;= m; i++) <span class="comment">//第i个数分别与它后面的数字交换就能得到新的排列</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (IsSwap(<span class="keyword">str</span>, k, i))</span><br><span class="line">            &#123;</span><br><span class="line">                swap(*(<span class="keyword">str</span> + k), *(<span class="keyword">str</span> + i));</span><br><span class="line">                AllRange(<span class="keyword">str</span>, k + <span class="number">1</span>, m);</span><br><span class="line">                swap(*(<span class="keyword">str</span> + k), *(<span class="keyword">str</span> + i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">"输入你想要输出的个数："</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">str</span>\[<span class="number">100</span>\]=&#123;<span class="string">'\\0'</span>&#125;;  <span class="comment">//最大容量为100</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        cin&gt;&gt;<span class="keyword">str</span>\[i\];</span><br><span class="line">    <span class="keyword">str</span>\[n\]=<span class="string">'\\0'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num=num*i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">"全排列总数个数为："</span>&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">    AllRange(<span class="keyword">str</span>, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现： <img src="http://47.100.4.8/wp-content/uploads/2018/05/12314324324.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ sort的用法</title>
    <url>/2019/02/04/c-sort-de-yong-fa-1/</url>
    <content><![CDATA[<p><strong>sort类函数：</strong></p>
<p><a href="http://www.stlchina.org/twiki/bin/view.pl/Main/STLSortAlgorithms?sortcol=0&amp;table=1&amp;up=0#sorted_table" title="Sort by this column">函数名</a></p>
<p><a href="http://www.stlchina.org/twiki/bin/view.pl/Main/STLSortAlgorithms?sortcol=1&amp;table=1&amp;up=0#sorted_table" title="Sort by this column">功能描述</a></p>
<p>sort</p>
<p>对给定区间所有元素进行排序</p>
<p>stable_sort</p>
<p>对给定区间所有元素进行稳定排序</p>
<p>partial_sort</p>
<p>对给定区间所有元素部分排序</p>
<p>partial_sort_copy</p>
<p>对给定区间复制并排序</p>
<p>nth_element</p>
<p>找出给定区间的某个位置对应的元素</p>
<p>is_sorted</p>
<p>判断一个区间是否已经排好序</p>
<p>partition</p>
<p>使得符合某个条件的元素放在前面</p>
<p>stable_partition</p>
<p>相对稳定的使得符合某个条件的元素放在前面</p>
<p>需要头文件<algorithm> 语法描述：sort（begin，end，cmp），cmp参数可以没有，如果没有默认非降序排序。 其实对于这么简单的任务（类型支持“&lt;”、“&gt;”等比较运算符），完全没必要自己写一个类出来。标准库里已经有现成的了，就在functional里，include进来就行了。functional提供了一堆基于模板的比较函数对象。它们是（看名字就知道意思了）：equal_to<Type>、not_equal_to<Type>、greater<Type>、greater_equal<Type>、less<Type>、less_equal<Type>。对于这个问题来说，greater和less就足够了，直接拿过来用：</p>
<ul>
<li>升序：sort(begin,end,less<data-type>());</li>
<li>降序：sort(begin,end,greater<data-type>())</li>
</ul>
<p>例如（对整形排序为例）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp\[<span class="number">10</span>\],j;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;j;</span><br><span class="line">        temp\[i\] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(temp,temp+<span class="number">10</span>,greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;temp\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>降序同理， <img src="http://47.100.4.8/wp-content/uploads/2019/02/QQ%E5%9B%BE%E7%89%8720190204111753.png" alt="">   下面是自己手动编写cmp来设置排序规则： 以下面这道例题为例来进行编写（对结构体排序）： 输入第一行给出 3 个正整数，分别为：N（≤10​5​​），即考生总数；L（≥60），为录取最低分数线，即德分和才分均不低于 L 的考生才有资格被考虑录取；H（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 H，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 L 的考生也按总分排序，但排在第三类考生之后。 随后 N 行，每行给出一位考生的信息，包括：<code>准考证号 德分 才分</code>，其中<code>准考证号</code>为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。 输出第一行首先给出达到最低分数线的考生人数 M，随后 M 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。 代码：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">include</span>&lt;iostream&gt;</span><br><span class="line">#<span class="keyword">include</span>&lt;algorithm&gt;</span><br><span class="line">#<span class="keyword">include</span>&lt;deque&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> mess&#123;</span><br><span class="line">    <span class="built_in">int</span> ID;</span><br><span class="line">    <span class="built_in">int</span> De;</span><br><span class="line">    <span class="built_in">int</span> Cai;</span><br><span class="line">    <span class="built_in">int</span> Zong;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> cmp2(mess a,mess b)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.Zong != b.Zong)&#123;</span><br><span class="line">        return a.Zong&gt;b.Zong;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.De != b.De)&#123;</span><br><span class="line">            return a.De&gt;b.De;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            return a.ID&lt;b.ID;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span>&#123;</span><br><span class="line">    <span class="built_in">int</span> num,low,better,temp1,temp2,temp3,sum=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;num&gt;&gt;low&gt;&gt;better;</span><br><span class="line">    mess student\<span class="literal">[<span class="identifier">num</span>\]</span>;</span><br><span class="line">    deque&lt;mess&gt; first_level;</span><br><span class="line">    deque&lt;mess&gt; second_level;</span><br><span class="line">    deque&lt;mess&gt; third_level;</span><br><span class="line">    deque&lt;mess&gt; forst_level;</span><br><span class="line">    deque&lt;mess&gt;::iterator pos;</span><br><span class="line">    for(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        cin&gt;&gt;temp1&gt;&gt;temp2&gt;&gt;temp3;</span><br><span class="line">        student\<span class="literal">[<span class="identifier">i</span>\]</span>.ID = temp1;</span><br><span class="line">        student\<span class="literal">[<span class="identifier">i</span>\]</span>.De = temp2;</span><br><span class="line">        student\<span class="literal">[<span class="identifier">i</span>\]</span>.Cai = temp3;</span><br><span class="line">        student\<span class="literal">[<span class="identifier">i</span>\]</span>.Zong = temp2 + temp3;</span><br><span class="line">        <span class="keyword">if</span>(temp2&gt;=low<span class="operator"> &amp;&amp; </span>temp3&gt;=low)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp2&gt;=better<span class="operator"> &amp;&amp; </span>temp3&gt;=better)&#123;</span><br><span class="line">                first\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span>push\<span class="constructor">_back(<span class="params">student</span>\[<span class="params">i</span>\])</span>;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp2&gt;=better<span class="operator"> &amp;&amp; </span>temp3&lt;better)&#123;</span><br><span class="line">                second\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span>push\<span class="constructor">_back(<span class="params">student</span>\[<span class="params">i</span>\])</span>;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(temp2&gt;=temp3<span class="operator"> &amp;&amp; </span>temp3&lt;=better<span class="operator"> &amp;&amp; </span>temp2&lt;=better)&#123;</span><br><span class="line">                third\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span>push\<span class="constructor">_back(<span class="params">student</span>\[<span class="params">i</span>\])</span>;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                forst\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span>push\<span class="constructor">_back(<span class="params">student</span>\[<span class="params">i</span>\])</span>;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    sort(first\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>,first\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>,cmp2);</span><br><span class="line">    sort(second\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>,second\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>,cmp2);</span><br><span class="line">    sort(third\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>,third\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>,cmp2);</span><br><span class="line">    sort(forst\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>,forst\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>,cmp2);</span><br><span class="line">    for(pos = first\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>;pos!=first\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>;pos++)&#123;</span><br><span class="line">        cout&lt;&lt;(\*pos).ID&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos).De&lt;&lt;<span class="string">" "</span>&lt;&lt;(*pos).Cai&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    for(pos = second\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>;pos!=second\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>;pos++)&#123;</span><br><span class="line">        cout&lt;&lt;(\*pos).ID&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos).De&lt;&lt;<span class="string">" "</span>&lt;&lt;(*pos).Cai&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    for(pos = third\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>;pos!=third\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>;pos++)&#123;</span><br><span class="line">        cout&lt;&lt;(\*pos).ID&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos).De&lt;&lt;<span class="string">" "</span>&lt;&lt;(*pos).Cai&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    for(pos = forst\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>;pos!=forst\<span class="module-access"><span class="module"><span class="identifier">_level</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>;pos++)&#123;</span><br><span class="line">        cout&lt;&lt;(\*pos).ID&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos).De&lt;&lt;<span class="string">" "</span>&lt;&lt;(*pos).Cai&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">主要介绍一下cmp函数：</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> cmp2(mess a,mess b)&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.Zong != b.Zong)&#123;</span><br><span class="line">        return a.Zong&gt;b.Zong;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.De != b.De)&#123;</span><br><span class="line">            return a.De&gt;b.De;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            return a.ID&lt;b.ID;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>cmp参数是在sort进行比较时，各个元素之间进行比较所参考的规则因此这里我设置了各种条件来满足题目中给出的规则。 编写好cmp函数只有就可以作为sort函数的一个参数来使用，从而能够按照你设置的规则进行排序。</p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>sort</tag>
      </tags>
  </entry>
  <entry>
    <title>C++性能分析涉及的算法</title>
    <url>/2018/04/26/c-xing-neng-fen-xi-she-ji-de-suan-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180425215619.png" alt="">   用于测试空间复杂度的算法，顺序查找  在数组中从左至右查找第一个与x相等的元素。如果找到则返回它第一次出现的位置。如果没有则返回-1 顺序查找的两种方法： （1）普通的方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//整数类型的查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sequentialSearch</span><span class="params">(<span class="keyword">int</span> a\[\],<span class="keyword">int</span> n,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a\[i\] == x)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数重载 针对float类型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sequentialSearch</span><span class="params">(<span class="keyword">float</span> a\[\],<span class="keyword">int</span> n,<span class="keyword">float</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a\[i\] == x)</span><br><span class="line">            &#123;</span><br><span class="line">                flag = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a\[<span class="number">10</span>\];</span><br><span class="line">    <span class="keyword">float</span> b\[<span class="number">10</span>\];</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a\[i\] = i;</span><br><span class="line">        b\[i\] = i + <span class="number">0.1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"对整数使用顺序查找5出现的位置:"</span>&lt;&lt;sequentialSearch(a,<span class="number">10</span>,<span class="number">5</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"对浮点数使用顺序查找2.1出现的位置:"</span>&lt;&lt;sequentialSearch(b,<span class="number">10</span>,<span class="number">2.1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/7894156.png" alt=""> 顺序查找的递归实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//整数类型的查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RsequentialSearch</span><span class="params">(<span class="keyword">int</span> a\[\],<span class="keyword">int</span> n,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a\[n<span class="number">-1</span>\] == x)</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    <span class="keyword">return</span> RsequentialSearch(a,n<span class="number">-1</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a\[<span class="number">10</span>\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">        a\[i\]=i;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"对整数使用顺序查找3出现的位置:"</span>&lt;&lt;RsequentialSearch(a,<span class="number">9</span>,<span class="number">3</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/882522.png" alt="">   时间复杂度的涉及的算法，一个程序的时间复杂度可以通过它进行的for循环次数进行计算。 普通的多项式计算：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ployEval</span><span class="params">(<span class="keyword">int</span> coeff\[\],<span class="keyword">int</span> n,<span class="keyword">const</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=<span class="number">1</span>,value=coeff\[<span class="number">0</span>\];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        y *= x;</span><br><span class="line">        value += y*coeff\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//coeff\[i\] 为ai</span></span><br><span class="line"><span class="comment">//构造的多项式计算为：a0\*x^4+a1\*x^3+a2\*x^2+a1\*x^1+a0*x^0</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> test;</span><br><span class="line">    <span class="keyword">int</span> coeff\[<span class="number">5</span>\]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,n=<span class="number">4</span>,x=<span class="number">2</span>;</span><br><span class="line">    test = ployEval(coeff,n,x);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"test="</span>&lt;&lt;test&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/777777.png" alt=""> 这里看出由于循环次数比较多所以时间复杂度比较大 这里可以使用horner法则进行多项式的拆分即可将 a0*x<sup>4+a1*x</sup>3+a2*x<sup>2+a1*x</sup>1+a0*x^0拆分为如下式子： (((((x*a1)+a0)*x+a2)*x+a3)*x+a4)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//利用霍尔法则进行多项式的变化：(((((x\*a1)+a0)\*x+a2)\*x+a3)\*x+a4)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">horner</span><span class="params">(<span class="keyword">int</span> coeff\[\],<span class="keyword">int</span> n,<span class="keyword">const</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value = coeff\[n\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        value = value * x +coeff\[n-i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> test,hornertest;</span><br><span class="line">    <span class="keyword">int</span> coeff\[<span class="number">5</span>\]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,n=<span class="number">4</span>,x=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    hornertest = horner(coeff,n,x);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"horner apply:"</span>&lt;&lt;hornertest&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/66666666.png" alt=""> 跟上面的结果对比发现通过霍尔法则可以将时间复杂度缩短很多   End！~</p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>性能分析</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>C++实现模板（template）链表类</title>
    <url>/2018/06/09/c-shi-xian-mo-ban-template-lian-biao-lei-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180609225518.png" alt=""> 链表相信都很熟悉了就不过多的介绍，如果需要自行翻阅数据结构。这里面使用到了之前结点类 创建LinkedList.h头文件 代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LINKEDLIST_CLASS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINKEDLIST_CLASS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Node.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">LinkedList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      Node&lt;T&gt; \*front, \*rear;</span><br><span class="line">      Node&lt;T&gt; \*prevPtr, \*currPtr;</span><br><span class="line">      <span class="keyword">int</span> <span class="built_in">size</span>;</span><br><span class="line">      <span class="keyword">int</span> <span class="built_in">position</span>;</span><br><span class="line">      Node&lt;T&gt; \*GetNode(<span class="keyword">const</span> T&amp; item,Node&lt;T&gt; \*ptrNext=<span class="literal">NULL</span>);</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">FreeNode</span><span class="params">(Node&lt;T&gt; *p)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">CopyList</span><span class="params">(<span class="keyword">const</span> LinkedList&lt;T&gt;&amp; L)</span></span>;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      LinkedList(<span class="keyword">void</span>);</span><br><span class="line">      LinkedList(<span class="keyword">const</span> LinkedList&lt;T&gt;&amp; L);</span><br><span class="line">      ~LinkedList(<span class="keyword">void</span>);</span><br><span class="line">      LinkedList&lt;T&gt;&amp; <span class="keyword">operator</span>= (<span class="keyword">const</span> LinkedList&lt;T&gt;&amp; L);</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">ListSize</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">ListEmpty</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">Reset</span><span class="params">(<span class="keyword">int</span> pos = <span class="number">0</span>)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">Next</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">EndOfList</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">CurrentPosition</span><span class="params">(<span class="keyword">void</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">InsertFront</span><span class="params">(<span class="keyword">const</span> T&amp; item)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">InsertRear</span><span class="params">(<span class="keyword">const</span> T&amp; item)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">InsertAt</span><span class="params">(<span class="keyword">const</span> T&amp; item)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">InsertAfter</span><span class="params">(<span class="keyword">const</span> T&amp; item)</span></span>;</span><br><span class="line">           <span class="function">T <span class="title">DeleteFront</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">DeleteAt</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">            <span class="function">T&amp; <span class="title">Data</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">ClearList</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">Node</span>&lt;T&gt; *<span class="title">LinkedList</span>&lt;T&gt;:</span>:GetNode(<span class="keyword">const</span> T&amp; item,</span><br><span class="line">                      Node&lt;T&gt;* ptrNext)</span><br><span class="line">&#123;</span><br><span class="line">   Node&lt;T&gt; *p;</span><br><span class="line">   p = <span class="keyword">new</span> Node&lt;T&gt;(item,ptrNext);</span><br><span class="line">   <span class="keyword">if</span> (p == <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"Memory allocation failure!\\n"</span>;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:FreeNode(Node&lt;T&gt; *p)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">delete</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:CopyList(<span class="keyword">const</span> LinkedList&lt;T&gt;&amp; L)</span><br><span class="line">&#123;</span><br><span class="line">   Node&lt;T&gt; *p = L.front;</span><br><span class="line">   <span class="keyword">int</span> pos;</span><br><span class="line">   <span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      InsertRear(p-&gt;data);</span><br><span class="line">      p = p-&gt;NextNode();</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">position</span> == <span class="number">-1</span>)</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">     prevPtr = <span class="literal">NULL</span>;</span><br><span class="line">   currPtr = front;</span><br><span class="line">   <span class="keyword">for</span> (pos = <span class="number">0</span>; pos != <span class="built_in">position</span>; pos++)</span><br><span class="line">   &#123;</span><br><span class="line">      prevPtr = currPtr;</span><br><span class="line">      currPtr = currPtr-&gt;NextNode();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">LinkedList</span>&lt;T&gt;:</span>:LinkedList(<span class="keyword">void</span>): front(<span class="literal">NULL</span>), rear(<span class="literal">NULL</span>),</span><br><span class="line">      prevPtr(<span class="literal">NULL</span>),currPtr(<span class="literal">NULL</span>), <span class="built_in">size</span>(<span class="number">0</span>), <span class="built_in">position</span>(<span class="number">-1</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">LinkedList</span>&lt;T&gt;:</span>:LinkedList(<span class="keyword">const</span> LinkedList&lt;T&gt;&amp; L)</span><br><span class="line">&#123;</span><br><span class="line">   front = rear = <span class="literal">NULL</span>;</span><br><span class="line">   prevPtr = currPtr = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">   <span class="built_in">position</span> = <span class="number">-1</span>;</span><br><span class="line">   CopyList(L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:ClearList(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">   Node&lt;T&gt; \*currPosition, \*nextPosition;</span><br><span class="line">   currPosition = front;</span><br><span class="line">   <span class="keyword">while</span>(currPosition != <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">	  nextPosition = currPosition-&gt;NextNode();</span><br><span class="line">      FreeNode(currPosition);</span><br><span class="line">      currPosition = nextPosition;</span><br><span class="line">   &#125;</span><br><span class="line">   front = rear = <span class="literal">NULL</span>;</span><br><span class="line">   prevPtr = currPtr = <span class="literal">NULL</span>;</span><br><span class="line">   <span class="built_in">size</span> = <span class="number">0</span>;</span><br><span class="line">   <span class="built_in">position</span> = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">LinkedList</span>&lt;T&gt;:</span>:~LinkedList(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ClearList();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">LinkedList</span>&lt;T&gt;&amp; <span class="title">LinkedList</span>&lt;T&gt;:</span>:<span class="keyword">operator</span>=(<span class="keyword">const</span> LinkedList&lt;T&gt;&amp; L)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;L)</span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">   ClearList();</span><br><span class="line">   CopyList(L);</span><br><span class="line">   <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:ListSize(<span class="keyword">void</span>) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">size</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:ListEmpty(<span class="keyword">void</span>) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">size</span>==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:Next(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span> (currPtr != <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      prevPtr = currPtr;</span><br><span class="line">      currPtr = currPtr-&gt;NextNode();</span><br><span class="line">      <span class="built_in">position</span>++;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:EndOfList(<span class="keyword">void</span>) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> currPtr == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:CurrentPosition(<span class="keyword">void</span>) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">position</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:Reset(<span class="keyword">int</span> pos)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">int</span> startPos;</span><br><span class="line">    <span class="keyword">if</span> (front == <span class="literal">NULL</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   <span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt; <span class="built_in">size</span><span class="number">-1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Reset: Invalid list position: "</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(pos == <span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      prevPtr = <span class="literal">NULL</span>;</span><br><span class="line">      currPtr = front;</span><br><span class="line">      <span class="built_in">position</span> = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">     &#123;</span><br><span class="line">       currPtr = front-&gt;NextNode();</span><br><span class="line">       prevPtr = front;</span><br><span class="line">       startPos = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">position</span>=startPos; <span class="built_in">position</span> != pos; <span class="built_in">position</span>++)</span><br><span class="line">	   &#123;</span><br><span class="line">	       prevPtr = currPtr;</span><br><span class="line">	       currPtr = currPtr-&gt;NextNode();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span>&amp; <span class="title">LinkedList</span>&lt;T&gt;:</span>:Data(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">size</span> == <span class="number">0</span> || currPtr == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Data: invalid reference!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> currPtr-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:InsertFront(<span class="keyword">const</span> T&amp; item)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (front != <span class="literal">NULL</span>)</span><br><span class="line">      Reset();</span><br><span class="line">    InsertAt(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:InsertRear(<span class="keyword">const</span> T&amp; item)</span><br><span class="line">&#123;</span><br><span class="line">   Node&lt;T&gt; *newNode;</span><br><span class="line">   prevPtr = rear;</span><br><span class="line">   newNode = GetNode(item);</span><br><span class="line">   <span class="keyword">if</span> (rear == <span class="literal">NULL</span>)</span><br><span class="line">      front = rear = newNode;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      rear-&gt;InsertAfter(newNode);</span><br><span class="line">      rear = newNode;</span><br><span class="line">   &#125;</span><br><span class="line">   currPtr = rear;</span><br><span class="line">   <span class="built_in">position</span> = <span class="built_in">size</span>;</span><br><span class="line">   <span class="built_in">size</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:InsertAt(<span class="keyword">const</span> T&amp; item)</span><br><span class="line">&#123;</span><br><span class="line">   Node&lt;T&gt; *newNode;</span><br><span class="line">   <span class="keyword">if</span> (prevPtr == <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      newNode = GetNode(item,front);</span><br><span class="line">      front = newNode;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      newNode = GetNode(item);</span><br><span class="line">      prevPtr-&gt;InsertAfter(newNode);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (prevPtr == rear)</span><br><span class="line">   &#123;</span><br><span class="line">      rear = newNode;</span><br><span class="line">      <span class="built_in">position</span> = <span class="built_in">size</span>;</span><br><span class="line">   &#125;</span><br><span class="line">     currPtr = newNode;</span><br><span class="line">   <span class="built_in">size</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:InsertAfter(<span class="keyword">const</span> T&amp; item)</span><br><span class="line">&#123;</span><br><span class="line">   Node&lt;T&gt; *p;</span><br><span class="line">   p = GetNode(item);</span><br><span class="line">   <span class="keyword">if</span> (front == <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      front = currPtr = rear = p;</span><br><span class="line">      <span class="built_in">position</span> = <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">if</span> (currPtr == <span class="literal">NULL</span>)</span><br><span class="line">      currPtr = prevPtr;</span><br><span class="line">      currPtr-&gt;InsertAfter(p);</span><br><span class="line">      <span class="keyword">if</span> (currPtr == rear)</span><br><span class="line">      &#123;</span><br><span class="line">        rear = p;</span><br><span class="line">        <span class="built_in">position</span> = <span class="built_in">size</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">       <span class="built_in">position</span>++;</span><br><span class="line">      prevPtr = currPtr;</span><br><span class="line">      currPtr = p;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">size</span>++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:DeleteFront(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">   T item;</span><br><span class="line">   Reset();</span><br><span class="line">   <span class="keyword">if</span> (front == <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Invalid deletion!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   item = currPtr-&gt;data;</span><br><span class="line">   DeleteAt();</span><br><span class="line">   <span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">LinkedList</span>&lt;T&gt;:</span>:DeleteAt(<span class="keyword">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">   Node&lt;T&gt; *p;</span><br><span class="line">   <span class="keyword">if</span> (currPtr == <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Invalid deletion!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line">     <span class="keyword">if</span> (prevPtr == <span class="literal">NULL</span>)</span><br><span class="line">   &#123;</span><br><span class="line">      p = front;</span><br><span class="line">      front = front-&gt;NextNode();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">    p = prevPtr-&gt;DeleteAfter();</span><br><span class="line">   <span class="keyword">if</span> (p == rear)</span><br><span class="line">   &#123;</span><br><span class="line">      rear = prevPtr;</span><br><span class="line">      <span class="built_in">position</span>--;</span><br><span class="line">   &#125;</span><br><span class="line">   currPtr = p-&gt;NextNode();</span><br><span class="line">   FreeNode(p);</span><br><span class="line">   <span class="built_in">size</span>--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>使用： 代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"LinkedList.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkedList&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line">	<span class="keyword">int</span> a=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">"输入4个数用于创建链表A："</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">	    <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">		A.InsertRear(a);</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入3个数用于创建链表A："</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">	    <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">		B.InsertRear(a);</span><br><span class="line">	&#125;</span><br><span class="line">	A.Reset();</span><br><span class="line">    B.Reset();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"将B中的元素复制到链表A的尾部……"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	B.Reset();</span><br><span class="line">	<span class="keyword">while</span>(!B.EndOfList())</span><br><span class="line">	&#123;</span><br><span class="line">		A.InsertRear(B.Data());</span><br><span class="line">		B.Next();</span><br><span class="line">	&#125;</span><br><span class="line">	A.Reset();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">"合并之后，链表A的元素为："</span> ;</span><br><span class="line">	<span class="keyword">while</span>(!A.EndOfList())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; A.Data() &lt;&lt; <span class="string">"   "</span>;</span><br><span class="line">		A.Next();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/06/15613.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Template</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言使用多线程分析和例子</title>
    <url>/2018/04/11/c-yu-yan-shi-yong-duo-xian-cheng-fen-xi-he-li-zi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180411221012.png" alt=""> 因为最近在进行操作系统实验，涉及到了C语言多线程的实现，因此就写一片博文来讲一下。同样这个对于C++也适用。 首先要引用pthread.h 头文件。   声明一个线程变量： 格式：pthread_t 线程名（ps：这里也可以是一个线程组）   建立一个线程： 格式：pthread_create（） pthread_create(<a href="http://baike.baidu.com/view/4591990.htm">pthread_t</a> *restrict tidp,const pthread_attr_t *restrict_attr,void*（*start_rtn)(void*),void <em>restrict arg) 四个参数： 第一个参数为指向线程<a href="http://baike.baidu.com/view/390932.htm">标识符</a>的指针。 第二个参数用来设置线程属性。 第三个参数是线程运行函数的起始地址。 最后一个参数是运行函数的参数。   pthread_join用来等待一个线程的结束。 格式：pthread_join void <em>a  这个随意定义的 pthread_join (你定义的线程名,&amp;a);   线程的终止： pthread_exit()； 用来终止当前进程。   下面给出一些常用的操作函数： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180411222056.png" alt=""> 常用的同步函数： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180411222125.png" alt="">   接下来是应用实例： 我是以生产者消费者问题为实例，这里我是创建了多个生产者和消费者线程，让他们同时发生。 <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180411222254.png" alt="">   特别注意在Linux系统下编译可能会出现： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180411222415.png" alt=""> 需要 在编译时使用命令： <strong>gcc a.c -o b -lpthread</strong> 这样就可以编译成功了。(</em><sup>▽</sup></em>) End！</p>
]]></content>
      <categories>
        <category>C语言</category>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>C++之array</title>
    <url>/2018/05/16/c-zhi-array-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/%E5%9B%BE%E7%89%87150.png" alt=""> array是序列容器的一种，它类似一般数组，是在连续的内存上来存储数据，并且array的长度是固定的不可改变的。 这里需要的注意的是：array中元素可以被修改，但是不能在array上进行数据插入和删除。 那么问题来了为什么要使用array呢？ array相比较于一般数组，它提供了更好、更安全的接口，它除了具有一般数组的灵活性，还具有和一般数组相近的性能优势。   相比较于vector来说新创建的vector数组不会包含元素，而新创建的array就会包含固定数目的元素，并且这些元素都会被初始化。 因此在创建array数组时就要声明数组的大小，且后面不能再改变。   构造语句为： array&lt;类型，元素个数&gt;数组名称（={初值}）； 如果没有初值则默认为0，注意：能够用一个array数组来初始化另一个array数组，但是需要保证两个array数组的大小相同。 同样可以使用swap（）语句来对两个array数组进行交换。   array的成员函数fill（）可以用来将array中的所有元素赋值为一个相同的值。 array&lt;int,3&gt;arr1; arr1.fill(2);  这样就将arr1中所有的数据都改为了1.   array的成员函数有size（）可以获得当前数组的元素个数，方便对数组的遍历。   array的成员还有begin（）和end（）分别获得头尾成员。   简答使用：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; test1=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; test2=test1;</span><br><span class="line">    <span class="built_in">array</span>&lt;<span class="keyword">int</span>,5&gt; test3(test1);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输出array数组test:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;test1.<span class="built_in">size</span>();i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;test1\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;test1.<span class="built_in">begin</span>()&lt;&lt;<span class="string">" "</span>&lt;&lt;test1.<span class="built_in">end</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体的使用结果请自行尝试，因为我的凉了。。 大体上是对的。我编译会出错，度娘上面讲的也不是很清楚，所以这次是在抱歉了。 感觉这次有点少，其实我是想和valarray一起发的，但是还没弄完。所以就先发这个了。下次发valarray</p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>C++之多态性</title>
    <url>/2018/05/17/c-zhi-duo-tai-xing-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/%E5%9B%BE%E7%89%87150.png" alt=""> 多态性概述： 多态是指同样的消息被不同类型的对象接收时导致不同的行为。消息是指对类的成员函数调用，不同的行为是指不同的实现。 例如：浮点数和整型数，则要先将整形数转换为浮点数，然后在进行运算。   面向对象的多态可以分为4类：重载多态，强制多态，包含多态和参数多态。 对函数的重载都属于重载多态，接下来还会介绍运算符的重载。 强制多态是指将一个变元的类型加以变化，以符合一个函数或者操作的要求，比如类型的强制转换就是强制多态。， 包含多态是类族中定义于不同类中的同名成员函数的多态性为，主要通过虚函数来实现，在后面也会给出例子。 参数多态与类模板相关联。   多态从实现的角度来讲可以划分为两类：编译时的多态和运行时的多态。 前者是在编译的过程中确定了同名操作的具体操作对象，而后者则是在程序运行过程中才动态地确定操作所针对的具体对象。这种确定操作的具体对象的过程就是绑定。 绑定是指计算机程序本身彼此关联的过程。（实质上就是把一条消息和对象的方法相结合的过程）   绑定工作在编译连接阶段完成的情况称为静态绑定。 绑定工作在程序运行阶段完成的情况称为动态绑定。   运算符重载是对已有的运算符赋予多重含义，是同一个运算符作用于不同类型的数据是导致不同的行为。 比如：在string库文件中 就对+等运算进行了重载，这里的+号是进行两个字符串的连接。 重载运算符的规则：</p>
<ul>
<li>c<ins>中的运算符除了少数几个之外，全部可以重载，而且只能重载C</ins>中已经有的运算符。</li>
<li>重载之后运算符的优先级和结合性都不会改变</li>
<li>运算符重载是针对新类型数据的实际需要，对原有的运算符进行适当的改造。</li>
</ul>
<p><strong>给出不能重载的运算符：“.”类关系运算符，“.*”成员指针运算符，“::”作用域分辩符，“？：”三木运算符。</strong>  两种重载运算符的形式：</p>
<ol>
<li>重载类的非静态成员函数声明的语法形式：</li>
</ol>
<p>返回类型 operator 运算符（形参表） { 函数体; }</p>
<ol start="2">
<li>运算符重载为非成员函数的一般语法形式：</li>
</ol>
<p>返回类型 operator 运算符（形参表） { 函数体; } 貌似两个格式上没差啊！   运算符的重载实质上就是成员函数的重载，重载为成员函数。它可以自由的访问该类中的数据成员。 <strong>需要注意的是：如果是双目运算符，左操作数是对象本身的数据，由this指针指出。右操作数则需要通过运算符重载函数的参数表指出。</strong> 上面需要的主要的内容就在下面例子有了很好的解释。为什么在重载—a时需要使用int参数表。   下面给出一个运算符重载为成员函数的例子： 重载a++ 、++a 、a-- 、–a 运算符： 代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    Point(<span class="keyword">int</span> x,<span class="keyword">int</span> y);</span><br><span class="line"></span><br><span class="line">    ~Point()&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Point&amp; <span class="keyword">operator</span>++();  <span class="comment">//对a++进行重载</span></span><br><span class="line"></span><br><span class="line">    Point <span class="keyword">operator</span>++(<span class="keyword">int</span> i); <span class="comment">//对++a 进行重载</span></span><br><span class="line"></span><br><span class="line">    Point&amp; <span class="keyword">operator</span>--(); <span class="comment">//对a--进行重载</span></span><br><span class="line"></span><br><span class="line">    Point <span class="keyword">operator</span>--(<span class="keyword">int</span> i);   <span class="comment">//对--a进行重载</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>; <span class="comment">//打印坐标点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> _x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> _y;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Point::Point(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    _x=x;</span><br><span class="line"></span><br><span class="line">    _y=y;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Point&amp; Point::<span class="keyword">operator</span>++()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    _x+=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    _y+=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Point Point::<span class="keyword">operator</span>++(<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    Point temp=*<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    ++*<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Point&amp; Point::<span class="keyword">operator</span>--()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    _x-=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    _y-=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Point Point::<span class="keyword">operator</span>--(<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   Point temp = *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">   --*<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> temp;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Point::<span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;\_x&lt;&lt;<span class="string">" "</span>&lt;&lt;\_y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x1,y1;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"点point1的x和y坐标:"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x1&gt;&gt;y1;</span><br><span class="line"></span><br><span class="line">    <span class="function">Point <span class="title">point1</span><span class="params">(x1,y1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"使用重载的a++之后的坐标："</span>;</span><br><span class="line"></span><br><span class="line">    point1++;</span><br><span class="line"></span><br><span class="line">    point1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"使用重载的++a之后的坐标："</span>;</span><br><span class="line"></span><br><span class="line">    ++point1;</span><br><span class="line"></span><br><span class="line">    point1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"使用重载的a--之后的坐标："</span>;</span><br><span class="line"></span><br><span class="line">    point1--;</span><br><span class="line"></span><br><span class="line">    point1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"使用重载的--a之后的坐标："</span>;</span><br><span class="line"></span><br><span class="line">    --point1;</span><br><span class="line"></span><br><span class="line">    point1.<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/123123123.png" alt=""> 虚函数 虚函数是动态绑定的基础。虚函数必须是非静态成员的函数。虚函数经过派生之后，在类族中就可以实现运行程序过中的多态，也就是包含多态。   一般虚函数成员的声明语法是： virtual 函数类型 函数名（形参表）； 注意：虚函数声明只能出现在类定义中的函数原型声明中，而不能在成员函数实现的时候。 即为：在类中要声明是一个虚函数，而不是在类外部实现时。   需要注意的几点：</p>
<ol>
<li>类之间满足赋值兼容规则</li>
<li>要声明虚函数</li>
<li>由成员函数来调用或者是通过指针、引用来访问虚函数。、</li>
</ol>
<p>对于在派生类中虚函数自己的理解： 如果用一个基类来声明一个指针并指向它的派生子类时需要使用new 来动态创建。 并且在使用派生子类的成员函数时，需要在基类中声明该成员函数并且声明为虚函数，这样才可以使用派生子类的成员函数。在下面的例子中也会用到 接下来给出一个例子 代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vehicle</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    vehicle()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     Vehicle's message:Create"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~vehicle()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     Vehicle's message:Destroy"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> Lunzi;  <span class="comment">//轮子数目</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> Price;  <span class="comment">//价格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetLunZi</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        Lunzi=n;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetPrice</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        Price = n;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">virtual</span> <span class="title">Run</span><span class="params">()</span></span>&#123;<span class="keyword">int</span> i;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="keyword">virtual</span> <span class="title">Stop</span><span class="params">()</span></span>&#123;<span class="keyword">int</span> i;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bicycle</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> vehicle</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    bicycle()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     bicycle's message:Create"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~bicycle()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     bicycle's message:Destroy"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> PinPai;  <span class="comment">//品牌</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetPinPai</span><span class="params">(<span class="built_in">string</span> a)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        PinPai = a;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        v=<span class="number">0</span>; <span class="comment">//速度初值为0</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"自行车启动！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)  <span class="comment">//自行车最大速度为30km/s</span></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            v=i+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            Sleep(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前自行车的速度为："</span>&lt;&lt;v&lt;&lt;<span class="string">"km/s"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"开始刹车！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        Sleep(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"自行车停止速度变为："</span>&lt;&lt;v&lt;&lt;<span class="string">"km/s"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        v=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">motorcar</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> vehicle</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    motorcar()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     motorcar's message:Create"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~motorcar()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     motorcar's message:Destroy"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> PinPai;  <span class="comment">//品牌</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetPinPai</span><span class="params">(<span class="built_in">string</span> a)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        PinPai = a;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        v=<span class="number">0</span>; <span class="comment">//速度初值为0</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"汽车启动！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)  <span class="comment">//自行车最大速度为30km/s</span></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            v=i+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            Sleep(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"当汽车的速度为："</span>&lt;&lt;v&lt;&lt;<span class="string">"km/s"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"开始刹车！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        Sleep(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"汽车完全停止,速度变为："</span>&lt;&lt;v&lt;&lt;<span class="string">"km/s"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        v=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">motorcycle</span>:</span><span class="keyword">public</span> bicycle,<span class="keyword">public</span> motorcar</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    motorcycle()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     motorcycle's message:Create"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~motorcycle()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     motorcycle's message:Destroy"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetMessage</span><span class="params">(<span class="built_in">string</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        bicycle::SetPinPai(a);</span><br><span class="line"></span><br><span class="line">        vehicle::SetPrice(b);</span><br><span class="line"></span><br><span class="line">        vehicle::SetLunZi(c);</span><br><span class="line"></span><br><span class="line">        v=d;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OutMessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     摩托车品牌名称："</span>&lt;&lt;bicycle::PinPai&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     摩托车价格："</span>&lt;&lt;vehicle::Price&lt;&lt;<span class="string">"元"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     摩托车轮子数；"</span>&lt;&lt;vehicle::Lunzi&lt;&lt;<span class="string">"个"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     摩托车速度："</span>&lt;&lt;v&lt;&lt;<span class="string">"km/h"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        v=<span class="number">0</span>; <span class="comment">//速度初值为0</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"摩托车启动！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)  <span class="comment">//摩托车最大速度为100km/s</span></span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            v=i+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            Sleep(<span class="number">250</span>);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前摩托车的速度为："</span>&lt;&lt;v&lt;&lt;<span class="string">"km/s"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"开始刹车！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        Sleep(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"摩托车停止速度变为："</span>&lt;&lt;v&lt;&lt;<span class="string">"km/s"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        v=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v;  <span class="comment">//速度</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    vehicle *bike1 =<span class="keyword">new</span> motorcycle();</span><br><span class="line"></span><br><span class="line">    vehicle *bike2 =<span class="keyword">new</span> bicycle();</span><br><span class="line"></span><br><span class="line">    vehicle *bike3 =<span class="keyword">new</span> motorcar();</span><br><span class="line"></span><br><span class="line">    bike1-&gt;Run();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    bike1-&gt;Stop();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    bike2-&gt;Run();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    bike2-&gt;Stop();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    bike3-&gt;Run();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    bike3-&gt;Stop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/312312313.png" alt=""> 通过上面的例子可以看出 <strong>如果在派生类中没有显示给出声明的话，系统则遵循下面规则进行判断派生类的一个成员函数是不是虚函数：</strong></p>
<ol>
<li><strong>该函数是否与基类的虚函数有相同的名称。</strong></li>
<li><strong>该函数是否与基类的虚函数有相同的参数个数，以相同的对应参数类型。</strong></li>
<li><strong>该函数是否与基类的虚函数有相同的返回值或者满足赋值兼容规则的指针、引用型的返回值。</strong></li>
</ol>
<p><strong>如果均满足就会被认定为虚函数。这个时候派生类的成员函数会覆盖掉基类的虚函数！</strong> 同样如果有多个派生类均会覆盖。</p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>多态</tag>
      </tags>
  </entry>
  <entry>
    <title>C++之valarray</title>
    <url>/2018/05/18/c-zhi-valarray-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/%E5%9B%BE%E7%89%87150.png" alt=""> valarray使用： valarray类似vector，也是一个模板类，其主要被用来对一系列元素进行高速的数字计算。 但是它和vector还是有区别的： 1、valarray定义了一组在两个相同长度和相同类型的valarray类对象之间的数字计算，例如xarr = cos(yarr) + sin(yarr)； 2、通过重载operater[]，可以返回valarray的相关信息（valarray其中某个元素的引用、特定下标的值或者其某个子集）。 它支持很多数值数组操作，如求数组总和，最大值，最小值等。 通过引用#include<valarray>来使用 对于上面的对数组进行整体操作的方式和python中numpy数组的使用挺相似的。   构造函数： valarray&lt;类型&gt;（test1）名称； //初始长度为0 valarray&lt;类型&gt;名称（n）； //初始长度为n valarray&lt;类型&gt;test2（test1）； //调用复制构造函数   成员函数： test1.apply（函数）；  //将指定的函数应用于valarray的每个元素。即对test1中每个元素都调用用函数 test1.cshift（）；  //将valarray中的所有元素按指定的位置顺序移动。 例如： test1.cshift（4）； 为将test1中所有元素都右移四位 test1.max（）;  //找到该数组中最大元素 test1.min（）； //找到该数组中最小元素 test1.resize（）；  //将valarray中的元素数量更改为指定的数字，根据需要添加或删除元素。 test1.shift（）； //将valarray中的所有元素移位指定的位置数。 test1.size（）； //得到当前valarray数组中元素个数 test1.sum（）； //确定非零长度的valarray中所有元素的总和。 但是遗憾的是它没有push_back（） begin（） end（）insert（）等成员函数。 对于数组的赋值在下面的例子中会使用。   同样valarray也对各种运算符进行了重载 运算符 !  //获得valarray中每个元素的逻辑NOT值的一元运算符。 %=  //通过指定的valarrayor或元素类型的值来获得数组元素的剩余部分。 &amp;=  //获取数组中元素的按位与，或者与指定的数组中的相应元素或元素类型的值进行比较。 &gt;&gt;=  //将valarray操作数的每个元素的位右移位指定数量的位置，或者通过第二个valarray指定的元素方式右移位。   &lt;&lt;=  //将valarray操作数的每个元素的位向左移位指定数量的位置，或者由第二个valarray指定的元素方式量左移位。   *=  //将指定的valarray的元素或元素类型的值（元素值）乘以一个操作数。 + //将指定的valarray元素或元素类型的值（元素）和操作数进行相加。</p>
<ul>
<li>//将减号应用于valarray中的每个元素的一元运算符。即为负号</li>
</ul>
<p>-= //将指定的valarray元素或元素类型的值（元素）和操作数进行相减。 /= //用指定valarray的元素或元素类型的值元素分隔操作数valarray。 =  //将元素分配给valarray，其值可以直接指定，也可以作为其他某些数据项的一部分或由slice_array，gslice_array，mask_array或indirect_array指定。 [ ]  //返回对指定索引或指定子集的元素或其值的引用。 ^=  //获取具有指定valarray或元素类型值的数组的元素明确的逻辑或运算符（XOR） |=   //获取数组中元素的按位或或者与指定的数组中的相应元素或元素类型的值。 ~   //一个一元运算符，用于获取valarray中每个元素的按位非值。   slice类用法： 该类主要配合 valarray 类使用，可以从 valarray 中提取子数组 slice( ); slice( size __ _t __StartIndex _,// 截取数组的开始位置 const valarray<size __ _t> __Len _, 2，// 子数组的最大长度 const valarray<size __ _t> __Stride// _<em>相隔多少个元素选中一个</em> ); <strong>Gslice</strong> <strong>类用法</strong> Gslice 类的用法和slice 基本相同，只是它截取的是循环子串，当母串进行一次提取后的字串元素数目达不到要求时，gslice 会将提取后的母串继续组合进行提取直到满足要求或者母串被提取完了 公共函数( 对数组的操作) abs 对数组的每一个元素取绝对值 acos 返回每个元素的反余弦值 asin  返回每个元素的反正弦值 atan  返回每个元素的正切值 atan2 笛卡尔正切值 cos 余弦值 cosh  双曲线余弦值 exp 返回自然指数E^x log 返回自然对数 log10 返回以10 为底的返回自然对数 exp 返回x^y sin 正弦值 sinh 双曲线正弦值 .sqrt 开方 tan 正切值 tanh 反正切值   使用：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    valarray&lt;<span class="keyword">int</span>&gt;a;  <span class="comment">//定义一个长为0的valarray数组</span></span><br><span class="line"></span><br><span class="line">    valarray&lt;<span class="keyword">int</span>&gt;b(<span class="number">1</span>,<span class="number">5</span>);  <span class="comment">//用1初始化b  b的元素个数为5</span></span><br><span class="line"></span><br><span class="line">    valarray&lt;<span class="keyword">int</span>&gt;c(b);  <span class="comment">//用b来初始化c</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> data\[<span class="number">5</span>\]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//valarray&lt;int&gt;d(data,3); //也成立</span></span><br><span class="line"></span><br><span class="line">    valarray&lt;<span class="keyword">int</span>&gt;d(data,<span class="number">5</span>);  <span class="comment">//去data数组中前三个元素来初始化d数组</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"b中元素的总和："</span>&lt;&lt;b.sum()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输出d中最大元素："</span>&lt;&lt;d.<span class="built_in">max</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"d中元素："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;d.<span class="built_in">size</span>();i++)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;d\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"没进行+=之前b中元素："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.<span class="built_in">size</span>();i++)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;b\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    b+=d;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"之后b中元素："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.<span class="built_in">size</span>();i++)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;b\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    valarray&lt;<span class="keyword">int</span>&gt;e(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"使用=运算符之后："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    b=e;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"b中元素："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;b.<span class="built_in">size</span>();i++)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;b\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    valarray&lt;<span class="keyword">int</span>&gt;f(data,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"f中元素："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;f.<span class="built_in">size</span>();i++)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;f\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用slice切割</span></span><br><span class="line"></span><br><span class="line">    <span class="function">slice <span class="title">t</span><span class="params">(<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    a=f\[t\];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有一个问题就是slice的使用类似切片操作，但是我明明编译没有错误，但是就是显示不出来结果，暂时没办法解决，感觉是我c++编译器版本的问题。</p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>valarray</tag>
      </tags>
  </entry>
  <entry>
    <title>C++之继承派生</title>
    <url>/2018/05/10/c-zhi-ji-cheng-pai-sheng-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/510baad315cd40fc90c092cba2d63480.jpg" alt=""> 类的继承，是新的类从已有的类那里得到已有的特性。从另一个角度上看，从已有的类中产生新类的过程就是类的派生。 原有的类称为基类或父类，产生的新类称为派生类或子类。派生类也可以作为基类派生新的类，这样就形成了类的层次结构。   派生类的定义： class 派生类名称：继承方式 基类名1，继承方式 基类名2，继承方式 基类名3 { 派生类成员声明； } 代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Animal()&#123;&#125;;</span><br><span class="line">    ~Animal()&#123;&#125;;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span><span class="keyword">public</span> Animal</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Dog()&#123;&#125;;</span><br><span class="line">    ~Dog()&#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">SetAge</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Dog::SetAge(<span class="keyword">int</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    age=n;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"age="</span>&lt;&lt;age&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Dog dog;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">10</span>;</span><br><span class="line">    dog.SetAge(n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/1-4.png" alt=""> 一个派生类，可以同时有多个基类，这种情况称为多继承，这时的派生类同时得到多个已有类的特征。 一个派生类只有一个直接基类的情况称为单继承。 <img src="http://47.100.4.8/wp-content/uploads/2018/05/2-4.png" alt=""> 继承方式关键字：public，protected，private分别表示公有继承，保护继承，私有继承。 1.公有继承，使得基类public（公有）和protected（保护）成员的访问属性在派生类中不变，而基类private（私有）成员不可访问 2.私有继承，使用基类public（公有）和protected（保护）成员都以private（私有）成员身份出现在派生类中，而基类private（私有）成员不可访问。 3.保护继承中，基类public（公有）和protected（保护）成员都已protected（保护）成员身份出现在派生类中，而基类private（私有）成员不可访问。   上面的代码就是使用public公有继承。   构造函数： 构造派生类的对象时，就要对基类的成员对象和新增成员对象进行初始化。 派生类构造函数的一般语法形式： 派生类名：：派生类名（参数表）：基类名1 （），基类名2（）…… { 派生类构造函数的其他初始化操作； }   如果对基类初始化时，需要调用基类带有形参的构造函数，派生类就必须声明构造函数。   析构函数： 同样也要调用基类的成员析构函数和该类的析构函数。   代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BaseClass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     BaseClass's message:Create"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~BaseClass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     BaseClass's message:Destroy"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedClass</span>:</span><span class="keyword">public</span> BaseClass</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DerivedClass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     DerivedClass's message:Create"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~DerivedClass()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     DerivedClass's message:Destroy"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"MessageBox:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    DerivedClass derivedclass;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/3-3.png" alt=""> 由截图可以看出继承构造和析构函数的使用：如果DerivedClass继承于基类BaseClass，则在使用DerivedClass类去声明一个对象时，会先创建一个BaseClass类的对象，然后在创建DerivedClass类的对象，上面是构造函数的调用情况，然后是析构函数的调用情况，是先调用DerivedClass的析构函数，然后再调用BaseClass的析构函数。   <strong>在派生类中可以使用基类名：：基类成员来访问基类中的成员。</strong> 访问方式也会在下面使用到   先介绍一下虚基类： 当某类的部分或全部直接基类是从另一个基类派生而来的，这些直接基类中，从上一级基类继承来的成员就拥有相同的名称，派生类的对象的这些同名成员在内存中同时拥有多个拷贝，我们可以使用作用于分辨符来唯一标识并分别访问他们，我们也可以<strong>将直接基类的共同基类设置为虚基类，这时从不同的路径继承过来的该类成员在内存中只拥有一个拷贝</strong>，这样就解决了同名成员的唯一标识问题。   虚基类的声明是在派生类的声明过程中，其语法格式为： class 派生类名：virtual 继承方式 基类名 在多继承情况下，虚基类关键字的作用范围和继承方式关键字相同，只对紧跟其后的基类起作用，声明了虚基类之后，虚基类的成员在进一步的派生中，和派生类一起维护一个内存数据拷贝。   图示： <img src="http://47.100.4.8/wp-content/uploads/2018/05/4-3.png" alt=""> 使用 代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">vehicle</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vehicle()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     Vehicle's message:Create"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~vehicle()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     Vehicle's message:Destroy"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> Lunzi;  <span class="comment">//轮子数目</span></span><br><span class="line">    <span class="keyword">int</span> Price;  <span class="comment">//价格</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetLunZi</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Lunzi=n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetPrice</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Price = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bicycle</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> vehicle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    bicycle()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     bicycle's message:Create"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~bicycle()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     bicycle's message:Destroy"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> PinPai;  <span class="comment">//品牌</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetPinPai</span><span class="params">(<span class="built_in">string</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        PinPai = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">motorcar</span>:</span><span class="keyword">virtual</span> <span class="keyword">public</span> vehicle</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    motorcar()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     motorcar's message:Create"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~motorcar()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     motorcar's message:Destroy"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> PinPai;  <span class="comment">//品牌</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetPinPai</span><span class="params">(<span class="built_in">string</span> a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        PinPai = a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">motorcycle</span>:</span><span class="keyword">public</span> bicycle,<span class="keyword">public</span> motorcar</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    motorcycle()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     motorcycle's message:Create"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~motorcycle()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     motorcycle's message:Destroy"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetMessage</span><span class="params">(<span class="built_in">string</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        bicycle::SetPinPai(a);</span><br><span class="line">        vehicle::SetPrice(b);</span><br><span class="line">        vehicle::SetLunZi(c);</span><br><span class="line">        v=d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OutMessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     摩托车品牌名称："</span>&lt;&lt;bicycle::PinPai&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     摩托车价格："</span>&lt;&lt;vehicle::Price&lt;&lt;<span class="string">"元"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     摩托车轮子数；"</span>&lt;&lt;vehicle::Lunzi&lt;&lt;<span class="string">"个"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"     摩托车速度："</span>&lt;&lt;v&lt;&lt;<span class="string">"km/h"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> v;  <span class="comment">//速度</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"MessageBox:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    motorcycle mb;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入摩托车品牌名称："</span>;</span><br><span class="line">    <span class="built_in">string</span> s1;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入摩托车价格："</span>;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入摩托车轮子数；"</span>;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入摩托车速度："</span>;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;c;</span><br><span class="line">    mb.SetMessage(s1,a,b,c);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"摩托车信息显示："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    mb.OutMessage();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/5-1.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title>C++之STL介绍</title>
    <url>/2018/05/07/c-zhi-stl-jie-shao-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180507183124.png" alt=""> C<ins>STL（标准模板库）是一套功能强大的C</ins>模板类，提供了通用的模板类和函数，这些模板类和函数可以实现多种流行和常用的算法和数据结构，如向量、链表、队列、栈。 C++标准模板库三个核心组件：</p>
<p>算法（Algorithm）</p>
<p>算法作用于容器。它们提供了执行各种操作的方式，包括对容器内容执行初始化、排序、搜索和转换等操作。</p>
<p>容器（Containers）</p>
<p>容器是用来管理某一类对象的集合。C++ 提供了各种不同类型的容器，比如 deque、list、vector、map 、set等。</p>
<p>迭代器（iterators）</p>
<p>迭代器用于遍历对象集合的元素。这些集合可能是容器，也可能是容器的子集。</p>
<p>在C++标准库中，STL被组织在13个头文件中：<strong><algorithm>****、<deque>、<functional>、<iterator>、<vector>、<list>、<map>、<memory>、<numeric>、<queue>、<set>、<stack>和<utility>。</strong> <strong>STL****提供了大约100多个实现算法的模板函数。</strong></p>
<ol>
<li>算法部分的主要头文件为：<strong><algorithm>****、<numeric>、<functional></strong></li>
</ol>
<p>**<algorithm>**<strong>是所有STL头文件中最大的一个（尽管它很好理解），它是由一大堆模版函数组成的，可以认为每个函数在很大程度上都是独立的，其中常用到的功能范围涉及到比较、交换、查找、遍历操作、复制、修改、移除、反转、排序、合并等等。</strong> **<numeric>**<strong>体积很小，只包括几个在序列上面进行简单数学运算的模板函数，包括加法和乘法在序列上的一些操作。</strong> **<functional>**<strong>中则定义了一些模板类，用以声明函数对象。</strong></p>
<ol start="2">
<li>容器部分的头文件：<strong><vector>,<list>,<deque>,<set>,<map>,<stack>和<queue></strong></li>
</ol>
<p><strong>向量(vector) 连续存储的元素<vector></strong> <strong>列表(list)       由节点组成的双向链表，每个结点包含着一个元素<list></strong> <strong>双队列(deque) 连续存储的指向不同元素的指针所组成的数组<deque></strong> <strong>集合(set) 由节点组成的红黑树，每个节点都包含着一个元素，节点之间以某种作用于元素对的谓词排列，没有两个不同的元素能够拥有相同的次序 <set></strong> <strong>多重集合(multiset) 允许存在两个次序相等的元素的集合 <set></strong> <strong>栈(stack) 后进先出的值的排列 <stack></strong> <strong>队列(queue) 先进先出的执的排列 <queue></strong> <strong>优先队列(priority_queue) 元素的次序是由作用于所存储的值对上的某种谓词决定的的一种队列 <queue></strong> <strong>映射(map) 由{键，值}对组成的集合，以某种作用于键对上的谓词排列 <map></strong> <strong>多重映射(multimap) 允许键对有相等的次序的映射 <map></strong>   3.迭代器 包含迭代器的头文件<utility>,<iterator>和<memory>。 **<utility>**是一个很小的头文件，它包括了贯穿使用在STL中的几个模板的声明， **<iterator><strong>中提供了迭代器使用的许多方法，而对于</strong><memory><strong>的描述则十分的困难，它以不同寻常的方式为容器中的元素分配存储空间，同时也为某些算法执行期间产生的临时对象提供机制,</strong><memory>**中的主要部分是模板类allocator，它负责产生所有容器中的默认分配器。   后面会慢慢给出给出各个容器的使用。</p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的网页界面错误</title>
    <url>/2018/03/21/chang-jian-de-wang-ye-jie-mian-cuo-wu-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/76-1FG0094619-50-water-300x212.jpg" alt=""> 相信小伙伴们是不是对这个界面是不是很眼熟  o(￣ヘ￣o＃) 今天我介绍一些类似的界面错误…… <img src="http://47.100.4.8/wp-content/uploads/2018/03/D0E4AC9A55D6E8EA0B0158808DC061A1-236x300.jpg" alt=""> 其实以4xx开头的错误都是跟“客户端”有关 首先是大家最常见的404错误！ <img src="http://47.100.4.8/wp-content/uploads/2018/03/76-1FG0094618-water-300x186.jpg" alt=""> **404错误：**是访问了不存在的页面，用户权限不足或者未提供有效的验证信息才会出现的错误23333 400错误，这个错误确实很少见（反正我很少见到） <img src="http://47.100.4.8/wp-content/uploads/2018/03/76-1FG0094619-51-water-300x168.jpg" alt=""> 400代表语义有误，服务器无法理解用户的请求，除非进行修改，不然没必要一边按F5一边喷服务器垃圾。   **401错误：**一般来说该错误消息表明你首先需要登录（输入有效的用户名和密码）。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/ac345982b2b7d0a2e843b0a1c0ef76094b369a00-300x200.jpg" alt=""> 图种意思很明显，如果你不输入这些信息，就会有401错误，这意味着验证信息出错，服务器无法识别你的身份。（被t出去333333）   **403错误：**这个错误相信很多写过爬虫的朋友都会有过出现403错误的经历，那这是什么原因呢？ 其实是：出现403是因为服务器拒绝了你的地址请求，或者你根本没权限访问网站，提供身份验证也没用，也就是说，用户被禁止访问了。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/76-1FG0094621-water-300x272.jpg" alt=""> 然而除非与Web服务器管理员联系，否则一旦遇到403状态码都无法自行解决。 ┐(ﾟ～ﾟ)┌   **408超时请求错误：**遇到408意味着你的请求发送到该网站花的时间比该网站的服务器准备等待的时间要长，即链接超时。408错误往往难以解决，通常涉及系统工作量或系统操作中的一次性变化。如果用户持续看到408错误，管理员首先要考虑到Web服务器的工作量，特别是在产生408错误的时间段，另外网络流量激增也可能导致用户无法访问网页从而出现该错误。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/76-1FG0094621-50-water-300x185.jpg" alt=""> 一般是网络不好的时候就会这样。。timeout嘛你懂得 梯子不够长，墙外的世界并不是想看就能看 手动滑稽23333   <strong>410永久删除错误</strong>：如果用户访问的网页被永久删除，服务器就会返回410代码。410实际上和404有点相似，在服务器不确定这个情况是不是永久的情况下，应该使用404状态码。410响应的目的主要是帮助网站管理员维护网站，通知用户这个网页资源已经不能再使用，并且服务器拥有者希望所有指向这个资源的远端链接也被删除。   <strong>301永久移动，302临时移动</strong>：在优化网站的时候，301重定向是网站管理员必用的，在网页被移动后多数情况下浏览器会自动定向到新的URI（统一资源标识符），并且以后任何新的请求都应使用新的URI来代替。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/u15058723574019459329fm27gp0-300x300.jpg" alt=""> 而302只是URI被理解为临时交换而已，客户端还是会继续使用原来的地址发送请求。这两种现象出现在网页的域名更换后，搜索引擎还使用原有域名地址访问URI，如果搜索引擎得到301返回码，那么搜索引擎就知道管理员更换了域名，下次就会自动用新域名来索引网站。   **305****使用代理：**访问者只能使用代理来访问网页，如果服务器放回这个状态码，意思是你需要一张梯子。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/76-1FG0094621-51-water-300x198.jpg" alt=""> 想要登陆诸如Google，Youtube，Facebook这些不存在的网站，除了使用VPN别无办法。 还是那句话如果想翻墙梯子要够长2333！ <strong>500服务器内部错误：</strong> 错误说明IIS服务器无法解析ASP代码，访问一个静态页面试试是否也出现这个问题，如果访问静态页面没问题，那就要分以下几种 情况来分析了： ① 你是否改变过计算机名称。 ② 站点所在的<a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95">文件目录</a>是否自定义了安全属性。 ③ 安装了<a href="https://baike.baidu.com/item/%E5%9F%9F%E6%8E%A7%E5%88%B6%E5%99%A8">域控制器</a>后是否调整了域策略。如果是其中的一种情况，请一一将 改变的参数设置回来看是否解决问题。 如果静态空间也无法访问，则说明解析还没生效 <img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-4-300x141.jpg" alt="">   大概就到这里把 我还有一部分没讲主要是大家遇见的也少，比如上面这些有一些我根本就碰不到23333 End！ <img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-1-300x225.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Web</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>Error</tag>
      </tags>
  </entry>
  <entry>
    <title>C++指针数组学习</title>
    <url>/2018/05/03/c-zhi-zhen-shu-zu-xue-xi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/%E5%9B%BE%E7%89%87150.png" alt=""> 对C++指针的整理： 指针变量是用于存放内存单元地址的。 声明指针的语法形式： 数据类型 <em>标识符；   要注意的只有指针名字是代表的是赋值给指针元素的地址，如果使用</em>指针名 则是该元素的真实值。 例如：</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> *<span class="built_in">t</span>;</span><br></pre></td></tr></table></figure>
<p>上面例子定义是声明一个整形的指针变量，这个指针的名称为t专门用来存放int型数据的地址。   指针的赋值 语法形式： 数据类型 *标识符; 指针名=数据名 //注意这里的数据的类型要和指针的类型相同   例如：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">int a=<span class="number">0</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">int *t<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">t</span> = a<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>一个数组，可以用他的名字来直接表示它的起始地址。 例如：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> a\[<span class="number">10</span>\]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> *t = a;</span><br></pre></td></tr></table></figure>
<p>这里还有一点需要注意的是： 通过指针访问数组元素时要使用：*(t+i)  i为该元素在数组中的序号 综上诉述：（给出一个实例来表示） 代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a\[<span class="number">5</span>\]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *t=a;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"数组值："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"指针值："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*(t+i)&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  结果： ![](http:<span class="comment">//47.100.4.8/wp-content/uploads/2018/05/1-2.png)     接下来介绍的二维数组的指针介绍以及在函数参数传递时使用指针经传递：   二维指针数组的定义为： 类型 (*指针名)\[二维数组每列元素的个数\]; 例如：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> (*t)\[<span class="number">2</span>\];</span><br><span class="line"></span><br><span class="line">  在访问指针二维数组时 格式为 *（*（指针名+i）+j） 如果为：（*（指针名+i）+j） 则代表数组的每行的首地址 使用： 代码：  </span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> (*t)\[<span class="number">2</span>\];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a\[<span class="number">2</span>\]\[<span class="number">2</span>\]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    t=a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line"></span><br><span class="line">           <span class="built_in">cout</span>&lt;&lt;a\[i\]\[j\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"对比："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">2</span>;j++)</span><br><span class="line"></span><br><span class="line">           <span class="built_in">cout</span>&lt;&lt;*(*(t+i)+j)&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/2-2.png" alt="">   接下来介绍指针二维数组作为参数传递的使用： 其实数组不使用指针传递，在调用的函数中如果有对数组的修改原数组的值也会发生改变 下面用一个给出（这是一个矩阵转置的例子） 代码：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void MatrixTranspose(int a<span class="symbol">\[</span><span class="symbol">\]</span><span class="symbol">\[</span>3<span class="symbol">\]</span>)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    int b<span class="symbol">\[</span>3<span class="symbol">\]</span><span class="symbol">\[</span>3<span class="symbol">\]</span>=&#123;0&#125;;</span><br><span class="line"></span><br><span class="line">    for(int i=0;i&lt;3;i++)</span><br><span class="line"></span><br><span class="line">        for(int j=0;j&lt;3;j++)</span><br><span class="line"></span><br><span class="line">           b<span class="symbol">\[</span>j<span class="symbol">\]</span><span class="symbol">\[</span>i<span class="symbol">\]</span>=a<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>;</span><br><span class="line"></span><br><span class="line">    for(int i=0;i&lt;3;i++)</span><br><span class="line"></span><br><span class="line">        for(int j=0;j&lt;3;j++)</span><br><span class="line"></span><br><span class="line">           a<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>=b<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    int a<span class="symbol">\[</span>3<span class="symbol">\]</span><span class="symbol">\[</span>3<span class="symbol">\]</span>=&#123;0&#125;;</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;"请输入一个3*3的数组："&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    for(int i=0;i&lt;3;i++)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        for(int j=0;j&lt;3;j++)</span><br><span class="line"></span><br><span class="line">            cin&gt;&gt;a<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MatrixTranspose(a);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;"经过转置之后的数组为："&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    for(int i=0;i&lt;3;i++)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        for(int j=0;j&lt;3;j++)</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;a<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>&lt;&lt;" ";</span><br><span class="line"></span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/3-2.png" alt="">   然后给出一个数组作为指针进行参数传递的例子： （同样这里使用到了动态数组的声明） 即在参数形参定义是直接定义一个二维指针数组进行接收二维数组的地址 代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MatrixTranspose</span><span class="params">(<span class="keyword">int</span> (*a)\[<span class="number">3</span>\],<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> (*t)\[<span class="number">3</span>\] = <span class="keyword">new</span> <span class="keyword">int</span>\[<span class="number">3</span>\]\[<span class="number">3</span>\];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"></span><br><span class="line">           *(*(t+j)+i)=a\[i\]\[j\];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line"></span><br><span class="line">           a\[i\]\[j\]=*(*(t+i)+j);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> \[\] t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a\[<span class="number">3</span>\]\[<span class="number">3</span>\]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入一个3*3的数组："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a\[i\]\[j\];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    MatrixTranspose(a,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"经过转置之后的数组为："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a\[i\]\[j\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/4-2.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos部分基础操作指令</title>
    <url>/2018/03/04/centos-bu-fen-ji-chu-cao-zuo-zhi-ling-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304144234-300x298.png" alt=""> 1.连接远程服务器用户名统一为root 密码一般为自己设置的 2.安装解压  yum  install -y zip 3.安装解压 yum  install -y unzip 4.解压文件的命令 unzip 名称.zip  /位置 5.压缩文件的命令 zip 名称.zip /位置 6.进入文件夹 cd /文件夹名称 7.查找文件位置  find / -name 文件名 8.一般运行文件直接输入该文件名称要加上后缀名 9.移动文件的操作 mv 文件名称 /位置 10.删除文件  rm -f 文件名称   （尽量处在文件目录） 11.以root（管理员身份）修改文件权限    chmod -R 777 文件夹的名字 （当前所在的目录下的文件夹，777代表可读可写可操作）</p>
]]></content>
      <categories>
        <category>Centos</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Centos</tag>
        <tag>命令</tag>
      </tags>
  </entry>
  <entry>
    <title>C++之vector使用</title>
    <url>/2018/05/06/c-zhi-vector-shi-yong-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/%E5%9B%BE%E7%89%87150.png" alt=""> 使用vector创建数组对象   C++标准库提供了被封装的动态数组—vector，而且这种封装的数组可以具有各种类型。 vector它不是类，它是类的一个模板。 使用vector动态定义数组的形式为： vector&lt;元素类型&gt;数组对象名（数组长度）;   例如： vector<int>array(5);  //创建一个长度为5的动态整形数组对象   与普通数组不同的是，用vector定义的数组对象所有的元素都会被初始化。如果数组的元素类型为基本数据类型，则所有元素都会被以0初始化。如果数组元素为类类型，则会调用类的默认构造函数初始化。   创建数组的元素初值也可以自己选择： 但是只能为相同的初值 vector&lt;元素类型&gt;数组对象名（数组长度,元素初值）; 对vector数组对象元素的访问方式为：数组对象名[下标表达式]; 可以使用它的成员函数size（）来得到数组的大小。   计算数组平均值：使用到了size（） 代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">average</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;&amp;arr)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.<span class="built_in">size</span>();i++)</span><br><span class="line"></span><br><span class="line">        sum += arr\[i\];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum/arr.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入n的值："</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt;arr(n,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入n个数组元素:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;arr\[i\];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"平均值为："</span>&lt;&lt;average(arr)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/123123.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>vector</tag>
      </tags>
  </entry>
  <entry>
    <title>Chrome去除标签栏的缩略图导航</title>
    <url>/2018/04/17/chrome-qu-chu-biao-qian-lan-de-suo-lue-tu-dao-hang-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180417100119.png" alt=""> 最近开始使用Chrome浏览器了，主要是觉得360 chrome内核的浏览器启动太慢了。<sup>_</sup> 但是发现了一个问题自从之前的版本更新过之后就会出现8个缩略图导航，这样我很不爽最晚鼓捣了一小时参考了不少文章才搞好，这里给大家总结一下： 1.首先是知乎上提供的方法：（<a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/zhangte/p/6259075.html%EF%BC%89">https://link.zhihu.com/?target=http%3A//www.cnblogs.com/zhangte/p/6259075.html）</a> （1） 安装扩展Stylish <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180417101021.png" alt=""> （2）打开Stylish并且新建一个样式 <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180417101031-1.png" alt=""> （3）为新样式取一个名字并输入下面样式代码： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180417101043.png" alt=""> （4）选择选项 “网址”，并且在后面的地址栏输入网址： （注意的是这里的网址需要是新标签也的网址），然后点击“添加”，然后点击左上角“保存” <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180417101055.png" alt=""> 2.接下来是解决我最新版本chrome的办法 （1）下载一个resource.pak包 （2）找到你的chrome所在位置（一般是在c盘中） （3）打开文件在其中找到你的chrome版本号命名的文件。 这里我的chrome版本是：65.0.3325.181 （4）将该文件直接替换其中的resource.pak文件即可。 ps：值得注意的是如果你的chrome版本已经比较新了那么就需要重新下载更新的resource.pak文件 这里我提供一个下载我那个版本能用的resource.pak文件 下载地址：<a href="https://pan.baidu.com/s/19g7W-rAmx2QW8DbvXqiojA">https://pan.baidu.com/s/19g7W-rAmx2QW8DbvXqiojA</a> 密码：097j 替换之后的结果是： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180417101827.png" alt=""> 标签缩略图消失了诶！ 3.如果resource.pak包已经失效那么只能靠自己动手修改文件了，或者去网上找找看看有没有大佬提供下载资源的 自己动手丰衣足食：（方法来自于：<a href="http://www.cnblogs.com/HarryHook/p/7839175.html%EF%BC%89">http://www.cnblogs.com/HarryHook/p/7839175.html）</a> 下载<a href="https://shuax.com/portfolio/tools/">小工具</a>  ChromePak V5 备用 <a href="https://share.weiyun.com/49c3ff64d4944a5c6be6fc86cc63b84c">云盘链接</a>  解压密码： SgeZ a. 将chrome安装目录下的resources.pak复制到小工具目录下的amd64或386目录下，针对自己的机器的具体情况而定，我的机器是win10 64位的。复制前请先备份 <img src="https://images2017.cnblogs.com/blog/846025/201711/846025-20171115150930687-2140905338.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180417102223.png" alt=""> b. 将resources.pak复制到小工具目录下的amd64或386目录下，针对自己的机器的具体情况而定，我的机器是win10 64位的 <img src="https://images2017.cnblogs.com/blog/846025/201711/846025-20171115151208765-1937118616.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180417102236.png" alt="">   c.shift+右键  打开PowerShell窗口，将pak_tools.exe拖入shell窗口，在后面添加 “-c=unpack -f=” ,再将resources.pak拖入shell窗口, 回车运行 <img src="https://images2017.cnblogs.com/blog/846025/201711/846025-20171115151631687-789871066.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180417102248.png" alt=""> d.后续会在amd64目录下生resources文件夹，找到手动更改位置 resources\unknown\297 ，用Sublime_text或者notepade++打开<strong>297</strong>文件，将第十三行代码注释掉， 就不会显示多个标签页了。 body标签内的代码可以自己定制， 具体可参见<a href="https://www.zhihu.com/question/23284875/answer/206494893">@这个懒人不写名</a>的回答 <img src="https://images2018.cnblogs.com/blog/846025/201803/846025-20180307195530471-672577535.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180417102259.png" alt="">   e.修改完毕之后回到PowerShell窗口 ，与c相同的步骤，只不过代码需要修改为&quot;-c=repack -f=&quot; <img src="https://images2017.cnblogs.com/blog/846025/201711/846025-20171115152345624-1416666452.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180417102313.png" alt=""> f.将amd64文件夹下的resources.pak复制到chrome的安装目录下，即可生效 <img src="https://images2017.cnblogs.com/blog/846025/201711/846025-20171115153401546-889393342.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180417102325.png" alt="">   End！</p>
]]></content>
      <categories>
        <category>Chrome</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>美化</tag>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title>抽象工厂模式与单件模式编程实现</title>
    <url>/2019/04/14/chou-xiang-gong-chang-mo-shi-yu-dan-jian-mo-shi-bian-cheng-shi-xian-1/</url>
    <content><![CDATA[<p>一、抽象工厂原理            AbstractFactory            声明一个创建抽象产品对象的操作接口。            ConcreteFactory            实现创建具体产品对象的操作。            AbstractProduct            为一类产品对象声明一个接口。            ConcreteProduct            定义一个将被相应的具体工厂创建的产品对象。            实现AbstractProduct接口。            Client            仅使用由AbstractFactory和AbstractProduct类声明的接口 抽象工厂中的协作：            通常在运行时刻创建一个ConcreteFactory类的实例。这一具体的工厂创建具有特定实现的产品对象。为创建不同的产品对象，客户应使用不同的具体工厂。            AbstractFactory将产品对象的创建延迟到它的ConcreteFactory子类。 抽象工厂中的类图： <img src="http://47.100.4.8/wp-content/uploads/2019/04/1.png" alt=""> 二、单件模式原理            Prototype            声明一个克隆自身的接口            ConcretePrototype            实现一个克隆自身的操作            Client            让一个原型克隆自身从而创建一个新的对象 单件模式的结构：            将构造方法定义为私有的，阻止了外部程序实例化该类，但可以在该类内部写一个静态的public方法GetInstance()，这个方法的目的就是返回一个类实例，并在此方法中，去做是否有实例化的判断。 单件模式的类图： <img src="http://47.100.4.8/wp-content/uploads/2019/04/2.png" alt="">   问题：            该公司数据库拥有三张表，分别是用户表、部门表和项目表。每张表的操作都支持查询和添加功能。数据库支持mysql和sqlserver两种。结合抽象工厂模式和单件模式给出该系统的模拟代码。            在抽象工厂模式中，一个应用里一般每个产品只需要一个具体工厂的实例，因此，工厂通常最好用单件模式实现。            要求结合抽象工厂模式和单件模式，模拟公司数据库创建过程。 类图： <img src="http://47.100.4.8/wp-content/uploads/2019/04/3-e1555219097900.jpg" alt=""> 实现代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用户表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">userTable</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">searchElem</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">addElem</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mysqlUserTable</span>:</span><span class="keyword">public</span> userTable&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">searchElem</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"UserTable mysql Search"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElem</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"UserTable mysql Add"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sqlserverUserTable</span>:</span><span class="keyword">public</span> userTable&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">searchElem</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"UserTable sqlserver Search"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElem</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"UserTable sqlserver Add"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//部门表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">departmentTable</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">searchElem</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">addElem</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mysqlDepartmentTable</span>:</span><span class="keyword">public</span> departmentTable&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">searchElem</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"DepartmentTable mysql Search"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElem</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"DepartmentTable mysql Add"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sqlserverDepartmentTable</span>:</span><span class="keyword">public</span> departmentTable&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">searchElem</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"DepartmentTable sqlserver Search"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElem</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"DepartmentTable sqlserver Add"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//项目表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">programTable</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">searchElem</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">addElem</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mysqlProgramTable</span>:</span><span class="keyword">public</span> programTable&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">searchElem</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"ProgramTable mysql Search"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElem</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"ProgramTable mysql Add"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sqlserverProgramTable</span>:</span><span class="keyword">public</span> programTable&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">searchElem</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"ProgramTable sqlserver Search"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addElem</span><span class="params">()</span></span>&#123;<span class="built_in">cout</span>&lt;&lt;<span class="string">"ProgramTable sqlserver Add"</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IFactory</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> userTable* <span class="title">createUserTable</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> departmentTable* <span class="title">createDepartmentTable</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> programTable* <span class="title">createProgramTable</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">mysqlFactory</span>:</span><span class="keyword">public</span> IFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> mysqlFactory* <span class="title">GetLinstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_mysqlfactory == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            _mysqlfactory = <span class="keyword">new</span> mysqlFactory();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"mysqlFactory Create Success!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"mysqlFactory has existed!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _mysqlfactory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">userTable* <span class="title">createUserTable</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> mysqlUserTable();&#125;</span><br><span class="line">    <span class="function">departmentTable* <span class="title">createDepartmentTable</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> mysqlDepartmentTable();&#125;</span><br><span class="line">    <span class="function">programTable* <span class="title">createProgramTable</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> mysqlProgramTable();&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    mysqlFactory()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> mysqlFactory* _mysqlfactory;</span><br><span class="line">&#125;;</span><br><span class="line">mysqlFactory* mysqlFactory::_mysqlfactory = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">sqlserverFactory</span>:</span><span class="keyword">public</span> IFactory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> sqlserverFactory* <span class="title">GetLinstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_sqlserverFactory == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            _sqlserverFactory = <span class="keyword">new</span> sqlserverFactory();</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"sqlserverFactory Create Success!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"sqlserverFactory has existed!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _sqlserverFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">userTable* <span class="title">createUserTable</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> sqlserverUserTable();&#125;</span><br><span class="line">    <span class="function">departmentTable* <span class="title">createDepartmentTable</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> sqlserverDepartmentTable();&#125;</span><br><span class="line">    <span class="function">programTable* <span class="title">createProgramTable</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">new</span> sqlserverProgramTable();&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    sqlserverFactory()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> sqlserverFactory* _sqlserverFactory;</span><br><span class="line">&#125;;</span><br><span class="line">sqlserverFactory* sqlserverFactory::_sqlserverFactory = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建用户表mysql工厂</span></span><br><span class="line">    IFactory* factory1 = mysqlFactory::GetLinstance();</span><br><span class="line">    userTable* utmysql = factory1-&gt;createUserTable();</span><br><span class="line">    utmysql-&gt;searchElem();</span><br><span class="line">    utmysql-&gt;addElem();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//创建用户表sqlserver工厂</span></span><br><span class="line">    IFactory* factory2 = sqlserverFactory::GetLinstance();</span><br><span class="line">    userTable* utserver = factory2-&gt;createUserTable();</span><br><span class="line">    utserver-&gt;searchElem();</span><br><span class="line">    utserver-&gt;addElem();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//创建部门表mysql工厂</span></span><br><span class="line">    IFactory* factory3 = mysqlFactory::GetLinstance();</span><br><span class="line">    departmentTable* dtmysql = factory3-&gt;createDepartmentTable();</span><br><span class="line">    dtmysql-&gt;searchElem();</span><br><span class="line">    dtmysql-&gt;addElem();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//创建部门表sqlserver工厂</span></span><br><span class="line">    IFactory* factory4 = sqlserverFactory::GetLinstance();</span><br><span class="line">    departmentTable* dtsqlserver = factory4-&gt;createDepartmentTable();</span><br><span class="line">    dtsqlserver-&gt;searchElem();</span><br><span class="line">    dtsqlserver-&gt;addElem();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//创建项目表mysql工厂</span></span><br><span class="line">    IFactory* factory5 = mysqlFactory::GetLinstance();</span><br><span class="line">    programTable* ptmysql = factory5-&gt;createProgramTable();</span><br><span class="line">    ptmysql-&gt;searchElem();</span><br><span class="line">    ptmysql-&gt;addElem();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//创建项目表sqlserver工厂</span></span><br><span class="line">    IFactory* factory6 = sqlserverFactory::GetLinstance();</span><br><span class="line">    programTable* ptserver = factory6-&gt;createProgramTable();</span><br><span class="line">    ptserver-&gt;searchElem();</span><br><span class="line">    ptserver-&gt;addElem();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2019/04/4.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>abstract factory</tag>
        <tag>single pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>超前进位加法器原理</title>
    <url>/2018/04/03/chao-qian-jin-wei-jia-fa-qi-yuan-li-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/321312432423.jpg" alt=""></p>
<h3 id="超前进位加法器-carry-look-ahead-adder-是对普通的全加器进行改良而设计成的并行加法器，主要是针对普通全加器串联时互相进位产生的延迟进行了改良。超前进位加法器是通过增加了一个不是十分复杂的逻辑电路来做到这点的。"><a class="header-anchor" href="#超前进位加法器-carry-look-ahead-adder-是对普通的全加器进行改良而设计成的并行加法器，主要是针对普通全加器串联时互相进位产生的延迟进行了改良。超前进位加法器是通过增加了一个不是十分复杂的逻辑电路来做到这点的。">¶</a>超前进位加法器(carry look ahead adder)是对普通的全加器进行改良而设计成的并行加法器，主要是针对普通全加器串联时互相进位产生的延迟进行了改良。超前进位加法器是通过增加了一个不是十分复杂的逻辑电路来做到这点的。</h3>
<p>这里先讲一下缘由： 在普通的串行加法器运算中，下一步的运算需要的等待上一步的进位来进行，这样很大程度上影响了运算的速度。为了提高运算速度所以设计了超前进位加法器。 两个加数（以四位为例）X4X3X2X1和Y4Y3Y2Y1 穿行加法器的原理（给出式子）： C1 = X1*Y1 + (X1+Y1)*C0   C0为初始进位 分析：这是是用来判断是否有进位的如果X1和Y1均为1 则C1为1代表有进位，如果X1或者Y1中有一个为1 且C0为1 则C1为1 以此类推C2，C3，C4 C1 = X1*Y1 + (X1+Y1)*C0 C2 = X2*Y2 + (X2+Y2)*C1 C3 = X3*Y3 + (X3+Y3)*C2 C4 = X4*Y4 + (X4+Y4)*C3 这是串行加法器的运算原理。计算每次进位时都需要上一次的进位结果所以如果没还需要的等待，这样会大大影响运算速度因此便有了超前进位加法器。 <img src="http://47.100.4.8/wp-content/uploads/2018/04/9930-27967-tu14weiclachaoqianbujiandianlu.jpg" alt=""> 超前进位加法器原理（以式子为主）： 根据上面串行加法器的式子可以找出一个规律，C2中的C1可以用C1式子的值来替换。 这样就得出了如下式子： C2 = X2*Y2 + (X2+Y2)*（C1 = X1*Y1 + (X1+Y1)*C0） 以此类推可得： C1 = X1*Y1 + (X1+Y1)*C0 C2 = X2*Y2 + (X2+Y2)*（C1 = X1*Y1 + (X1+Y1)*C0） C3 = X3*Y3 + (X3+Y3)*（X2*Y2 + (X2+Y2)*（C1 = X1*Y1 + (X1+Y1)*C0）） C4 = X4*Y4 + (X4+Y4)*（X3*Y3 + (X3+Y3)*（X2*Y2 + (X2+Y2)*（C1 = X1*Y1 + (X1+Y1)*C0））） 然后可以设置Pi和Gi，Gi 定义为进位产生信号，Pi定义为进位传递信号 令Gi = Xi*Yi ，Pi=Xi+Yi 将上面式子进行变换可得： C1 = G1 + P1*C0 C2 = G2 + P2*（G1 + P1*C0） C3 = G3 + P3*（G2 + P2*（G1 + P1*C0）） C4 = G4 + P4*（G3 + P3*（G2 + P2*（G1 + P1*C0）））   由此可以看出，各级的进位彼此独立产生，只与输入数据和C0有关，将各级间的进位级联传播给去掉了，因此减小了进位产生的延迟。 这样就可提高计算速度了。 <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180403124635.png" alt=""></p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>计算机组成原理</category>
      </categories>
      <tags>
        <tag>Computer Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>Chomsky文法类型判断</title>
    <url>/2019/02/14/chomsky-wen-fa-lei-xing-pan-duan-1/</url>
    <content><![CDATA[<p>四种文法类型</p>
<p><strong>1</strong>**．0型文法（短语文法）** 如果对于某文法G，P中的每个规则具有下列形式：   u:: = v 其中u∈V＋，v∈V*，则称该文法G为0型文法或短语文法，简写为PSG。 0型文法或短语结构文法的相应语言称为0型语言或短语结构语言L0。这种文法由于没有其他任何限制，因此0型文法也称为无限制文法，其相应的语言称为无限制性语言。任何0型语言都是递归可枚举的，故0型语言又称递归可枚举集。这种语言可由图灵机（Turning）来识别。   <strong>2</strong>**．1型文法（上下文有关文法）** 如果对于某文法G，P中的每个规则具有下列形式：   xUy:: = xuy 其中U∈VN；u∈V＋；x，y∈V*，则称该文法G为1型文法或上下文有关文法，也称上下文敏感文法，简写为CSG。 1型文法的规则左部的U和右部的u具有相同的上文x和下文y，利用该规则进行推导时，要用u替换U，必须在前面有x和后面有y的情况下才能进行，显示了上下文有关的特性。 1型文法所确定的语言为1型语言L1，1型语言可由线性有界自动机来识别。   <strong>3</strong>**．2型文法（上下文无关文法）** 如果对于某文法G，P中的每个规则具有下列形式：   U :: = u 其中U∈VN；u∈V＋，则称该文法G为2型文法或上下文无关文法，简写为CFG。 按照这条规则，对于上下文无关文法，利用该规则进行推导时，无需考虑非终结符U所在的上下文，总能用u替换U，或者将u归约为U，显示了上下文无关的特点。 2型文法所确定的语言为2型语言L2，2型语言可由非确定的下推自动机来识别。 一般定义程序设计语言的文法是上下文无关的。如C语言便是如此。因此，上下文无关文法及相应语言引起了人们较大的兴趣与重视。   <strong>4</strong>**．3型文法（正则文法，线性文法）** 如果对于某文法G，P中的每个规则具有下列形式：   U :: = T  或  U :: = WT 其中T∈VT；U,W∈VN，则称该文法G为左线性文法。 如果对于某文法G，P中的每个规则具有下列形式：   U :: = T  或  U :: = TW 其中T∈VT；U, W∈VN，则称该文法G为右线性文法。 左线性文法和右线性文法通称为3型文法或正则文法，有时又称为有穷状态文法，简写为RG。 按照定义，对于正则文法应用规则时，单个非终结符号只能被替换为单个终结符号，或被替换为单个非终结符号加上单个终结符号，或者被替换为单个终结符号加上单个非终结符号。 3型文法所确定的语言为3型语言L3，3型语言可由确定的有限状态自动机来识别。 在常见的程序设计语言中，多数与词法有关的文法属于3型文法。 可以看出，上述4类文法，从0型到3型，产生式限制越来越强，其后一类都是前一类的子集，而描述语言的功能越来越弱，四类文法及其表示的语言之间的关系可表示为： 0型1型2型3型；即L0 L1 L2 L3 代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Gramer</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> sentence;</span><br><span class="line">    <span class="keyword">int</span> sl;  <span class="comment">//-&gt;左侧的字符个数</span></span><br><span class="line">    <span class="keyword">int</span> sr;  <span class="comment">//-&gt;右侧的字符个数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Gramer gramer\[<span class="number">20</span>\];</span><br><span class="line"><span class="keyword">int</span> gramerFlag\[<span class="number">20</span>\]\[<span class="number">5</span>\] = &#123;<span class="number">0</span>&#125;; <span class="comment">//用来保存每个产生式的文法类型  第五个值用来标志如果是第3型文法那么他是右线型还是左线型</span></span><br><span class="line"><span class="keyword">int</span> sumnum = <span class="number">0</span>; <span class="comment">//输入的产生式总数</span></span><br><span class="line"><span class="built_in">string</span> Vn = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">string</span> Vt = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据输入和处理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">StartAndHandle</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> over;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入规则："</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        sumnum = i+<span class="number">1</span>;</span><br><span class="line">        over = <span class="number">0</span>; <span class="comment">//用来处理如何不是该文法时直接结束本次循环</span></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;gramer\[i\].sentence;</span><br><span class="line">        <span class="keyword">if</span>(gramer\[i\].sentence == <span class="string">"$"</span>)&#123;   <span class="comment">//输入$符号表示规则输入结束</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> length = gramer\[i\].sentence.length();</span><br><span class="line">        <span class="keyword">int</span> numl = gramer\[i\].sentence.<span class="built_in">find</span>(<span class="string">'-'</span>);</span><br><span class="line">        <span class="keyword">int</span> numr = gramer\[i\].sentence.<span class="built_in">find</span>(<span class="string">'&gt;'</span>);</span><br><span class="line">        gramer\[i\].sl = numl;</span><br><span class="line">        gramer\[i\].sr = length - numr - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//判断是否为0型文法</span></span><br><span class="line">        <span class="keyword">if</span>(gramer\[i\].sl !=<span class="number">0</span> &amp;&amp; gramer\[i\].sr != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//判断是否有左部非终结字符</span></span><br><span class="line">            over = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; gramer\[i\].sl;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(gramer\[i\].sentence\[j\] &gt;= <span class="string">'A'</span> &amp;&amp; gramer\[i\].sentence\[j\] &lt;= <span class="string">'Z'</span>)&#123;</span><br><span class="line">                    over = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(over == <span class="number">0</span>)&#123;</span><br><span class="line">                gramerFlag\[i\]\[<span class="number">0</span>\] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            over = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//是否结束判断</span></span><br><span class="line">        <span class="keyword">if</span>(over == <span class="number">1</span>)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//判断是否为1型文法</span></span><br><span class="line">            <span class="keyword">if</span>((gramer\[i\].sl &lt;= gramer\[i\].sr)&amp;&amp;(length != <span class="number">0</span>))&#123;</span><br><span class="line">                gramerFlag\[i\]\[<span class="number">1</span>\] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                over = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//是否结束判断</span></span><br><span class="line">            <span class="keyword">if</span>(over == <span class="number">1</span>)&#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//判断是否为2型文法</span></span><br><span class="line">                <span class="keyword">if</span>(gramer\[i\].sl == <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(gramer\[i\].sentence\[<span class="number">0</span>\] &lt; <span class="string">'A'</span> || gramer\[i\].sentence\[<span class="number">0</span>\] &gt; <span class="string">'Z'</span>)&#123;</span><br><span class="line">                        over = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(over == <span class="number">0</span>)&#123;</span><br><span class="line">                        gramerFlag\[i\]\[<span class="number">2</span>\] = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    over = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//判断是否结束</span></span><br><span class="line">                <span class="keyword">if</span>(over == <span class="number">1</span>)&#123;</span><br><span class="line">                    i++;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//判断是否为3型文法</span></span><br><span class="line">                    <span class="keyword">if</span>(gramer\[i\].sr == <span class="number">2</span>)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(gramer\[i\].sentence\[numr+<span class="number">1</span>\] &gt;= <span class="string">'a'</span> &amp;&amp; gramer\[i\].sentence\[numr+<span class="number">1</span>\] &lt;= <span class="string">'z'</span>)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(gramer\[i\].sentence\[numr+<span class="number">2</span>\] &gt;= <span class="string">'A'</span> &amp;&amp; gramer\[i\].sentence\[numr+<span class="number">2</span>\] &lt;= <span class="string">'Z'</span>)&#123;</span><br><span class="line">                                gramerFlag\[i\]\[<span class="number">3</span>\] = <span class="number">1</span>;</span><br><span class="line">                                gramerFlag\[i\]\[<span class="number">4</span>\] = <span class="number">1</span>; <span class="comment">//1表示右线型</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(gramer\[i\].sentence\[numr+<span class="number">1</span>\] &gt;= <span class="string">'A'</span> &amp;&amp; gramer\[i\].sentence\[numr+<span class="number">1</span>\] &lt;= <span class="string">'Z'</span>)&#123;</span><br><span class="line">                            <span class="keyword">if</span>(gramer\[i\].sentence\[numr+<span class="number">2</span>\] &gt;= <span class="string">'a'</span> &amp;&amp; gramer\[i\].sentence\[numr+<span class="number">2</span>\] &lt;= <span class="string">'z'</span>)&#123;</span><br><span class="line">                                gramerFlag\[i\]\[<span class="number">3</span>\] = <span class="number">1</span>;</span><br><span class="line">                                gramerFlag\[i\]\[<span class="number">4</span>\] = <span class="number">2</span>; <span class="comment">//1表示左线型</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(gramer\[i\].sr == <span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">if</span>(gramer\[i\].sentence\[numr+<span class="number">1</span>\] &gt;= <span class="string">'a'</span> &amp;&amp; gramer\[i\].sentence\[numr+<span class="number">1</span>\] &lt;= <span class="string">'z'</span>)&#123;</span><br><span class="line">                                gramerFlag\[i\]\[<span class="number">3</span>\] = <span class="number">1</span>;</span><br><span class="line">                                gramerFlag\[i\]\[<span class="number">4</span>\] = <span class="number">0</span>; <span class="comment">//表示A-&gt;a形式的文法</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求数组中值的最大值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMaxNum</span><span class="params">(<span class="keyword">int</span> a\[\],<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxs = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a\[i\]&gt;maxs)&#123;</span><br><span class="line">            maxs = a\[i\];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求数组中值的最小值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMinNum</span><span class="params">(<span class="keyword">int</span> a\[\],<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mins = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a\[i\] &lt; mins)&#123;</span><br><span class="line">            mins = a\[i\];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mins;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印一维函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Printer1</span><span class="params">(<span class="keyword">int</span> a\[\],<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印规则函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Printer2</span><span class="params">(Gramer a\[\],<span class="keyword">int</span> num1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num1;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"               "</span>&lt;&lt;a\[i\].sentence&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//规则文法类型的判断</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RuleJudge</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = sumnum <span class="number">-1</span>; <span class="comment">//实际产生式总数</span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>; <span class="comment">//文法类型标志</span></span><br><span class="line">    <span class="keyword">int</span> minFlag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sumFlag\[num\]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; num;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; <span class="number">5</span>;j++)&#123;</span><br><span class="line">            sumFlag\[i\] = sumFlag\[i\] + gramerFlag\[i\]\[j\];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> summin = getMinNum(sumFlag,num) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> summax = getMaxNum(sumFlag,num) - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//三型文法特殊处理</span></span><br><span class="line">    <span class="keyword">if</span>(summin == summax)&#123;</span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是3型文法，既是左线型又是右线型"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是3型右线型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">5</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是3型左线型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是2型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是1型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是0型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(summin &lt; summax)&#123;</span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">3</span> &amp;&amp; summax ==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是3型右线型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">3</span> &amp;&amp; summax ==<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是3型左线型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(summin == <span class="number">4</span> &amp;&amp; summax ==<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是3型文法,既不是左线型又是右线型"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(summin == <span class="number">0</span> )</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是0型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span>(summin == <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是1型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span>(summin == <span class="number">2</span>)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"该规则是2型文法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(summax &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"不属于任何文法！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">0</span>; <span class="comment">//Vn长度</span></span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">0</span>; <span class="comment">//Vt长度</span></span><br><span class="line"><span class="comment">//辅助查找函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search1</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">    <span class="keyword">if</span>(Vn\[i\] == a)&#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Search2</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">    <span class="keyword">if</span>(Vt\[i\] == a)&#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//统计非终结字符和终结字符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TongJi</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = sumnum <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sumnum;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> length = gramer\[i\].sentence.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;length;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(gramer\[i\].sentence\[j\]&gt;=<span class="string">'A'</span> &amp;&amp; gramer\[i\].sentence\[j\]&lt;=<span class="string">'Z'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Search1(gramer\[i\].sentence\[j\],num1) == <span class="number">1</span> &amp;&amp; gramer\[i\].sentence\[j\] != <span class="string">'-'</span> &amp;&amp; gramer\[i\].sentence\[j\] != <span class="string">'&gt;'</span>)&#123;</span><br><span class="line">                    Vn\[num1\] = gramer\[i\].sentence\[j\];</span><br><span class="line">                    num1++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(gramer\[i\].sentence\[j\]&gt;=<span class="string">'a'</span> &amp;&amp; gramer\[i\].sentence\[j\]&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Search2(gramer\[i\].sentence\[j\],num2) == <span class="number">1</span> &amp;&amp; gramer\[i\].sentence\[j\] != <span class="string">'-'</span> &amp;&amp; gramer\[i\].sentence\[j\] != <span class="string">'&gt;'</span>)&#123;</span><br><span class="line">                    Vt\[num2\] = gramer\[i\].sentence\[j\];</span><br><span class="line">                    num2++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    StartAndHandle();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"打印输入的规则:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    Printer2(gramer,sumnum<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    RuleJudge();</span><br><span class="line">    TongJi();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"非终结字符集合："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"              Vn= "</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;num1;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;Vn\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"终结字符集合："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"            Vt= "</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;num2;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;Vt\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用： <img src="http://47.100.4.8/wp-content/uploads/2019/02/QQ%E5%9B%BE%E7%89%8720190214133918.png" alt=""> 提供一些测试用例：</p>
<ul>
<li>0型文法数据</li>
</ul>
<p>ABC-&gt;ab SABC-&gt;sAb ScDE-&gt;bc</p>
<ul>
<li>1型文法数据</li>
</ul>
<p>AB-&gt;ab SA-&gt;Sa SB-&gt;Sb S-&gt;Sac</p>
<ul>
<li>2型文法数据</li>
</ul>
<p>S-&gt;SABc S-&gt;a A-&gt;ab B-&gt;de</p>
<ul>
<li>3型文法数据</li>
</ul>
<p>右线型： A-&gt;aB A-&gt;a 左线型： A-&gt;Ba A-&gt;a</p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>编译原理</tag>
        <tag>文法</tag>
        <tag>判断文法类型</tag>
      </tags>
  </entry>
  <entry>
    <title>cmd命令入门(`・ω・´)</title>
    <url>/2018/03/04/cmd-ming-ling-ru-men-1/</url>
    <content><![CDATA[<h1>w(ﾟДﾟ)w  <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304184635.png" alt=""></h1>
<p>不会CMD命令的程序猿不是一个好的程序猿！ 咳咳，当然在Linux下就要会Shell脚本。 这是一篇真正的入门，讲解一般的DOS可以怎么使用。不排列庞大的命令条目，这里只举例子。 按照废话的惯例，先普及下基础知识，走你： 以下提及的win键，就是键盘上那个有个窗户图标的键 win7或者XP直接按win键，在弹出的窗口选择你要输入的程序，比如cmd然后按enter键就可以打开cmd命令窗口了！但是win8这样做就不方便。 win+R在左下角弹出一个窗口才是在window系统下最通用的做法，打开窗口后再输入cmd按enter键打开命令窗口。 通常的命令是在命令窗口直接完成的，如果需要保存在文本里进行运行，就要保存为.bat或者 .cmd的后缀(WTF，我的文件怎么没有后缀，好吧，你需要百度下使得操作系统显示你的文件后缀名)。 开始步入正题。 首先在cmd命令输入help，看到如下图的结果，这里展示的原生的DOS命令。 这里列出了一些命令，可以自己试试的玩。一般看到一个命令后，如果没有说明文档，你就尝试的在其命令后直接输入 -help 或者 /? 再或者一个随便什么的字符让它报错，一般情况下就会给出这个命令下相应的参数说明。试试吧，输入attrib /?,效果如下： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304183856-300x157.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304183912-300x157.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304183923-300x157.png" alt=""></p>
<p>看看说明是不是比较详细啊！后面的参数使用方法这样来进行解读：一个中括号里面的是一组参数，括号中间|的是或的意思，比如一个红框包住的部分，你不能即+R又-R，二者择其一！最后的[/S [/D] [/L]]可以多选。<br>
具体的使用要慢慢的练习。这里不一一列举。</p>
<p>这里就有点懵逼了。说好的net ，telnet命令等各种命令，那些哪里去了。</p>
<p>第二类： 其实那是window系统内嵌的程序（支持命令行），这个没法一下子列出，只能慢慢搜集了，下面给出几个有用的应用程序。用于浏览自身系统的状态。举个栗子： ipconfig           查看自身的网络配置 route                管理自身的路由转发表（增删改查） arp                   查看主机存储的IP和MAC的映射 systeminfo      查看系统信息（带图像界面的输入msinfo32） tasklist             查看当前进程列表 query               查询进程 netstat             查看网络状态（不间断的输出，可以用ctrl+c中断其执行） net                    网络的功能，很强大，/? 查看命令去感受吧 netsh   第三类： 要介绍的是就是系统各种程序（带图形界面）的名字，可以帮助你快速找到想要的功能。以下都是图形界面（win+R）中运行，不用去用鼠标点来点去，装逼神器啊。 mstsc                    远程它人的电脑（局域网内常用） MSConfig            可以禁止启动项和启动的服务（在服务和启动的 子项中） services.msc       打开服务 devmgmt.msc     打开设备管理 control                  打开控制面板 regedit                 打开注册表 appwiz.cpl           打开删除程序的面板 还有一些小程序可以通过命令行打开，比如在cmd窗口中输入calc 打开系统自带的计算器，call mspaint打开画图板 ,notepad新打开一个文本   快捷键 啊，快捷键有木有！可以找个什么快捷键大全耍耍，下面值列举经常用的的快捷键（好吧，是我经常用） win+E                 打开文件管器 win+D                 显示桌面 win+L                 锁计算机 alt+F4                 关闭当前程序 ctrl+shift+Esc    打开任务管理器（或者ctrl+alt+delete） ctrl+F                  在一个文本或者网页里面查找，相当实用（退出一般按ESC） ctrl+A                  选中所有文本   QWQ  <img src="http://47.100.4.8/wp-content/uploads/2018/03/09fa513d269759ee9acfdca1b1fb43166d22df39.gif" alt=""></p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>系统CMD命令</category>
      </categories>
      <tags>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>地址 1.1.1.1，Cloudflare 推新的 DNS 服务</title>
    <url>/2018/04/04/di-zhi-1-1-1-1cloudflare-tui-xin-de-dns-fu-wu-1/</url>
    <content><![CDATA[<p>2018.4.1 Cloudflare 宣布正式推出 1.1.1.1 公共 DNS 服务，号称任何人都可以使用它可以加快互联网访问速度并并保持连接私密性。Cloudflare 声称它将是“互联网上速度最快，隐私优先的消费者 DNS 服务”，此前类似的免费公共服务 OpenDNS 与 Google DNS 都已经服役了很长时间。 <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180404182640.png" alt=""> Cloudflare 与 APNIC 合作通过 1.1.1.1 和 1.0.0.1 两个 IP 提供 DNS 服务。并且，本身作为互联网服务供应商的 Cloudflare 本身还利用了自己的长处，分析和研究垃圾流量，以保证 DNS 解析数据的准确。 <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180404182836.png" alt=""> Cloudflare 的 DNS 将支持 DNS-over-TLS 和 DNS-over-HTTPS，全球平均响应时间为 14ms，而 OpenDNS 为 20ms，Google 的 DNS 为 34ms。 <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180404182853.png" alt=""> DNS 的全名为网域名称系统（domain name system），可将网域名称转成 IP 位址，它就像是个网络目录，协助使用者通过网域名称找到相对应的地址。 Cloudflare 在 1.1.1.1 网站上说明，DNS 通常非常缓慢且缺乏安全性，有些 DNS 供应商甚至会销售使用者网络浏览的资料，并用以发送目标式广告。而 1.1.1.1 将以使用者的隐私为主，既不会记录使用者的 IP 位址，也不会销售使用者资料，或是利用这些资料发送广告。 此外，Cloudflare 也希望 1.1.1.1 成为全球最快的 DNS 目录，根据 DNSPerf 的 DNS 监控数据，1.1.1.1 解析网域名称的速度比第二名的 DigitalOcean 快了 53%。 Cloudflare 指出，网络上的每件事几乎都是始于 DNS 请求，因此，选择一个最快的 DNS 目录基本上将加速使用者使用任何网络。 1.1.1.1 这个 IP 位址属于 APNIC 所有，容易记忆的程度可媲美 Google 的 8.8.8.8 或是 IBM 的 9.9.9.9，此外，强调隐私保护与速度也都让该服务备受期待。如果您有兴趣启用 Cloudflare 的新 DNS，您可以在 <a href="https://1.1.1.1">https://1.1.1.1</a> 找到所有信息。   转自：ITHOME +  Cloudflare</p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>资讯</category>
      </categories>
      <tags>
        <tag>资讯</tag>
      </tags>
  </entry>
  <entry>
    <title>地址变换算法</title>
    <url>/2018/06/05/di-zhi-bian-huan-suan-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180605173814.png" alt=""> 地址变换算法：根据当前的地址使用公式，绝对地址计算公式：块号<em>块的长度+页内偏移量 来得到物理地址从而实现从逻辑地址向物理地址的转换。 页表的形式： <img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180605174311.png" alt=""> 思想： 如果匹配的情况下： 在内存中存在则直接计算绝对地址使用公式：块号</em>块的长度+页内偏移量 如果不匹配且在页表中存在： 将产生缺页中断，并且修改对应的页表项。 如果不匹配且在页表中不存在： 输出在页表项没有的提示。   算法代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//地址变换算法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Transform</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"第"</span>&lt;&lt;i+<span class="number">1</span>&lt;&lt;<span class="string">"次！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(yebiao\[j\].YeHao == xulie\[i\])</span><br><span class="line">            &#123;</span><br><span class="line">                t = j;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(yebiao\[t\].BiaoZhi==<span class="number">1</span>&amp;&amp;yebiao\[t\].Flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"    页面已经存入内存但是修改位并未修改，进行修改！~"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            yebiao\[t\].Flag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"绝对地址："</span>&lt;&lt;yebiao\[t\].YeHao * <span class="number">300</span> + yebiao\[t\].DiZhi&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(yebiao\[t\].BiaoZhi==<span class="number">1</span>&amp;&amp;yebiao\[t\].Flag==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"    页面已经进入内存"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"绝对地址："</span>&lt;&lt;yebiao\[t\].YeHao * <span class="number">300</span> + yebiao\[t\].DiZhi&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(xulie\[i\]&gt;=num)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"    序列值大于页表项中最大的页面号"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"    页面不在内存！,产生缺页中断"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"    将页面装入内存！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        yebiao\[t\].BiaoZhi = <span class="number">1</span>;</span><br><span class="line">        yebiao\[t\].Flag = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用到的数据结构：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">YeBiao</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> YeHao; <span class="comment">//页号</span></span><br><span class="line">    <span class="keyword">int</span> BiaoZhi; <span class="comment">//标志</span></span><br><span class="line">    <span class="keyword">int</span> ZhuCunHao; <span class="comment">//页对应的主存号</span></span><br><span class="line">    <span class="keyword">int</span> Flag; <span class="comment">//表示该页调入主存后是否修改过的标志</span></span><br><span class="line">    <span class="keyword">int</span> DiZhi;  <span class="comment">//外存地址</span></span><br><span class="line">&#125;yebiao\[num\];</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>地址变换算法</tag>
      </tags>
  </entry>
  <entry>
    <title>多种群遗传算法的函数优化算法</title>
    <url>/2018/08/28/duo-zhong-qun-yi-chuan-suan-fa-de-han-shu-you-hua-suan-fa-1/</url>
    <content><![CDATA[<p><strong>多种群遗传算法的函数优化算法（MPGA）</strong> <strong>多种群遗传算法（MPGA）概述</strong> MPGA在GA的基础上主要引入了一下几个概念：</p>
<ul>
<li>突破GA仅靠单个群体进行遗传进化的框架，引入多个种群问题同时进行优化搜索；不同的种群赋以不用的控制参数，实现不同的搜索的目的。</li>
<li>各个种群之间通过移民算子进行联系，实现多种群的协同进化；最优解的获取是多个种群协同进化的综合结果。</li>
<li>通过人工选择算子保存各种群每个进化代中的最优个体，并作为判断算法收敛的依据。</li>
</ul>
<p>MPGA的算法结构示意图 <img src="http://47.100.4.8/wp-content/uploads/2018/08/1-1.png" alt="">   这里的SGA就是标准GA，由上图可以看出每个种群还是遵循GA中的算法准则，只不过是通过移民算子以及人工选择将最优的解结合到了一起。 各种群取不同的控制参数。交叉概率Pc和变异概率Pm的取值决定了算法全局搜索和拒不搜索能力的均衡。在GA中，交叉算子是产生新个体的主要算子，它决定了遗传算法全局搜索的能力；而变异算子只是产生新个体的辅助算子，它决定了遗传算法的局部搜索能力。大多数认为Pc在0.7<sub>0.9最为合适，Pm在0.001</sub>0.05之间最为合适。但是他们的取值方式还是有无数种的，对于不同的取值方式，优化结果差异也是很大的。MPGA弥补了GA的这一不足，通过多个设有不同控制参数的种群协同进化，同时兼顾了算法的全局搜索和局部搜索。 各种群是相对独立的，相互之间通过移民算子联系。移民算子将各种群在进化过程中出现的最优个体定期地（每隔一定的进化代数）引入其他的种群中，实现种群之间的信息交换。具体的操作规则是，将目标种群中的最差个体用源种群的最优个体替代。移民算子在MPGA中至关重要，如果没有银民算子，各种群之间失去联系，MPGA将等同于用不同的控制参数进行多次GA计算，从而是去了MPGA的特色。 精华种群和其他种群有很大不同。在金华的每一代，通过人工选择算子选出其他种群的 最优个体放入精华种群加以保存。精华种群不进行选择、交叉、变异等遗传操作，保证进化过程中各种群产生的最优个体不被破坏和丢失。同时，精华种群也是判断算法终止的依据。这里采用最优个体最少保持代数作为最终判断依据。这种判断充分利用了遗传算法在进化过程中的知识积累，较最大遗传代数判据更为合理。   <strong>问题描述</strong> 复杂二元函数求最值： <strong>max f(x,y) = 21.5 + xsin(4πx) + ysin(20πy)</strong> 图像生成代码：</p>
<p>clear;</p>
<p>[X,Y] = meshgrid(-10:0.355:10);</p>
<p>Z = 21.5 + X.*sin(4*pi.*X) + Y.*sin(20*pi.*Y);</p>
<p>surf(X,Y,Z);</p>
<p>图像： <img src="http://47.100.4.8/wp-content/uploads/2018/08/2-1.png" alt=""> 由上图可以看出该函数在区间内分布着多个局部极值，这样如果使用普通的遗传算法很容易出现早熟的现象，因此多种群遗传算法比较适合。 该问题所使用到的遗传算法工具箱的函数列表：</p>
<p>算子</p>
<p>函数</p>
<p>功能</p>
<p>创建种群</p>
<p>Crtbp</p>
<p>创建基向量</p>
<p>适应度计算</p>
<p>Ranking</p>
<p>常用的基于秩的适应度计算</p>
<p>选择函数</p>
<p>Select</p>
<p>高级选择函数</p>
<p>Sus</p>
<p>随机变异采样</p>
<p>Reins</p>
<p>一致随机和基于适应度的重插入</p>
<p>交叉算子</p>
<p>Recombin</p>
<p>高级重组算子</p>
<p>Xovsp</p>
<p>单点交叉</p>
<p>变异算子</p>
<p>Mut</p>
<p>离散变异</p>
<p><strong>移民算子</strong> 函数名为immigrant，函数的输入、输出参数如下：</p>
<p>变量名</p>
<p>类型</p>
<p>意义</p>
<p>输入参数</p>
<p>Chrom</p>
<p>Cell</p>
<p>每个元细胞单元为一个种群的编码（移民前）</p>
<p>ObjV</p>
<p>Cell</p>
<p>每个元细胞为一个种群所有个体的目标值（移民前）</p>
<p>输出参数</p>
<p>Chrom</p>
<p>Cell</p>
<p>每个元细胞单元为一个种群的编码（移民后）</p>
<p>ObjV</p>
<p>Cell</p>
<p>每个元细胞为一个种群所有个体的目标值（移民后）</p>
<p>代码：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> \<span class="params">[Chrom,ObjV\]</span>=<span class="title">immigrant</span><span class="params">(Chrom,ObjV)</span></span></span><br><span class="line"><span class="comment">%% 移民算子</span></span><br><span class="line">MP=<span class="built_in">length</span>(Chrom); <span class="comment">%得到种群个数</span></span><br><span class="line"><span class="comment">% 遍历每个种群寻找到其中的最优解</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:MP</span><br><span class="line">    \[MaxO,maxI\]=<span class="built_in">max</span>(ObjV&#123;<span class="built_in">i</span>&#125;);  <span class="comment">% 找出第i种群中最优的个体的值以及它的序号</span></span><br><span class="line">    next_i=<span class="built_in">i</span>+<span class="number">1</span>;                <span class="comment">% 目标种群（移民操作中） 到下一个种群</span></span><br><span class="line">    <span class="keyword">if</span> next_i&gt;MP <span class="comment">% 如果 i的值大于总的种群个数 使用取模操作回到开头</span></span><br><span class="line">        next\_i=<span class="built_in">mod</span>(next\_i,MP);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    \[MinO,minI\]=<span class="built_in">min</span>(ObjV&#123;next_i&#125;);          <span class="comment">%  找出目标种群中最劣的个体</span></span><br><span class="line">    <span class="comment">%% 目标种群最劣个体替换为源种群最优个体</span></span><br><span class="line">    Chrom&#123;next_i&#125;(minI,:)=Chrom&#123;<span class="built_in">i</span>&#125;(maxI,:);</span><br><span class="line">    ObjV&#123;next_i&#125;(minI)=ObjV&#123;<span class="built_in">i</span>&#125;(maxI); <span class="comment">%目标值的替换</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><strong>人工选择算子</strong> 函数名为EliteInduvidual，函数的输入、输出参数如下：</p>
<p>变量名</p>
<p>意义</p>
<p>输入参数</p>
<p>Chrom</p>
<p>每个元细胞单元为一个种群的编码（移民前）</p>
<p>ObjV</p>
<p>每个元细胞为一个种群所有个体的目标值（移民前）</p>
<p>MaxObjV</p>
<p>各个种群当前最优个体的目标值（选择前）</p>
<p>MaxChrom</p>
<p>各个种群当前最优个体的编码（选择前）</p>
<p>输出参数</p>
<p>MaxObjV</p>
<p>各个种群当前最优个体的目标值（选择后）</p>
<p>MaxChrom</p>
<p>各个种群当前最优的编码（选择后）</p>
<p>代码：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> \<span class="params">[MaxObjV,MaxChrom\]</span>=<span class="title">EliteInduvidual</span><span class="params">(Chrom,ObjV,MaxObjV,MaxChrom)</span></span></span><br><span class="line"><span class="comment">%% 人工选择算子</span></span><br><span class="line">MP=<span class="built_in">length</span>(Chrom);  <span class="comment">%种群数</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:MP</span><br><span class="line">    \[MaxO,maxI\]=<span class="built_in">max</span>(ObjV&#123;<span class="built_in">i</span>&#125;);   <span class="comment">%找出第i种群中最优个体以及编号</span></span><br><span class="line">    <span class="keyword">if</span> MaxO&gt;MaxObjV(<span class="built_in">i</span>) <span class="comment">%如果选择出来的最优个体的目标值大于当前种群最优的目标值</span></span><br><span class="line">        MaxObjV(<span class="built_in">i</span>)=MaxO;         <span class="comment">%记录各种群的精华个体</span></span><br><span class="line">        MaxChrom(<span class="built_in">i</span>,:)=Chrom&#123;<span class="built_in">i</span>&#125;(maxI,:);  <span class="comment">%记录各种群精华个体的编码</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><strong>目标函数</strong> 针对提出问题写出来的目标函数 代码：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">obj</span>=<span class="title">ObjectFunction</span><span class="params">(X)</span></span></span><br><span class="line"><span class="comment">%% 待优化的目标函数</span></span><br><span class="line">col=<span class="built_in">size</span>(X,<span class="number">1</span>); <span class="comment">%得到个体个数</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:col <span class="comment">%计算种群每个个体对应的目标值</span></span><br><span class="line">    obj(<span class="built_in">i</span>,<span class="number">1</span>)=<span class="number">21.5</span>+X(<span class="built_in">i</span>,<span class="number">1</span>)\*<span class="built_in">sin</span>(<span class="number">4</span>\*<span class="built_in">pi</span>\*X(<span class="built_in">i</span>,<span class="number">1</span>))+X(<span class="built_in">i</span>,<span class="number">2</span>)\*<span class="built_in">sin</span>(<span class="number">20</span>\*<span class="built_in">pi</span>\*X(<span class="built_in">i</span>,<span class="number">2</span>));</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line">**MPGA：**</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 2、多种群遗传算法</span></span><br><span class="line">clear;</span><br><span class="line">clc</span><br><span class="line">NIND=<span class="number">40</span>;               <span class="comment">%个体数目</span></span><br><span class="line">NVAR=<span class="number">2</span>;                <span class="comment">%变量的维数</span></span><br><span class="line">PRECI=<span class="number">20</span>;              <span class="comment">%变量的二进制位数</span></span><br><span class="line">GGAP=<span class="number">0.9</span>;              <span class="comment">%代沟</span></span><br><span class="line">MP=<span class="number">10</span>;                 <span class="comment">%种群数目</span></span><br><span class="line">FieldD=\[rep(PRECI,\[<span class="number">1</span>,NVAR\]);\[<span class="number">-3</span>,<span class="number">4.1</span>;<span class="number">12.1</span>,<span class="number">5.8</span>\];rep(\[<span class="number">1</span>;<span class="number">0</span>;<span class="number">1</span>;<span class="number">1</span>\],\[<span class="number">1</span>,NVAR\])\];  <span class="comment">%译码矩阵</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:MP</span><br><span class="line">    Chrom&#123;<span class="built_in">i</span>&#125;=crtbp(NIND, NVAR*PRECI);                       <span class="comment">%创建初始种群</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">pc=<span class="number">0.7</span>+(<span class="number">0.9</span><span class="number">-0.7</span>)*<span class="built_in">rand</span>(MP,<span class="number">1</span>);    <span class="comment">%在【0.7,0.9】范围i内随机产生交叉概率</span></span><br><span class="line">pm=<span class="number">0.001</span>+(<span class="number">0.05</span><span class="number">-0.001</span>)*<span class="built_in">rand</span>(MP,<span class="number">1</span>);  <span class="comment">%在【0.001,0.05】范围内随机产生变异概率</span></span><br><span class="line">gen=<span class="number">0</span>;  <span class="comment">%初始遗传代数</span></span><br><span class="line">gen0=<span class="number">0</span>; <span class="comment">%初始保持代数</span></span><br><span class="line">MAXGEN=<span class="number">10</span>;  <span class="comment">%最优个体最少保持代数</span></span><br><span class="line">maxY=<span class="number">0</span>; <span class="comment">%最优值</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:MP</span><br><span class="line">    ObjV&#123;<span class="built_in">i</span>&#125;=ObjectFunction(bs2rv(Chrom&#123;<span class="built_in">i</span>&#125;, FieldD));<span class="comment">%计算各初始种群个体的目标函数值</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">MaxObjV=<span class="built_in">zeros</span>(MP,<span class="number">1</span>);           <span class="comment">%记录精华种群</span></span><br><span class="line">MaxChrom=<span class="built_in">zeros</span>(MP,PRECI*NVAR); <span class="comment">%记录精华种群的编码</span></span><br><span class="line"><span class="comment">% 结束条件为如果进行MAXGEN+1次优秀的迭代 则结束循环（即每次得到的最优结果都比前面的值好）</span></span><br><span class="line"><span class="keyword">while</span> gen0&lt;=MAXGEN</span><br><span class="line">    gen=gen+<span class="number">1</span>;       <span class="comment">%遗传代数加1</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:MP</span><br><span class="line">        FitnV&#123;<span class="built_in">i</span>&#125;=ranking(-ObjV&#123;<span class="built_in">i</span>&#125;);                      <span class="comment">% 各种群的适应度</span></span><br><span class="line">        SelCh&#123;<span class="built_in">i</span>&#125;=select(<span class="string">'sus'</span>, Chrom&#123;<span class="built_in">i</span>&#125;, FitnV&#123;<span class="built_in">i</span>&#125;,GGAP); <span class="comment">% 选择操作</span></span><br><span class="line">        SelCh&#123;<span class="built_in">i</span>&#125;=recombin(<span class="string">'xovsp'</span>,SelCh&#123;<span class="built_in">i</span>&#125;, pc(<span class="built_in">i</span>));      <span class="comment">% 交叉操作</span></span><br><span class="line">        SelCh&#123;<span class="built_in">i</span>&#125;=mut(SelCh&#123;<span class="built_in">i</span>&#125;,pm(<span class="built_in">i</span>));                    <span class="comment">% 变异操作</span></span><br><span class="line">        ObjVSel=ObjectFunction(bs2rv(SelCh&#123;<span class="built_in">i</span>&#125;, FieldD)); <span class="comment">% 计算子代目标函数值</span></span><br><span class="line">        \[Chrom&#123;<span class="built_in">i</span>&#125;,ObjV&#123;<span class="built_in">i</span>&#125;\]=reins(Chrom&#123;<span class="built_in">i</span>&#125;,SelCh&#123;<span class="built_in">i</span>&#125;,<span class="number">1</span>,<span class="number">1</span>,ObjV&#123;<span class="built_in">i</span>&#125;,ObjVSel);    <span class="comment">%重插入操作</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    \[Chrom,ObjV\]=immigrant(Chrom,ObjV);     <span class="comment">% 移民操作</span></span><br><span class="line">    \[MaxObjV,MaxChrom\]=EliteInduvidual(Chrom,ObjV,MaxObjV,MaxChrom);     <span class="comment">% 人工选择精华种群</span></span><br><span class="line">    YY(gen)=<span class="built_in">max</span>(MaxObjV);    <span class="comment">%找出精华种群中最优的个体</span></span><br><span class="line">    <span class="keyword">if</span> YY(gen)&gt;maxY   <span class="comment">%判断当前优化值是否与前一次优化值相同</span></span><br><span class="line">        maxY=YY(gen); <span class="comment">%更新最优值</span></span><br><span class="line">        gen0=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        gen0=gen0+<span class="number">1</span>; <span class="comment">%最优值保持次数加1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%% 进化过程图</span></span><br><span class="line"><span class="built_in">plot</span>(<span class="number">1</span>:gen,YY);</span><br><span class="line">xlabel(<span class="string">'进化代数'</span>)</span><br><span class="line">ylabel(<span class="string">'最优解变化'</span>)</span><br><span class="line">title(<span class="string">'MPGA进化过程'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 输出最优解</span></span><br><span class="line">\[Y,I\]=<span class="built_in">max</span>(MaxObjV);    <span class="comment">%找出精华种群中最优的个体</span></span><br><span class="line">X=(bs2rv(MaxChrom(I,:), FieldD));   <span class="comment">%最优个体的解码解</span></span><br><span class="line"><span class="built_in">disp</span>(\[<span class="string">'最优值为：'</span>,num2str(Y)\])</span><br><span class="line"><span class="built_in">disp</span>(\[<span class="string">'对应的自变量取值：'</span>,num2str(X)\])</span><br></pre></td></tr></table></figure>
<p>结果： 最优值为：38.8503 对应的自变量取值：11.6255      5.72504 <img src="http://47.100.4.8/wp-content/uploads/2018/08/3-1.png" alt=""></p>
]]></content>
      <categories>
        <category>优化算法</category>
        <category>多种群遗传算法（MPGA）</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>遗传算法</tag>
        <tag>多种群遗传算法</tag>
        <tag>智能优化</tag>
        <tag>MatLab</tag>
      </tags>
  </entry>
  <entry>
    <title>给MatLab安装遗传算法工具箱</title>
    <url>/2018/07/11/gei-matlab-an-zhuang-yi-chuan-suan-fa-gong-ju-xiang-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180706191552.png" alt=""></p>
<p><strong>今天介绍一下如何给MatLab安装遗传算法工具箱（gatbx）</strong></p>
<p>之前参考过网上的许多办法，总结了一下，因为写的对我的MatLab版本都不太合适，每个都有要调整的地方（ps：这也许就我是这样吧）总之也是给matlab新版的朋友提供一个方法吧。 <strong>首先先去官网下载工具箱</strong> 之前看好多人在CSDN上上传该工具箱，都要5到10个C币，这也太黑了，官网上明明免费好不？ 下面是链接：<a href="http://codem.group.shef.ac.uk/index.php/ga-toolbox">http://codem.group.shef.ac.uk/index.php/ga-toolbox</a> <strong>文件名批量修改</strong> 下载完解压完文件之后会看到一些文件如下： <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180711162859.png" alt=""> 这些后缀为.M的M文件都需要改为.m文件，否则会报错的。 注意：这里不能直接修改 首先创建一个txt文件，将<strong>ren *.M *.jpg</strong>写入文件中，然后将txt文件修改为.bat文件， 运行之后再创建一个txt文件将<strong>ren *.jpg *.m</strong>写入文件中，然后将txt文件修改为.bat文件。 运行结束之后会发现所有.M的文件后缀都改为了.m。这样对文件的修改就ok了！ <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180711163515.png" alt=""> <strong>安装工具箱</strong> 将解压出来的两个文件放到…/MatLab/toolbox文件目录下 <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180711163429.png" alt=""> 然后打开MatLab在命令行输入<strong>pathtool</strong>，然后点击添加文件夹 <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180711163744.png" alt=""> 将需要安装的工具箱所在文件夹选择即可。 <strong>Finally</strong> 测试一下：在命令行中输入<strong>v = ver(‘gatbx’)’</strong> 如果显示关于工具箱的相关信息则证明你安装成功了。 <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180711163918.png" alt="">   End！</p>
]]></content>
      <categories>
        <category>MatLab</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>MatLab</tag>
        <tag>GA</tag>
      </tags>
  </entry>
  <entry>
    <title>FCFS算法和优先级调度算法C++实现</title>
    <url>/2018/05/12/fcfs-suan-fa-he-you-xian-ji-diao-du-suan-fa-c-shi-xian-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/%E5%9B%BE%E7%89%87150.png" alt=""> FCFS调度算法（短作业优先） 该算法采用非剥夺策略，算法按照进程提交或进程变为就绪状态的先后次序，分派 CPU。当前进程占用CPU，直到执行完或阻塞，才出让CPU（非抢占方式）。在进程唤醒后（如I/O 完成），并不立即恢复执行，通常等到当前进程出让CPU。这是最简单的调度算法，比较有利于长进程，而不利于短进程，有利于CPU 繁忙的进程，而不利于I/O 繁忙的进程。 算法流程： <img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180512230549.png" alt=""> 代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 5</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> State;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span>&#123;</span></span><br><span class="line">ElemType flag; <span class="comment">//进程标识</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">next</span>;</span><span class="comment">//链接指针</span></span><br><span class="line">ElemType arrive; <span class="comment">//到达时间</span></span><br><span class="line">ElemType <span class="built_in">process</span>; <span class="comment">//运行时间</span></span><br><span class="line">ElemType start; <span class="comment">//开始执行时间</span></span><br><span class="line">ElemType current; <span class="comment">//当前状态</span></span><br><span class="line">&#125;PCB,*PCBList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">PCBList fronts;</span><br><span class="line">PCBList last;</span><br><span class="line">&#125;PCBLink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> flagfull = <span class="number">0</span>; <span class="comment">//定义一个全局变量用来表示当前已有进程在处理机中</span></span><br><span class="line">ElemType times = <span class="number">1</span>; <span class="comment">//初始化全局时间以便确定处理机中进程的开始执行时间</span></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>; <span class="comment">//总的进程计数器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//进程插入操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputList</span><span class="params">(PCBLink &amp;L,<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PCB \*p,\*tail,*q;</span><br><span class="line">    <span class="keyword">int</span> arrivetime=<span class="number">0</span>,processtime=<span class="number">0</span>;</span><br><span class="line">    arrivetime = i*i;</span><br><span class="line">    processtime = time((<span class="keyword">time_t</span>*)<span class="literal">NULL</span>)%<span class="number">20</span>;  <span class="comment">//根据系统当前秒数随机生成运行时间</span></span><br><span class="line">    q=(PCBList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCB));  <span class="comment">//创建列表头节点</span></span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L.fronts = L.last = q;</span><br><span class="line">        q-&gt;flag = i;  <span class="comment">//设置标识符</span></span><br><span class="line">        q-&gt;next = <span class="literal">NULL</span>;  <span class="comment">//将头指针的后面节点置为空</span></span><br><span class="line">        q-&gt;arrive = arrivetime;  <span class="comment">//设置到达时间</span></span><br><span class="line">        q-&gt;start = <span class="number">0</span>; <span class="comment">//初始化开始时间</span></span><br><span class="line">        q-&gt;<span class="built_in">process</span> = processtime; <span class="comment">//设置执行时间</span></span><br><span class="line">        q-&gt;current = <span class="number">0</span>;  <span class="comment">//设置初始状态  R表示就绪 C表示正在运行 O表示运行结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        p=(PCBList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCB)); <span class="comment">//创建子节点</span></span><br><span class="line">        p-&gt;flag = i;</span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;  <span class="comment">//将表尾指针设置为空</span></span><br><span class="line">        p-&gt;current = <span class="number">0</span>;</span><br><span class="line">        p-&gt;<span class="built_in">process</span> = processtime;</span><br><span class="line">        p-&gt;start = <span class="number">0</span>; <span class="comment">//初始化开始时间</span></span><br><span class="line">        p-&gt;arrive = arrivetime;</span><br><span class="line">        L.last-&gt;next = p;  <span class="comment">//将p节点插入到表尾</span></span><br><span class="line">        L.last = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示当前就绪队列中的进程的状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showState</span><span class="params">(PCBLink &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    PCBList p;</span><br><span class="line">    p=(PCBList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCB));</span><br><span class="line">    p=L.fronts;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=MAX;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程"</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"&lt;----------------创建进程的信息：----------------------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程标识："</span>&lt;&lt;p-&gt;flag&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程到达时间："</span>&lt;&lt;p-&gt;arrive&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程开始时间："</span>&lt;&lt;p-&gt;start&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程执行时间："</span>&lt;&lt;p-&gt;<span class="built_in">process</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="keyword">if</span>(p-&gt;current==<span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程当前状态为：O"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;current==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程当前状态为：R"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程当前状态为：C"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"&lt;-------------------信息结束：----------------------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       p=p-&gt;next;</span><br><span class="line">       Sleep(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理机进程运行</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">overprocess</span><span class="params">(PCBList &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    num++;</span><br><span class="line">    Sleep(<span class="number">1000</span>);</span><br><span class="line">    p-&gt;<span class="built_in">process</span>--;</span><br><span class="line">    p-&gt;current=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程"</span>&lt;&lt;num&lt;&lt;<span class="string">"运行结束！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"&lt;--------------进程信息：----------------------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程标识："</span>&lt;&lt;p-&gt;flag&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程到达时间："</span>&lt;&lt;p-&gt;arrive&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程开始时间："</span>&lt;&lt;p-&gt;start&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程完成时间："</span>&lt;&lt;p-&gt;start + p-&gt;<span class="built_in">process</span> + <span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="keyword">if</span>(p-&gt;current==<span class="number">-1</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程当前状态为：O"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="keyword">else</span> <span class="keyword">if</span>(p-&gt;current==<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程当前状态为：R"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程当前状态为：C"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"&lt;--------------信息结束：----------------------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    flagfull=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将进程调度进处理机中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Scheduling</span><span class="params">(PCBLink &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flagfull == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前已有进程在处理机中请等待！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//将进程从就绪队列中删除</span></span><br><span class="line">        PCBList p,j;</span><br><span class="line">        p=(PCBList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCB));</span><br><span class="line">        j=(PCBList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCB));</span><br><span class="line">        j=L.fronts;</span><br><span class="line">        p = L.fronts-&gt;next;</span><br><span class="line">        L.fronts=p;</span><br><span class="line">        j-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//修改信息</span></span><br><span class="line">        <span class="comment">//j为当前在处理机中的进程</span></span><br><span class="line">        j-&gt;current = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//处理进程开始执行时间</span></span><br><span class="line">        <span class="keyword">if</span>(times == <span class="number">1</span>) <span class="comment">//表示第一个进程</span></span><br><span class="line">            &#123;</span><br><span class="line">                j-&gt;start = times;</span><br><span class="line">                times = j-&gt;<span class="built_in">process</span>; <span class="comment">//为下一次进程开始做准备  这里的time更准确的为下次处理进程开始的时间</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j-&gt;arrive &gt; times)  <span class="comment">//如果下一个进程还没到达则time设置为下一个进程到达的时间</span></span><br><span class="line">                &#123;</span><br><span class="line">                    times = j-&gt;arrive;</span><br><span class="line">                    j-&gt;start = j-&gt;arrive;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="comment">//否则将time直接加上下一个进程的运行时间</span></span><br><span class="line">            &#123;</span><br><span class="line">                j-&gt;start = times;</span><br><span class="line">                times = times + j-&gt;<span class="built_in">process</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        flagfull = <span class="number">1</span>;</span><br><span class="line">        overprocess(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"&lt;------------------------信息提示栏：---------------------------------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"                                 R代表就绪状态"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"                                 C代表运行状态"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"                                 O代表结束状态"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"&lt;---------------------------------------------------------------------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    PCBLink L;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"&lt;-------------------------开始运行！----------------------------------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=MAX;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        InputList(L,i);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"第"</span>&lt;&lt;i&lt;&lt;<span class="string">"个进城进入就绪队列！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        Sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"初始化结束！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"&lt;------------------------显示当前队列信息！----------------------------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    showState(L);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"&lt;------------------------开始进程调度！--------------------------------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Scheduling(L);</span><br><span class="line">        <span class="keyword">if</span>(num==MAX)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"&lt;-------------------------进程调度结束！-------------------------------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/312312312.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/123154324234.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/4234324234.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/123234234.png" alt="">   优先级调度算法： 优先级越高的进程会被优先选择，但是这里不是抢占式的调度算法。 根据每个进程块的优先级在队列中选择一个优先级最大的进程，然后将进程放到处理机中进行运行。进程每运行一次重新计算各进程的响应比。由于本实验是模拟处理器调度，所以，对被选中的进程并不实际的启动运行，而是执行：优先级减1，运行时间减1，然后再次从就绪队列中选择新的优先级进程放入到处理机中，循环执行上面的步骤，当某个进程运行结束后，将它从队列中去除直至所有的进程都从中去除，然后结束。 这里我的优先级是在我的算法中的所有进程初始化的值手动输入的。 在处理机选择进程时，总是选择队列中优先级最高的进程运行。为了采用动态优先级调度，在每次进程运行一次之后，其优先级就会减1.当进程运行结束时首先将它的状态更改为完成状态（C），并且撤出就绪队列，如果就绪队列不为空则重复执行上面的操作。 <img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180512231124.png" alt=""> 代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MAX = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> State;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PCB</span>&#123;</span></span><br><span class="line">ElemType name;  <span class="comment">//进程名</span></span><br><span class="line">State current;  <span class="comment">//进程状态</span></span><br><span class="line">ElemType priority;  <span class="comment">//进程优先级</span></span><br><span class="line">ElemType runtime; <span class="comment">//进程运行时间</span></span><br><span class="line">ElemType haverun; <span class="comment">//进程已经运行的时间</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PCB</span> *<span class="title">next</span>;</span> <span class="comment">//链接指针</span></span><br><span class="line">&#125;PCB,*PCBList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">PCBList fronts;</span><br><span class="line">PCBList last;</span><br><span class="line">&#125;PCBLink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num=<span class="number">0</span>;  <span class="comment">//记录以及运行结束的进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//进程创建</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inputPCB</span><span class="params">(PCBLink &amp;L,<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PCB \*p,\*tail,*q;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">run</span>=<span class="number">0</span>,super=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入第"</span>&lt;&lt;i&lt;&lt;<span class="string">"个进程的运行时间："</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;<span class="built_in">run</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入第"</span>&lt;&lt;i&lt;&lt;<span class="string">"个进程的优先级:"</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;super;</span><br><span class="line">    q=(PCBList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCB));  <span class="comment">//创建列表头节点</span></span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        L.fronts = L.last = q;</span><br><span class="line">        q-&gt;name = i;</span><br><span class="line">        q-&gt;next = <span class="literal">NULL</span>;  <span class="comment">//将头指针的后面节点置为空</span></span><br><span class="line">        q-&gt;runtime = <span class="built_in">run</span>;</span><br><span class="line">        q-&gt;priority = super;</span><br><span class="line">        q-&gt;haverun = <span class="number">0</span>;</span><br><span class="line">        q-&gt;current = <span class="string">'R'</span>;  <span class="comment">//设置初始状态  R表示就绪 C表示正在运行 O表示运行结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">            p=(PCBList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCB)); <span class="comment">//创建子节点</span></span><br><span class="line">            p-&gt;name = i;</span><br><span class="line">            p-&gt;runtime = <span class="built_in">run</span>;</span><br><span class="line">            p-&gt;priority = super;</span><br><span class="line">            p-&gt;haverun = <span class="number">0</span>;</span><br><span class="line">            p-&gt;current = <span class="string">'R'</span>;</span><br><span class="line">            p-&gt;next = <span class="literal">NULL</span>;  <span class="comment">//将表尾指针设置为空</span></span><br><span class="line">            L.last-&gt;next = p;  <span class="comment">//将p节点插入到表尾</span></span><br><span class="line">            L.last = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将进程放入处理机</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processing</span><span class="params">(PCBLink &amp;L,PCBList &amp;q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;haverun == q-&gt;runtime&amp;&amp;num != MAX)</span><br><span class="line">    &#123;</span><br><span class="line">        PCBList s;</span><br><span class="line">        s=(PCBList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCB));</span><br><span class="line">        s=L.fronts;</span><br><span class="line">        <span class="keyword">if</span>(s-&gt;name == q-&gt;name)</span><br><span class="line">        &#123;</span><br><span class="line">            L.fronts=q-&gt;next;</span><br><span class="line">            q-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">while</span>(s-&gt;next-&gt;name!=q-&gt;name)</span><br><span class="line">           &#123;</span><br><span class="line">              s = s-&gt;next;</span><br><span class="line">           &#125;</span><br><span class="line">           s-&gt;next = q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程"</span>&lt;&lt;num&lt;&lt;<span class="string">"完成被移除！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        q-&gt;haverun++;</span><br><span class="line">        <span class="keyword">if</span>(q-&gt;priority&gt;<span class="number">0</span>)</span><br><span class="line">            q-&gt;priority--;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前在处理中的进程是："</span>&lt;&lt;q-&gt;name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程已经运行的时间："</span>&lt;&lt;q-&gt;haverun&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程需要运行的剩余时间："</span>&lt;&lt;q-&gt;runtime-q-&gt;haverun&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"就绪队列中的进程数为："</span>&lt;&lt;MAX-num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        Sleep(<span class="number">600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//选择优先级最高的进程放入CPU</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">selecthigest</span><span class="params">(PCBLink &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> higest=<span class="number">0</span>;  <span class="comment">//存储最大优先级</span></span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">    PCBList p,q;</span><br><span class="line">    p=(PCBList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCB));</span><br><span class="line">    q=(PCBList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCB));</span><br><span class="line">    q=p=L.fronts;</span><br><span class="line">    higest = p-&gt;priority;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        t = p-&gt;next-&gt;priority;</span><br><span class="line">        <span class="keyword">if</span>(t &gt; higest)</span><br><span class="line">        &#123;</span><br><span class="line">            higest = t;</span><br><span class="line">            q=p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    processing(L,q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示当前就绪队列中的进程的状态</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showState</span><span class="params">(PCBLink &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    PCBList p;</span><br><span class="line">    p=(PCBList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PCB));</span><br><span class="line">    p=L.fronts;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=MAX;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程"</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"&lt;----------------创建进程的信息：----------------------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程标识："</span>&lt;&lt;p-&gt;name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程执行时间："</span>&lt;&lt;p-&gt;runtime&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程当前状态："</span>&lt;&lt;p-&gt;current&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"进程的优先级："</span>&lt;&lt;p-&gt;priority&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="string">"&lt;-------------------信息结束：----------------------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">       p=p-&gt;next;</span><br><span class="line">       Sleep(<span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PCBLink L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=MAX;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        inputPCB(L,i);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"第"</span>&lt;&lt;i&lt;&lt;<span class="string">"个进城进入就绪队列！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        Sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    showState(L);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"&lt;--------------------开始处理进程---------------------------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">while</span>(num !=MAX)</span><br><span class="line">    &#123;</span><br><span class="line">        selecthigest(L);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num == MAX)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"&lt;---------------------所有进程处理完毕！---------------------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现： <img src="http://47.100.4.8/wp-content/uploads/2018/05/1-5.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/2-5.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/3-4.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/4-4.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/5-2.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/6-1.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/7-1.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>FCFS</tag>
      </tags>
  </entry>
  <entry>
    <title>给PyCharm安装QtDesigner</title>
    <url>/2018/09/28/gei-pycharm-an-zhuang-qtdesigner-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/09/QQ%E5%9B%BE%E7%89%8720180928191520.png" alt=""></p>
<p><strong>今天介绍给PyCharm安装外部工具QtDesigner</strong></p>
<p>首先你要给你的PyCharm安装pyqt5 具体安装方法我提供三种 1. 使用PyCharm自带的安装工具进行安装 在setting中的Project Interpreter中搜索安装pyqt5以及pyqt5-tool <img src="http://47.100.4.8/wp-content/uploads/2018/09/QQ%E5%9B%BE%E7%89%8720180928192246.png" alt=""> 2.直接使用pip命令进行安装</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">E:\\python\\<span class="keyword">Scripts&gt;pip </span><span class="keyword">install </span>pyqt5</span><br></pre></td></tr></table></figure>
<p>个人不是很推荐这种方法，由于直接使用pip安装下载速度实在是太慢，而且pyqt5的轮子大概有90mb所以要下很久很久。 3.直接下载轮子，然后使用pip命令安装即可</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">E</span>:\\<span class="selector-tag">python</span>\\<span class="selector-tag">Scripts</span>&gt;<span class="selector-tag">pip</span> <span class="selector-tag">install</span> <span class="selector-tag">G</span>:\\<span class="selector-tag">PyQt5-5</span><span class="selector-class">.11</span><span class="selector-class">.2-5</span><span class="selector-class">.11</span><span class="selector-class">.1-cp35</span><span class="selector-class">.cp36</span><span class="selector-class">.cp37</span><span class="selector-class">.cp38-none-win_amd64</span><span class="selector-class">.whl</span></span><br></pre></td></tr></table></figure>
<p>至于轮子的下载地址，大家可以自行去这个网站去找https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted  上面几乎有大部分常用的轮子。下载下来之后按照上面的命令安装即可。 接下来是安装QtDesigner 打开PyCharm，选择Settings -&gt; Tools -&gt; External Tools，点击左上角的绿色加号。 <img src="http://47.100.4.8/wp-content/uploads/2018/09/QQ%E5%9B%BE%E7%89%8720180928193120.png" alt=""> Name填入QtDesigner（方便后续使用，名称无所谓）。Program选择我们安装的PyQt5-tools下面的designer.exe。Working directory则选择我们的工作目录。然后点击OK，则添加了QtDesigner作为PyCharm的外置工具。 按照下图配置： <img src="http://47.100.4.8/wp-content/uploads/2018/09/QQ%E5%9B%BE%E7%89%8720180928193301.png" alt=""> 然后添加PyUIC（UI转换工具），PyUIC的Program为Python.exe，在Python的安装目录下面的Scripts目录下，Working directory设为$ProjectFileDir$，Parameters则填入如下代码：</p>
<p>-m PyQt5.uic.pyuic  $FileName$ -o $<a href="http://FileNameWithoutExtension$.py">FileNameWithoutExtension$.py</a></p>
<p>如图： <img src="http://47.100.4.8/wp-content/uploads/2018/09/QQ%E5%9B%BE%E7%89%8720180928193451.png" alt=""> 最后添加pyrcc用于PyQt5的资源文件转码。具体配置与上述内容相同，Parameters填入：</p>
<p>$FileName$ -o $FileNameWithoutExtension$_rc.py</p>
<p>如图： <img src="http://47.100.4.8/wp-content/uploads/2018/09/QQ%E5%9B%BE%E7%89%8720180928193736.png" alt=""> <strong>配置完成！</strong> 在PyCharm中启动QtDesigner <img src="http://47.100.4.8/wp-content/uploads/2018/09/QQ%E5%9B%BE%E7%89%8720180928193837.png" alt=""> 就可以进行QtDesigner的操作了。</p>
]]></content>
      <categories>
        <category>Python模块PyQt5</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyQt5</tag>
        <tag>QtDesigner</tag>
      </tags>
  </entry>
  <entry>
    <title>Google PageRank</title>
    <url>/2018/03/19/google-pagerank-1/</url>
    <content><![CDATA[<h3 id=""><a class="header-anchor" href="#">¶</a><img src="http://47.100.4.8/wp-content/uploads/2018/03/u24187857483070860104fm27gp0-300x216.jpg" alt=""></h3>
<p>PageRank是一种比较经典的基于网页粒度的分析算法。他是谷歌搜索引擎的核心算法。简单的讲：他会根据网页之间的连接关系对网页的权重进行计算，并可以依靠这些计算出来的权重，对网页进行排名。</p>
<h3 id="简介"><a class="header-anchor" href="#简介">¶</a>简介</h3>
<p>PageRank，网页排名，又称网页级别、Google左侧排名或佩奇排名，是一种由[1]  根据<a href="https://baike.baidu.com/item/%E7%BD%91%E9%A1%B5">网页</a>之间相互的<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE%E6%8E%A5">超链接</a>计算的技术，而作为网页排名的要素之一，以<a href="https://baike.baidu.com/item/Google">Google</a>公司创办人<a href="https://baike.baidu.com/item/%E6%8B%89%E9%87%8C%C2%B7%E4%BD%A9%E5%A5%87">拉里·佩奇</a>（Larry Page）之姓来命名。Google用它来体现网页的相关性和重要性，在<a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96/3132">搜索引擎优化</a>操作中是经常被用来评估网页优化的成效因素之一。Google的创始人拉里·佩奇和<a href="https://baike.baidu.com/item/%E8%B0%A2%E5%B0%94%E7%9B%96%C2%B7%E5%B8%83%E6%9E%97">谢尔盖·布林</a>于1998年在<a href="https://baike.baidu.com/item/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6">斯坦福大学</a>发明了这项技术。</p>
<p>PageRank通过网络浩瀚的超链接关系来确定一个页面的等级。Google把从A页面到B页面的链接解释为A页面给B页面投票，Google根据投票来源（甚至来源的来源，即链接到A页面的页面）和投票目标的等级来决定新的等级。简单的说，一个高等级的页面可以使其他低等级页面的等级提升。</p>
<p>——来源百度百科</p>
<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-3-300x162.jpg" alt=""></p>
<h5 id="算法原理："><a class="header-anchor" href="#算法原理：">¶</a>算法原理：</h5>
<p>PageRank的计算充分利用了两个假设：数量假设和质量假设。步骤如下： **1）在初始阶段：**网页通过链接关系构建起Web图，每个页面设置相同的PageRank值，通过若干轮的计算，会得到每个页面所获得的最终PageRank值。随着每一轮的计算进行，网页当前的PageRank值会不断得到更新。 **2）在一轮中更新页面PageRank得分的计算方法：**在一轮更新页面PageRank得分的计算中，每个页面将其当前的PageRank值平均分配到本页面包含的出链上，这样每个链接即获得了相应的权值。而每个页面将所有指向本页面的入链所传入的权值求和，即可得到新的PageRank得分。当每个页面都获得了更新后的PageRank值，就完成了一轮PageRank计算。</p>
<p>PageRank算法总的来说就是预先给每个网页一个PR值（下面用PR值指代PageRank值），由于PR值物理意义上为一个网页被访问概率，所以一般是1N，其中N为网页总数。另外，一般情况下，所有网页的PR值的总和为1。如果不为1的话也不是不行，最后算出来的不同网页之间PR值的大小关系仍然是正确的，只是不能直接地反映概率了。 预先给定PR值后，通过下面的算法不断迭代，直至达到平稳分布为止。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/20160816094700454-300x226.jpg" alt=""></p>
<h5 id="基本思想："><a class="header-anchor" href="#基本思想：">¶</a>基本思想：</h5>
<p>如果网页M存在一个指向网页B的连接，则表明T的所有者认为B比较重要，从而把T的一部分重要性得分赋予B。这个重要性得分值为：PR（M）/L(M) 其中PR（M）为M的PageRank值，L(M)为M的出链数 则B的PageRank值为一系列类似于T的页面重要性得分值的累加。 即一个页面的得票数由所有链向它的页面的重要性来决定，到一个页面的<a href="http://zh.wikipedia.org/wiki/%E8%B6%85%E9%93%BE%E6%8E%A5" title="超链接">超链接</a>相当于对该页投一票。一个页面的PageRank是由所有链向它的页面（链入页面）的重要性经过<a href="http://zh.wikipedia.org/wiki/%E9%80%92%E5%BD%92" title="递归">递归</a>算法得到的。一个有较多链入的页面会有较高的等级，相反如果一个页面没有任何链入页面，那么它没有等级。 ——以上参考了csdn上的一些博文。</p>
<p>大家讲不如Google 讲 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180317232716-300x162.png" alt=""></p>
<h5 id="来自Google的言论："><a class="header-anchor" href="#来自Google的言论：">¶</a>来自Google的言论：</h5>
<p>Chris：PageRank的命名是基于“Page”，还是和某个创始人有关？ Google：PageRank是以Google的联合创始人兼总裁Larry Page的名字命名的。 Chris：Google是否把PageRank视做显著区别于其它搜索引擎的一个特性？ Google：PageRank是一种能够使Google在搜索速度和搜索结果的相关性上区别于其它搜索引擎的技术。不唯如此，在排名公式中Google还使用了100种其它的算法。 Chris：Google是否认为引入PageRank可以显著提高搜索结果的质量？以后是否仍将继续使用PageRank？ Google：由于PageRank使用了量化方法来分析链接，所以它仍将是决定Google搜索结果页排名的一个重要因素。 Chris：您认为Google工具栏上的PageRank的信息对普通用户/网站管理员/搜索引擎优化专家来说各有什么意义？ Google：Google工具栏上所提供的PageRank信息仅作为一种网站评估信息使用。用户们会觉得它很有趣，网站管理员一般用它来衡量网站性能。不过，由于PageRank只是一个大体评估，所以对搜索引擎专家的价值并不大。 Chris：常有网站试图通过“链接工厂”和访客簿的手段达到提升PageRank的目的。对这样的网站Google有什么举措？ Google：Google的工程师会经常更新Google的排名算法以防止对Google排名的恶意操纵。</p>
<p>End！</p>
]]></content>
      <categories>
        <category>Google —PageRank</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>PageRank</tag>
      </tags>
  </entry>
  <entry>
    <title>世界，您好！</title>
    <url>/2018/03/03/hello-world/</url>
    <content><![CDATA[<p>Hello World</p>
]]></content>
      <categories>
        <category>Hello World！</category>
        <category>文章页</category>
      </categories>
  </entry>
  <entry>
    <title>汇编语言实现判断是否为闰年</title>
    <url>/2018/07/25/hui-bian-yu-yan-shi-xian-pan-duan-shi-fou-wei-run-nian-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180725093458.png" alt=""> <strong>使用汇编语言实现根据输入的数字来判断是否为闰年。</strong> <strong>算法流程图：</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/07/%E9%A1%B9%E7%9B%AE%E6%B5%81%E7%A8%8B.png" alt=""> <strong>主要代码：</strong></p>
<p>data segment<br>
output1 db ‘Yes’,’$’<br>
output2 db ‘No’,’$’<br>
output3 db ‘Error’,’$’<br>
year dw ?<br>
x1 dw 4<br>
x2 dw 100<br>
x3 dw 400<br>
data ends</p>
<p>code segment<br>
assume cs:code,ds:data<br>
start:<br>
mov ax,data<br>
mov ds,ax<br>
;数据初始化<br>
mov year,0 ;存储年份的位数清零<br>
mov cx,4 ;年份为4位<br>
lk:<br>
push cx<br>
mov ah,1 ;输入单个字符<br>
int 21H<br>
;进行输入的判断 如何小于0则跳转到Error<br>
cmp al,‘0’<br>
jb error<br>
cmp al,3AH<br>
jb chuli ;如何满足则进行处理</p>
<p>error:<br>
;输出换行符<br>
mov dl,0AH<br>
mov ah,02H<br>
int 21H</p>
<pre><code>lea dx,output3
mov ah,09H
int 21h
jmp exit
</code></pre>
<p>chuli:<br>
sub al,30H ;将字符转换为数字<br>
mov ah,0 ;将ah置0<br>
mov cx,ax ;用cx暂存ax的内容<br>
;将老的数据乘以10并且加上原来的存储的数据<br>
mov ax,year<br>
mov bx,10<br>
mul bx<br>
add ax,cx<br>
mov year,ax ;将乘10以后的数据存储到原值</p>
<pre><code>pop cx ;将原来的cx值出栈用以循环使用

loop lk ;进行循环输入
</code></pre>
<p>panduan:<br>
mov ax,year;取得最终输入的年份<br>
cwd ;扩展为32位 方便进行乘除<br>
div x1 ;除以4<br>
cmp dx,0 ;判断余数是否为0<br>
jne feirunnian;如果余数非0则不是闰年</p>
<pre><code>mov ax,year
cwd
div x3 ;除以400
cmp dx,0
je runnian ;如果余数为0则是闰年

mov ax,year
cwd
div x2 ;除以100
cmp dx,0
jne runnian
</code></pre>
<p>feirunnian:<br>
;输出换行符<br>
mov dl,0AH<br>
mov ah,02H<br>
int 21H</p>
<pre><code>lea dx,output2
mov ah,09H
int 21H
jmp exit
</code></pre>
<p>runnian:<br>
;输出换行符<br>
mov dl,0AH<br>
mov ah,02H<br>
int 21H</p>
<pre><code>lea dx,output1
mov ah,09H
int 21H
jmp exit
</code></pre>
<p>exit:<br>
mov ah,4ch<br>
int 21H</p>
<p>code ends<br>
end start</p>
<p><strong>测试：</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180725094929.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180725094951.png" alt=""></p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>汇编语言</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML基础标签介绍</title>
    <url>/2018/07/08/html-ji-chu-biao-qian-jie-shao-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180708191725.png" alt=""></p>
<p><strong>基础标签介绍</strong></p>
<p>在HTML中标签都是成对出现的，开始为&lt;标签&gt;结束为&lt;/标签&gt; 首先介绍一下<html>,这个标签是告诉浏览器这是一个html文件，有了这个标签浏览器才能识别HTML文件。 <head>是用来设置浏览器头信息的标签，包括浏览器的标题。 <title>用来设置网页标题在<head>中完成 格式为：<strong><title>标题</title></strong> <body>中存储的是显示在浏览器中给用户看到的信息，同样这里可以同样式表来设置更加美观的界面。 <p>标签P是用来显示段落，在其中写出的内容会在浏览器界面中显示出来。 同样在标签body中还有六级标题标签从<h1>到<h6> 具体使用：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--head为页面的头，网页的信息放到这里面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用title可以设置页面标题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Starbuzz Coffee<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用样式表--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要注意样式表的注解和html的注解不一样--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line">        body</span><br><span class="line">        &#123;</span><br><span class="line"><span class="css">            <span class="comment">/*背景颜色*/</span></span></span><br><span class="line"><span class="css">            <span class="selector-tag">background-color</span>: <span class="selector-id">#dd1144</span>;</span></span><br><span class="line"><span class="css">            <span class="comment">/*设置左右外边距分别为20%*/</span></span></span><br><span class="line">            margin-left: 20%;</span><br><span class="line">            margin-right: 20%;</span><br><span class="line"><span class="css">            <span class="comment">/*定义界面主体周边的边框为虚线，颜色为黑色*/</span></span></span><br><span class="line">            border: 2px dotted green;</span><br><span class="line"><span class="css">            <span class="comment">/*设置页面主体周围的内边距*/</span></span></span><br><span class="line">            padding: 10px 10px 10px 10px;</span><br><span class="line"><span class="css">            <span class="comment">/*设置主体字体*/</span></span></span><br><span class="line">            font-family: sans-serif;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--body为主体包含页面内容等，它是你在浏览器里面看到的内容，大多数空白符、制表符、换行符都会被忽略--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--h1到h6表示页面标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Starbuzz Coffee Beverages<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>House Blend,$1.49<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--p标签用于显示段落--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>A smooth,mild blend of coffees from Mexico,Bolivia and Guatemala.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Mocha Cafe Latte,$2.35<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Espresso,steamed milk and chocolate syrup.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Cappuccino,$1.89<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>A mixture of espresso,steamed millk and foam<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Chai Tea,$1.85<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>A spicy drink made with black tea,spices,milk and honey<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">这是还要说一下HTML页面中使用<span class="comment">&lt;!--注释内容--&gt;</span>用来添加一些注释，添加注释是一个好习惯，增强代码的可阅读性。 再说一下标签<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml">是用来设置样式表的。格式为：**<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">""</span>&gt;</span><span class="xml">** 这里其实可以写好样式表文件，然后在该标签中引用即可。   下面介绍一下标签a 标签a可以用来引用一些HTML页面 使用格式为：**<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"example.html"</span>&gt;</span>** 同样除了引用html页面也可以直接引用一些网址。 具体使用：</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Strudy the use of <span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>The introduction of the DongMan<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--引用图片--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--html里面的换行符为&lt;br /&gt;--&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"qwe.jpg"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    This is the picture of a katong girl<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="comment">&lt;!--使用a标签可以在在href后面加上一个url连接或者直接引用一个html页面，&lt;a&gt;这个内容是显示在html界面上的点击之后会跳转到指定的界面&lt;/a&gt;--&gt;</span></span></span><br><span class="line"><span class="xml">    learning more <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com/"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>test<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line">    Nothing is something</span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"example 1.html"</span>&gt;</span>exits<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>同样还可以使用**<img src="">**来引用一些图片，同样可以为本地图片也可以为图片的地址。</p>
]]></content>
      <categories>
        <category>HTML&amp;amp;CSS</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>ICO图片生成器</title>
    <url>/2018/04/05/ico-tu-pian-sheng-cheng-qi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/d058ccbf6c81800ab3a945b0b93533fa838b47c4.png" alt=""></p>
<h3 id="首先先介绍一下ICO图片："><a class="header-anchor" href="#首先先介绍一下ICO图片：">¶</a>首先先介绍一下ICO图片：</h3>
<h3 id="ICO是Windows的图标文件格式，图标文件可以存储单个图案、多尺寸、多色板的图标文件。一个图标实际上是多张不同格式的图片的集合体，并且还包含了一定的透明区域。"><a class="header-anchor" href="#ICO是Windows的图标文件格式，图标文件可以存储单个图案、多尺寸、多色板的图标文件。一个图标实际上是多张不同格式的图片的集合体，并且还包含了一定的透明区域。">¶</a>ICO是Windows的图标文件格式，<a href="https://baike.baidu.com/item/%E5%9B%BE%E6%A0%87">图标</a>文件可以存储单个图案、多尺寸、多色板的图标文件。一个图标实际上是多张不同格式的图片的集合体，并且还包含了一定的透明区域。</h3>
<p>为什么我想起来搞一个这个转换器呢。主要是在之前使用PyQt5中有一个音量图标的使用要求使用ico图片，而我又不想在网上直接弄所以就想写一个这样的python小程序来实现。 同样ico图片可以作为网站的图标等。 下面是小程序： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180405141612.png" alt=""> 程序样式比教简陋。。 选择文件之后保存就会生成了： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180405141713.png" alt=""> 下面是程序连接： <a href="http://47.100.4.8/wp-content/uploads/2018/04/ico%E8%BD%AC%E6%8D%A2%E5%99%A8.rar">ico转换器</a></p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>ico</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌发布的机器学习术语，你知道几个？</title>
    <url>/2018/03/17/gu-ge-fa-bu-de-ji-qi-xue-xi-shu-yu-ni-zhi-dao-ji-ge-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180317232527-300x99.png" alt=""></p>
<h2 id="A-B-测试-A-B-testing"><a class="header-anchor" href="#A-B-测试-A-B-testing">¶</a>A/B 测试 (A/B testing)</h2>
<p>一种统计方法，用于将两种或多种技术进行比较，通常是将当前采用的技术与新技术进行比较。A/B 测试不仅旨在确定哪种技术的效果更好，而且还有助于了解相应差异是否具有显著的统计意义。A/B 测试通常是采用一种衡量方式对两种技术进行比较，但也适用于任意有限数量的技术和衡量方式。</p>
<h2 id="准确率-accuracy"><a class="header-anchor" href="#准确率-accuracy">¶</a>准确率 (accuracy)</h2>
<p><strong>分类模型</strong>的正确预测所占的比例。</p>
<h2 id="激活函数-activation-function"><a class="header-anchor" href="#激活函数-activation-function">¶</a>激活函数 (activation function)</h2>
<p>一种函数（例如 <strong>ReLU</strong> 或 <strong>S 型</strong>函数），用于对上一层的所有输入求加权和，然后生成一个输出值（通常为非线性值），并将其传递给下一层。</p>
<h2 id="AdaGrad"><a class="header-anchor" href="#AdaGrad">¶</a>AdaGrad</h2>
<p>一种先进的梯度下降法，用于重新调整每个参数的梯度，以便有效地为每个参数指定独立的<strong>学习速率</strong>。如需查看完整的解释，请参阅这篇论文。</p>
<h2 id="ROC-曲线下面积-AUC-Area-under-the-ROC-Curve"><a class="header-anchor" href="#ROC-曲线下面积-AUC-Area-under-the-ROC-Curve">¶</a>ROC 曲线下面积 (AUC, Area under the ROC Curve)</h2>
<p>一种会考虑所有可能分类阈值的评估指标。 ROC 曲线下面积是，对于随机选择的正类别样本确实为正类别，以及随机选择的负类别样本为正类别，分类器更确信前者的概率。</p>
<h2 id="反向传播算法-backpropagation"><a class="header-anchor" href="#反向传播算法-backpropagation">¶</a>反向传播算法 (backpropagation)</h2>
<p>在<strong>神经网络</strong>上执行<strong>梯度下降法</strong>的主要算法。该算法会先按前向传播方式计算（并缓存）每个节点的输出值，然后再按反向传播遍历图的方式计算损失函数值相对于每个参数的偏导数。</p>
<h2 id="基准-baseline"><a class="header-anchor" href="#基准-baseline">¶</a>基准 (baseline)</h2>
<p>一种简单的<strong>模型</strong>或启发法，用作比较模型效果时的参考点。基准有助于模型开发者针对特定问题量化最低预期效果。</p>
<h2 id="批次-batch"><a class="header-anchor" href="#批次-batch">¶</a>批次 (batch)</h2>
<p><strong>模型训练</strong>的一次<strong>迭代</strong>（即一次<strong>梯度</strong>更新）中使用的样本集。</p>
<h2 id="批次规模-batch-size"><a class="header-anchor" href="#批次规模-batch-size">¶</a>批次规模 (batch size)</h2>
<p>一个<strong>批次</strong>中的样本数。例如，<strong>SGD</strong> 的批次规模为 1，而<strong>小批次</strong>的规模通常介于 10 到 1000 之间。批次规模在训练和推断期间通常是固定的；不过，TensorFlow 允许使用动态批次规模。</p>
<h2 id="偏差-bias"><a class="header-anchor" href="#偏差-bias">¶</a>偏差 (bias)</h2>
<p>距离原点的截距或偏移。偏差（也称为<strong>偏差项</strong>）在机器学习模型中以 b 或 w0 表示。例如，在下面的公式中，偏差为 b： y′=b+w1x1+w2x2+…wnxn 请勿与<strong>预测偏差</strong>混淆。</p>
<h2 id="二元分类-binary-classification"><a class="header-anchor" href="#二元分类-binary-classification">¶</a>二元分类 (binary classification)</h2>
<p>一种分类任务，可输出两种互斥类别之一。例如，对电子邮件进行评估并输出“垃圾邮件”或“非垃圾邮件”的机器学习模型就是一个二元分类器。</p>
<h2 id="分箱-binning"><a class="header-anchor" href="#分箱-binning">¶</a>分箱 (binning)</h2>
<p>请参阅<strong>分桶</strong>。</p>
<h2 id="分桶-bucketing"><a class="header-anchor" href="#分桶-bucketing">¶</a>分桶 (bucketing)</h2>
<p>将一个特征（通常是<strong>连续</strong>特征）转换成多个二元特征（称为桶或箱），通常是根据值区间进行转换。例如，您可以将温度区间分割为离散分箱，而不是将温度表示成单个连续的浮点特征。假设温度数据可精确到小数点后一位，则可以将介于 0.0 到 15.0 度之间的所有温度都归入一个分箱，将介于 15.1 到 30.0 度之间的所有温度归入第二个分箱，并将介于 30.1 到 50.0 度之间的所有温度归入第三个分箱。</p>
<h2 id="校准层-calibration-layer"><a class="header-anchor" href="#校准层-calibration-layer">¶</a>校准层 (calibration layer)</h2>
<p>一种预测后调整，通常是为了降低<strong>预测偏差</strong>。调整后的预测和概率应与观察到的标签集的分布一致。</p>
<h2 id="候选采样-candidate-sampling"><a class="header-anchor" href="#候选采样-candidate-sampling">¶</a>候选采样 (candidate sampling)</h2>
<p>一种训练时进行的优化，会使用某种函数（例如 softmax）针对所有正类别标签计算概率，但对于负类别标签，则仅针对其随机样本计算概率。例如，如果某个样本的标签为“小猎犬”和“狗”，则候选采样将针对“小猎犬”和“狗”类别输出以及其他类别（猫、棒棒糖、栅栏）的随机子集计算预测概率和相应的损失项。这种采样基于的想法是，只要<strong>正类别</strong>始终得到适当的正增强，<strong>负类别</strong>就可以从频率较低的负增强中进行学习，这确实是在实际中观察到的情况。候选采样的目的是，通过不针对所有负类别计算预测结果来提高计算效率。</p>
<h2 id="分类数据-categorical-data"><a class="header-anchor" href="#分类数据-categorical-data">¶</a>分类数据 (categorical data)</h2>
<p>一种<strong>特征</strong>，拥有一组离散的可能值。以某个名为 <code>house style</code> 的分类特征为例，该特征拥有一组离散的可能值（共三个），即 <code>Tudor, ranch, colonial</code>。通过将 <code>house style</code> 表示成分类数据，相应模型可以学习 <code>Tudor</code>、<code>ranch</code> 和 <code>colonial</code> 分别对房价的影响。 有时，离散集中的值是互斥的，只能将其中一个值应用于指定样本。例如，<code>car maker</code> 分类特征可能只允许一个样本有一个值 (<code>Toyota</code>)。在其他情况下，则可以应用多个值。一辆车可能会被喷涂多种不同的颜色，因此，<code>car color</code> 分类特征可能会允许单个样本具有多个值（例如 <code>red</code> 和 <code>white</code>）。 分类特征有时称为<strong>离散特征</strong>。 与<strong>数值数据</strong>相对。</p>
<h2 id="检查点-checkpoint"><a class="header-anchor" href="#检查点-checkpoint">¶</a>检查点 (checkpoint)</h2>
<p>一种数据，用于捕获模型变量在特定时间的状态。借助检查点，可以导出模型<strong>权重</strong>，跨多个会话执行训练，以及使训练在发生错误之后得以继续（例如作业抢占）。请注意，<strong>图</strong>本身不包含在检查点中。</p>
<h2 id="类别-class"><a class="header-anchor" href="#类别-class">¶</a>类别 (class)</h2>
<p>为标签枚举的一组目标值中的一个。例如，在检测垃圾邮件的<strong>二元分类</strong>模型中，两种类别分别是“垃圾邮件”和“非垃圾邮件”。在识别狗品种的<strong>多类别分类</strong>模型中，类别可以是“贵宾犬”、“小猎犬”、“哈巴犬”等等。</p>
<h2 id="分类不平衡的数据集-class-imbalanced-data-set"><a class="header-anchor" href="#分类不平衡的数据集-class-imbalanced-data-set">¶</a>分类不平衡的数据集 (class-imbalanced data set)</h2>
<p>一种<strong>二元分类</strong>问题，在此类问题中，两种类别的<strong>标签</strong>在出现频率方面具有很大的差距。例如，在某个疾病数据集中，0.0001 的样本具有正类别标签，0.9999 的样本具有负类别标签，这就属于分类不平衡问题；但在某个足球比赛预测器中，0.51 的样本的标签为其中一个球队赢，0.49 的样本的标签为另一个球队赢，这就不属于分类不平衡问题。</p>
<h2 id="分类模型-classification-model"><a class="header-anchor" href="#分类模型-classification-model">¶</a>分类模型 (classification model)</h2>
<p>一种机器学习模型，用于区分两种或多种离散类别。例如，某个自然语言处理分类模型可以确定输入的句子是法语、西班牙语还是意大利语。请与<strong>回归模型</strong>进行比较。</p>
<h2 id="分类阈值-classification-threshold"><a class="header-anchor" href="#分类阈值-classification-threshold">¶</a>分类阈值 (classification threshold)</h2>
<p>一种标量值条件，应用于模型预测的得分，旨在将<strong>正类别</strong>与<strong>负类别</strong>区分开。将<strong>逻辑回归</strong>结果映射到<strong>二元分类</strong>时使用。以某个逻辑回归模型为例，该模型用于确定指定电子邮件是垃圾邮件的概率。如果分类阈值为 0.9，那么逻辑回归值高于 0.9 的电子邮件将被归类为“垃圾邮件”，低于 0.9 的则被归类为“非垃圾邮件”。</p>
<h2 id="协同过滤-collaborative-filtering"><a class="header-anchor" href="#协同过滤-collaborative-filtering">¶</a>协同过滤 (collaborative filtering)</h2>
<p>根据很多其他用户的兴趣来预测某位用户的兴趣。协同过滤通常用在推荐系统中。</p>
<h2 id="混淆矩阵-confusion-matrix"><a class="header-anchor" href="#混淆矩阵-confusion-matrix">¶</a>混淆矩阵 (confusion matrix)</h2>
<p>一种 NxN 表格，用于总结<strong>分类模型</strong>的预测成效；即标签和模型预测的分类之间的关联。在混淆矩阵中，一个轴表示模型预测的标签，另一个轴表示实际标签。N 表示类别个数。在<strong>二元分类</strong>问题中，N=2。例如，下面显示了一个二元分类问题的混淆矩阵示例：</p>
<p>肿瘤（预测的标签）</p>
<p>非肿瘤（预测的标签）</p>
<p>肿瘤（实际标签）</p>
<p>18</p>
<p>1</p>
<p>非肿瘤（实际标签）</p>
<p>6</p>
<p>452</p>
<p>上面的混淆矩阵显示，在 19 个实际有肿瘤的样本中，该模型正确地将 18 个归类为有肿瘤（18 个真正例），错误地将 1 个归类为没有肿瘤（1 个假负例）。同样，在 458 个实际没有肿瘤的样本中，模型归类正确的有 452 个（452 个真负例），归类错误的有 6 个（6 个假正例）。 多类别分类问题的混淆矩阵有助于确定出错模式。例如，某个混淆矩阵可以揭示，某个经过训练以识别手写数字的模型往往会将 4 错误地预测为 9，将 7 错误地预测为 1。混淆矩阵包含计算各种效果指标（包括精确率和召回率）所需的充足信息。</p>
<h2 id="连续特征-continuous-feature"><a class="header-anchor" href="#连续特征-continuous-feature">¶</a>连续特征 (continuous feature)</h2>
<p>一种浮点特征，可能值的区间不受限制。与<strong>离散特征</strong>相对。</p>
<h2 id="收敛-convergence"><a class="header-anchor" href="#收敛-convergence">¶</a>收敛 (convergence)</h2>
<p>通俗来说，收敛通常是指在训练期间达到的一种状态，即经过一定次数的迭代之后，训练<strong>损失</strong>和验证损失在每次迭代中的变化都非常小或根本没有变化。也就是说，如果采用当前数据进行额外的训练将无法改进模型，模型即达到收敛状态。在深度学习中，损失值有时会在最终下降之前的多次迭代中保持不变或几乎保持不变，暂时形成收敛的假象。 另请参阅<strong>早停法</strong>。</p>
<h2 id="凸函数-convex-function"><a class="header-anchor" href="#凸函数-convex-function">¶</a>凸函数 (convex function)</h2>
<p>一种函数，函数图像以上的区域为<strong>凸集</strong>。典型凸函数的形状类似于字母 <strong>U</strong>。请注意图像上方的区域如何不是凸集： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180317232614-300x212.png" alt=""> <strong>严格凸函数</strong>只有一个局部最低点，该点也是全局最低点。经典的 U 形函数都是严格凸函数。不过，有些凸函数（例如直线）则不是这样。 很多常见的<strong>损失函数</strong>（包括下列函数）都是凸函数：</p>
<ul>
<li><strong>L2 损失函数</strong></li>
<li><strong>对数损失函数</strong></li>
<li><strong>L1 正则化</strong></li>
<li><strong>L2 正则化</strong></li>
</ul>
<p><strong>梯度下降法</strong>的很多变体都一定能找到一个接近严格凸函数最小值的点。同样，<strong>随机梯度下降法</strong>的很多变体都有很高的可能性能够找到接近严格凸函数最小值的点（但并非一定能找到）。 两个凸函数的和（例如 L2 损失函数 + L1 正则化）也是凸函数。 <strong>深度模型</strong>绝不会是凸函数。值得注意的是，专门针对<strong>凸优化</strong>设计的算法往往总能在深度网络上找到非常好的解决方案，虽然这些解决方案并不一定对应于全局最小值。</p>
<h2 id="凸优化-convex-optimization"><a class="header-anchor" href="#凸优化-convex-optimization">¶</a>凸优化 (convex optimization)</h2>
<p>使用数学方法（例如<strong>梯度下降法</strong>）寻找<strong>凸函数</strong>最小值的过程。机器学习方面的大量研究都是专注于如何通过公式将各种问题表示成凸优化问题，以及如何更高效地解决这些问题。 如需完整的详细信息，请参阅 Boyd 和 Vandenberghe 合著的 Convex Optimization（《凸优化》）。</p>
<h2 id="凸集-convex-set"><a class="header-anchor" href="#凸集-convex-set">¶</a>凸集 (convex set)</h2>
<p>欧几里得空间的一个子集，其中任意两点之间的连线仍完全落在该子集内。</p>
<h2 id="成本-cost"><a class="header-anchor" href="#成本-cost">¶</a>成本 (cost)</h2>
<p>是<strong>损失</strong>的同义词。</p>
<h2 id="交叉熵-cross-entropy"><a class="header-anchor" href="#交叉熵-cross-entropy">¶</a>交叉熵 (cross-entropy)</h2>
<p><strong>对数损失函数</strong>向<strong>多类别分类问题</strong>进行的一种泛化。交叉熵可以量化两种概率分布之间的差异。另请参阅<strong>困惑度</strong>。</p>
<h2 id="自定义-Estimator-custom-Estimator"><a class="header-anchor" href="#自定义-Estimator-custom-Estimator">¶</a>自定义 Estimator (custom Estimator)</h2>
<p>您按照这些说明自行编写的 <strong>Estimator</strong>。 与<strong>预创建的 Estimator</strong> 相对。</p>
<h2 id="数据集-data-set"><a class="header-anchor" href="#数据集-data-set">¶</a>数据集 (data set)</h2>
<p>一组<strong>样本</strong>的集合。</p>
<h2 id="Dataset-API-tf-data"><a class="header-anchor" href="#Dataset-API-tf-data">¶</a>Dataset API (tf.data)</h2>
<p>一种高级别的 TensorFlow API，用于读取数据并将其转换为机器学习算法所需的格式。<code>tf.data.Dataset</code> 对象表示一系列元素，其中每个元素都包含一个或多个<strong>张量</strong>。<code>tf.data.Iterator</code> 对象可获取 <code>Dataset</code> 中的元素。 如需详细了解 Dataset API，请参阅《TensorFlow 编程人员指南》中的导入数据。</p>
<h2 id="决策边界-decision-boundary"><a class="header-anchor" href="#决策边界-decision-boundary">¶</a>决策边界 (decision boundary)</h2>
<p>在<strong>二元分类</strong>或<strong>多类别分类问题</strong>中，模型学到的类别之间的分界线。</p>
<h2 id="密集层-dense-layer"><a class="header-anchor" href="#密集层-dense-layer">¶</a>密集层 (dense layer)</h2>
<p>是<strong>全连接层</strong>的同义词。</p>
<h2 id="深度模型-deep-model"><a class="header-anchor" href="#深度模型-deep-model">¶</a>深度模型 (deep model)</h2>
<p>一种<strong>神经网络</strong>，其中包含多个<strong>隐藏层</strong>。深度模型依赖于可训练的非线性关系。 与<strong>宽度模型</strong>相对。</p>
<h2 id="密集特征-dense-feature"><a class="header-anchor" href="#密集特征-dense-feature">¶</a>密集特征 (dense feature)</h2>
<p>一种大部分数值是非零值的<strong>特征</strong>，通常是一个浮点值<strong>张量</strong>。参照<strong>稀疏特征</strong>。</p>
<h2 id="衍生特征-derived-feature"><a class="header-anchor" href="#衍生特征-derived-feature">¶</a>衍生特征 (derived feature)</h2>
<p>是<strong>合成特征</strong>的同义词。</p>
<h2 id="离散特征-discrete-feature"><a class="header-anchor" href="#离散特征-discrete-feature">¶</a>离散特征 (discrete feature)</h2>
<p>一种<strong>特征</strong>，包含有限个可能值。例如，某个值只能是“动物”、“蔬菜”或“矿物”的特征便是一个离散特征（或分类特征）。与<strong>连续特征</strong>相对。</p>
<h2 id="丢弃正则化-dropout-regularization"><a class="header-anchor" href="#丢弃正则化-dropout-regularization">¶</a>丢弃正则化 (dropout regularization)</h2>
<p>一种形式的<strong>正则化</strong>，在训练<strong>神经网络</strong>方面非常有用。丢弃正则化的运作机制是，在神经网络层的一个梯度步长中移除随机选择的固定数量的单元。丢弃的单元越多，正则化效果就越强。这类似于训练神经网络以模拟较小网络的指数级规模集成学习。如需完整的详细信息，请参阅 Dropout: A Simple Way to Prevent Neural Networks from Overfitting（《丢弃：一种防止神经网络过拟合的简单方法》）。</p>
<h2 id="动态模型-dynamic-model"><a class="header-anchor" href="#动态模型-dynamic-model">¶</a>动态模型 (dynamic model)</h2>
<p>一种<strong>模型</strong>，以持续更新的方式在线接受训练。也就是说，数据会源源不断地进入这种模型。</p>
<h2 id="E"><a class="header-anchor" href="#E">¶</a>E</h2>
<h2 id="早停法-early-stopping"><a class="header-anchor" href="#早停法-early-stopping">¶</a>早停法 (early stopping)</h2>
<p>一种<strong>正则化</strong>方法，涉及在训练损失仍可以继续减少之前结束模型训练。使用早停法时，您会在基于<strong>验证数据集</strong>的损失开始增加（也就是<strong>泛化</strong>效果变差）时结束模型训练。</p>
<h2 id="嵌套-embeddings"><a class="header-anchor" href="#嵌套-embeddings">¶</a>嵌套 (embeddings)</h2>
<p>一种分类特征，以连续值特征表示。通常，嵌套是指将高维度向量映射到低维度的空间。例如，您可以采用以下两种方式之一来表示英文句子中的单词：</p>
<ul>
<li>表示成包含百万个元素（高维度）的<strong>稀疏向量</strong>，其中所有元素都是整数。向量中的每个单元格都表示一个单独的英文单词，单元格中的值表示相应单词在句子中出现的次数。由于单个英文句子包含的单词不太可能超过 50 个，因此向量中几乎每个单元格都包含 0。少数非 0 的单元格中将包含一个非常小的整数（通常为 1），该整数表示相应单词在句子中出现的次数。</li>
<li>表示成包含数百个元素（低维度）的<strong>密集向量</strong>，其中每个元素都包含一个介于 0 到 1 之间的浮点值。这就是一种嵌套。</li>
</ul>
<p>在 TensorFlow 中，会按<strong>反向传播****损失</strong>训练嵌套，和训练<strong>神经网络</strong>中的任何其他参数时一样。</p>
<h2 id="经验风险最小化-ERM-empirical-risk-minimization"><a class="header-anchor" href="#经验风险最小化-ERM-empirical-risk-minimization">¶</a>经验风险最小化 (ERM, empirical risk minimization)</h2>
<p>用于选择可以将基于训练集的损失降至最低的模型函数。与<strong>结构风险最小化</strong>相对。</p>
<h2 id="集成学习-ensemble"><a class="header-anchor" href="#集成学习-ensemble">¶</a>集成学习 (ensemble)</h2>
<p>多个<strong>模型</strong>的预测结果的并集。您可以通过以下一项或多项来创建集成学习：</p>
<ul>
<li>不同的初始化</li>
<li>不同的<strong>超参数</strong></li>
<li>不同的整体结构</li>
</ul>
<p>深度模型和宽度模型属于一种集成学习。</p>
<h2 id="周期-epoch"><a class="header-anchor" href="#周期-epoch">¶</a>周期 (epoch)</h2>
<p>在训练时，整个数据集的一次完整遍历，以便不漏掉任何一个样本。因此，一个周期表示（<code>N</code>/<strong>批次规模</strong>）次训练<strong>迭代</strong>，其中 <code>N</code> 是样本总数。</p>
<h2 id="Estimator"><a class="header-anchor" href="#Estimator">¶</a>Estimator</h2>
<p><code>tf.Estimator</code> 类的一个实例，用于封装负责构建 TensorFlow 图并运行 TensorFlow 会话的逻辑。您可以创建自己的<strong>自定义 Estimator</strong>（如需相关介绍，请点击此处），也可以将其他人<strong>预创建的 Estimator</strong> 实例化。</p>
<h2 id="样本-example"><a class="header-anchor" href="#样本-example">¶</a>样本 (example)</h2>
<p>数据集的一行。一个样本包含一个或多个<strong>特征</strong>，此外还可能包含一个<strong>标签</strong>。另请参阅<strong>有标签样本</strong>和<strong>无标签样本</strong>。</p>
<h2 id="假负例-FN-false-negative"><a class="header-anchor" href="#假负例-FN-false-negative">¶</a>假负例 (FN, false negative)</h2>
<p>被模型错误地预测为<strong>负类别</strong>的样本。例如，模型推断出某封电子邮件不是垃圾邮件（负类别），但该电子邮件其实是垃圾邮件。</p>
<h2 id="假正例-FP-false-positive"><a class="header-anchor" href="#假正例-FP-false-positive">¶</a>假正例 (FP, false positive)</h2>
<p>被模型错误地预测为<strong>正类别</strong>的样本。例如，模型推断出某封电子邮件是垃圾邮件（正类别），但该电子邮件其实不是垃圾邮件。</p>
<h2 id="假正例率（false-positive-rate-简称-FP-率）"><a class="header-anchor" href="#假正例率（false-positive-rate-简称-FP-率）">¶</a>假正例率（false positive rate, 简称 FP 率）</h2>
<p><strong>ROC 曲线</strong>中的 x 轴。</p>
<h2 id="特征-feature"><a class="header-anchor" href="#特征-feature">¶</a>特征 (feature)</h2>
<p>在进行<strong>预测</strong>时使用的输入变量。</p>
<h2 id="特征列-FeatureColumns"><a class="header-anchor" href="#特征列-FeatureColumns">¶</a>特征列 (FeatureColumns)</h2>
<p>一组相关特征，例如用户可能居住的所有国家/地区的集合。样本的特征列中可能包含一个或多个特征。 TensorFlow 中的特征列内还封装了元数据，例如：</p>
<ul>
<li>特征的数据类型</li>
<li>特征是固定长度还是应转换为嵌套</li>
</ul>
<p>特征列可以包含单个特征。 “特征列”是 Google 专用的术语。特征列在 Yahoo/Microsoft 使用的 VW 系统中称为“命名空间”，也称为场。</p>
<h2 id="特征组合-feature-cross"><a class="header-anchor" href="#特征组合-feature-cross">¶</a>特征组合 (feature cross)</h2>
<p>通过将单独的特征进行组合（相乘或求笛卡尔积）而形成的<strong>合成特征</strong>。特征组合有助于表示非线性关系。</p>
<h2 id="特征工程-feature-engineering"><a class="header-anchor" href="#特征工程-feature-engineering">¶</a>特征工程 (feature engineering)</h2>
<p>指以下过程：确定哪些<strong>特征</strong>可能在训练模型方面非常有用，然后将日志文件及其他来源的原始数据转换为所需的特征。在 TensorFlow 中，特征工程通常是指将原始日志文件条目转换为 <strong>tf.Example</strong> proto buffer。另请参阅 tf.Transform。 特征工程有时称为<strong>特征提取</strong>。</p>
<h2 id="特征集-feature-set"><a class="header-anchor" href="#特征集-feature-set">¶</a>特征集 (feature set)</h2>
<p>训练机器学习模型时采用的一组<strong>特征</strong>。例如，对于某个用于预测房价的模型，邮政编码、房屋面积以及房屋状况可以组成一个简单的特征集。</p>
<h2 id="特征规范-feature-spec"><a class="header-anchor" href="#特征规范-feature-spec">¶</a>特征规范 (feature spec)</h2>
<p>用于描述如何从 <strong>tf.Example</strong> proto buffer 提取<strong>特征</strong>数据。由于 tf.Example proto buffer 只是一个数据容器，因此您必须指定以下内容：</p>
<ul>
<li>要提取的数据（即特征的键）</li>
<li>数据类型（例如 float 或 int）</li>
<li>长度（固定或可变）</li>
</ul>
<p><strong>Estimator API</strong> 提供了一些可用来根据给定 <strong>FeatureColumns</strong> 列表生成特征规范的工具。</p>
<h2 id="完整-softmax-full-softmax"><a class="header-anchor" href="#完整-softmax-full-softmax">¶</a>完整 softmax (full softmax)</h2>
<p>请参阅 <strong>softmax</strong>。与<strong>候选采样</strong>相对。</p>
<h2 id="全连接层-fully-connected-layer"><a class="header-anchor" href="#全连接层-fully-connected-layer">¶</a>全连接层 (fully connected layer)</h2>
<p>一种<strong>隐藏层</strong>，其中的每个<strong>节点</strong>均与下一个隐藏层中的每个节点相连。 全连接层又称为<strong>密集层</strong>。</p>
<h2 id="泛化-generalization"><a class="header-anchor" href="#泛化-generalization">¶</a>泛化 (generalization)</h2>
<p>指的是模型依据训练时采用的数据，针对以前未见过的新数据做出正确预测的能力。</p>
<h2 id="广义线性模型-generalized-linear-model"><a class="header-anchor" href="#广义线性模型-generalized-linear-model">¶</a>广义线性模型 (generalized linear model)</h2>
<p><strong>最小二乘回归</strong>模型（基于高斯噪声）向其他类型的模型（基于其他类型的噪声，例如泊松噪声或分类噪声）进行的一种泛化。广义线性模型的示例包括：</p>
<ul>
<li><strong>逻辑回归</strong></li>
<li>多类别回归</li>
<li>最小二乘回归</li>
</ul>
<p>可以通过凸优化找到广义线性模型的参数。 广义线性模型具有以下特性：</p>
<ul>
<li>最优的最小二乘回归模型的平均预测结果等于训练数据的平均标签。</li>
<li>最优的逻辑回归模型预测的平均概率等于训练数据的平均标签。</li>
</ul>
<p>广义线性模型的功能受其特征的限制。与深度模型不同，广义线性模型无法“学习新特征”。</p>
<h2 id="梯度-gradient"><a class="header-anchor" href="#梯度-gradient">¶</a>梯度 (gradient)</h2>
<p><strong>偏导数</strong>相对于所有自变量的向量。在机器学习中，梯度是模型函数偏导数的向量。梯度指向最速上升的方向。</p>
<h2 id="梯度裁剪-gradient-clipping"><a class="header-anchor" href="#梯度裁剪-gradient-clipping">¶</a>梯度裁剪 (gradient clipping)</h2>
<p>在应用<strong>梯度</strong>值之前先设置其上限。梯度裁剪有助于确保数值稳定性以及防止梯度爆炸。</p>
<h2 id="梯度下降法-gradient-descent"><a class="header-anchor" href="#梯度下降法-gradient-descent">¶</a>梯度下降法 (gradient descent)</h2>
<p>一种通过计算并且减小梯度将<strong>损失</strong>降至最低的技术，它以训练数据为条件，来计算损失相对于模型参数的梯度。通俗来说，梯度下降法以迭代方式调整参数，逐渐找到<strong>权重</strong>和偏差的最佳组合，从而将损失降至最低。</p>
<h2 id="图-graph"><a class="header-anchor" href="#图-graph">¶</a>图 (graph)</h2>
<p>TensorFlow 中的一种计算规范。图中的节点表示操作。边缘具有方向，表示将某项操作的结果（一个张量）作为一个操作数传递给另一项操作。可以使用 <strong>TensorBoard</strong> 直观呈现图。</p>
<h2 id="启发法-heuristic"><a class="header-anchor" href="#启发法-heuristic">¶</a>启发法 (heuristic)</h2>
<p>一种非最优但实用的问题解决方案，足以用于进行改进或从中学习。</p>
<h2 id="隐藏层-hidden-layer"><a class="header-anchor" href="#隐藏层-hidden-layer">¶</a>隐藏层 (hidden layer)</h2>
<p><strong>神经网络</strong>中的合成层，介于<strong>输入层</strong>（即特征）和<strong>输出层</strong>（即预测）之间。神经网络包含一个或多个隐藏层。</p>
<h2 id="合页损失函数-hinge-loss"><a class="header-anchor" href="#合页损失函数-hinge-loss">¶</a>合页损失函数 (hinge loss)</h2>
<p>一系列用于<strong>分类</strong>的<strong>损失</strong>函数，旨在找到距离每个训练样本都尽可能远的<strong>决策边界</strong>，从而使样本和边界之间的裕度最大化。 <strong>KSVM</strong> 使用合页损失函数（或相关函数，例如平方合页损失函数）。</p>
<h2 id="维持数据-holdout-data"><a class="header-anchor" href="#维持数据-holdout-data">¶</a>维持数据 (holdout data)</h2>
<p>训练期间故意不使用（“维持”）的<strong>样本</strong>。<strong>验证数据集</strong>和<strong>测试数据集</strong>都属于维持数据。维持数据有助于评估模型向训练时所用数据之外的数据进行泛化的能力。与基于训练数据集的损失相比，基于维持数据集的损失有助于更好地估算基于未见过的数据集的损失。</p>
<h2 id="超参数-hyperparameter"><a class="header-anchor" href="#超参数-hyperparameter">¶</a>超参数 (hyperparameter)</h2>
<p>在模型训练的连续过程中，您调节的“旋钮”。例如，<strong>学习速率</strong>就是一种超参数。 与<strong>参数</strong>相对。</p>
<h2 id="超平面-hyperplane"><a class="header-anchor" href="#超平面-hyperplane">¶</a>超平面 (hyperplane)</h2>
<p>将一个空间划分为两个子空间的边界。例如，在二维空间中，直线就是一个超平面，在三维空间中，平面则是一个超平面。在机器学习中更典型的是：超平面是分隔高维度空间的边界。<strong>核支持向量机</strong>利用超平面将正类别和负类别区分开来（通常是在极高维度空间中）。</p>
<h2 id="独立同分布-i-i-d-independently-and-identically-distributed"><a class="header-anchor" href="#独立同分布-i-i-d-independently-and-identically-distributed">¶</a>独立同分布 (i.i.d, independently and identically distributed)</h2>
<p>从不会改变的分布中提取的数据，其中提取的每个值都不依赖于之前提取的值。i.i.d. 是机器学习的理想气体 - 一种实用的数学结构，但在现实世界中几乎从未发现过。例如，某个网页的访问者在短时间内的分布可能为 i.i.d.，即分布在该短时间内没有变化，且一位用户的访问行为通常与另一位用户的访问行为无关。不过，如果将时间窗口扩大，网页访问者的分布可能呈现出季节性变化。</p>
<h2 id="推断-inference"><a class="header-anchor" href="#推断-inference">¶</a>推断 (inference)</h2>
<p>在机器学习中，推断通常指以下过程：通过将训练过的模型应用于<strong>无标签样本</strong>来做出预测。在统计学中，推断是指在某些观测数据条件下拟合分布参数的过程。（请参阅维基百科中有关统计学推断的文章。）</p>
<h2 id="输入函数-input-function"><a class="header-anchor" href="#输入函数-input-function">¶</a>输入函数 (input function)</h2>
<p>在 TensorFlow 中，用于将输入数据返回到 <strong>Estimator</strong> 的训练、评估或预测方法的函数。例如，训练输入函数用于返回<strong>训练集</strong>中的<strong>批次</strong>特征和标签。</p>
<h2 id="输入层-input-layer"><a class="header-anchor" href="#输入层-input-layer">¶</a>输入层 (input layer)</h2>
<p><strong>神经网络</strong>中的第一层（接收输入数据的层）。</p>
<h2 id="实例-instance"><a class="header-anchor" href="#实例-instance">¶</a>实例 (instance)</h2>
<p>是<strong>样本</strong>的同义词。</p>
<h2 id="可解释性-interpretability"><a class="header-anchor" href="#可解释性-interpretability">¶</a>可解释性 (interpretability)</h2>
<p>模型的预测可解释的难易程度。深度模型通常不可解释，也就是说，很难对深度模型的不同层进行解释。相比之下，线性回归模型和<strong>宽度模型</strong>的可解释性通常要好得多。</p>
<h2 id="评分者间一致性信度-inter-rater-agreement"><a class="header-anchor" href="#评分者间一致性信度-inter-rater-agreement">¶</a>评分者间一致性信度 (inter-rater agreement)</h2>
<p>一种衡量指标，用于衡量在执行某项任务时评分者达成一致的频率。如果评分者未达成一致，则可能需要改进任务说明。有时也称为<strong>注释者间一致性信度</strong>或<strong>评分者间可靠性信度</strong>。另请参阅 Cohen’s kappa（最热门的评分者间一致性信度衡量指标之一）。</p>
<h2 id="迭代-iteration"><a class="header-anchor" href="#迭代-iteration">¶</a>迭代 (iteration)</h2>
<p>模型的权重在训练期间的一次更新。迭代包含计算参数在单个<strong>批量</strong>数据上的梯度损失。</p>
<h2 id="Keras"><a class="header-anchor" href="#Keras">¶</a>Keras</h2>
<p>一种热门的 Python 机器学习 API。Keras 能够在多种深度学习框架上运行，其中包括 TensorFlow（在该框架上，Keras 作为 <strong>tf.keras</strong> 提供）。</p>
<h2 id="核支持向量机-KSVM-Kernel-Support-Vector-Machines"><a class="header-anchor" href="#核支持向量机-KSVM-Kernel-Support-Vector-Machines">¶</a>核支持向量机 (KSVM, Kernel Support Vector Machines)</h2>
<p>一种分类算法，旨在通过将输入数据向量映射到更高维度的空间，来最大化<strong>正类别</strong>和<strong>负类别</strong>之间的裕度。以某个输入数据集包含一百个特征的分类问题为例。为了最大化正类别和负类别之间的裕度，KSVM 可以在内部将这些特征映射到百万维度的空间。KSVM 使用合页损失函数。</p>
<h2 id="L1-损失函数-L₁-loss"><a class="header-anchor" href="#L1-损失函数-L₁-loss">¶</a>L1 损失函数 (L₁ loss)</h2>
<p>一种<strong>损失</strong>函数，基于模型预测的值与<strong>标签</strong>的实际值之差的绝对值。与 <strong>L2 损失函数</strong>相比，L1 损失函数对离群值的敏感性弱一些。</p>
<h2 id="L1-正则化-L₁-regularization"><a class="header-anchor" href="#L1-正则化-L₁-regularization">¶</a>L1 正则化 (L₁ regularization)</h2>
<p>一种<strong>正则化</strong>，根据权重的绝对值的总和来惩罚权重。在依赖<strong>稀疏特征</strong>的模型中，L1 正则化有助于使不相关或几乎不相关的特征的权重正好为 0，从而将这些特征从模型中移除。与 <strong>L2 正则化</strong>相对。</p>
<h2 id="L2-损失函数-L₂-loss"><a class="header-anchor" href="#L2-损失函数-L₂-loss">¶</a>L2 损失函数 (L₂ loss)</h2>
<p>请参阅<strong>平方损失函数</strong>。</p>
<h2 id="L2-正则化-L₂-regularization"><a class="header-anchor" href="#L2-正则化-L₂-regularization">¶</a>L2 正则化 (L₂ regularization)</h2>
<p>一种<strong>正则化</strong>，根据权重的平方和来惩罚权重。L2 正则化有助于使离群值（具有较大正值或较小负值）权重接近于 0，但又不正好为 0。（与 <strong>L1 正则化</strong>相对。）在线性模型中，L2 正则化始终可以改进泛化。</p>
<h2 id="标签-label"><a class="header-anchor" href="#标签-label">¶</a>标签 (label)</h2>
<p>在监督式学习中，标签指<strong>样本</strong>的“答案”或“结果”部分。有标签数据集中的每个样本都包含一个或多个特征以及一个标签。例如，在房屋数据集中，特征可以包括卧室数、卫生间数以及房龄，而标签则可以是房价。在垃圾邮件检测数据集中，特征可以包括主题行、发件人以及电子邮件本身，而标签则可以是“垃圾邮件”或“非垃圾邮件”。</p>
<h2 id="有标签样本-labeled-example"><a class="header-anchor" href="#有标签样本-labeled-example">¶</a>有标签样本 (labeled example)</h2>
<p>包含<strong>特征</strong>和<strong>标签</strong>的样本。在监督式训练中，模型从有标签样本中进行学习。</p>
<h2 id="lambda"><a class="header-anchor" href="#lambda">¶</a>lambda</h2>
<p>是<strong>正则化率</strong>的同义词。 （多含义术语，我们在此关注的是该术语在<strong>正则化</strong>中的定义。）</p>
<h2 id="层-layer"><a class="header-anchor" href="#层-layer">¶</a>层 (layer)</h2>
<p><strong>神经网络</strong>中的一组<strong>神经元</strong>，处理一组输入特征，或一组神经元的输出。 此外还指 TensorFlow 中的抽象层。层是 Python 函数，以<strong>张量</strong>和配置选项作为输入，然后生成其他张量作为输出。当必要的张量组合起来，用户便可以通过模型函数将结果转换为 <strong>Estimator</strong>。</p>
<h2 id="Layers-API-tf-layers"><a class="header-anchor" href="#Layers-API-tf-layers">¶</a>Layers API (tf.layers)</h2>
<p>一种 TensorFlow API，用于以层组合的方式构建<strong>深度</strong>神经网络。通过 Layers API，您可以构建不同类型的<strong>层</strong>，例如：</p>
<ul>
<li>通过 <code>tf.layers.Dense</code> 构建<strong>全连接层</strong>。</li>
<li>通过 <code>tf.layers.Conv2D</code> 构建卷积层。</li>
</ul>
<p>在编写<strong>自定义 Estimator</strong> 时，您可以编写“层”对象来定义所有<strong>隐藏层</strong>的特征。 Layers API 遵循 [<strong>Keras</strong>](#Keras) layers API 规范。也就是说，除了前缀不同以外，Layers API 中的所有函数均与 Keras layers API 中的对应函数具有相同的名称和签名。</p>
<h2 id="学习速率-learning-rate"><a class="header-anchor" href="#学习速率-learning-rate">¶</a>学习速率 (learning rate)</h2>
<p>在训练模型时用于梯度下降的一个变量。在每次迭代期间，<strong>梯度下降法</strong>都会将学习速率与梯度相乘。得出的乘积称为<strong>梯度步长</strong>。 学习速率是一个重要的<strong>超参数</strong>。</p>
<h2 id="最小二乘回归-least-squares-regression"><a class="header-anchor" href="#最小二乘回归-least-squares-regression">¶</a>最小二乘回归 (least squares regression)</h2>
<p>一种通过最小化 <strong>L2 损失</strong>训练出的线性回归模型。</p>
<h2 id="线性回归-linear-regression"><a class="header-anchor" href="#线性回归-linear-regression">¶</a>线性回归 (linear regression)</h2>
<p>一种<strong>回归模型</strong>，通过将输入特征进行线性组合，以连续值作为输出。</p>
<h2 id="逻辑回归-logistic-regression"><a class="header-anchor" href="#逻辑回归-logistic-regression">¶</a>逻辑回归 (logistic regression)</h2>
<p>一种模型，通过将 <strong>S 型函数</strong>应用于线性预测，生成分类问题中每个可能的离散标签值的概率。虽然逻辑回归经常用于<strong>二元分类</strong>问题，但也可用于<strong>多类别</strong>分类问题（其叫法变为<strong>多类别逻辑回归</strong>或<strong>多项回归</strong>）。</p>
<h2 id="对数损失函数-Log-Loss"><a class="header-anchor" href="#对数损失函数-Log-Loss">¶</a>对数损失函数 (Log Loss)</h2>
<p>二元<strong>逻辑回归</strong>中使用的<strong>损失</strong>函数。</p>
<h2 id="损失-Loss"><a class="header-anchor" href="#损失-Loss">¶</a>损失 (Loss)</h2>
<p>一种衡量指标，用于衡量模型的<strong>预测</strong>偏离其<strong>标签</strong>的程度。或者更悲观地说是衡量模型有多差。要确定此值，模型必须定义损失函数。例如，线性回归模型通常将<strong>均方误差</strong>用于损失函数，而逻辑回归模型则使用<strong>对数损失函数</strong>。</p>
<h2 id="机器学习-machine-learning"><a class="header-anchor" href="#机器学习-machine-learning">¶</a>机器学习 (machine learning)</h2>
<p>一种程序或系统，用于根据输入数据构建（训练）预测模型。这种系统会利用学到的模型根据从分布（训练该模型时使用的同一分布）中提取的新数据（以前从未见过的数据）进行实用的预测。机器学习还指与这些程序或系统相关的研究领域。</p>
<h2 id="均方误差-MSE-Mean-Squared-Error"><a class="header-anchor" href="#均方误差-MSE-Mean-Squared-Error">¶</a>均方误差 (MSE, Mean Squared Error)</h2>
<p>每个样本的平均平方损失。MSE 的计算方法是<strong>平方损失</strong>除以<strong>样本</strong>数。<strong>TensorFlow Playground</strong> 显示的“训练损失”值和“测试损失”值都是 MSE。</p>
<h2 id="指标-metric"><a class="header-anchor" href="#指标-metric">¶</a>指标 (metric)</h2>
<p>您关心的一个数值。可能可以也可能不可以直接在机器学习系统中得到优化。您的系统尝试优化的指标称为<strong>目标</strong>。</p>
<h2 id="Metrics-API-tf-metrics"><a class="header-anchor" href="#Metrics-API-tf-metrics">¶</a>Metrics API (tf.metrics)</h2>
<p>一种用于评估模型的 TensorFlow API。例如，<code>tf.metrics.accuracy</code> 用于确定模型的预测与标签匹配的频率。在编写<strong>自定义 Estimator</strong> 时，您可以调用 Metrics API 函数来指定应如何评估您的模型。</p>
<h2 id="小批次-mini-batch"><a class="header-anchor" href="#小批次-mini-batch">¶</a>小批次 (mini-batch)</h2>
<p>从训练或推断过程的一次迭代中一起运行的整批<strong>样本</strong>内随机选择的一小部分。小批次的<strong>规模</strong>通常介于 10 到 1000 之间。与基于完整的训练数据计算损失相比，基于小批次数据计算损失要高效得多。</p>
<h2 id="小批次随机梯度下降法-SGD-mini-batch-stochastic-gradient-descent"><a class="header-anchor" href="#小批次随机梯度下降法-SGD-mini-batch-stochastic-gradient-descent">¶</a>小批次随机梯度下降法 (SGD, mini-batch stochastic gradient descent)</h2>
<p>一种采用<strong>小批次</strong>样本的<strong>梯度下降法</strong>。也就是说，小批次 SGD 会根据一小部分训练数据来估算梯度。<strong>Vanilla SGD</strong> 使用的小批次的规模为 1。</p>
<h2 id="ML"><a class="header-anchor" href="#ML">¶</a>ML</h2>
<p><strong>机器学习</strong>的缩写。</p>
<h2 id="模型-model"><a class="header-anchor" href="#模型-model">¶</a>模型 (model)</h2>
<p>机器学习系统从训练数据学到的内容的表示形式。多含义术语，可以理解为下列两种相关含义之一：</p>
<ul>
<li>一种 <strong>TensorFlow</strong> 图，用于表示预测计算结构。</li>
<li>该 TensorFlow 图的特定权重和偏差，通过<strong>训练</strong>决定。</li>
</ul>
<h2 id="模型训练-model-training"><a class="header-anchor" href="#模型训练-model-training">¶</a>模型训练 (model training)</h2>
<p>确定最佳<strong>模型</strong>的过程。</p>
<h2 id="动量-Momentum"><a class="header-anchor" href="#动量-Momentum">¶</a>动量 (Momentum)</h2>
<p>一种先进的梯度下降法，其中学习步长不仅取决于当前步长的导数，还取决于之前一步或多步的步长的导数。动量涉及计算梯度随时间而变化的指数级加权移动平均值，与物理学中的动量类似。动量有时可以防止学习过程被卡在局部最小的情况。</p>
<h2 id="多类别分类-multi-class-classification"><a class="header-anchor" href="#多类别分类-multi-class-classification">¶</a>多类别分类 (multi-class classification)</h2>
<p>区分两种以上类别的分类问题。例如，枫树大约有 128 种，因此，确定枫树种类的模型就属于多类别模型。反之，仅将电子邮件分为两类（“垃圾邮件”和“非垃圾邮件”）的模型属于<strong>二元分类模型</strong>。</p>
<h2 id="多项分类-multinomial-classification"><a class="header-anchor" href="#多项分类-multinomial-classification">¶</a>多项分类 (multinomial classification)</h2>
<p>是<strong>多类别分类</strong>的同义词。</p>
<h2 id="NaN-陷阱-NaN-trap"><a class="header-anchor" href="#NaN-陷阱-NaN-trap">¶</a>NaN 陷阱 (NaN trap)</h2>
<p>模型中的一个数字在训练期间变成 NaN，这会导致模型中的很多或所有其他数字最终也会变成 NaN。 NaN 是“非数字”的缩写。</p>
<h2 id="负类别-negative-class"><a class="header-anchor" href="#负类别-negative-class">¶</a>负类别 (negative class)</h2>
<p>在<strong>二元分类</strong>中，一种类别称为正类别，另一种类别称为负类别。正类别是我们要寻找的类别，负类别则是另一种可能性。例如，在医学检查中，负类别可以是“非肿瘤”。在电子邮件分类器中，负类别可以是“非垃圾邮件”。另请参阅<strong>正类别</strong>。</p>
<h2 id="神经网络-neural-network"><a class="header-anchor" href="#神经网络-neural-network">¶</a>神经网络 (neural network)</h2>
<p>一种模型，灵感来源于脑部结构，由多个层构成（至少有一个是<strong>隐藏层</strong>），每个层都包含简单相连的单元或<strong>神经元</strong>（具有非线性关系）。</p>
<h2 id="神经元-neuron"><a class="header-anchor" href="#神经元-neuron">¶</a>神经元 (neuron)</h2>
<p><strong>神经网络</strong>中的节点，通常是接收多个输入值并生成一个输出值。神经元通过将<strong>激活函数</strong>（非线性转换）应用于输入值的加权和来计算输出值。</p>
<h2 id="节点-node"><a class="header-anchor" href="#节点-node">¶</a>节点 (node)</h2>
<p>多含义术语，可以理解为下列两种含义之一：</p>
<ul>
<li><strong>隐藏层</strong>中的神经元。</li>
<li>TensorFlow <strong>图</strong>中的操作。</li>
</ul>
<h2 id="标准化-normalization"><a class="header-anchor" href="#标准化-normalization">¶</a>标准化 (normalization)</h2>
<p>将实际的值区间转换为标准的值区间（通常为 -1 到 +1 或 0 到 1）的过程。例如，假设某个特征的自然区间是 800 到 6000。通过减法和除法运算，您可以将这些值标准化为位于 -1 到 +1 区间内。 另请参阅<strong>缩放</strong>。</p>
<h2 id="数值数据-numerical-data"><a class="header-anchor" href="#数值数据-numerical-data">¶</a>数值数据 (numerical data)</h2>
<p>用整数或实数表示的<strong>特征</strong>。例如，在房地产模型中，您可能会用数值数据表示房子大小（以平方英尺或平方米为单位）。如果用数值数据表示特征，则可以表明特征的值相互之间具有数学关系，并且与标签可能也有数学关系。例如，如果用数值数据表示房子大小，则可以表明面积为 200 平方米的房子是面积为 100 平方米的房子的两倍。此外，房子面积的平方米数可能与房价存在一定的数学关系。 并非所有整数数据都应表示成数值数据。例如，世界上某些地区的邮政编码是整数，但在模型中，不应将整数邮政编码表示成数值数据。这是因为邮政编码 <code>20000</code> 在效力上并不是邮政编码 10000 的两倍（或一半）。此外，虽然不同的邮政编码确实与不同的房地产价值有关，但我们也不能假设邮政编码为 20000 的房地产在价值上是邮政编码为 10000 的房地产的两倍。邮政编码应表示成<strong>分类数据</strong>。 数值特征有时称为<strong>连续特征</strong>。</p>
<h2 id="Numpy"><a class="header-anchor" href="#Numpy">¶</a>Numpy</h2>
<p>一个开放源代码数学库，在 Python 中提供高效的数组操作。<strong>Pandas</strong> 就建立在 Numpy 之上。</p>
<h2 id="目标-objective"><a class="header-anchor" href="#目标-objective">¶</a>目标 (objective)</h2>
<p>算法尝试优化的指标。</p>
<h2 id="离线推断-offline-inference"><a class="header-anchor" href="#离线推断-offline-inference">¶</a>离线推断 (offline inference)</h2>
<p>生成一组<strong>预测</strong>，存储这些预测，然后根据需求检索这些预测。与<strong>在线推断</strong>相对。</p>
<h2 id="one-hot-编码-one-hot-encoding"><a class="header-anchor" href="#one-hot-编码-one-hot-encoding">¶</a>one-hot 编码 (one-hot encoding)</h2>
<p>一种稀疏向量，其中：</p>
<ul>
<li>一个元素设为 1。</li>
<li>所有其他元素均设为 0。</li>
</ul>
<p>one-hot 编码常用于表示拥有有限个可能值的字符串或标识符。例如，假设某个指定的植物学数据集记录了 15000 个不同的物种，其中每个物种都用独一无二的字符串标识符来表示。在特征工程过程中，您可能需要将这些字符串标识符编码为 one-hot 向量，向量的大小为 15000。</p>
<h2 id="一对多-one-vs-all"><a class="header-anchor" href="#一对多-one-vs-all">¶</a>一对多 (one-vs.-all)</h2>
<p>假设某个分类问题有 N 种可能的解决方案，一对多解决方案将包含 N 个单独的<strong>二元分类器</strong> - 一个二元分类器对应一种可能的结果。例如，假设某个模型用于区分样本属于动物、蔬菜还是矿物，一对多解决方案将提供下列三个单独的二元分类器：</p>
<ul>
<li>动物和非动物</li>
<li>蔬菜和非蔬菜</li>
<li>矿物和非矿物</li>
</ul>
<h2 id="在线推断-online-inference"><a class="header-anchor" href="#在线推断-online-inference">¶</a>在线推断 (online inference)</h2>
<p>根据需求生成<strong>预测</strong>。与<strong>离线推断</strong>相对。</p>
<h2 id="操作-op-Operation"><a class="header-anchor" href="#操作-op-Operation">¶</a>操作 (op, Operation)</h2>
<p>TensorFlow 图中的节点。在 TensorFlow 中，任何创建、操纵或销毁<strong>张量</strong>的过程都属于操作。例如，矩阵相乘就是一种操作，该操作以两个张量作为输入，并生成一个张量作为输出。</p>
<h2 id="优化器-optimizer"><a class="header-anchor" href="#优化器-optimizer">¶</a>优化器 (optimizer)</h2>
<p><strong>梯度下降法</strong>的一种具体实现。TensorFlow 的优化器基类是 tf.train.Optimizer。不同的优化器（<code>tf.train.Optimizer</code> 的子类）会考虑如下概念：</p>
<ul>
<li>动量 (Momentum)</li>
<li>更新频率 （AdaGrad = ADAptive GRADient descent； Adam = ADAptive with Momentum；RMSProp）</li>
<li>稀疏性/正则化 (Ftrl)</li>
<li>更复杂的计算方法 （Proximal， 等等）</li>
</ul>
<p>甚至还包括 NN 驱动的优化器。</p>
<h2 id="离群值-outlier"><a class="header-anchor" href="#离群值-outlier">¶</a>离群值 (outlier)</h2>
<p>与大多数其他值差别很大的值。在机器学习中，下列所有值都是离群值。</p>
<ul>
<li>绝对值很高的<strong>权重</strong>。</li>
<li>与实际值相差很大的预测值。</li>
<li>值比平均值高大约 3 个标准偏差的输入数据。</li>
</ul>
<p>离群值常常会导致模型训练出现问题。</p>
<h2 id="输出层-output-layer"><a class="header-anchor" href="#输出层-output-layer">¶</a>输出层 (output layer)</h2>
<p>神经网络的“最后”一层，也是包含答案的层。</p>
<h2 id="过拟合-overfitting"><a class="header-anchor" href="#过拟合-overfitting">¶</a>过拟合 (overfitting)</h2>
<p>创建的模型与<strong>训练数据</strong>过于匹配，以致于模型无法根据新数据做出正确的预测。</p>
<h2 id="Pandas"><a class="header-anchor" href="#Pandas">¶</a>Pandas</h2>
<p>面向列的数据分析 API。很多机器学习框架（包括 TensorFlow）都支持将 Pandas 数据结构作为输入。请参阅 Pandas 文档。</p>
<h2 id="参数-parameter"><a class="header-anchor" href="#参数-parameter">¶</a>参数 (parameter)</h2>
<p>机器学习系统自行训练的模型的变量。例如，<strong>权重</strong>就是一种参数，它们的值是机器学习系统通过连续的训练迭代逐渐学习到的。与<strong>超参数</strong>相对。</p>
<h2 id="参数服务器-PS-Parameter-Server"><a class="header-anchor" href="#参数服务器-PS-Parameter-Server">¶</a>参数服务器 (PS, Parameter Server)</h2>
<p>一种作业，负责在分布式设置中跟踪模型<strong>参数</strong>。</p>
<h2 id="参数更新-parameter-update"><a class="header-anchor" href="#参数更新-parameter-update">¶</a>参数更新 (parameter update)</h2>
<p>在训练期间（通常是在<strong>梯度下降法</strong>的单次迭代中）调整模型<strong>参数</strong>的操作。</p>
<h2 id="偏导数-partial-derivative"><a class="header-anchor" href="#偏导数-partial-derivative">¶</a>偏导数 (partial derivative)</h2>
<p>一种导数，除一个变量之外的所有变量都被视为常量。例如，f(x, y) 对 x 的偏导数就是 f(x) 的导数（即，使 y 保持恒定）。f 对 x 的偏导数仅关注 x 如何变化，而忽略公式中的所有其他变量。</p>
<h2 id="分区策略-partitioning-strategy"><a class="header-anchor" href="#分区策略-partitioning-strategy">¶</a>分区策略 (partitioning strategy)</h2>
<p><strong>参数服务器</strong>中分割变量的算法。</p>
<h2 id="性能-performance"><a class="header-anchor" href="#性能-performance">¶</a>性能 (performance)</h2>
<p>多含义术语，具有以下含义：</p>
<ul>
<li>在软件工程中的传统含义。即：相应软件的运行速度有多快（或有多高效）？</li>
<li>在机器学习中的含义。在机器学习领域，性能旨在回答以下问题：相应<strong>模型</strong>的准确度有多高？即模型在预测方面的表现有多好？</li>
</ul>
<h2 id="困惑度-perplexity"><a class="header-anchor" href="#困惑度-perplexity">¶</a>困惑度 (perplexity)</h2>
<p>一种衡量指标，用于衡量<strong>模型</strong>能够多好地完成任务。例如，假设任务是读取用户使用智能手机键盘输入字词时输入的前几个字母，然后列出一组可能的完整字词。此任务的困惑度 § 是：为了使列出的字词中包含用户尝试输入的实际字词，您需要提供的猜测项的个数。 困惑度与<strong>交叉熵</strong>的关系如下： P=2−cross entropy</p>
<h2 id="流水线-pipeline"><a class="header-anchor" href="#流水线-pipeline">¶</a>流水线 (pipeline)</h2>
<p>机器学习算法的基础架构。流水线包括收集数据、将数据放入训练数据文件、训练一个或多个模型，以及将模型导出到生产环境。</p>
<h2 id="正类别-positive-class"><a class="header-anchor" href="#正类别-positive-class">¶</a>正类别 (positive class)</h2>
<p>在<strong>二元分类</strong>中，两种可能的类别分别被标记为正类别和负类别。正类别结果是我们要测试的对象。（不可否认的是，我们会同时测试这两种结果，但只关注正类别结果。）例如，在医学检查中，正类别可以是“肿瘤”。在电子邮件分类器中，正类别可以是“垃圾邮件”。 与<strong>负类别</strong>相对。</p>
<h2 id="精确率-precision"><a class="header-anchor" href="#精确率-precision">¶</a>精确率 (precision)</h2>
<p>一种<strong>分类模型</strong>指标。精确率指模型正确预测正类别的频率.</p>
<h2 id="预测-prediction"><a class="header-anchor" href="#预测-prediction">¶</a>预测 (prediction)</h2>
<p>模型在收到输入的<strong>样本</strong>后的输出。</p>
<h2 id="预测偏差-prediction-bias"><a class="header-anchor" href="#预测偏差-prediction-bias">¶</a>预测偏差 (prediction bias)</h2>
<p>一个值，用于表明<strong>预测</strong>平均值与数据集中<strong>标签</strong>的平均值相差有多大。</p>
<h2 id="预创建的-Estimator-pre-made-Estimator"><a class="header-anchor" href="#预创建的-Estimator-pre-made-Estimator">¶</a>预创建的 Estimator (pre-made Estimator)</h2>
<p>其他人已建好的 <strong>Estimator</strong>。TensorFlow 提供了一些预创建的 Estimator，包括 <code>DNNClassifier</code>、<code>DNNRegressor</code> 和 <code>LinearClassifier</code>。您可以按照这些说明构建自己预创建的 Estimator。</p>
<h2 id="预训练模型-pre-trained-model"><a class="header-anchor" href="#预训练模型-pre-trained-model">¶</a>预训练模型 (pre-trained model)</h2>
<p>已经过训练的模型或模型组件（例如<strong>嵌套</strong>）。有时，您需要将预训练的嵌套馈送到<strong>神经网络</strong>。在其他时候，您的模型将自行训练嵌套，而不依赖于预训练的嵌套。</p>
<h2 id="先验信念-prior-belief"><a class="header-anchor" href="#先验信念-prior-belief">¶</a>先验信念 (prior belief)</h2>
<p>在开始采用相应数据进行训练之前，您对这些数据抱有的信念。例如，<strong>L2 正则化</strong>依赖的先验信念是<strong>权重</strong>应该很小且应以 0 为中心呈正态分布。</p>
<h2 id="队列-queue"><a class="header-anchor" href="#队列-queue">¶</a>队列 (queue)</h2>
<p>一种 TensorFlow <strong>操作</strong>，用于实现队列数据结构。通常用于 I/O 中。</p>
<h2 id="等级-rank"><a class="header-anchor" href="#等级-rank">¶</a>等级 (rank)</h2>
<p>机器学习中的一个多含义术语，可以理解为下列含义之一：</p>
<ul>
<li><strong>张量</strong>中的维度数量。例如，标量等级为 0，向量等级为 1，矩阵等级为 2。</li>
<li>在将类别从最高到最低进行排序的机器学习问题中，类别的顺序位置。例如，行为排序系统可以将狗狗的奖励从最高（牛排）到最低（枯萎的羽衣甘蓝）进行排序。</li>
</ul>
<h2 id="评分者-rater"><a class="header-anchor" href="#评分者-rater">¶</a>评分者 (rater)</h2>
<p>为<strong>样本</strong>提供<strong>标签</strong>的人。有时称为“注释者”。</p>
<h2 id="召回率-recall"><a class="header-anchor" href="#召回率-recall">¶</a>召回率 (recall)</h2>
<p>一种<strong>分类模型</strong>指标，用于回答以下问题：在所有可能的正类别标签中，模型正确地识别出了多少个？</p>
<h2 id="修正线性单元-ReLU-Rectified-Linear-Unit"><a class="header-anchor" href="#修正线性单元-ReLU-Rectified-Linear-Unit">¶</a>修正线性单元 (ReLU, Rectified Linear Unit)</h2>
<p>一种<strong>激活函数</strong>，其规则如下：</p>
<ul>
<li>如果输入为负数或 0，则输出 0。</li>
<li>如果输入为正数，则输出等于输入。</li>
</ul>
<h2 id="回归模型-regression-model"><a class="header-anchor" href="#回归模型-regression-model">¶</a>回归模型 (regression model)</h2>
<p>一种模型，能够输出连续的值（通常为浮点值）。请与<strong>分类模型</strong>进行比较，分类模型输出离散值，例如“黄花菜”或“虎皮百合”。</p>
<h2 id="正则化-regularization"><a class="header-anchor" href="#正则化-regularization">¶</a>正则化 (regularization)</h2>
<p>对模型复杂度的惩罚。正则化有助于防止出现<strong>过拟合</strong>，包含以下类型：</p>
<ul>
<li><strong>L1 正则化</strong></li>
<li><strong>L2 正则化</strong></li>
<li><strong>丢弃正则化</strong></li>
<li><strong>早停法</strong>（这不是正式的正则化方法，但可以有效限制过拟合）</li>
</ul>
<h2 id="正则化率-regularization-rate"><a class="header-anchor" href="#正则化率-regularization-rate">¶</a>正则化率 (regularization rate)</h2>
<p>一种标量值，以 lambda 表示，用于指定正则化函数的相对重要性。从下面简化的<strong>损失</strong>公式中可以看出正则化率的影响： minimize(loss function + λ(regularization function)) 提高正则化率可以减少<strong>过拟合</strong>，但可能会使模型的<strong>准确率</strong>降低。</p>
<h2 id="表示法-representation"><a class="header-anchor" href="#表示法-representation">¶</a>表示法 (representation)</h2>
<p>将数据映射到实用<strong>特征</strong>的过程。</p>
<h2 id="受试者工作特征曲线（receiver-operating-characteristic-简称-ROC-曲线）"><a class="header-anchor" href="#受试者工作特征曲线（receiver-operating-characteristic-简称-ROC-曲线）">¶</a>受试者工作特征曲线（receiver operating characteristic, 简称 ROC 曲线）</h2>
<p>不同<strong>分类阈值</strong>下的<strong>真正例率</strong>和<strong>假正例率</strong>构成的曲线。另请参阅<strong>曲线下面积</strong>。</p>
<h2 id="根目录-root-directory"><a class="header-anchor" href="#根目录-root-directory">¶</a>根目录 (root directory)</h2>
<p>您指定的目录，用于托管多个模型的 TensorFlow 检查点和事件文件的子目录。</p>
<h2 id="均方根误差-RMSE-Root-Mean-Squared-Error"><a class="header-anchor" href="#均方根误差-RMSE-Root-Mean-Squared-Error">¶</a>均方根误差 (RMSE, Root Mean Squared Error)</h2>
<p><strong>均方误差</strong>的平方根。</p>
<h2 id="SavedModel"><a class="header-anchor" href="#SavedModel">¶</a>SavedModel</h2>
<p>保存和恢复 TensorFlow 模型时建议使用的格式。SavedModel 是一种独立于语言且可恢复的序列化格式，使较高级别的系统和工具可以创建、使用和转换 TensorFlow 模型。 如需完整的详细信息，请参阅《TensorFlow 编程人员指南》中的保存和恢复。</p>
<h2 id="Saver"><a class="header-anchor" href="#Saver">¶</a>Saver</h2>
<p>一种 TensorFlow 对象，负责保存模型检查点。</p>
<h2 id="缩放-scaling"><a class="header-anchor" href="#缩放-scaling">¶</a>缩放 (scaling)</h2>
<p><strong>特征工程</strong>中的一种常用做法，是对某个特征的值区间进行调整，使之与数据集中其他特征的值区间一致。例如，假设您希望数据集中所有浮点特征的值都位于 0 到 1 区间内，如果某个特征的值位于 0 到 500 区间内，您就可以通过将每个值除以 500 来缩放该特征。 另请参阅<strong>标准化</strong>。</p>
<h2 id="scikit-learn"><a class="header-anchor" href="#scikit-learn">¶</a>scikit-learn</h2>
<p>一个热门的开放源代码机器学习平台。请访问 <a href="http://www.scikit-learn.org">www.scikit-learn.org</a>。</p>
<h2 id="半监督式学习-semi-supervised-learning"><a class="header-anchor" href="#半监督式学习-semi-supervised-learning">¶</a>半监督式学习 (semi-supervised learning)</h2>
<p>训练模型时采用的数据中，某些训练样本有标签，而其他样本则没有标签。半监督式学习采用的一种技术是推断无标签样本的标签，然后使用推断出的标签进行训练，以创建新模型。如果获得有标签样本需要高昂的成本，而无标签样本则有很多，那么半监督式学习将非常有用。</p>
<h2 id="序列模型-sequence-model"><a class="header-anchor" href="#序列模型-sequence-model">¶</a>序列模型 (sequence model)</h2>
<p>一种模型，其输入具有序列依赖性。例如，根据之前观看过的一系列视频对观看的下一个视频进行预测。</p>
<h2 id="会话-session"><a class="header-anchor" href="#会话-session">¶</a>会话 (session)</h2>
<p>维持 TensorFlow 程序中的状态（例如变量）。</p>
<h2 id="S-型函数-sigmoid-function"><a class="header-anchor" href="#S-型函数-sigmoid-function">¶</a>S 型函数 (sigmoid function)</h2>
<p>一种函数，可将逻辑回归输出或多项回归输出（对数几率）映射到概率，以返回介于 0 到 1 之间的值。 在某些<strong>神经网络</strong>中，S 型函数可作为<strong>激活函数</strong>使用。</p>
<h2 id="softmax"><a class="header-anchor" href="#softmax">¶</a>softmax</h2>
<p>一种函数，可提供<strong>多类别分类模型</strong>中每个可能类别的概率。这些概率的总和正好为 1.0。例如，softmax 可能会得出某个图像是狗、猫和马的概率分别是 0.9、0.08 和 0.02。（也称为<strong>完整 softmax</strong>。） 与<strong>候选采样</strong>相对。</p>
<h2 id="稀疏特征-sparse-feature"><a class="header-anchor" href="#稀疏特征-sparse-feature">¶</a>稀疏特征 (sparse feature)</h2>
<p>一种<strong>特征</strong>向量，其中的大多数值都为 0 或为空。例如，某个向量包含一个为 1 的值和一百万个为 0 的值，则该向量就属于稀疏向量。再举一个例子，搜索查询中的单词也可能属于稀疏特征 - 在某种指定语言中有很多可能的单词，但在某个指定的查询中仅包含其中几个。 与<strong>密集特征</strong>相对。</p>
<h2 id="平方合页损失函数-squared-hinge-loss"><a class="header-anchor" href="#平方合页损失函数-squared-hinge-loss">¶</a>平方合页损失函数 (squared hinge loss)</h2>
<p><strong>合页损失函数</strong>的平方。与常规合页损失函数相比，平方合页损失函数对离群值的惩罚更严厉。</p>
<h2 id="平方损失函数-squared-loss"><a class="header-anchor" href="#平方损失函数-squared-loss">¶</a>平方损失函数 (squared loss)</h2>
<p>在<strong>线性回归</strong>中使用的<strong>损失</strong>函数（也称为 <strong>L2 损失函数</strong>）。该函数可计算模型为有标签<strong>样本</strong>预测的值和<strong>标签</strong>的实际值之差的平方。由于取平方值，因此该损失函数会放大不佳预测的影响。也就是说，与 <strong>L1 损失函数</strong>相比，平方损失函数对离群值的反应更强烈。</p>
<h2 id="静态模型-static-model"><a class="header-anchor" href="#静态模型-static-model">¶</a>静态模型 (static model)</h2>
<p>离线训练的一种模型。</p>
<h2 id="平稳性-stationarity"><a class="header-anchor" href="#平稳性-stationarity">¶</a>平稳性 (stationarity)</h2>
<p>数据集中数据的一种属性，表示数据分布在一个或多个维度保持不变。这种维度最常见的是时间，即表明平稳性的数据不随时间而变化。例如，从 9 月到 12 月，表明平稳性的数据没有发生变化。</p>
<h2 id="步-step"><a class="header-anchor" href="#步-step">¶</a>步 (step)</h2>
<p>对一个<strong>批次</strong>的向前和向后评估。</p>
<h2 id="步长-step-size"><a class="header-anchor" href="#步长-step-size">¶</a>步长 (step size)</h2>
<p>是<strong>学习速率</strong>的同义词。</p>
<h2 id="随机梯度下降法-SGD-stochastic-gradient-descent"><a class="header-anchor" href="#随机梯度下降法-SGD-stochastic-gradient-descent">¶</a>随机梯度下降法 (SGD, stochastic gradient descent)</h2>
<p>批次规模为 1 的一种<strong>梯度下降法</strong>。换句话说，SGD 依赖于从数据集中随机均匀选择的单个样本来计算每步的梯度估算值。</p>
<h2 id="结构风险最小化-SRM-structural-risk-minimization"><a class="header-anchor" href="#结构风险最小化-SRM-structural-risk-minimization">¶</a>结构风险最小化 (SRM, structural risk minimization)</h2>
<p>一种算法，用于平衡以下两个目标：</p>
<ul>
<li>期望构建最具预测性的模型（例如损失最低）。</li>
<li>期望使模型尽可能简单（例如强大的正则化）。</li>
</ul>
<p>例如，旨在将基于训练集的损失和正则化降至最低的模型函数就是一种结构风险最小化算法。 如需更多信息，请参阅 <a href="http://www.svms.org/srm/%E3%80%82">http://www.svms.org/srm/。</a> 与<strong>经验风险最小化</strong>相对。</p>
<h2 id="总结-summary"><a class="header-anchor" href="#总结-summary">¶</a>总结 (summary)</h2>
<p>在 TensorFlow 中的某一<strong>步</strong>计算出的一个值或一组值，通常用于在训练期间跟踪模型指标。</p>
<h2 id="监督式机器学习-supervised-machine-learning"><a class="header-anchor" href="#监督式机器学习-supervised-machine-learning">¶</a>监督式机器学习 (supervised machine learning)</h2>
<p>根据输入数据及其对应的<strong>标签</strong>来训练<strong>模型</strong>。监督式机器学习类似于学生通过研究一系列问题及其对应的答案来学习某个主题。在掌握了问题和答案之间的对应关系后，学生便可以回答关于同一主题的新问题（以前从未见过的问题）。请与<strong>非监督式机器学习</strong>进行比较。</p>
<h2 id="合成特征-synthetic-feature"><a class="header-anchor" href="#合成特征-synthetic-feature">¶</a>合成特征 (synthetic feature)</h2>
<p>一种<strong>特征</strong>，不在输入特征之列，而是从一个或多个输入特征衍生而来。合成特征包括以下类型：</p>
<ul>
<li>将一个特征与其本身或其他特征相乘（称为<strong>特征组合</strong>）。</li>
<li>两个特征相除。</li>
<li>对连续特征进行<strong>分桶</strong>，以分为多个区间分箱。</li>
</ul>
<p>通过<strong>标准化</strong>或<strong>缩放</strong>单独创建的特征不属于合成特征。</p>
<h2 id="目标-target"><a class="header-anchor" href="#目标-target">¶</a>目标 (target)</h2>
<p>是<strong>标签</strong>的同义词。</p>
<h2 id="时态数据-temporal-data"><a class="header-anchor" href="#时态数据-temporal-data">¶</a>时态数据 (temporal data)</h2>
<p>在不同时间点记录的数据。例如，记录的一年中每一天的冬外套销量就属于时态数据。</p>
<h2 id="张量-Tensor"><a class="header-anchor" href="#张量-Tensor">¶</a>张量 (Tensor)</h2>
<p>TensorFlow 程序中的主要数据结构。张量是 N 维（其中 N 可能非常大）数据结构，最常见的是标量、向量或矩阵。张量的元素可以包含整数值、浮点值或字符串值。</p>
<h2 id="张量处理单元-TPU-Tensor-Processing-Unit"><a class="header-anchor" href="#张量处理单元-TPU-Tensor-Processing-Unit">¶</a>张量处理单元 (TPU, Tensor Processing Unit)</h2>
<p>一种 ASIC（应用专用集成电路），用于优化 TensorFlow 程序的性能。</p>
<h2 id="张量等级-Tensor-rank"><a class="header-anchor" href="#张量等级-Tensor-rank">¶</a>张量等级 (Tensor rank)</h2>
<p>请参阅<strong>等级</strong>。</p>
<h2 id="张量形状-Tensor-shape"><a class="header-anchor" href="#张量形状-Tensor-shape">¶</a>张量形状 (Tensor shape)</h2>
<p><strong>张量</strong>在各种维度中包含的元素数。例如，张量 [5, 10] 在一个维度中的形状为 5，在另一个维度中的形状为 10。</p>
<h2 id="张量大小-Tensor-size"><a class="header-anchor" href="#张量大小-Tensor-size">¶</a>张量大小 (Tensor size)</h2>
<p><strong>张量</strong>包含的标量总数。例如，张量 [5, 10] 的大小为 50。</p>
<h2 id="TensorBoard"><a class="header-anchor" href="#TensorBoard">¶</a>TensorBoard</h2>
<p>一个信息中心，用于显示在执行一个或多个 TensorFlow 程序期间保存的摘要信息。</p>
<h2 id="TensorFlow"><a class="header-anchor" href="#TensorFlow">¶</a>TensorFlow</h2>
<p>一个大型的分布式机器学习平台。该术语还指 TensorFlow 堆栈中的基本 API 层，该层支持对数据流图进行一般计算。 虽然 TensorFlow 主要应用于机器学习领域，但也可用于需要使用数据流图进行数值计算的非机器学习任务。</p>
<h2 id="TensorFlow-Playground"><a class="header-anchor" href="#TensorFlow-Playground">¶</a>TensorFlow Playground</h2>
<p>一款用于直观呈现不同的<strong>超参数</strong>对模型（主要是神经网络）训练的影响的程序。要试用 TensorFlow Playground，请前往 <a href="http://playground.tensorflow.org">http://playground.tensorflow.org</a>。</p>
<h2 id="TensorFlow-Serving"><a class="header-anchor" href="#TensorFlow-Serving">¶</a>TensorFlow Serving</h2>
<p>一个平台，用于将训练过的模型部署到生产环境。</p>
<h2 id="测试集-test-set"><a class="header-anchor" href="#测试集-test-set">¶</a>测试集 (test set)</h2>
<p>数据集的子集，用于在<strong>模型</strong>经由验证集的初步验证之后测试模型。 与<strong>训练集</strong>和<strong>验证集</strong>相对。</p>
<h2 id="tf-Example"><a class="header-anchor" href="#tf-Example">¶</a>tf.Example</h2>
<p>一种标准的 proto buffer，旨在描述用于机器学习模型训练或推断的输入数据。</p>
<h2 id="时间序列分析-time-series-analysis"><a class="header-anchor" href="#时间序列分析-time-series-analysis">¶</a>时间序列分析 (time series analysis)</h2>
<p>机器学习和统计学的一个子领域，旨在分析<strong>时态数据</strong>。很多类型的机器学习问题都需要时间序列分析，其中包括分类、聚类、预测和异常检测。例如，您可以利用时间序列分析根据历史销量数据预测未来每月的冬外套销量。</p>
<h2 id="训练-training"><a class="header-anchor" href="#训练-training">¶</a>训练 (training)</h2>
<p>确定构成模型的理想<strong>参数</strong>的过程。</p>
<h2 id="训练集-training-set"><a class="header-anchor" href="#训练集-training-set">¶</a>训练集 (training set)</h2>
<p>数据集的子集，用于训练模型。 与<strong>验证集</strong>和<strong>测试集</strong>相对。</p>
<h2 id="转移学习-transfer-learning"><a class="header-anchor" href="#转移学习-transfer-learning">¶</a>转移学习 (transfer learning)</h2>
<p>将信息从一个机器学习任务转移到另一个机器学习任务。例如，在多任务学习中，一个模型可以完成多项任务，例如针对不同任务具有不同输出节点的<strong>深度模型</strong>。转移学习可能涉及将知识从较简单任务的解决方案转移到较复杂的任务，或者将知识从数据较多的任务转移到数据较少的任务。 大多数机器学习系统都只能完成一项任务。转移学习是迈向人工智能的一小步；在人工智能中，单个程序可以完成多项任务。</p>
<h2 id="真负例-TN-true-negative"><a class="header-anchor" href="#真负例-TN-true-negative">¶</a>真负例 (TN, true negative)</h2>
<p>被模型正确地预测为<strong>负类别</strong>的样本。例如，模型推断出某封电子邮件不是垃圾邮件，而该电子邮件确实不是垃圾邮件。</p>
<h2 id="真正例-TP-true-positive"><a class="header-anchor" href="#真正例-TP-true-positive">¶</a>真正例 (TP, true positive)</h2>
<p>被模型正确地预测为<strong>正类别</strong>的样本。例如，模型推断出某封电子邮件是垃圾邮件，而该电子邮件确实是垃圾邮件。</p>
<h2 id="真正例率（true-positive-rate-简称-TP-率）"><a class="header-anchor" href="#真正例率（true-positive-rate-简称-TP-率）">¶</a>真正例率（true positive rate, 简称 TP 率）</h2>
<p>是<strong>召回率</strong>的同义词. 真正例率是 <strong>ROC 曲线</strong>的 y 轴。</p>
<h2 id="无标签样本-unlabeled-example"><a class="header-anchor" href="#无标签样本-unlabeled-example">¶</a>无标签样本 (unlabeled example)</h2>
<p>包含<strong>特征</strong>但没有<strong>标签</strong>的样本。无标签样本是用于进行<strong>推断</strong>的输入内容。在<strong>半监督式</strong>和<strong>非监督式</strong>学习中，无标签样本在训练期间被使用。</p>
<h2 id="非监督式机器学习-unsupervised-machine-learning"><a class="header-anchor" href="#非监督式机器学习-unsupervised-machine-learning">¶</a>非监督式机器学习 (unsupervised machine learning)</h2>
<p>训练<strong>模型</strong>，以找出数据集（通常是无标签数据集）中的模式。 非监督式机器学习最常见的用途是将数据分为不同的聚类，使相似的样本位于同一组中。例如，非监督式机器学习算法可以根据音乐的各种属性将歌曲分为不同的聚类。所得聚类可以作为其他机器学习算法（例如音乐推荐服务）的输入。在很难获取真标签的领域，聚类可能会非常有用。例如，在反滥用和反欺诈等领域，聚类有助于人们更好地了解相关数据。 非监督式机器学习的另一个例子是<strong>主成分分析 (PCA)</strong>。例如，通过对包含数百万购物车中物品的数据集进行主成分分析，可能会发现有柠檬的购物车中往往也有抗酸药。 请与<strong>监督式机器学习</strong>进行比较。</p>
<h2 id="验证集-validation-set"><a class="header-anchor" href="#验证集-validation-set">¶</a>验证集 (validation set)</h2>
<p>数据集的一个子集，从训练集分离而来，用于调整<strong>超参数</strong>。 与<strong>训练集</strong>和<strong>测试集</strong>相对。</p>
<h2 id="权重-weight"><a class="header-anchor" href="#权重-weight">¶</a>权重 (weight)</h2>
<p>线性模型中<strong>特征</strong>的系数，或深度网络中的边。训练线性模型的目标是确定每个特征的理想权重。如果权重为 0，则相应的特征对模型来说没有任何贡献。</p>
<h2 id="宽度模型-wide-model"><a class="header-anchor" href="#宽度模型-wide-model">¶</a>宽度模型 (wide model)</h2>
<p>一种线性模型，通常有很多<strong>稀疏输入特征</strong>。我们之所以称之为“宽度模型”，是因为这是一种特殊类型的<strong>神经网络</strong>，其大量输入均直接与输出节点相连。与深度模型相比，宽度模型通常更易于调试和检查。虽然宽度模型无法通过<strong>隐藏层</strong>来表示非线性关系，但可以利用<strong>特征组合</strong>、<strong>分桶</strong>等转换以不同的方式为非线性关系建模。 与<strong>深度模型</strong>相对。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180317232716-300x162.png" alt=""></p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>jetbrains软件激活o(*≧▽≦)ツ┏━┓</title>
    <url>/2018/03/04/jetbrains-ruan-jian-ji-huo-o-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/cropped-timg-300x300.jpg" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304191549-300x288.png" alt=""> 你需要下载一个jar包，需要自己去找新的。 <a href="https://tieba.baidu.com/p/4927686353?pn=4">https://tieba.baidu.com/p/4927686353?pn=4</a>联系贴吧 把jar包复制到要激活的 jetbrains 产品的bin目录下，如：D:\Program Files (x86)\JetBrains\WebStorm 2016.3.2\bin 修改bin目录下的.vmoptions文件，如：webstorm.exe.vmoptions 再该文件最后添加JetbrainsCrack.jar路径： -javaagent:D:/Program Files (x86)/JetBrains/WebStorm 2016.3.2/bin/JetbrainsCrack.jar 注：如果要用64位的把对应的64.vmoptions文件也做上述修改，建议都修改。 启动Jetbrains产品，选择Activation code激活，按照下图修改Activation code后复制到Jetbrains产品的Activation code即可激活。时间改不改无所谓。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/%E7%88%B1%E4%B8%8A%E5%A4%A7%E5%A3%B0%E5%9C%B0-300x252.png" alt=""> Activation code地址：<a href="http://jump2.bdimg.com/safecheck/index?url=x+Z5mMbGPAvVIlwZePSt0B3tEqEFWbC4tOatFxkC6cKWxe9dsKWnzr8cNr0ORLwV5kx3tizU6kfKRvu9Fj+qsV8ihfVpaJMAYfAd2cpKXieRUfYSmGY4Pfy/B2C+h8s5rVSFp28v9IZ2Pah4egTNMg==">http://pan.baidu.com/s/1jI0qS2i</a>。 然后呢？是不是就激活了呢？如果发现Jetbrains更新后激活失效了，那么就到网上下载新版本的JetbrainsCrack.jar。 目前用的是JetbrainsCrack-2.5.6.jar。</p>
<h1><strong>ヾ(￣▽￣)Bye<sub>Bye</sub></strong></h1>
]]></content>
      <categories>
        <category>jetBrian</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>jetBrian</tag>
      </tags>
  </entry>
  <entry>
    <title>(好东西分享）看代码神器</title>
    <url>/2018/07/07/hao-dong-xi-fen-xiang-kan-dai-ma-shen-qi-1/</url>
    <content><![CDATA[<p><strong>今天给大家分享一个看代码的好东西</strong> 不得不说我挺喜欢这个软件的，先上效果图： <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180707201925.png" alt=""> 这就相当于一个txt查看文件，小巧玲珑占地面积不大（手动滑稽）（而且支持各种类型的文件哦~！） 它可以在源代码上进行修改（貌似不能run咕~），而且还有我最喜欢的黑色界面，其中各个代码段以及各种关键字颜色分明，所以我觉得有必要分享一下 <strong>安装程序大概只有8MB，安装之后也不是很大的毕竟安装包大小在那里摆着呢╮(╯▽╰)╭，所以强推一波！</strong> <strong>下载链接****<a href="http://www.sublimetext.com/">http://www.sublimetext.com/</a></strong> 大家有兴趣的可以自行下载，\(<sup>o</sup>)/~</p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习绪论学习（一）</title>
    <url>/2018/03/15/ji-qi-xue-xi-xu-lun-xue-xi-yi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/b8389b504fc2d562bb0ba4d9e01190ef76c66c86-300x166.png" alt=""></p>
<h1>什么是机器学习？</h1>
<p></p>
<h3 id="机器学习-Machine-Learning-ML-是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。"><a class="header-anchor" href="#机器学习-Machine-Learning-ML-是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。">¶</a>机器学习(Machine Learning, ML)是一门多领域交叉学科，涉及概率论、统计学、<a href="https://baike.baidu.com/item/%E9%80%BC%E8%BF%91%E8%AE%BA">逼近论</a>、<a href="https://baike.baidu.com/item/%E5%87%B8%E5%88%86%E6%9E%90">凸分析</a>、<a href="https://baike.baidu.com/item/%E7%AE%97%E6%B3%95%E5%A4%8D%E6%9D%82%E5%BA%A6">算法复杂度</a>理论等多门学科。专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构使之不断改善自身的性能。</h3>
<h3 id="它是人工智能的核心，是使计算机具有智能的根本途径，其应用遍及人工智能的各个领域，它主要使用归纳、综合而不是演绎。"><a class="header-anchor" href="#它是人工智能的核心，是使计算机具有智能的根本途径，其应用遍及人工智能的各个领域，它主要使用归纳、综合而不是演绎。">¶</a>它是<a href="https://baike.baidu.com/item/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>的核心，是使计算机具有智能的根本途径，其应用遍及人工智能的各个领域，它主要使用归纳、综合而不是演绎。</h3>
<p></p>
<h5 id="基本术语："><a class="header-anchor" href="#基本术语：">¶</a>基本术语：</h5>
<ol>
<li>目标：使得学得的模型能很好的适用于“新样本”，而不仅仅在训练样本上工作得很好，即便是对聚类这样的无监督学习，也希望学得的聚划分能适用于没在训练集中出现的样本。</li>
<li>样本（示例、特征向量）： 数据集中的每个记录称之为样本或者示例。</li>
<li>属性空间（样本空间、输入空间）：样本属性张成的空间称为属性空间（样本空间、输入空间），每个样本对应空间中的一个点，故而一个示例也称为一个“特征向量”。</li>
<li>模型：模型也称为学习器，可看作学习算法在给定数据集和参数空间的实例化。</li>
<li>学习：从数据中学得模型的过程称为“学习”或“训练”，这个过程通过执行某个学习算法来完成。</li>
<li>训练集：训练过程中使用的数据称为训练数据，训练样本组成的集合称为训练集。学得的模型对应了关于数据的某种潜在的规律，因此称为“假设”。这种潜在规律自身，则是称为真相或真实，学习过程就是为了找出或逼近真相。训练集通常是样本空间中很小的一个采样。</li>
<li>测试：学得模型后，使用其进行预测的过程称为“测试”，被测试的样本称为测试样本。</li>
<li>监督学习与无监督学习：根据训练数据是否拥有标记信息，学习任务可以分为两类，监督学习和无监督学习：分类和回归是前者的代表，聚类是后者的代表（学习过程中使用的训练样本通常不拥有标记信息）。</li>
<li>泛化 ： 学得模型适用于新样本的能力，称为“泛化”能力，具有强泛化能力的模型能很好地适用整个样本空间。</li>
<li>假设：通过学习得到的模型对应了假设空间中的一个假设。</li>
<li>学习过程：通常假设样本空间中全体样本服从一个未知分布，我们获得的每个样本都是独立地从这个分布上采样获得的，即“独立同分布”。一般而言，训练样本越多，我们得到的关于该未知分布的信息越多，这样就越有可能通过学习获得具有强泛化能力的模型。</li>
<li>概念学习：概念学习（归纳学习）的目标就是泛化，即是通过对训练集中的训练样本进行学习以获得对测试集进行判断的能力。</li>
<li>归纳学习：“从样例中学习”显然是一个归纳过程，称之为归纳学习。</li>
<li>归纳偏好：机器学习算法在学习过程中对某种类型假设的偏好我们称之为“归纳偏好”，简称“偏好”。</li>
<li>聚类：将训练集中的个体分成若干组，每一组称为一个簇；这些自动形成的簇可能对应一些潜在的概念划分。</li>
<li>训练：从数据中学的模型的过程称为“学习”或者“训练”。每一个样本称为训练样本。</li>
<li>在某些书籍中将模型称为“学习器”。</li>
<li>样例：拥有标记信息的示例。</li>
<li>归纳学习亦有广义和狭义之分，广义的归纳学习大体相当于从样例中学习，而狭义的归纳学习则要求从训练数据中学习概念，称之为概念学习。</li>
<li>版本空间：一个与训练集一直的“假设集合”，我们称之为“版本空间”</li>
</ol>
<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/962bd40735fae6cd375f13ec05b30f2443a70f57-300x198.jpg" alt=""></p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习之决策树（二）</title>
    <url>/2018/04/15/ji-qi-xue-xi-zhi-jue-ce-shu-er-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/timg.jpg" alt="">   这里使用ID3算法划分数据集。 ID3算法的伪代码： ID3（例子，目标属性，属性） 为树创建一个根节点 如果所有示例都是肯定的，则返回单节点树Root，其中label = +。 如果所有示例均为负数，则返回单节点树Root，标签为 - 。 如果预测属性的数量为空，则返回单节点树Root， 标签=示例中目标属性的最常见值。 否则开始 A←最佳分类示例的属性。 Root = A的决策树属性 对于A的每个可能的值_v _<em>i</em>， 在Root下添加一个新的树分支，对应于测试A = _v _<em>i</em>。 让例子（_v _<em>i</em>）成为A 的值为_v __i_的例子的子集 如果示例（_v _<em>i</em>）为空 然后在这个新分支下面添加一个标签=最常见目标值的叶节点 否则，在这个新分支下面添加子树ID3（Examples（_v _<em>i</em>），Target_Attribute，Attributes  -  {A}） 结束 返回根 <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180415125137.png" alt=""> 划分数据集的大原则：将无序的数据变得更加有序。 在划分数据集之前之后信息发生的变化称为信息增益。对于特征值的选择当前是信息增益最高的特征值是最好的特征值。 熵定义为：信息的期望值。 计算给定数据集的熵：</p>
<p>import math<br>
import operator</p>
<p>#计算给定数据集的熵<br>
def calcShannonEnt(dataSet):<br>
numEntries = len(dataSet) #得到数据集中数据的个数<br>
#为所有可能分类创建字典<br>
labelCounts = {} #创建一个空的字典<br>
for featVec in dataSet: #遍历每一个数据<br>
currentLabel = featVec[-1] #得到该数据最后一列的值作为键值<br>
if currentLabel not in labelCounts.keys(): #如果该键值不在已有的字典键值中<br>
labelCounts[currentLabel] = 0 #则拓展字典并将当前键值加入字典<br>
labelCounts[currentLabel] += 1 #记录每个键值出现的次数<br>
shannonEnt = 0.0 #初始化概率<br>
for key in labelCounts: #遍历字典中的键值<br>
prob = float(labelCounts[key]) / numEntries #计算初步该键值出现次数所占的概率<br>
shannonEnt -= prob * math.log(prob,2) #用上面的概率计算本次的熵<br>
return shannonEnt #返回最终熵</p>
<p>简单的应用： 先创建一个简单的数据 在以后的实验中会使用大量的数据这里自己先构建一个简单的： <img src="http://47.100.4.8/wp-content/uploads/2018/04/23232323.png" alt=""> 使用： <img src="http://47.100.4.8/wp-content/uploads/2018/04/323232323.png" alt=""> 结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/34234234234.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180416221958.png" alt=""> 熵越高，则混合的数据也越多。 计算熵的值也是为了以后找到最优划分数据集做准备。   选择最好的数据集划分方式： <img src="http://47.100.4.8/wp-content/uploads/2018/04/4334234234.png" alt=""></p>
<p>#选择最好的数据集划分方式<br>
def chooseBestFeatureToSplit(dataSet):<br>
#函数调用的要求是：数据必须是一种由列表元素组成的列表，而且所有的列表元素都要具有相同的数据长度<br>
#数据的最后一列或者每个实例的最后一个元素是当前实例的类别标签<br>
numFeatures = len(dataSet[0]) - 1 #这里操作的目的是 得到[[0,1,2,3],[0,1,2,3]] 四列-1  得到子列表中除标签之外的特征值的总列数<br>
baseEntropy = calcShannonEnt(dataSet)  #计算整个数据集的熵<br>
bestInfoGain = 0.0  #初始化最好信息收益<br>
bestFeature = -1  #初始化最好信息收入的对应特征值的在数据集中的位置 [[0,1,2]]  若返回0 则代表第0个特征值是用来划分数据集最好的特征<br>
#创建唯一的分类标签<br>
for i in range(numFeatures):<br>
featList = [example[i] for example in dataSet] #访问每个列表的子列表 中的除标签之外的在同一位置上的特征值并将它们组成一个新的列表<br>
uniqueVals = set(featList) #这里使用set（）创建该列表特征值的无序不重复的集合 这里得到的是每一个子列表对应列上的特征值的不重复无序集合<br>
#计算按照第i列特征值划分的数据集的信息熵<br>
newEntropy = 0.0 #初始化<br>
for value in uniqueVals: #遍历上面创建的无序不重复特征值集合  目的是得到分别按照在该列上不同的特征值所划分得到的数据集，并且计算该种划分的熵<br>
subDataSet = splitDataSet(dataSet,i,value)  #得到该数据集对于该特征值的划分<br>
prob = len(subDataSet)/float(len(dataSet))  #计算该数据集划分方式在原数据集中的所占比<br>
newEntropy += prob * calcShannonEnt(subDataSet)  #得到新的信息增益 = 所占比*数据集新划分方式的熵<br>
#计算最好的信息收入<br>
infoGain = baseEntropy - newEntropy<br>
if(infoGain &gt; bestInfoGain): #如果numfaetures大于1 则进行多列特征值都进行划分  得到数据依次在这里比较 保留下最好的<br>
bestInfoGain = infoGain  #获得最好的信息收入<br>
bestFeature = i  #得到最好信息收入位置对应特征值的位置<br>
return bestFeature  #返回的是按照第几列划分得到的数据集最好  也可以你看成找到树上的一个结点</p>
<p>举例解释： <img src="http://47.100.4.8/wp-content/uploads/2018/04/32112313.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/04/9636363.png" alt=""> 对于这个列表会先遍历第一列所有元素[1,1,1,0,0,0] 是在代码的48行到57行实现的 通过set（） 会得到不重复无序的列表[1,0]或者[0,1]  是在代码得58行实现的 然后依次根据其中每一个特征值以及列标 进行划分在代码的62行实现的 剩下的就是进行数据之间操作 为的是进行最优解的选择 63行到70行 ps：遍历完这一列会进行下一列[1,1,0,1,1,1]的遍历重复上面操作，如果有更多列则继续进行。   End！</p>
]]></content>
      <categories>
        <category>决策树</category>
        <category>文章页</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Algorithm</tag>
        <tag>Decision Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习之决策树（四）</title>
    <url>/2018/04/19/ji-qi-xue-xi-zhi-jue-ce-shu-si-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/timg.jpg" alt=""> 使用matplotlib绘制决策树： 构造注解树： 首先要得到树的子节点数目和树的深度 都是通过递归得到的 首先是递归得到树的叶子结点数目：</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#深度递归遍历获取树的叶节点数目</span></span><br><span class="line">def getNumLeafs(myTree):</span><br><span class="line">    numLeafs = <span class="number">0</span></span><br><span class="line">    firstStr = <span class="keyword">list</span>(myTree.keys())<span class="string">\[0\]</span>  <span class="comment">#得到字典的第一个键值</span></span><br><span class="line">    secondDict = myTree<span class="string">\[firstStr\]</span> <span class="comment">##得到键值对应的值（子字典）</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> secondDict.keys():</span><br><span class="line">        <span class="comment">#判断得到的数据是否为字典</span></span><br><span class="line">        <span class="keyword">if</span> type(secondDict<span class="string">\[key\]).\_\_name\_\_</span> == <span class="string">'dict'</span>:  <span class="comment">#如果仍为字典类型 则进行再次的深度递归遍历 访问他的子节点（子字典）</span></span><br><span class="line">            numLeafs += getNumLeafs(secondDict<span class="string">\[key\])</span></span><br><span class="line">        else:</span><br><span class="line">            numLeafs +=<span class="number">1</span> <span class="comment">#如果访问的类型不是字典 则证明已经访问到了一个具体的值 则进行节点数+1</span></span><br><span class="line">    <span class="keyword">return</span> numLeafs</span><br><span class="line"></span><br><span class="line">  如果想要详细的了解过程，可以用过Debug来查看值   然后是递归得到树的层数：</span><br><span class="line"></span><br><span class="line"><span class="comment">#获得树的层数</span></span><br><span class="line">def getTreeDepth(myTree):</span><br><span class="line">    maxDepth = <span class="number">0</span>  <span class="comment">#初始化最大深度</span></span><br><span class="line">    firstStr = <span class="keyword">list</span>(myTree.keys())<span class="string">\[0\]</span>  <span class="comment">#得到字典的第一个键值</span></span><br><span class="line">    secondDict = myTree<span class="string">\[firstStr\]</span> <span class="comment">#得到键值对应的值（子字典）</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> secondDict.keys():</span><br><span class="line">        <span class="comment">#判断得到的数据是否为字典</span></span><br><span class="line">        <span class="keyword">if</span> type(secondDict<span class="string">\[key\]).\_\_name\_\_</span> == <span class="string">'dict'</span>:  <span class="comment">#如果仍为字典类型 则进行再次的深度递归遍历 访问他的子节点（子字典）</span></span><br><span class="line">            thisDepth = <span class="number">1</span> + getTreeDepth(secondDict<span class="string">\[key\])</span></span><br><span class="line">        else:</span><br><span class="line">            thisDepth = <span class="number">1</span> <span class="comment">#如果遇到叶子节点则返回</span></span><br><span class="line">        <span class="keyword">if</span> thisDepth &gt; maxDepth:</span><br><span class="line">            maxDepth = thisDepth</span><br><span class="line">    <span class="keyword">return</span> maxDepth</span><br><span class="line"></span><br><span class="line">  使用以之前创建的树为例子： ![](http:<span class="regexp">//47.100.4.8/wp-content/uploads/2018/04/543234.png)![](http://</span><span class="number">47.100</span>.<span class="number">4.8</span>/wp-content<span class="regexp">/uploads/2018/04/526325.png) 结果：![](http:/</span><span class="regexp">/47.100.4.8/wp-content/uploads/2018/04/213213.png) ![](http:/</span>/<span class="number">47.100</span>.<span class="number">4.8</span>/wp-content/uploads/<span class="number">2018</span>/<span class="number">04</span>/<span class="number">82236633.png</span>) 绘制决策树： 要使用到上面的函数getNumLeafs（得到树的叶子结点），getTreeDepth（得到树的层数） 具体形式：</span><br><span class="line"></span><br><span class="line">trees.getNumLeafs(myTree)</span><br><span class="line">trees.getTreeDepth(myTree)</span><br><span class="line"></span><br><span class="line">绘制带注解的箭头：</span><br><span class="line"></span><br><span class="line"><span class="comment">#绘制带箭头的注解</span></span><br><span class="line">def plotNode(nodeTxt,centerPt,parentPt,nodeType):</span><br><span class="line">    createPlot.ax1.annotate(nodeTxt,xy=parentPt,xycoords=<span class="string">'axes fraction'</span>,xytext=centerPt,<span class="string">\</span></span><br><span class="line">                            textcoords=<span class="string">'axes fraction'</span>,va=<span class="string">"center"</span>,ha=<span class="string">"center"</span>,<span class="string">\</span></span><br><span class="line">                            bbox=nodeType,arrowprops=arrow_args)</span><br><span class="line"></span><br><span class="line">  在父子结点间填充信息：</span><br><span class="line"></span><br><span class="line"><span class="comment">#在父子结点间填充信息</span></span><br><span class="line">def plotMidText(cntrPt,parentPt,txtString):</span><br><span class="line">    xMid = (parentPt<span class="string">\[0\]</span> - cntrPt<span class="string">\[0\])</span> / <span class="number">2.0</span> + cntrPt<span class="string">\[0\]</span></span><br><span class="line">    yMid = (parentPt<span class="string">\[1\]</span> - cntrPt<span class="string">\[1\])</span> / <span class="number">2.0</span> + cntrPt<span class="string">\[1\]</span></span><br><span class="line">    createPlot.ax1.text(xMid,yMid,txtString)</span><br><span class="line"></span><br><span class="line">  得到绘制树的相关数据：</span><br><span class="line"></span><br><span class="line"><span class="comment">#plotTree函数</span></span><br><span class="line">def plotTree(myTree,parentPt,nodeTxt):</span><br><span class="line">    numLeafs = getNumLeafs(myTree)</span><br><span class="line">    depth = getTreeDepth(myTree)</span><br><span class="line">    firstStr = myTree.keys()<span class="string">\[0\]</span></span><br><span class="line">    cntrPt = (plotTree.xOff + (<span class="number">1.0</span> + float(numLeafs)) / <span class="number">2.0</span> / plotTree.totalW,plotTree.yOff)</span><br><span class="line">    plotMidText(cntrPt,parentPt,nodeTxt)</span><br><span class="line">    plotNode(firstStr,cntrPt,parentPt,decisionNode)</span><br><span class="line">    secondDict = myTree<span class="string">\[firstStr\]</span></span><br><span class="line">    plotTree.xOff = plotTree.yOff - <span class="number">1.0</span> / plotTree.totalD</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> secondDict.keys():</span><br><span class="line">        <span class="keyword">if</span> type(secondDict<span class="string">\[key\]).\_\_name\_\_</span> == <span class="string">'dict'</span>:</span><br><span class="line">            plotTree(secondDict<span class="string">\[key\],cntrPt,str(key))</span></span><br><span class="line">        else:</span><br><span class="line">            plotTree.xOff = plotTree.xOff + <span class="number">1.0</span> / plotTree.toatlW</span><br><span class="line">            plotNode(secondDict<span class="string">\[key\],(plotTree.xOff,plotTree.yOff),cntrPt,leafNode)</span></span><br><span class="line">            plotMidText((plotTree.xOff,plotTree.yOff),cntrPt,leafNode)</span><br><span class="line">    plotTree.yOff = plotTree.yOff + <span class="number">1.0</span> / plotTree.totalD</span><br><span class="line"></span><br><span class="line">  绘制树：</span><br><span class="line"></span><br><span class="line">def createPlot(inTree):</span><br><span class="line">    fig = plt.figure(<span class="number">1</span>,facecolor=<span class="string">'white'</span>)</span><br><span class="line">    fig.clf()</span><br><span class="line">    axprops = dict(xticks=<span class="string">\[\],ticks=\[\])</span></span><br><span class="line">    createPlot.ax1 = plt.subplot(<span class="number">111</span>,frameon=False,**axprops)</span><br><span class="line">    plotTree.totalW = float(getNumLeafs(inTree))</span><br><span class="line">    plotTree.totalD = float(getTreeDepth(inTree))</span><br><span class="line">    plotTree.xOff = -<span class="number">0.5</span> / plotTree.totalW;plotTree.yOff = <span class="number">1.0</span>;</span><br><span class="line">    plotTree(inTree,(<span class="number">0.5</span>,<span class="number">1.0</span>),<span class="string">''</span>)</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line">  两个测试字典（树）：</span><br><span class="line"></span><br><span class="line"><span class="comment">#示例的两个字典</span></span><br><span class="line">def retrieveTree(i):</span><br><span class="line">    listOfTree = <span class="string">\[&#123;'no</span> surfacing<span class="string">':&#123;0:'</span><span class="literal">no</span><span class="string">',1:&#123;'</span>flippers<span class="string">':&#123;0:'</span><span class="literal">no</span><span class="string">',1:'</span><span class="literal">yes</span><span class="string">'&#125;&#125;&#125;&#125;,</span></span><br><span class="line"><span class="string">                  &#123;'</span><span class="literal">no</span> surfacing<span class="string">':&#123;0:'</span><span class="literal">no</span><span class="string">',1:&#123;'</span>flippers<span class="string">':&#123;0:&#123;'</span>head<span class="string">':&#123;0:'</span><span class="literal">no</span><span class="string">',1:'</span><span class="literal">yes</span><span class="string">'&#125;&#125;,1:'</span><span class="literal">no</span><span class="string">'&#125;&#125;&#125;&#125;</span></span><br><span class="line"><span class="string">                  \]</span></span><br><span class="line"><span class="string">    return listOfTree\[i\]</span></span><br></pre></td></tr></table></figure>
<p>效果图： <img src="http://47.100.4.8/wp-content/uploads/2018/04/6435.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/04/8523652.png" alt="">   End！</p>
]]></content>
      <categories>
        <category>决策树</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Algorithm</tag>
        <tag>Decision Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习之决策树（三）</title>
    <url>/2018/04/16/ji-qi-xue-xi-zhi-jue-ce-shu-san-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/timg.jpg" alt=""> 创建一个投票表决器得到出现次数位的分类名称： <img src="http://47.100.4.8/wp-content/uploads/2018/04/5446.png" alt=""></p>
<p>def majorityCnt(classList):  #类似一个投票表决代码 得到出现次数最多的分类名称也就是键值<br>
classCount = {}<br>
for vote in classList:<br>
if vote[-1] not in classCount.keys():<br>
classCount[vote[-1]] = 0<br>
classCount[vote[-1]] += 1<br>
#上面代码是计算出得到classList中每个键值出现的次数<br>
sortedClassCount = sorted(classCount.items(),key=operator.itemgetter(1),reverse=True) #进行字典排序<br>
return sortedClassCount[0][0] #返回出现最多的分类名称  注意这里输出最大值的结果是按照ASCII吗排序靠前的就先输出了。 即使有两个出现次数一样多的也是按照谁排在前面就输出他</p>
<p>工作原理：得到原始数据集，然后基于最好的属性值划分数据集，由于特征值可能多于两个，因此可能存在大于两个分支的数据集划分。在第一次划分之后，数据将被向下传递到树分支的下一个节点，在这个节点上，我们可以再次划分数据。因此可以采用递归构建决策树。 递归构建决策树： 递归结束的条件：程序遍历完所有划分数据集的属性，或者每个分支下的所有实例都具有相同的分支。   代码中的结束递归条件：</p>
<ol>
<li>所有标签类型相同，则直接返回该类标签。</li>
<li>使用完了所有的特征值，仍然不能将数据集划分成仅包含唯一类别的分组。</li>
</ol>
<p>这里递归调用的函数许多是在上面文章中使用过的，因此如果有在该文章中没有的则请翻看之前的文章，谢谢！ 通过递归创建决策树： <img src="http://47.100.4.8/wp-content/uploads/2018/04/34343434.png" alt=""></p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建树的函数代码</span></span><br><span class="line">def createTree(dataSet,labels):  <span class="comment">#输入两个参数一个是数据集一个是标签集</span></span><br><span class="line">    classList = <span class="string">\[example\[-1\]</span> <span class="keyword">for</span> example <span class="keyword">in</span> dataSet<span class="string">\]</span>  <span class="comment">#得到数据集中每个子列表的标签 并创建一个列表存储</span></span><br><span class="line">    <span class="comment">#以下为递归结束条件</span></span><br><span class="line">    <span class="keyword">if</span> classList.count(classList<span class="string">\[0\])</span> == len(classList):  <span class="comment">#通过统计创建标签列表的第一个标签出现的次数来和总的长度比较 如果列表中所有标签完全相同则返回该类标签</span></span><br><span class="line">        <span class="keyword">return</span> classList<span class="string">\[0\]</span></span><br><span class="line">    <span class="keyword">if</span> len(dataSet<span class="string">\[0\])</span> == <span class="number">1</span>: <span class="comment">#如果子列表中所有特征值均被使用完了只剩下标签 则返回这个列表中标签出现最多的的标签名称</span></span><br><span class="line">        <span class="keyword">return</span> majorityCnt(classList)</span><br><span class="line">    <span class="comment">#End</span></span><br><span class="line">    bestFeat = chooseBestFeatureToSplit(dataSet)  <span class="comment">#如果上面的根据当前的数据集得到最好的数据集划分方式  bestFeature按照第几个特征是最好的划分方式</span></span><br><span class="line">    bestFeatLabel = labels<span class="string">\[bestFeat\]</span> <span class="comment">#得到列数对应的标签名称</span></span><br><span class="line">    <span class="comment">#print(bestFeat)</span></span><br><span class="line">    <span class="comment">#使用字典类型存储数</span></span><br><span class="line">    myTree = &#123;bestFeatLabel:&#123;&#125;&#125; <span class="comment">#将选择的特征值标签听到自己创建的数字典中</span></span><br><span class="line">    del(labels<span class="string">\[bestFeat\])</span> <span class="comment">#将对应的标签从原有的标签列表中删除</span></span><br><span class="line">    featValues = <span class="string">\[example\[bestFeat\]</span> <span class="keyword">for</span> example <span class="keyword">in</span> dataSet<span class="string">\]</span> <span class="comment">#遍历得到每个列表中最佳位置特征值</span></span><br><span class="line">    uniqueVals = set(featValues)  <span class="comment">#组成一个列表</span></span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> uniqueVals:</span><br><span class="line">        subLabels = labels<span class="string">\[:\]</span> <span class="comment">#得到去掉最佳位置的标签后的所有标签</span></span><br><span class="line">        myTree<span class="string">\[bestFeatLabel\]\[value\]</span> = createTree(splitDataSet(dataSet,bestFeat,value),subLabels) <span class="comment">#递归的到决策树</span></span><br><span class="line">    <span class="keyword">return</span> myTree <span class="comment">#每次结束返回当前节点的子决策树</span></span><br></pre></td></tr></table></figure>
<p>使用以及结果：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">import trees</span><br><span class="line"></span><br><span class="line">myDat,labels = trees.createDataSet()</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(myDat)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(trees.calcShannonEnt(myDat)</span></span>)</span><br><span class="line">i=trees.chooseBestFeatureToSplit(myDat)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(i)</span></span></span><br><span class="line">myData = trees.splitDataSet(myDat,<span class="selector-tag">i</span>,<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(myData)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(trees.majorityCnt(myDat)</span></span>)</span><br><span class="line"></span><br><span class="line">myTree = trees.createTree(myDat,labels)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(myTree)</span></span></span><br></pre></td></tr></table></figure>
<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/14524.png" alt=""> 自己画的图：对应上面的结果（每个键值都是一个结点对应的值都是判断是数据）： <img src="http://47.100.4.8/wp-content/uploads/2018/04/23231243.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/05/23231243.png" alt=""> 以上就是决策树构建的全部过程，注意的是这里得到决策树是字典类型，接下来的博文会通过使用matplotlib库来绘制决策树。 End！</p>
]]></content>
      <categories>
        <category>决策树</category>
        <category>文章页</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Decision Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习之决策树（一）</title>
    <url>/2018/04/13/ji-qi-xue-xi-zhi-jue-ce-shu-yi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/timg.jpg" alt=""> 我们经常使用决策树处理分类问题，近来的调查表明决策树也是最经常使用的数据挖掘算法。他十分的简单，甚至是你根本不需要了解机器学习的知识，就能搞明白决策树是如何工作的。 例如：一个假想的邮件分类系统 <img src="http://47.100.4.8/wp-content/uploads/2018/04/32123123.png" alt=""> 长方形代表判断模块，椭圆代表终止模块，表示已经得出结论，可以终止运行。从判断模块引出的左右箭头称作分支，他可以到达另一个判断模块或者终止模块。 决策树的优势：就在于数据形式非常容易理解。 优点：计算复杂度不高，输出结果易于理解，对中间值的缺失不敏感，可以处理不相关的特征数据。 缺点：可能会产生过度匹配问题。 使用数据类型：数值型和标称型。   在构造决策树时，我们需要解决的第一个问题是，当前数据集上哪个特征在划分数据分类时起决定性作用。为了找到决定性的特征，划分出最好的结果，我们必须评估每个特征。完成测试之后，原始数据集就被划分为几个数据子集。这些数据子集会分布在第一个决策点的所有分支上。如果某个分支下的数据属于同一类型，则当前无需阅读的垃圾邮件已经正确地划分数据分类，无需进一步对数据集进行分割。如果数据子集内的数据不属于同一类型，则需要重复划分数据子集的过程。划分数据子集的算法和划分原始数据集的方法相同，知道所有需要的相同类型的数据均在一个数据子集内。   创建分支的伪代码： createBranch（） 检测数据集中的每个子项是否属于同一分类： If so return 类标签 Else： 寻找划分数据集的最好特征 划分数据集 创建分支节点 for  每个划分的子集： 调用函数createBranch 并增加返回结果到分支节点中 return 分支节点 上面的伪代码函数是一个递归函数，接下来的博文中会陆续给出实际代码。 决策树的一般流程： （1）收集数据：可以使用任何方法。 （2）准备数据：树构造算法只适用于标称型数据，因此数值型数据必须离散化。 （3）分析数据：可以使用任何方法，构造树完成之后，我们应该检查图形是否符合预期。 （4）训练算法：构造树的数据结构。 （5）测试算法：使用经验树计算错误率。 （6）使用算法：此步骤可以适用于任何监督学习算法，而使用决策树可以更好地理解数据的内在含义。 这里就先初步了解一下决策树。理解它的实现办法以便于对后面博文中代码的的理解。ps：后面的代码我也是看了很久才弄得比较清楚。￣□￣｜｜ End！ <img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-1.jpg" alt=""></p>
]]></content>
      <categories>
        <category>决策树</category>
        <category>文章页</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Decision Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Java安装以及环境配置</title>
    <url>/2018/07/04/java-an-zhuang-yi-ji-huan-jing-pei-zhi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180704195513.png" alt=""> <strong>今天介绍一下java的安装以及环境变量的配置</strong>   首先你需要下载一个java的安装程序（大概有200M）这里我就不上传了有点大 大家自行下载：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a> 至于安装方面： <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180704200846.png" alt=""> 安装目录可以自行选择，其他步骤几乎都下一步了。。。 至于环境配置方面： 首先右键我的电脑，找到高级系统设置 <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180704201242.png" alt=""> 然后点开环境配置： <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180704201201.png" alt=""> 然后新建和编辑： <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180704201529.png" alt=""> 按照如下配置   <strong>1.1 新建变量名：JAVA_HOME 变量值：C:\Program Files\Java\jdk1.8.0_102（这是我的jdk安装路径）</strong>  <strong>1.2 编辑变量名：Path 变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin</strong>  <strong>1.3 新建变量名：CLASSPATH 变量值： .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar （注意：CLASSPATH变量值前面有个&quot;.&quot; 、 在设置变量的末尾时不要加上“;”）</strong> 最后在CMD中输入 java -version若显示出来java的版本，说明配置完成 <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180704203231.png" alt=""></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习之k-邻近算法</title>
    <url>/2018/04/07/ji-qi-xue-xi-zhi-k-lin-jin-suan-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/timg.jpg" alt=""> K-邻近算法 简单地说，k-邻近算法采用测量不同特征值之间的距离方法进行分类。   优点：精度高，对异常值不敏感，无数据输入假定。 缺点：计算复杂度高，空间复杂度高。 适应数据范围：数值型和标称型。   工作原理：存在一个样本数据集合，也称训练样本集，并且样本集中每个数据都存在标签，即我们知道样本集中每一个数据与所属分类的对应关系。当输入一个没有标签的新数据后，将新数据的每一个特征与样本集中数据对应的特征进行比较，然后算法提取样本集中特征最相似数据（即最近邻的标签）的分类标签。 一般来说只选择样本数据集中前k个最相似的数据，通常k是不大于20的整数。 最后选择k个最相似的数据中出现次数最多的数据，作为新数据的分类。   k-邻近算法的一般流程： ① 收集数据：可以使用任何方法。 ② 准备数据：距离计算所需数据要得数值，最好是结构化的数据格式。 ③ 分析数据：可以使用任何方法。 ④ 训练算法：此步骤不适用于k-邻近算法。 ⑤ 测试算法：计算错误率。 ⑥ 使用算法：首先需要输入样本数据和结构化的输出结果，然后运行k-邻近算法判定 输入数据分别属于哪个分类，最后应用对计算出的分类执行后续的处理。   kNN算法的伪代码： ① 计算已知类别数据集中的点的每一个点依次执行以下操作： ② 按照距离递增次序排序 ③ 选取与当前点距离最小的k个点 ④ 确定前k个点所在类别的出现频率 ⑤ 返回当前k个点出现频率最高的类别作为当前点的预测分类 使用欧式距离公式计算两点间的距离：0ρ = sqrt( (x1-x2)<sup>2+(y1-y2)</sup>2 ) （其实就是大家所知的计算两点间的那个距离公式）  上面的式子是针对两个特征值进行计算 如果是三个特征值那么就是 0ρ = sqrt( (x1-x2)<sup>2+(y1-y2)</sup>2+(z1+z2)^2)  同理四个特征值也是。 核心算法： <img src="http://47.100.4.8/wp-content/uploads/2018/04/kn.png" alt="">   End！</p>
]]></content>
      <categories>
        <category>k-邻近算法</category>
        <category>文章页</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Algorithm</tag>
        <tag>KNN</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习之Logistic回归</title>
    <url>/2018/04/29/ji-qi-xue-xi-zhi-logistic-hui-gui-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/timg.jpg" alt=""> logistic回归 这里我们会使用到最优化算法，最优化问题常用来解决最短路径，最少工作时间最大效益等问题。 回归：假设有一些数据点，我们用一条直线对这些点进行拟合（该条直线被称为最佳拟合直线），这个拟合过程称为回归。 利用logistic回归进行分类的主要思想是：根据现有数据对分类边界线建立回归公式，依次进行分类。 logistic回归的一般过程：</p>
<ul>
<li>收集数据：采用任意方法收集数据。</li>
<li>准备数据：由于需要进行距离计算，因此要求数据类型为数值型。另外，结构化数据格式则最佳。</li>
<li>分析数据：采用任意方法对数据进行分析。</li>
<li>训练算法：大部分时间将用于训练，训练的目的是为了找到最佳的分类回归系数。</li>
<li>测试算法：一旦训练步骤完成，分类将会很快的</li>
<li>使用算法：首先，我们需要输入一些数据，并将其转换成对应的结构化数据值；</li>
</ul>
<p>接着，基于训练好的回归系数就可以对这些数值进行简单的回归计算，判断他们属于哪个类别，在这之后，我们就可以在输出的类别上做一些其他的分析工作。   Logistic回归： 优点：计算代价不高，易于理解和实现。 缺点：容易欠拟合，分类精度可能不高 使用数据类型：数值型和标称型数据   基于Logistic回归和Sigmoid函数的分类： 我们理想中的函数应该是，能接收所有的输入然后预测出类别。 例如：在两个类的情况下，上述函数输出0或者1.这种函数称为海维塞德阶跃函数或者直接称为单位阶跃函数。然而，海维塞德阶跃函数的问题在于：该函数在跳跃点上从0瞬间跳跃到1，这个瞬间跳跃过程有时很难处理。但是有一个函数有类似的性质，而且能够很好的处理这个问题那就是Sigmoid函数。 sigmoid函数的具体公式为： <img src="http://47.100.4.8/wp-content/uploads/2018/04/1111111.png" alt="">   <strong>sigmoid****简单的介绍一下：</strong> Sigmoid函数是一个有着优美S形曲线的数学函数，在逻辑回归、人工神经网络中有着广泛的应用。Sigmoid函数的数学形式是：<img src="http://47.100.4.8/wp-content/uploads/2018/04/1111111.png" alt=""> 其函数图像如下： <img src="http://47.100.4.8/wp-content/uploads/2018/05/123141323213.png" alt=""> 可以看出，sigmoid函数连续，光滑，严格单调，以(0,0.5)中心对称，是一个非常良好的阈值函数。 当x趋近负无穷时，y趋近于0；趋近于正无穷时，y趋近于1；x=0时，y=0.5。当然，在x超出[-6,6]的范围后，函数值基本上没有变化，值非常接近，在应用中一般不考虑。 Sigmoid函数的值域范围限制在(0,1)之间，我们知道[0,1]与概率值的范围是相对应的，这样sigmoid函数就能与一个概率分布联系起来了。 Sigmoid函数的导数是其本身的函数   由图可以看出随着x的增大，对应的sigmoid值将逼近于1，而随着x的减小，sigmoid值越逼近于0，而且如果横坐标越大，那么sigmoid函数图像会越像一个跃阶函数。</p>
]]></content>
      <categories>
        <category>logistic回归</category>
        <category>文章页</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Algorithm</tag>
        <tag>Logisitic</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习之朴素贝叶斯</title>
    <url>/2018/04/23/ji-qi-xue-xi-zhi-pu-su-bei-ye-si-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/timg.jpg" alt=""> 称为朴素的原因：是因为整个形式化过程只做最原始、最简单的假设。 任务：利用python进行文本处理将文档切分成词向量，然后利用词向量对文档进行分类。 朴素贝叶斯使用数据类型：标称型数据 优点是：在数据较少的情况下仍然能使用，可以处理多类别问题。 缺点：对于数据输入方式有一定要求。   快速了解贝叶斯决策理论： 用p1(x,y)表示数据点(x,y)属于类别1的概率 用p2(x,y)表示数据点(x,y)属于类别2的概率 那么对于一个 新的数据点(x,y)我们使用如下规则判断它属于哪个类别： p1(x,y)&gt;p2(x,y) —&gt;属于类别1 p1(x,y)&lt;p2(x,y) —&gt;属于类别2 因此就是我们只会选择高概率对应的类别即高概率决策。这就是贝叶斯思想的核心。（由此可见之后要使用到概率论的知识。） 贝叶斯决策时最佳的数据点分类策略。   主要用到了条件概率： p（A|B）=P（AB）/P（B） 贝叶斯准则：计算条件概率的方法：已知p(A|B)求P（B|A），可已使用如下公式计算 P（B|A）=（P(A|B)*P(B)）/P(A)   使用条件概率来分类： 上面提到的核心思想并不是贝叶斯决策的全部内容，p1（）和p2（）也不是真实的只是一个表示：实际为p（c1|x，y）和p（c2|x，y）这些符号所代表的的具体意义是给定某个x、y表示的数据点，那么该点来自c1或者c2类别的概率多少 应用贝叶斯准则得到： <img src="http://47.100.4.8/wp-content/uploads/2018/04/123341233123.png" alt=""> 分类过程就是按照谁的概率更大一些就属于它所在分类。   使用朴素贝叶斯进行文档分类：   过程：</p>
<ol>
<li>收集数据：可以使用任何方法，这里使用的是RSS源</li>
<li>准备数据：需要数值型或者布尔型数据。</li>
<li>分析数据：有大量特征值时，绘制特征作用不大，此时使用直方图比较好</li>
<li>训练算法：计算不同的独立特征的条件概率。</li>
<li>测试算法：计算错误率</li>
</ol>
<p>使用算法：一个常见的的朴素贝叶斯应用的文档的分类   特征值之间要相互独立，即一个特征出现的可能性与其他特征值无关。 朴素贝叶斯分类器中的另一种假设是：每个特征值同等重要。     使用python进行文本分类： 首先要进行文本的拆分：特征是来自文本的一个词条，一个词条是字符的任意组合。 接下来以在线社区留言板为例： 目的是屏蔽侮辱性的言论，因此构建一个快速过滤侮辱性言论的过滤器。 将文本内容分为侮辱性和非侮辱性使用1和0分别表示   接下来就是将文本转换为数字向量   准备数据：从文本中构建词向量（也就是将句子转换为向量） 词表到向量的转换函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#词表到向量的转化函数</span></span><br><span class="line"><span class="comment">#创建一些实验样本 用于训练</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">()</span>:</span></span><br><span class="line">    postingList = \[\[<span class="string">'my'</span>,<span class="string">'dog'</span>,<span class="string">'has'</span>,<span class="string">'flea'</span>,<span class="string">'problems'</span>,<span class="string">'help'</span>,<span class="string">'please'</span>\],</span><br><span class="line">                   \[<span class="string">'maybe'</span>,<span class="string">'not'</span>,<span class="string">'take'</span>,<span class="string">'him'</span>,<span class="string">'to'</span>,<span class="string">'dog'</span>,<span class="string">'park'</span>,<span class="string">'stupid'</span>\],</span><br><span class="line">                   \[<span class="string">'my'</span>,<span class="string">'dalmation'</span>,<span class="string">'is'</span>,<span class="string">'so'</span>,<span class="string">'cute'</span>,<span class="string">'I'</span>,<span class="string">'love'</span>,<span class="string">'him'</span>\],</span><br><span class="line">                   \[<span class="string">'stop'</span>,<span class="string">'posting'</span>,<span class="string">'stupid'</span>,<span class="string">'worhless'</span>,<span class="string">'garbage'</span>\],</span><br><span class="line">                   \[<span class="string">'mr'</span>,<span class="string">'licks'</span>,<span class="string">'ate'</span>,<span class="string">'my'</span>,<span class="string">'steak'</span>,<span class="string">'how'</span>,<span class="string">'to'</span>,<span class="string">'stop'</span>,<span class="string">'him'</span>\],</span><br><span class="line">                   \[<span class="string">'quit'</span>,<span class="string">'buying'</span>,<span class="string">'worhless'</span>,<span class="string">'dog'</span>,<span class="string">'food'</span>,<span class="string">'stupid'</span>\]\]</span><br><span class="line">    <span class="comment">#创建一个类别标签集合</span></span><br><span class="line">    classVec = \[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>\] <span class="comment">#每一个标签对应一个子列表 分别表示了是侮辱性语言（1）还是非侮辱性语言（0） </span></span><br><span class="line">    <span class="keyword">return</span> postingList,classVec</span><br><span class="line"></span><br><span class="line"><span class="comment">#处理集合 创建一个包含在所有文档中出现的不重复词的列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createVocableList</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    vocabSet = set(\[\]) <span class="comment">#创建一个无序无重复空集</span></span><br><span class="line">    <span class="keyword">for</span> document <span class="keyword">in</span> dataSet:</span><br><span class="line">        vocabSet = vocabSet | set(document)  <span class="comment">#创建两个集合的并集 目的是去掉dataSet中每个集合重复的数据</span></span><br><span class="line">    <span class="keyword">return</span> list(vocabSet)</span><br><span class="line"><span class="comment">#创建一个将给的文档转换为向量文档的函数</span></span><br><span class="line"><span class="comment">#该函数的输入参数为词汇表以及某个文档</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setOfWords2Vec</span><span class="params">(vocabList,inputSet)</span>:</span></span><br><span class="line">    returnVec = \[<span class="number">0</span>\]*len(vocabList)  <span class="comment">#创建一个词汇表等长的向量表</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> inputSet:<span class="comment">#循环遍历输入的文档</span></span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> vocabList: <span class="comment">#如果输入的文档内容在给出的 词汇表中</span></span><br><span class="line">            returnVec\[vocabList.index(word)\] = <span class="number">1</span> <span class="comment">#找到word对应的索引位置并且将返回数字向量对应的位置设置为1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">"这个单词是：%s 不在我的词表中!"</span> %word)</span><br><span class="line">    <span class="keyword">return</span> returnVec  <span class="comment">#输出的是向量文档</span></span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import Bayesian</span><br><span class="line"></span><br><span class="line">listOposts,listClasses = <span class="module-access"><span class="module"><span class="identifier">Bayesian</span>.</span></span>load<span class="constructor">DataSet()</span></span><br><span class="line">myVocabList = <span class="module-access"><span class="module"><span class="identifier">Bayesian</span>.</span></span>create<span class="constructor">VocableList(<span class="params">listOposts</span>)</span></span><br><span class="line">print(myVocabList)</span><br><span class="line">print(listClasses)</span><br><span class="line">print(<span class="module-access"><span class="module"><span class="identifier">Bayesian</span>.</span></span>set<span class="constructor">OfWords2Vec(<span class="params">myVocabList</span>,<span class="params">listOposts</span>\[0\])</span>)</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/sad%E4%B8%AD%E5%BF%83%E6%93%A6%E4%BC%A4%E7%9A%84.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/04/1968541563156.png" alt=""> End！</p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>朴素贝叶斯</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Algorithm</tag>
        <tag>Naive Bayes</tag>
      </tags>
  </entry>
  <entry>
    <title>基于GA的TSP算法</title>
    <url>/2018/08/19/ji-yu-ga-de-tsp-suan-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/08/QQ%E5%9B%BE%E7%89%8720180819172202.png" alt=""> <strong>TSP问题简介：</strong> 旅行商问题，即TSP问题（Traveling Salesman Problem）是数学领域中著名问题之一。假设有一个旅行商人要拜访N个城市，他必须选择所要走的路径，路径的限制是每个城市只能拜访一次，而且最后要回到原来出发的城市。路径的选择目标是要求得的路径路程为所有路径之中的最小值。TSP问题是一个<a href="https://baike.baidu.com/item/NPC/658479">NPC</a>问题，即为在最坏的情况下的时间复杂度随着问题规模的增大按指数方式增长。 这里使用遗传算法（GA）来解决这个问题 **问题描述：**已知N个城市之间相互的距离，某一旅行商从某个城市出发访问每个城市一次且仅访问一次，最后回到出发城市，如何安排才使其所走路线最短，实质上就是寻找一条最短的路径能够遍历N个城市。 <strong>问题介绍：</strong> 这里通过给定十四个城市的坐标来寻找一条最短路径 <img src="http://47.100.4.8/wp-content/uploads/2018/08/QQ%E5%9B%BE%E7%89%8720180819172609.png" alt=""> 算法流程： <img src="http://47.100.4.8/wp-content/uploads/2018/08/12.png" alt=""> 使用遗传算法实现：</p>
<ul>
<li><strong>编码</strong></li>
</ul>
<p>采用整数排列的方式，对于本案例中十四个城市的TSP问题，将染色体分别十四段，每一段对应一个城市的编号，例如对十个城市的TSP问题{1,2,3,4,5,6,7,8,9,10}，则|1|2|3|5|7|4|10|8|9|6|8|是一个合法的染色体。</p>
<ul>
<li><strong>种群初始化</strong></li>
</ul>
<p>在完成染色体编码以后，必须产生一个初始种群作为起始种群解，所以首先需要决定初始化种群的数目一般根据经验得到，一般情况下种群的数量视城市规模的大小而确定，其取值在50~200之间浮动</p>
<ul>
<li><strong>适应度函数</strong></li>
</ul>
<p>设|k1|k2|……|kn|为一个采用整数编码的染色体，Dkikj为城市ki到城市kj的距离，则该个体的适应度为 即为恰好走完n个城市，再回到出发城市的距离的倒数。优化目标是选择适应度值尽可能大的染色体，这样也就是走的距离短的染色体，这样的染色体更好。</p>
<ul>
<li><strong>选择操作</strong>即从旧群体中以一定概率选择个体到新群体中，个体被选中的概率跟适应度值有关，个体适应度越大，被选中的概率越高</li>
<li><strong>交叉操作</strong></li>
</ul>
<p>采用部分映射杂交，确定交叉操作的父代，将父代样本两两分组，每组重复一下过程，进行交叉，如r1=4，r2=7 <img src="http://47.100.4.8/wp-content/uploads/2018/08/13.png" alt=""> 交叉后被交换的位置基因不改变，其他段的基因由于和被交换的段的基因冲突，要采用部分映射的方法消除冲突（利用中间段）消除冲突后的结果为： <img src="http://47.100.4.8/wp-content/uploads/2018/08/14.png" alt="">、</p>
<ul>
<li><strong>变异操作</strong></li>
</ul>
<p>变异策略是采取随机选取两个点，将其对换位置。随机产生在[1,10]之间的两个整数r1和r2，确定两个基因后对换两个基因的的位置。 如： <img src="http://47.100.4.8/wp-content/uploads/2018/08/15.png" alt=""></p>
<ul>
<li><strong>进化逆转操作</strong></li>
</ul>
<p>为改善遗传算法的局部搜索能力，在选择、变异、交叉之后引进连续多次的进化逆转操作。这里的进化是指逆转算子的单方向性，只有经过逆转后，适应度值有提高的才能接受下来，否则逆转无效。 随机战胜两个[1,10]之间的数，将其对应的基因对换位置 如r1=4，r2=7 <img src="http://47.100.4.8/wp-content/uploads/2018/08/16.png" alt=""> 下面给出MatLab代码： <strong>首先给出主函数GA_TSP</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%遗传算法求解TSP问题</span></span><br><span class="line"><span class="comment">%输入：</span></span><br><span class="line"><span class="comment">%D       距离矩阵</span></span><br><span class="line"><span class="comment">%NIND    为种群个数</span></span><br><span class="line"><span class="comment">%X       参数是中国34个城市的坐标(初始给定)</span></span><br><span class="line"><span class="comment">%MAXGEN  为停止代数，遗传到第MAXGEN代时程序停止,MAXGEN的具体取值视问题的规模和耗费的时间而定</span></span><br><span class="line"><span class="comment">%m       为适值淘汰加速指数,最好取为1,2,3,4,不宜太大</span></span><br><span class="line"><span class="comment">%Pc      交叉概率</span></span><br><span class="line"><span class="comment">%Pm      变异概率</span></span><br><span class="line"><span class="comment">%输出：</span></span><br><span class="line"><span class="comment">%R       为最短路径</span></span><br><span class="line"><span class="comment">%Rlength 为路径长度</span></span><br><span class="line">clear</span><br><span class="line">clc</span><br><span class="line">close all</span><br><span class="line"><span class="comment">%% 加载数据</span></span><br><span class="line"><span class="comment">% 加载所有城市的坐标从1-14</span></span><br><span class="line">X = \[\[<span class="number">16.4700000000000</span>,<span class="number">96.1000000000000</span>;<span class="number">16.4700000000000</span>,<span class="number">94.4400000000000</span>;<span class="number">20.0900000000000</span>,<span class="number">92.5400000000000</span>;<span class="number">22.3900000000000</span>,<span class="number">93.3700000000000</span>;<span class="number">25.2300000000000</span>,<span class="number">97.2400000000000</span>;<span class="number">22</span>,<span class="number">96.0500000000000</span>;<span class="number">20.4700000000000</span>,<span class="number">97.0200000000000</span>;<span class="number">17.2000000000000</span>,<span class="number">96.2900000000000</span>;<span class="number">16.3000000000000</span>,<span class="number">97.3800000000000</span>;<span class="number">14.0500000000000</span>,<span class="number">98.1200000000000</span>;<span class="number">16.5300000000000</span>,<span class="number">97.3800000000000</span>;<span class="number">21.5200000000000</span>,<span class="number">95.5900000000000</span>;<span class="number">19.4100000000000</span>,<span class="number">97.1300000000000</span>;<span class="number">20.0900000000000</span>,<span class="number">92.5500000000000</span>\]\];</span><br><span class="line">D=Distanse(X);  <span class="comment">%生成距离矩阵  具体的是根据坐标X 将以上信息转换为一个对称的距离矩阵</span></span><br><span class="line">N=<span class="built_in">size</span>(D,<span class="number">1</span>);    <span class="comment">%城市个数</span></span><br><span class="line"><span class="comment">%% 遗传参数</span></span><br><span class="line">NIND=<span class="number">100</span>;       <span class="comment">%种群大小  代表有Nind种路径</span></span><br><span class="line">MAXGEN=<span class="number">200</span>;     <span class="comment">%最大遗传代数</span></span><br><span class="line">Pc=<span class="number">0.9</span>;         <span class="comment">%交叉概率</span></span><br><span class="line">Pm=<span class="number">0.05</span>;        <span class="comment">%变异概率</span></span><br><span class="line">GGAP=<span class="number">0.9</span>;       <span class="comment">%代沟</span></span><br><span class="line"><span class="comment">%% 初始化种群</span></span><br><span class="line">Chrom=InitPop(NIND,N); <span class="comment">%根据种群大小和基因长度</span></span><br><span class="line"><span class="comment">%% 画出随机解的路径图</span></span><br><span class="line">DrawPath(Chrom(<span class="number">1</span>,:),X) <span class="comment">%将随机初始化种群的第一种解用来画出路径图</span></span><br><span class="line">pause(<span class="number">0.0001</span>)  <span class="comment">%用来放慢速度  和 C++ 中的Time类似</span></span><br><span class="line"><span class="comment">%% 输出随机解的路径和总距离</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'初始种群中的一个随机值:'</span>)</span><br><span class="line">OutputPath(Chrom(<span class="number">1</span>,:));  <span class="comment">%输出路径</span></span><br><span class="line">Rlength=PathLength(D,Chrom(<span class="number">1</span>,:)); <span class="comment">%根据距离矩阵和路线来计算路径长度</span></span><br><span class="line"><span class="built_in">disp</span>(\[<span class="string">'总距离：'</span>,num2str(Rlength)\]);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'</span>)</span><br><span class="line"><span class="comment">%% 优化</span></span><br><span class="line">gen=<span class="number">0</span>;  <span class="comment">%初始化迭代代数</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="built_in">hold</span> on;box on</span><br><span class="line">xlim(\[<span class="number">0</span>,MAXGEN\])</span><br><span class="line">title(<span class="string">'优化过程'</span>)</span><br><span class="line">xlabel(<span class="string">'代数'</span>)</span><br><span class="line">ylabel(<span class="string">'最优值'</span>)</span><br><span class="line">ObjV=PathLength(D,Chrom);  <span class="comment">%计算每一代的路径长度</span></span><br><span class="line">preObjV=<span class="built_in">min</span>(ObjV); <span class="comment">%得到最小的路径长度</span></span><br><span class="line"><span class="keyword">while</span> gen&lt;MAXGEN</span><br><span class="line">    <span class="comment">%% 计算适应度</span></span><br><span class="line">    ObjV=PathLength(D,Chrom);  <span class="comment">%计算每一代的路径长度</span></span><br><span class="line">    <span class="comment">% fprintf('%d   %1.10f\\n',gen,min(ObjV))</span></span><br><span class="line">    line(\[gen<span class="number">-1</span>,gen\],\[preObjV,<span class="built_in">min</span>(ObjV)\]); <span class="comment">% 用来在图上画出适应度减少的过程</span></span><br><span class="line">    pause(<span class="number">0.0001</span>) <span class="comment">% 延迟效果</span></span><br><span class="line">    preObjV=<span class="built_in">min</span>(ObjV); <span class="comment">% 得到最小的路径长度</span></span><br><span class="line">    FitnV=Fitness(ObjV);  <span class="comment">% 计算适应度（路径越长倒数越小，方便选择）</span></span><br><span class="line">    <span class="comment">%% 选择</span></span><br><span class="line">    SelCh=Select(Chrom,FitnV,GGAP); <span class="comment">%根据适应度和代沟进行子代的选择</span></span><br><span class="line">    <span class="comment">%% 交叉操作</span></span><br><span class="line">    SelCh=Recombin(SelCh,Pc);</span><br><span class="line">    <span class="comment">%% 变异</span></span><br><span class="line">    SelCh=Mutate(SelCh,Pm);</span><br><span class="line">    <span class="comment">%% 逆转操作</span></span><br><span class="line">    SelCh=Reverse(SelCh,D);</span><br><span class="line">    <span class="comment">%% 重插入子代的新种群</span></span><br><span class="line">    Chrom=Reins(Chrom,SelCh,ObjV);</span><br><span class="line">    <span class="comment">%% 更新迭代次数</span></span><br><span class="line">    gen=gen+<span class="number">1</span> ;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%% 画出最优解的路径图</span></span><br><span class="line">ObjV=PathLength(D,Chrom);  <span class="comment">%计算路径长度</span></span><br><span class="line">\[minObjV,minInd\]=<span class="built_in">min</span>(ObjV);</span><br><span class="line">DrawPath(Chrom(minInd(<span class="number">1</span>),:),X)</span><br><span class="line"><span class="comment">%% 输出最优解的路径和总距离</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'最优解:'</span>)</span><br><span class="line">p=OutputPath(Chrom(minInd(<span class="number">1</span>),:));</span><br><span class="line"><span class="built_in">disp</span>(\[<span class="string">'总距离：'</span>,num2str(ObjV(minInd(<span class="number">1</span>)))\]);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'-------------------------------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line">**计算距离的函数：**</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 计算两两城市之间的距离</span></span><br><span class="line"><span class="comment">%输入 a  各城市的位置坐标</span></span><br><span class="line"><span class="comment">%输出 D  两两城市之间的距离</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>=<span class="title">Distanse</span><span class="params">(a)</span></span></span><br><span class="line">row=<span class="built_in">size</span>(a,<span class="number">1</span>); <span class="comment">%得到城市的个数</span></span><br><span class="line">D=<span class="built_in">zeros</span>(row,row); <span class="comment">%初始化一个全为0的距离矩阵</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row  <span class="comment">%每个城市所对应的距离矩阵的那一行</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="built_in">i</span>+<span class="number">1</span>:row <span class="comment">%遍历该行出该城市之外往后的所有城市</span></span><br><span class="line">        D(<span class="built_in">i</span>,<span class="built_in">j</span>)=((a(<span class="built_in">i</span>,<span class="number">1</span>)-a(<span class="built_in">j</span>,<span class="number">1</span>))^<span class="number">2</span>+(a(<span class="built_in">i</span>,<span class="number">2</span>)-a(<span class="built_in">j</span>,<span class="number">2</span>))^<span class="number">2</span>)^<span class="number">0.5</span>;  <span class="comment">%根据坐标计算距离</span></span><br><span class="line">        D(<span class="built_in">j</span>,<span class="built_in">i</span>)=D(<span class="built_in">i</span>,<span class="built_in">j</span>); <span class="comment">% 实现对称</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">**初始化种群的函数：**</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 初始化种群</span></span><br><span class="line"><span class="comment">%输入：</span></span><br><span class="line"><span class="comment">% NIND：种群大小</span></span><br><span class="line"><span class="comment">% N：   个体染色体长度（这里为城市的个数）  </span></span><br><span class="line"><span class="comment">%输出：</span></span><br><span class="line"><span class="comment">%初始种群</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Chrom</span>=<span class="title">InitPop</span><span class="params">(NIND,N)</span></span></span><br><span class="line">Chrom=<span class="built_in">zeros</span>(NIND,N);<span class="comment">%初始一个全0位的矩阵用于存储种群</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:NIND <span class="comment">%遍历每个染色体（个体）</span></span><br><span class="line">    Chrom(<span class="built_in">i</span>,:)=randperm(N);<span class="comment">%随机生成初始种群  randperm的作用是生成N个由1-N构成的序列（里面元素不能重复）</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">**画出城市之间路径的函数：**</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 画路径函数</span></span><br><span class="line"><span class="comment">%输入</span></span><br><span class="line"><span class="comment">% Chrom  待画路径   </span></span><br><span class="line"><span class="comment">% X      各城市坐标位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DrawPath</span><span class="params">(Chrom,X)</span></span></span><br><span class="line">R=\[Chrom(<span class="number">1</span>,:) Chrom(<span class="number">1</span>,<span class="number">1</span>)\]; <span class="comment">%一个随机解(个体) 并且将基因中首个城市添加到基因末尾 用来构成一个循环</span></span><br><span class="line"><span class="comment">% 开始画图</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="built_in">plot</span>(X(:,<span class="number">1</span>),X(:,<span class="number">2</span>),<span class="string">'o'</span>,<span class="string">'color'</span>,\[<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>\])</span><br><span class="line"><span class="built_in">plot</span>(X(Chrom(<span class="number">1</span>,<span class="number">1</span>),<span class="number">1</span>),X(Chrom(<span class="number">1</span>,<span class="number">1</span>),<span class="number">2</span>),<span class="string">'rv'</span>,<span class="string">'MarkerSize'</span>,<span class="number">20</span>)</span><br><span class="line"><span class="comment">% 将每个城市对应的点画出来</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">size</span>(X,<span class="number">1</span>)</span><br><span class="line">    text(X(<span class="built_in">i</span>,<span class="number">1</span>)+<span class="number">0.05</span>,X(<span class="built_in">i</span>,<span class="number">2</span>)+<span class="number">0.05</span>,num2str(<span class="built_in">i</span>),<span class="string">'color'</span>,\[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>\]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">A=X(R,:);</span><br><span class="line">row=<span class="built_in">size</span>(A,<span class="number">1</span>);</span><br><span class="line"><span class="comment">% 根据得到的R序列进行连线</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:row</span><br><span class="line">    \[arrowx,arrowy\] = dsxy2figxy(gca,A(<span class="built_in">i</span><span class="number">-1</span>:<span class="built_in">i</span>,<span class="number">1</span>),A(<span class="built_in">i</span><span class="number">-1</span>:<span class="built_in">i</span>,<span class="number">2</span>));<span class="comment">%坐标转换</span></span><br><span class="line">    annotation(<span class="string">'textarrow'</span>,arrowx,arrowy,<span class="string">'HeadWidth'</span>,<span class="number">8</span>,<span class="string">'color'</span>,\[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>\]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">hold</span> off</span><br><span class="line">xlabel(<span class="string">'横坐标'</span>)</span><br><span class="line">ylabel(<span class="string">'纵坐标'</span>)</span><br><span class="line">title(<span class="string">'轨迹图'</span>)</span><br><span class="line">box on</span><br><span class="line"></span><br><span class="line">**计算该种路径的总距离的函数：**</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 计算各个体的路径长度</span></span><br><span class="line"><span class="comment">% 输入：</span></span><br><span class="line"><span class="comment">% D     两两城市之间的距离</span></span><br><span class="line"><span class="comment">% Chrom 个体的轨迹</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">len</span>=<span class="title">PathLength</span><span class="params">(D,Chrom)</span> </span></span><br><span class="line">\[row,col\]=<span class="built_in">size</span>(D); <span class="comment">%得到距离矩阵的长宽</span></span><br><span class="line">NIND=<span class="built_in">size</span>(Chrom,<span class="number">1</span>); <span class="comment">%得到种群的总个数</span></span><br><span class="line">len=<span class="built_in">zeros</span>(NIND,<span class="number">1</span>); <span class="comment">%初始化一个用来存储距离的矩阵</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:NIND</span><br><span class="line">    p=\[Chrom(<span class="built_in">i</span>,:) Chrom(<span class="built_in">i</span>,<span class="number">1</span>)\]; <span class="comment">%得到该基因对应的城市路线</span></span><br><span class="line">    i1=p(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>);</span><br><span class="line">    i2=p(<span class="number">2</span>:<span class="keyword">end</span>);</span><br><span class="line">    len(<span class="built_in">i</span>,<span class="number">1</span>)=sum(D((i1<span class="number">-1</span>)*col+i2)); <span class="comment">%进行距离计算</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">**输出路径的函数：**</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 输出路径函数</span></span><br><span class="line"><span class="comment">%输入：R 路径</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p</span>=<span class="title">OutputPath</span><span class="params">(R)</span></span></span><br><span class="line">R=\[R,R(<span class="number">1</span>)\]; <span class="comment">%同样要构成一个城市循环 从A-&gt;X-&gt;……-&gt;A </span></span><br><span class="line">N=<span class="built_in">length</span>(R);  <span class="comment">%得到城市总数</span></span><br><span class="line">p=num2str(R(<span class="number">1</span>));  <span class="comment">% 强制类型转换</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:N</span><br><span class="line">    p=\[p,<span class="string">'—&gt;'</span>,num2str(R(<span class="built_in">i</span>))\];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>(p)</span><br><span class="line"></span><br><span class="line">**适应度计算函数：**</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 适配值函数     </span></span><br><span class="line"><span class="comment">%输入：</span></span><br><span class="line"><span class="comment">%个体的长度（TSP的距离）</span></span><br><span class="line"><span class="comment">%输出：</span></span><br><span class="line"><span class="comment">%个体的适应度值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FitnV</span>=<span class="title">Fitness</span><span class="params">(len)</span></span></span><br><span class="line">FitnV=<span class="number">1.</span>/len; <span class="comment">%倒数计算</span></span><br><span class="line"></span><br><span class="line">**选择函数：**</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 选择操作</span></span><br><span class="line"><span class="comment">%输入</span></span><br><span class="line"><span class="comment">%Chrom 种群</span></span><br><span class="line"><span class="comment">%FitnV 适应度值</span></span><br><span class="line"><span class="comment">%GGAP：代沟</span></span><br><span class="line"><span class="comment">%输出</span></span><br><span class="line"><span class="comment">%SelCh  被选择的个体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelCh</span>=<span class="title">Select</span><span class="params">(Chrom,FitnV,GGAP)</span></span></span><br><span class="line">NIND=<span class="built_in">size</span>(Chrom,<span class="number">1</span>); <span class="comment">%得到种群的染色体个数</span></span><br><span class="line">NSel=<span class="built_in">max</span>(<span class="built_in">floor</span>(NIND*GGAP+<span class="number">.5</span>),<span class="number">2</span>); <span class="comment">%通过代沟计算能够保留下的来的个体</span></span><br><span class="line">ChrIx=Sus(FitnV,NSel); <span class="comment">%进行选择</span></span><br><span class="line">SelCh=Chrom(ChrIx,:);</span><br><span class="line"></span><br><span class="line">Sus函数：</span><br><span class="line"></span><br><span class="line"><span class="comment">% 输入:</span></span><br><span class="line"><span class="comment">%FitnV  个体的适应度值</span></span><br><span class="line"><span class="comment">%Nsel   被选择个体的数目</span></span><br><span class="line"><span class="comment">% 输出:</span></span><br><span class="line"><span class="comment">%NewChrIx  被选择个体的索引号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NewChrIx</span> = <span class="title">Sus</span><span class="params">(FitnV,Nsel)</span></span></span><br><span class="line">\[Nind,<span class="built_in">ans</span>\] = <span class="built_in">size</span>(FitnV); <span class="comment">%得到种群个体个数</span></span><br><span class="line">cumfit = cumsum(FitnV); <span class="comment">%依次累加适应度并输出 每次累加的内容 从小到大</span></span><br><span class="line">trials = cumfit(Nind) / Nsel * (<span class="built_in">rand</span> + (<span class="number">0</span>:Nsel<span class="number">-1</span>)'); <span class="comment">%计算出可以选择出适当个数的染色体的适应度标值</span></span><br><span class="line">Mf = cumfit(:, <span class="built_in">ones</span>(<span class="number">1</span>, Nsel));</span><br><span class="line">Mt = trials(:, <span class="built_in">ones</span>(<span class="number">1</span>, Nind))';</span><br><span class="line">\[NewChrIx, <span class="built_in">ans</span>\] = <span class="built_in">find</span>(Mt &lt; Mf &amp; \[ <span class="built_in">zeros</span>(<span class="number">1</span>, Nsel); Mf(<span class="number">1</span>:Nind<span class="number">-1</span>, :) \] &lt;= Mt); <span class="comment">%根据适应度标志选择能够遗传下来的个体</span></span><br><span class="line">\[<span class="built_in">ans</span>, shuf\] = <span class="built_in">sort</span>(<span class="built_in">rand</span>(Nsel, <span class="number">1</span>));</span><br><span class="line">NewChrIx = NewChrIx(shuf);</span><br><span class="line"></span><br><span class="line">**交叉操作函数：**</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 交叉操作</span></span><br><span class="line"><span class="comment">% 输入</span></span><br><span class="line"><span class="comment">%SelCh  被选择的个体</span></span><br><span class="line"><span class="comment">%Pc     交叉概率</span></span><br><span class="line"><span class="comment">%输出：</span></span><br><span class="line"><span class="comment">% SelCh 交叉后的个体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelCh</span>=<span class="title">Recombin</span><span class="params">(SelCh,Pc)</span></span></span><br><span class="line">NSel=<span class="built_in">size</span>(SelCh,<span class="number">1</span>); <span class="comment">%得到被选择之后种群的个数</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="number">2</span>:NSel-<span class="built_in">mod</span>(NSel,<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> Pc&gt;=<span class="built_in">rand</span> <span class="comment">%交叉概率Pc</span></span><br><span class="line">        \[SelCh(<span class="built_in">i</span>,:),SelCh(<span class="built_in">i</span>+<span class="number">1</span>,:)\]=intercross(SelCh(<span class="built_in">i</span>,:),SelCh(<span class="built_in">i</span>+<span class="number">1</span>,:)); <span class="comment">%如果满足交叉概率</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%输入：</span></span><br><span class="line"><span class="comment">%a和b为两个待交叉的个体</span></span><br><span class="line"><span class="comment">%输出：</span></span><br><span class="line"><span class="comment">%a和b为交叉后得到的两个个体</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> \<span class="params">[a,b\]</span>=<span class="title">intercross</span><span class="params">(a,b)</span></span></span><br><span class="line">L = <span class="built_in">length</span>(a); <span class="comment">%得到个体的长度</span></span><br><span class="line">r1 = randsrc(<span class="number">1</span>,<span class="number">1</span>,\[<span class="number">1</span>:L\]); <span class="comment">%表示产生1行1列在区间&#123;1，L&#125;之间的随机数</span></span><br><span class="line">r2 = randsrc(<span class="number">1</span>,<span class="number">1</span>,\[<span class="number">1</span>:L\]); <span class="comment">%产生第二个位置</span></span><br><span class="line"><span class="keyword">if</span> r1 ~= r2  <span class="comment">%~= 为不等于的意思</span></span><br><span class="line">    a0=a;b0=b;</span><br><span class="line">    s=<span class="built_in">min</span>(\[r1,r2\]);</span><br><span class="line">    e=<span class="built_in">max</span>(\[r1,r2\]);</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=s:e</span><br><span class="line">        a1=a;b1=b;</span><br><span class="line">        <span class="comment">%将对应的位置进行交换</span></span><br><span class="line">        a(<span class="built_in">i</span>)=b0(<span class="built_in">i</span>);</span><br><span class="line">        b(<span class="built_in">i</span>)=a0(<span class="built_in">i</span>);</span><br><span class="line">        x=<span class="built_in">find</span>(a==a(<span class="built_in">i</span>));</span><br><span class="line">        y=<span class="built_in">find</span>(b==b(<span class="built_in">i</span>));</span><br><span class="line">        i1=x(x~=<span class="built_in">i</span>);</span><br><span class="line">        i2=y(y~=<span class="built_in">i</span>);</span><br><span class="line">        <span class="comment">%处理如果该染色体中存在该基因</span></span><br><span class="line">        <span class="keyword">if</span> ~<span class="built_in">isempty</span>(i1)</span><br><span class="line">            a(i1)=a1(<span class="built_in">i</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">if</span> ~<span class="built_in">isempty</span>(i2)</span><br><span class="line">            b(i2)=b1(<span class="built_in">i</span>);</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">**变异操作函数：**</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 变异操作</span></span><br><span class="line"><span class="comment">%输入：</span></span><br><span class="line"><span class="comment">%SelCh  被选择的个体</span></span><br><span class="line"><span class="comment">%Pm     变异概率</span></span><br><span class="line"><span class="comment">%输出：</span></span><br><span class="line"><span class="comment">% SelCh 变异后的个体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelCh</span>=<span class="title">Mutate</span><span class="params">(SelCh,Pm)</span></span></span><br><span class="line">\[NSel,L\]=<span class="built_in">size</span>(SelCh); <span class="comment">%得到遗传之后的种群个体个数和基因长度</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:NSel</span><br><span class="line">    <span class="keyword">if</span> Pm&gt;=<span class="built_in">rand</span> <span class="comment">%如果随机数满足变异概率则进行变异</span></span><br><span class="line">        R=randperm(L); <span class="comment">%随机一个新的序列</span></span><br><span class="line">        SelCh(<span class="built_in">i</span>,R(<span class="number">1</span>:<span class="number">2</span>))=SelCh(<span class="built_in">i</span>,R(<span class="number">2</span>:<span class="number">-1</span>:<span class="number">1</span>)); <span class="comment">%将该序列插入到已有的种群中</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">**逆转操作函数：**</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 进化逆转函数</span></span><br><span class="line"><span class="comment">%输入</span></span><br><span class="line"><span class="comment">%SelCh 被选择的个体</span></span><br><span class="line"><span class="comment">%D     个城市的距离矩阵</span></span><br><span class="line"><span class="comment">%输出</span></span><br><span class="line"><span class="comment">%SelCh  进化逆转后的个体</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelCh</span>=<span class="title">Reverse</span><span class="params">(SelCh,D)</span></span></span><br><span class="line"><span class="comment">%该函数的具体操作是随机选两个基因的位置进行交换，这样有利于基因的多样性</span></span><br><span class="line">\[row,col\]=<span class="built_in">size</span>(SelCh);</span><br><span class="line">ObjV=PathLength(D,SelCh);  <span class="comment">%计算路径长度</span></span><br><span class="line">SelCh1=SelCh;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row</span><br><span class="line">    r1=randsrc(<span class="number">1</span>,<span class="number">1</span>,\[<span class="number">1</span>:col\]);<span class="comment">%随机位置1</span></span><br><span class="line">    r2=randsrc(<span class="number">1</span>,<span class="number">1</span>,\[<span class="number">1</span>:col\]);<span class="comment">%随机位置2</span></span><br><span class="line">    mininverse=<span class="built_in">min</span>(\[r1 r2\]);<span class="comment">%找到谁大谁小</span></span><br><span class="line">    maxinverse=<span class="built_in">max</span>(\[r1 r2\]);</span><br><span class="line">    SelCh1(<span class="built_in">i</span>,mininverse:maxinverse)=SelCh1(<span class="built_in">i</span>,maxinverse:<span class="number">-1</span>:mininverse); <span class="comment">%进行交换</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">ObjV1=PathLength(D,SelCh1);  <span class="comment">%计算路径长度</span></span><br><span class="line">index=ObjV1&lt;ObjV;</span><br><span class="line">SelCh(index,:)=SelCh1(index,:);</span><br><span class="line"></span><br><span class="line">**重新插入新代数的函数：**</span><br><span class="line"></span><br><span class="line"> <span class="comment">%% 重插入子代的新种群</span></span><br><span class="line"> <span class="comment">%输入：</span></span><br><span class="line"> <span class="comment">%Chrom  父代的种群</span></span><br><span class="line"> <span class="comment">%SelCh  子代种群</span></span><br><span class="line"> <span class="comment">%ObjV   父代适应度</span></span><br><span class="line"> <span class="comment">%输出</span></span><br><span class="line"> <span class="comment">% Chrom  组合父代与子代后得到的新种群</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Chrom</span>=<span class="title">Reins</span><span class="params">(Chrom,SelCh,ObjV)</span></span></span><br><span class="line">NIND=<span class="built_in">size</span>(Chrom,<span class="number">1</span>); <span class="comment">% 得到旧的种群个体个数</span></span><br><span class="line">NSel=<span class="built_in">size</span>(SelCh,<span class="number">1</span>); <span class="comment">% 得到新的种群个体个数</span></span><br><span class="line">\[TobjV,index\]=<span class="built_in">sort</span>(ObjV); <span class="comment">%按照路径长度进行排序</span></span><br><span class="line">Chrom=\[Chrom(index(<span class="number">1</span>:NIND-NSel),:);SelCh\]; <span class="comment">%进行插入操作</span></span><br></pre></td></tr></table></figure>
<p>结果： 初始种群中的一个随机值: 13—&gt;12—&gt;9—&gt;6—&gt;8—&gt;11—&gt;5—&gt;10—&gt;1—&gt;3—&gt;14—&gt;2—&gt;7—&gt;4—&gt;13 总距离：65.9898 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 最优解: 12—&gt;6—&gt;5—&gt;4—&gt;3—&gt;14—&gt;2—&gt;1—&gt;10—&gt;9—&gt;11—&gt;8—&gt;13—&gt;7—&gt;12 总距离：29.3405 <strong>随机生成的路径图：</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/08/1.png" alt=""> <strong>最优结果的路径图：</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/08/3.png" alt=""> <strong>迭代优化过程：</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/08/2.png" alt=""> End！</p>
]]></content>
      <categories>
        <category>GA</category>
        <category>TSP问题</category>
        <category>优化算法</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>GA</tag>
        <tag>TSP</tag>
        <tag>优化算法</tag>
      </tags>
  </entry>
  <entry>
    <title>基于遗传算法的BP神经网络优化算法</title>
    <url>/2018/07/27/ji-yu-yi-chuan-suan-fa-de-bp-shen-jing-wang-luo-you-hua-suan-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180727195910.png" alt=""> BP网络是一类多层的前馈神经网络，它的名字源于在网络训练的过程中，调整网络的权值的算法是误差反向传播的学习算法，即为BP学习算法。 它的学习规则是使用最速下降法，通过反向传播来不断调整网络的权值和阈值，使网络的误差平方和最小。BP神经网络模型拓扑结构包括输入层（input）、隐层(hide layer)和输出层(output layer)。   对于遗传算法的基本要素包含：染色体编码方法、适应度函数、遗传操作和运行参数。</p>
<ul>
<li>染色体编码方法是指个体的编码方法，目前包括二进制法、实数法等。二进制法是指把个体编码成为一个二进制串，实数法是指把个体编码成为一个实数。</li>
<li>适应度函数是指根据进化目标编写的计算个体适应度值的函数，通过适应度函数计算每个个体的适应度值，提供给选择算子进行选择。</li>
<li>遗传操作是指选择操作、交叉操作和变异操作。</li>
<li>运行参数是遗传算法在初始化时确定的参数，主要包括群体大小M、遗传代数G、交叉概率Pl和变异概率Pm。</li>
</ul>
<p>案例描述： 以某拖拉机的齿轮箱为工程背景，使用基于遗传算法的BP神经网络进行齿轮箱故障的诊断。统计表明，齿轮箱故障中60%左右都是有齿轮箱故障导致的，所以这里之研究齿轮的故障，这里选取频域中的几个特征量。频域中齿轮故障比较明显的是在啮合频率处的边缘带上。所以在频域特征信号的提取中选取了在2、4、6挡时，在1、2、3轴的边频带族fs±nfz处的幅值Ai,j1、Ai,j2和Ai,j3，其中fs为齿轮的啮合频率，fz为轴的转频，n=1,2,3,，i=2,4,6表示档位j=1,2,3表示轴的序号，由于在2轴和3轴上有两对齿轮啮合，所以1、2分别表示两个啮合频率。这样，网络的输入就是一个15维的向量。因为这些数据具有不同的量纲和量级所以在输入神经网络之前首先进行归一化处理。 齿轮箱状态数据样本： <img src="http://47.100.4.8/wp-content/uploads/2018/07/1-6.png" alt=""> 从表中可以看出齿轮状态分为三种故障模式，因此可以采用如下的形式来表示输出。 无故障（1,0,0）、齿根裂纹（0,1,0）、断齿（0,0,1） 为了对训练好的网络进行测试，再增加三组测试数据 <strong>测试样本数据</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/07/2-4.png" alt=""> <strong>算法流程：</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/07/3-3.png" alt=""> 因为遗传算法优化参数是BP神经网络的初始权值和阙值，只要网络结构已知，权值和阙值的个数就已知了。   神经元阙值介绍：阙值为一个范围，当外界的某个值超过阙值，就会引起某一变化，不超过阙值，则不会引起变化，一般输入层是没有阙值的因为它只负责处理数据，阙值一般在隐含层和输出层等处理数据的层数有。   神经网络算法实现：</p>
<ul>
<li>网络创建</li>
</ul>
<p>BP网络结构的确定有以下两条比较重要的指导原则。</p>
<ul>
<li>对于一般的模式识别问题，三层网络可以很好地解决问题。</li>
<li>在三层网络中，隐含层神经网络个数n2和输入层神经元个数n1之间有近似关系：</li>
</ul>
<p>n2 = 2 * n1 +1 本案例中，由于样本有15个输入参数，3个输出参数，所以这里n2取值为31，设置的BP神经网络 结构为15-31-3，即输入层有15个节点，隐含层有31个节点，输出层有3个节点，因此总有15*31+31*3=558个权值（边），31+3=34个阙值，所以遗传算法优化参数的个数为558+34=592.使用训练数据进行网络训练，使用测试数据对训练后的网络进行测试。把测试样本的测试误差的范数作为衡量网络的一个泛化能力，再通过误差范数计算个体的适应度值，个体的误差范数越小，个体适应度值越大，该个体越优。 神经网络的隐含层神经元的传递函数采用S型正切函数tansig（），输出层神经元的传递函数采用S型对数函数logsig（），这是由于输出模式为0-1，正好满足网络的输出要求。假定输入样本矩阵为P，创建网络可以使用如下代码： Net=newff（minmax（P），[31,3],(‘tansig’,’logsig’)，‘trainlm’）</p>
<ul>
<li>网络训练和测试</li>
</ul>
<p>网络训练是一个不断修正权值和阙值的过程，使得网络的输出误差越来越小。   <strong>遗传算法实现</strong> 遗传算法优化BP神经网络是用遗传算法来优化BP神经网络的初始权重值和阙值，使优化后的BP神经网络能够更好地进行样本预测。</p>
<ul>
<li>种群初始化</li>
</ul>
<p>个体编码使用二进制编码，每个个体均为一个二进制串，由输入层与隐含层连接权值、隐含层阙值与输出层连接权值、输出层阙值四部分组成，每个阙值和权值都使用二进制编码，将所有权值和阙值的编码连接起来即为一个个体的编码。 <img src="http://47.100.4.8/wp-content/uploads/2018/07/4-2.png" alt=""> 465+31+93+3=592,假设权值和阙值的编码均为10位二进制数，那么个体的总编码长度为5920位。前4650位为输入层与隐含层连接权值编码；4561<sub>4960位为隐含层阙值编码；4961</sub>5890位为隐含层与输出层连接权值编码；5890~5920位为输出层阙值编码。</p>
<ul>
<li>适应度函数</li>
</ul>
<p>适应度函数采用排序的适应度分配函数：FitnV = ranking（obj），其中obj为目标函数的目标值。</p>
<ul>
<li>选择算子</li>
</ul>
<p>采用随机遍历抽样（sus 轮盘赌算法）选择</p>
<ul>
<li>交叉算子</li>
</ul>
<p>采用最简单的单点交叉算子</p>
<ul>
<li>变异算子</li>
</ul>
<p>以一定的概率产生变异基因树，用随机方法选择发生变异的基因，如果所选的基因的编码为1，则变为0，反之。   <strong>遗传算法相关参数设定：</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/07/5-2.png" alt=""> <strong>训练网络：</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">function</span> <span class="string">rep</span> <span class="string">=</span> <span class="string">BPfun(x,P,T,hiddennum,P\_test,T\_test)</span></span><br><span class="line"><span class="string">%训练与测试BP网络</span></span><br><span class="line"><span class="string">%输入</span></span><br><span class="line"><span class="string">%x</span> <span class="string">一个个体的初始权值和阙值</span></span><br><span class="line"><span class="string">%P</span> <span class="string">训练样本输入</span></span><br><span class="line"><span class="string">%T</span> <span class="string">训练样本输出</span></span><br><span class="line"><span class="string">%</span> <span class="string">hiddennum：隐含层神经元数</span></span><br><span class="line"><span class="string">%</span> <span class="string">P_test</span> <span class="string">测试样本输入</span></span><br><span class="line"><span class="string">%</span> <span class="string">T_test</span> <span class="string">测试样本输出</span></span><br><span class="line"><span class="string">%</span> <span class="string">rep</span> <span class="string">预测样本的预测误差的范数</span></span><br><span class="line"></span><br><span class="line"><span class="string">inputnum</span> <span class="string">=</span> <span class="string">size(P,1);</span>  <span class="string">%得到输入层神经元的个数</span></span><br><span class="line"><span class="string">outputnum</span> <span class="string">=</span> <span class="string">size(T,1);</span> <span class="string">%得到输出层神经元的个数</span></span><br><span class="line"></span><br><span class="line"><span class="string">%建立BP网络</span></span><br><span class="line"><span class="string">net</span> <span class="string">=</span> <span class="string">newff(minmax(P),\[hiddennum,outputnum\],&#123;'tansig','logsig'&#125;,'trainlm');</span></span><br><span class="line"></span><br><span class="line"><span class="string">%设置网络参数：训练次数为1000，训练目标为0.01，学习速率为0.1</span></span><br><span class="line"><span class="string">net.trainParam.epochs</span> <span class="string">=</span> <span class="number">1000</span><span class="string">;</span></span><br><span class="line"><span class="string">net.trainParam.goal</span> <span class="string">=</span> <span class="number">0.01</span><span class="string">;</span></span><br><span class="line"><span class="string">LP.lr</span> <span class="string">=</span> <span class="number">0.1</span><span class="string">;</span></span><br><span class="line"><span class="string">net.trainParam.show</span> <span class="string">=</span> <span class="string">NaN;</span></span><br><span class="line"><span class="string">net.trainParam.showwindow</span> <span class="string">=</span> <span class="literal">false</span><span class="string">;</span> <span class="string">%使用高版本matlab不显示图形框</span></span><br><span class="line"></span><br><span class="line"><span class="string">%设置BP网络的初始权值和阙值</span></span><br><span class="line"><span class="string">w1num</span> <span class="string">=</span> <span class="string">inputnum</span> <span class="string">*</span> <span class="string">hiddennum;</span>  <span class="string">%计算输入层到隐含层的权值个数</span></span><br><span class="line"><span class="string">w2num</span> <span class="string">=</span> <span class="string">outputnum</span> <span class="string">*</span> <span class="string">hiddennum;</span> <span class="string">%计算隐含层到输出层的权值个数</span></span><br><span class="line"><span class="string">%按照编码规则分别给权值和阙值赋值(实质为解码得到权值和阙值)</span></span><br><span class="line"><span class="string">w1</span> <span class="string">=</span> <span class="string">x(1:w1num);</span> <span class="string">%初始输入层到隐含层的权值</span></span><br><span class="line"><span class="string">B1</span> <span class="string">=</span> <span class="string">x(w1num+1:w1num+hiddennum);</span> <span class="string">%隐含层神经元阙值</span></span><br><span class="line"><span class="string">w2=x(w1num</span> <span class="string">+</span> <span class="string">hiddennum</span> <span class="string">+</span> <span class="number">1</span><span class="string">:w1num</span> <span class="string">+</span> <span class="string">hiddennum</span> <span class="string">+</span> <span class="string">w2num);</span> <span class="string">%初始隐含层到输出层的权值</span></span><br><span class="line"><span class="string">B2=x(w1num</span> <span class="string">+</span> <span class="string">hiddennum</span> <span class="string">+</span> <span class="string">w2num</span> <span class="string">+</span> <span class="number">1</span><span class="string">:w1num</span> <span class="string">+</span> <span class="string">hiddennum</span> <span class="string">+</span> <span class="string">w2num</span> <span class="string">+</span> <span class="string">outputnum);</span> <span class="string">%输出层阙值</span></span><br><span class="line"><span class="string">net.iw&#123;1,1&#125;</span> <span class="string">=</span> <span class="string">reshape(w1,hiddennum,inputnum);</span> <span class="string">%将输入层到隐含层的权值转换为神经网络需要的格式</span></span><br><span class="line"><span class="string">net.lw&#123;2,1&#125;=</span> <span class="string">reshape(w2,outputnum,hiddennum);</span> <span class="string">%将隐含层到输出层的权值转换为神经网络需要的格式</span></span><br><span class="line"><span class="string">net.b&#123;1&#125;</span> <span class="string">=</span> <span class="string">reshape(B1,hiddennum,1);</span> <span class="string">%将隐含层的阙值转换为对应的格式</span></span><br><span class="line"><span class="string">net.b&#123;2&#125;</span> <span class="string">=</span> <span class="string">reshape(B2,outputnum,1);</span> <span class="string">%将输出层的阙值转换为对应的格式</span></span><br><span class="line"><span class="string">%训练网络</span></span><br><span class="line"><span class="string">net</span> <span class="string">=</span> <span class="string">train(net,P,T);</span></span><br><span class="line"><span class="string">%测试网络</span></span><br><span class="line"><span class="string">Y</span> <span class="string">=</span> <span class="string">sim(net,P_test);</span></span><br><span class="line"><span class="string">rep</span> <span class="string">=</span> <span class="string">norm(Y-T_test);</span></span><br><span class="line"></span><br><span class="line"><span class="string">**主函数：**</span></span><br><span class="line"></span><br><span class="line"><span class="string">clc</span></span><br><span class="line"><span class="string">clear</span> <span class="string">all</span></span><br><span class="line"><span class="string">close</span> <span class="string">all</span></span><br><span class="line"><span class="string">%%加载神经网络的训练样本，测试样本每列一个样本，输入P，输出T</span></span><br><span class="line"><span class="string">%样本数据就是前面问题中列出的数据</span></span><br><span class="line"><span class="string">P1</span> <span class="string">=</span> <span class="string">\[0.2286</span> <span class="number">0.1292</span> <span class="number">0.0720</span> <span class="number">0.1592</span> <span class="number">0.1335</span> <span class="number">0.0733</span> <span class="number">0.1159</span> <span class="number">0.0940</span> <span class="number">0.0522</span> <span class="number">0.1345</span> <span class="number">0.0090</span> <span class="number">0.1260</span> <span class="number">0.3619</span> <span class="number">0.0690</span> <span class="number">0.1828</span> <span class="number">0.2090</span> <span class="number">0.0947</span> <span class="number">0.1393</span> <span class="number">0.1387</span> <span class="number">0.2558</span> <span class="number">0.0900</span> <span class="number">0.0771</span> <span class="number">0.0882</span> <span class="number">0.0393</span> <span class="number">0.1430</span> <span class="number">0.0126</span> <span class="number">0.1670</span> <span class="number">0.2450</span> <span class="number">0.0508</span> <span class="number">0.1328</span> <span class="number">0.0442</span> <span class="number">0.0880</span> <span class="number">0.1147</span> <span class="number">0.0563</span> <span class="number">0.3347</span> <span class="number">0.1150</span> <span class="number">0.1453</span> <span class="number">0.0429</span> <span class="number">0.1818</span> <span class="number">0.0378</span> <span class="number">0.0092</span> <span class="number">0.2251</span> <span class="number">0.1516</span> <span class="number">0.0858</span> <span class="number">0.0670</span> <span class="number">0.2603</span> <span class="number">0.1715</span> <span class="number">0.0702</span> <span class="number">0.2711</span> <span class="number">0.1491</span> <span class="number">0.1330</span> <span class="number">0.0986</span> <span class="number">0.1911</span> <span class="number">0.2545</span> <span class="number">0.0871</span> <span class="number">0.0060</span> <span class="number">0.1793</span> <span class="number">0.1002</span> <span class="number">0.0789</span> <span class="number">0.0909</span> <span class="number">0.3690</span> <span class="number">0.2222</span> <span class="number">0.0562</span> <span class="number">0.5157</span> <span class="number">0.1872</span> <span class="number">0.1614</span> <span class="number">0.1425</span> <span class="number">0.1506</span> <span class="number">0.1310</span> <span class="number">0.0500</span> <span class="number">0.0078</span> <span class="number">0.0348</span> <span class="number">0.0451</span> <span class="number">0.0707</span> <span class="number">0.0880</span> <span class="number">0.0359</span> <span class="number">0.1149</span> <span class="number">0.1230</span> <span class="number">0.5460</span> <span class="number">0.1977</span> <span class="number">0.1248</span> <span class="number">0.0624</span> <span class="number">0.0832</span> <span class="number">0.1640</span> <span class="number">0.1002</span> <span class="number">0.0059</span> <span class="number">0.1503</span> <span class="number">0.1837</span> <span class="number">0.1295</span> <span class="number">0.0700</span> <span class="number">0.1759</span> <span class="number">0.2347</span> <span class="number">0.1829</span> <span class="number">0.1811</span> <span class="number">0.2922</span> <span class="number">0.0655</span> <span class="number">0.0774</span> <span class="number">0.0227</span> <span class="number">0.2056</span> <span class="number">0.0925</span> <span class="number">0.0078</span> <span class="number">0.1852</span> <span class="number">0.3501</span> <span class="number">0.1680</span> <span class="number">0.2668</span> <span class="number">0.0724</span> <span class="number">0.1909</span> <span class="number">0.1340</span> <span class="number">0.2409</span> <span class="number">0.2842</span> <span class="number">0.0450</span> <span class="number">0.0824</span> <span class="number">0.1064</span> <span class="number">0.1909</span> <span class="number">0.1586</span> <span class="number">0.0116</span> <span class="number">0.1698</span> <span class="number">0.3644</span> <span class="number">0.2718</span> <span class="number">0.2494</span> <span class="number">0.2634</span> <span class="number">0.2258</span> <span class="number">0.1165</span> <span class="number">0.1154</span> <span class="number">0.1074</span> <span class="number">0.0657</span> <span class="number">0.0610</span> <span class="number">0.2623</span> <span class="number">0.2588</span> <span class="number">0.1155</span> <span class="number">0.0050</span> <span class="number">0.0978</span> <span class="number">0.1511</span> <span class="number">0.2273</span> <span class="number">0.3220</span><span class="string">\];</span></span><br><span class="line"><span class="string">T1</span> <span class="string">=</span> <span class="string">\[2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span><span class="string">\];%1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="string">P1_test</span> <span class="string">=</span> <span class="string">\[0.2101</span> <span class="number">0.0950</span> <span class="number">0.1298</span> <span class="number">0.1359</span> <span class="number">0.2601</span> <span class="number">0.1001</span> <span class="number">0.0753</span> <span class="number">0.0890</span> <span class="number">0.0389</span> <span class="number">0.1451</span> <span class="number">0.0128</span> <span class="number">0.1590</span> <span class="number">0.2452</span> <span class="number">0.0512</span> <span class="number">0.1319</span> <span class="number">0.2593</span> <span class="number">0.1800</span> <span class="number">0.0711</span> <span class="number">0.2801</span> <span class="number">0.1501</span> <span class="number">0.1298</span> <span class="number">0.1001</span> <span class="number">0.1891</span> <span class="number">0.2531</span> <span class="number">0.0875</span> <span class="number">0.0058</span> <span class="number">0.1803</span> <span class="number">0.0992</span> <span class="number">0.0802</span> <span class="number">0.1002</span> <span class="number">0.2599</span> <span class="number">0.2235</span> <span class="number">0.1201</span> <span class="number">0.0071</span> <span class="number">0.1102</span> <span class="number">0.0683</span> <span class="number">0.0621</span> <span class="number">0.2597</span> <span class="number">0.2602</span> <span class="number">0.1167</span> <span class="number">0.0048</span> <span class="number">0.1002</span> <span class="number">0.1521</span> <span class="number">0.2881</span> <span class="number">0.3205</span><span class="string">\];</span></span><br><span class="line"><span class="string">T1_test</span> <span class="string">=</span> <span class="string">\[2</span> <span class="number">1</span> <span class="number">0</span><span class="string">\];%1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="string">P</span> <span class="string">=</span> <span class="string">reshape(P1,9,15);</span></span><br><span class="line"><span class="string">T</span> <span class="string">=</span> <span class="string">reshape(T1,9,1);</span></span><br><span class="line"><span class="string">P\_test</span> <span class="string">=</span> <span class="string">reshape(P1\_test,3,15);</span></span><br><span class="line"><span class="string">T\_test</span> <span class="string">=</span> <span class="string">reshape(T1\_test,3,1);</span></span><br><span class="line"></span><br><span class="line"><span class="string">%设置隐含层神经元的个数</span></span><br><span class="line"><span class="string">hiddennum</span> <span class="string">=</span> <span class="number">31</span><span class="string">;</span></span><br><span class="line"><span class="string">%设置输入向量的最大值和最小值</span></span><br><span class="line"><span class="string">threshold</span> <span class="string">=</span> <span class="string">\[0</span> <span class="number">1</span><span class="string">;0</span> <span class="number">1</span><span class="string">;0</span> <span class="number">1</span><span class="string">;0</span> <span class="number">1</span><span class="string">;0</span> <span class="number">1</span><span class="string">;0</span> <span class="number">1</span><span class="string">;0</span> <span class="number">1</span><span class="string">;0</span> <span class="number">1</span><span class="string">;0</span> <span class="number">1</span><span class="string">;0</span> <span class="number">1</span><span class="string">;0</span> <span class="number">1</span><span class="string">;0</span> <span class="number">1</span><span class="string">;0</span> <span class="number">1</span><span class="string">;0</span> <span class="number">1</span><span class="string">;0</span> <span class="number">1</span><span class="string">\];</span></span><br><span class="line"><span class="string">inputnum</span> <span class="string">=</span> <span class="string">size(P,1);</span> <span class="string">%输入层神经元个数</span></span><br><span class="line"><span class="string">outputnum</span> <span class="string">=</span> <span class="string">size(T,1);</span> <span class="string">%输出层神经元个数</span></span><br><span class="line"><span class="string">w1num</span> <span class="string">=</span> <span class="string">inputnum</span> <span class="string">*</span> <span class="string">hiddennum;</span>  <span class="string">%计算输入层到隐含层的权值个数</span></span><br><span class="line"><span class="string">w2num</span> <span class="string">=</span> <span class="string">outputnum</span> <span class="string">*</span> <span class="string">hiddennum;</span> <span class="string">%计算隐含层到输出层的权值个数</span></span><br><span class="line"><span class="string">N</span> <span class="string">=</span> <span class="string">w1num</span> <span class="string">+</span> <span class="string">hiddennum</span> <span class="string">+</span> <span class="string">w2num</span> <span class="string">+</span> <span class="string">outputnum;</span> <span class="string">%总的变量个数</span></span><br><span class="line"></span><br><span class="line"><span class="string">%%定义遗传算法参数</span></span><br><span class="line"><span class="string">Nind</span> <span class="string">=</span> <span class="number">40</span><span class="string">;</span> <span class="string">%定义种群大小</span></span><br><span class="line"><span class="string">MaxGen</span> <span class="string">=</span> <span class="number">50</span><span class="string">;</span> <span class="string">%最大遗传代数</span></span><br><span class="line"><span class="string">Lind</span> <span class="string">=</span> <span class="number">10</span><span class="string">;</span> <span class="string">%每个个体的长度</span></span><br><span class="line"><span class="string">GGAP</span> <span class="string">=</span> <span class="number">0.95</span><span class="string">;</span> <span class="string">%代沟</span></span><br><span class="line"><span class="string">pl</span> <span class="string">=</span> <span class="number">0.7</span><span class="string">;</span> <span class="string">%交叉概率</span></span><br><span class="line"><span class="string">pm</span> <span class="string">=</span> <span class="number">0.01</span><span class="string">;</span> <span class="string">%变异概率</span></span><br><span class="line"><span class="string">trace</span> <span class="string">=</span> <span class="string">zeros(N+1,MaxGen);</span>  <span class="string">%寻优结果的初始值</span> <span class="string">为N+1的原因是最后一位用来存储对优值</span></span><br><span class="line"></span><br><span class="line"><span class="string">%%构建区域描述器方便将个体基因转化为实值</span></span><br><span class="line"><span class="string">FieldD</span> <span class="string">=</span> <span class="string">\[repmat(Lind,1,N);repmat(\[-0.5;0.5\],1,N);repmat(\[1;0;1;1\],1,N)\];</span> <span class="string">%难点</span></span><br><span class="line"><span class="string">Chrom</span> <span class="string">=</span> <span class="string">crtbp(Nind,Lind*N);</span> <span class="string">%创建任意离散的随机种群</span></span><br><span class="line"></span><br><span class="line"><span class="string">%%优化</span></span><br><span class="line"><span class="string">gen</span> <span class="string">=</span> <span class="number">0</span><span class="string">;</span> <span class="string">%种群迭代计数器</span></span><br><span class="line"><span class="string">X</span> <span class="string">=</span> <span class="string">bs2rv(Chrom,FieldD);</span> <span class="string">%将初始种群的基因转换为十进制</span></span><br><span class="line"><span class="string">ObjV</span> <span class="string">=</span> <span class="string">Objfun(X,P,T,hiddennum,P\_test,T\_test);</span>  <span class="string">%计算目标值</span></span><br><span class="line"><span class="string">while</span> <span class="string">gen&lt;MaxGen</span></span><br><span class="line">    <span class="string">fprintf('%d\\n',gen);</span></span><br><span class="line">    <span class="string">FitnV</span> <span class="string">=</span> <span class="string">ranking(ObjV);</span> <span class="string">%计算适应度值</span></span><br><span class="line">    <span class="string">SelCh</span> <span class="string">=</span> <span class="string">select('sus',Chjrom,FitnV,GGAP);</span> <span class="string">%采用轮盘赌算法选择下一代</span></span><br><span class="line">    <span class="string">SelCh</span> <span class="string">=</span> <span class="string">recombin('xovsp',SelCh,pl);</span> <span class="string">%进行交叉</span></span><br><span class="line">    <span class="string">SelCh</span> <span class="string">=</span> <span class="string">mut(SelCh,pm);</span> <span class="string">%进行变异</span></span><br><span class="line">    <span class="string">X</span> <span class="string">=</span> <span class="string">bs2rv(SelCh,FieldD);</span> <span class="string">%将子代的二进制转换为十进制</span></span><br><span class="line">    <span class="string">ObjVSelCh</span> <span class="string">=</span> <span class="string">Objfun(X,P,T,hiddennum,P\_test,T\_test);</span> <span class="string">%计算子代的目标函数值</span></span><br><span class="line">    <span class="string">\[Chrom,ObjV\]</span> <span class="string">=</span> <span class="string">reins(Chrom,SelCh,1,1,ObjV,ObjVSelCh);</span> <span class="string">%将子代插入到父代中，得到新的种群</span></span><br><span class="line">    <span class="string">X</span> <span class="string">=</span> <span class="string">bs2rv(Chrom,FieldD);</span> <span class="string">%将新的种群的二进制转换为十进制</span></span><br><span class="line">    <span class="string">gen</span> <span class="string">=</span> <span class="string">gen</span> <span class="string">+1;</span></span><br><span class="line">    <span class="string">%获得每一代的最优解及其序号，Y为最优解，I为个体的序号</span></span><br><span class="line">    <span class="string">\[Y,I\]</span> <span class="string">=</span> <span class="string">min(ObjV);</span></span><br><span class="line">    <span class="string">trace(1:N,gen)</span> <span class="string">=</span> <span class="string">X(I,:);</span></span><br><span class="line">    <span class="string">trace(end,gen)</span> <span class="string">=</span> <span class="string">Y;</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string">%%画出图像</span></span><br><span class="line"><span class="string">figure(1);</span></span><br><span class="line"><span class="string">plot(1:MaxGen,trace(end,:));</span></span><br><span class="line"><span class="string">grid</span> <span class="string">on</span></span><br><span class="line"><span class="string">xlabel('遗传代数');</span></span><br><span class="line"><span class="string">ylabel('误差变化');</span></span><br><span class="line"><span class="string">besxtX</span> <span class="string">=</span> <span class="string">trace(1:end-1,end);</span></span><br><span class="line"><span class="string">bestErr</span> <span class="string">=</span> <span class="string">trace(end,end);</span></span><br><span class="line"><span class="string">fprintf('最优初始权值和阙值:\\nX=',num2str(bestX),'\\n最小误差err=',num2str(bestErr),'\\n');</span></span><br><span class="line"></span><br><span class="line"><span class="string">调用神经网络的函数：</span></span><br><span class="line"><span class="string">function</span> <span class="string">rep</span> <span class="string">=</span> <span class="string">Objfun(X,P,T,hiddennum,P\_test,T\_test)</span></span><br><span class="line"><span class="string">%用来分别求解种群中各个个体的目标值</span></span><br><span class="line"><span class="string">%</span> <span class="string">X</span> <span class="string">所有个体的初始权值和阙值</span></span><br><span class="line"><span class="string">%P</span> <span class="string">训练样本输入</span></span><br><span class="line"><span class="string">%T</span> <span class="string">训练样本输出</span></span><br><span class="line"><span class="string">%</span> <span class="string">hiddennum：隐含层神经元数</span></span><br><span class="line"><span class="string">%</span> <span class="string">P_test</span> <span class="string">测试样本输入</span></span><br><span class="line"><span class="string">%</span> <span class="string">T_test</span> <span class="string">测试样本输出</span></span><br><span class="line"><span class="string">%</span> <span class="string">Obj</span> <span class="string">所有个体预测样本预测误差的范数</span></span><br><span class="line"></span><br><span class="line"><span class="string">\[M,N\]</span> <span class="string">=</span> <span class="string">size(X);</span></span><br><span class="line"><span class="string">Obj</span> <span class="string">=</span> <span class="string">zeros(M,1);</span></span><br><span class="line"><span class="string">for</span> <span class="string">i</span> <span class="string">=</span> <span class="number">1</span><span class="string">:M</span></span><br><span class="line">    <span class="string">Obj(i)</span> <span class="string">=</span> <span class="string">BPfun(X(i,:),P,T,hiddennum,P\_test,T\_test);</span></span><br><span class="line"><span class="string">end</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>BP神经网络以及遗传算法</category>
        <category>优化算法</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>GA</tag>
        <tag>优化算法</tag>
        <tag>BP NetWork</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习之SVM</title>
    <url>/2018/07/03/ji-qi-xue-xi-zhi-svm-1/</url>
    <content><![CDATA[<p><strong>支持****向量机（SVM）</strong></p>
<p>序列最小化优化算法（SMO）</p>
<p>基于最大间隔分隔数据 优点：泛化错误率低，计算开销不大，结果易破解 缺点：对参数调节和核函数的选择敏感，原始分类不加修改仅适用于处理二类问题 适用数据类型：数值型和标称型数据   考虑下图如何用一条直线将两组数据点分开。 <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180703154529.png" alt=""> 在这种情况下成为线性可分数据，上述数据集分隔开来的直线成为分隔平面（之所以为平面是统称）因为在二维空间上可以用一条直线将其分隔开来的，但是在三维空间中只能用平面来进行分隔。 同样可以类推出如果是500维的平面可以是用499维度的平面分隔，这类平面成为超平面。   我们在构建超平面的同时也希望选择出来最好的那一个超平面，比如下图中三图（BCD）哪个最好？ <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180703154619.png" alt=""> 可以看出来上述做法有点类似直线拟合，这里其实和logistic回归中构建出来分隔线（也类似直线拟合）差不多。 我们希望找到离分隔超平面最近的点，确保他们离分隔面的距离尽可能远。这里点到分隔面的距离称为间隔。   支持向量就是离分隔超平面最近的那些点。   <strong>寻找最大间隔</strong> 如下图 <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180703154733.png" alt=""> 分隔超平面的形式可以写成（w的t次方*x+b），要计算点A到分隔超平面的距离，就必须给出A到分隔面的法线或垂线的长度，该值为（|w的t次方*a+b|/|w|） 这里的常数b类似于logistic回归中的截距W0. <strong>分类器求解的优化问题</strong> 理解：输入的数据分类器会输出一个类别标签，这里相当于一个类似于sigmoid的函数作用下，接下来使用的是类似海维塞德阶跃函数（即单位跃阶函数）的函数对分隔超平面函数作用得到的f（w的t次方<em>x+b），其中当u&lt;0时f（u）输出-1，反之则输出1，这里与logistic回归中的函数有所不同（它用的分类标签为0和1）。 当计算数据点到分隔面的距离并确定分隔面的放置位置时，间隔用过label</em>（w的t次方*x+b）来计算。 通过一系列操作可以得到如下形式的优化目标函数： <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180703154833.png" alt=""> 其中约束条件为： <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180703154903.png" alt=""> 这里的C常用来控制最大化间隔和保证大部分点的函数间隔小于1.0这两个目标的权重。 通常在代码实现时C常为一个参数，因此我们可以通过改变C的参数值来得到不同的结果，一旦求出所有的alpha，那么分隔超平面就可以通过这些alpha表达。而SVM的主要工作就是求解这些alpha。 <strong>SVM应用的一般框架</strong> SVM的一般流程：</p>
<ul>
<li>收集数据：可以使用任何方法</li>
<li>准备数据：需要数值型数据</li>
<li>分析数据：有助于可视化分隔超平面（matplotlib）</li>
<li>训练算法：SVM的大部分时间都是源自训练，该过程主要实现两个参数（w，b）的调优。</li>
<li>测试算法：十分简单的计算过程就可以实现</li>
<li>使用算法：几乎所有分类分为都可以使用SVM，SVM是二分类器，对于多类问题使用SVM的话需要对代码进行修改</li>
</ul>
<p><strong>SMO高效优化算法</strong> SMO算法是JohnPlatt发现的，用于训练SVM，SMO表示序列最小优化，Platt的SMO算法是将大优化问题分解为小的优化问题（有点类似分治的思想）。SMO的目标是求出一系列的alpha和b，一旦求出来这些alpha就方便计算出权重向量w并得到分隔超平面。 首先给出一个简单的版本来方便理解（该算法适合小规模的数据集但是执行速度比较慢）： 读取数据以及随机一个整数并且对该整数的大小进行调整函数 代码：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment">#SMO算法中的辅助函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">(fileName)</span></span>:  <span class="comment">#读取数据和标签</span></span><br><span class="line">    dataMat = \[\]</span><br><span class="line">    labelMat = \[\]</span><br><span class="line">    fr = open(fileName)</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fr.readlines()<span class="symbol">:</span></span><br><span class="line">        lineArr = line.strip().split(<span class="string">'\\t'</span>)</span><br><span class="line">        dataMat.append(\[float(lineArr\[<span class="number">0</span>\]),float(lineArr\[<span class="number">1</span>\])\])</span><br><span class="line">        labelMat.append(float(lineArr\[<span class="number">2</span>\]))</span><br><span class="line">    <span class="keyword">return</span> dataMat,labelMat</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectJrand</span><span class="params">(i,m)</span></span>:  <span class="comment">#在某一范围内得到一个随机整数</span></span><br><span class="line">    j=i</span><br><span class="line">    <span class="keyword">while</span>(j==i)<span class="symbol">:</span></span><br><span class="line">        j = int(random.uniform(<span class="number">0</span>,m))</span><br><span class="line">    <span class="keyword">return</span> j</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clipAlpha</span><span class="params">(aj,H,L)</span></span>:  <span class="comment">#辅助函数用于对如果随机数据太大来进行调整</span></span><br><span class="line">    <span class="keyword">if</span> aj &gt; <span class="symbol">H:</span></span><br><span class="line">        aj = H</span><br><span class="line">    <span class="keyword">if</span> L &gt; <span class="symbol">aj:</span></span><br><span class="line">        aj = L</span><br><span class="line"><span class="keyword">return</span> aj</span><br></pre></td></tr></table></figure>
<p>对于selectJrand函数中i是第一个aplha的下标，m是所有alpha的数目，只要函数的值不等于i的值则一直会随机。 SMO函数的伪代码： 创建一个alpha向量并将其初始化为0向量 当迭代次数小于最大迭代次数时：（外循环）    对数据中的每一个数据向量：（内循环）        如果该数据向量可以被优化：           随机选择另外一个数据向量           同时优化这两个向量           如果这两个向量都不能被优化，退出内循环    如果所有向量都没有被优化，增加迭代数目，继续下一次循环 下面给出代码：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">def SMOSimple(dataMatIn,classLabels,C,toler,maxIter): #五个参数：数据集、类别标签、常数C、容错率、最大循环次数</span><br><span class="line">    dataMatrix = np.mat(dataMatIn)</span><br><span class="line">    labelMat = np.mat(classLabels).transpose() #对标签进行转置，将其转置为列向量</span><br><span class="line">    b = 0</span><br><span class="line">    m,n = np.shape(dataMatrix)  #得到矩阵的行和列数</span><br><span class="line">    alphas = np.mat(np.zeros((m,1))) #创建一个alpha矩阵，并且以zeros初始化</span><br><span class="line">    iter = 0  #用来存储在alphas没有任何变化的情况下遍历数据集的次数</span><br><span class="line">    while(iter &lt; maxIter):</span><br><span class="line">        alphaPairsChanged = 0  #用于记录alphas是否被优化</span><br><span class="line">        for i in range(m):</span><br><span class="line">            fXi = float(np.multiply(alphas,labelMat).T * (dataMatrix * dataMatrix<span class="symbol">\[</span>i,:<span class="symbol">\]</span>.T)) + b  #fXi用于表示预测的类别</span><br><span class="line">            Ei = fXi - float(labelMat<span class="symbol">\[</span>i<span class="symbol">\]</span>)  #计算预测值和实际值的误差</span><br><span class="line">            if ((labelMat<span class="symbol">\[</span>i<span class="symbol">\]</span> * Ei &lt; -toler) and (alphas<span class="symbol">\[</span>i<span class="symbol">\]</span> &lt; C)) or ((labelMat<span class="symbol">\[</span>i<span class="symbol">\]</span> * Ei &gt; toler) and (alphas<span class="symbol">\[</span>i<span class="symbol">\]</span> &gt; 0)): #如果不在最大允许误差的范围内则对alphas进行优化</span><br><span class="line">                j = selectJrand(i,m) #使用辅助函数随机选择出第二个alphas值的下标</span><br><span class="line">                fXj = float(np.multiply(alphas,labelMat).T * (dataMatrix * dataMatrix<span class="symbol">\[</span>j,:<span class="symbol">\]</span>.T)) + b #同样采用之前的误差计算方法来对第二个alphas进行判断</span><br><span class="line">                Ej = fXj - float(labelMat<span class="symbol">\[</span>j<span class="symbol">\]</span>)</span><br><span class="line">                #复制新老alphas对进行比较</span><br><span class="line">                alphaIold = alphas<span class="symbol">\[</span>i<span class="symbol">\]</span>.copy() </span><br><span class="line">                alphaJold = alphas<span class="symbol">\[</span>j<span class="symbol">\]</span>.copy()</span><br><span class="line">                if (labelMat<span class="symbol">\[</span>i<span class="symbol">\]</span> != labelMat<span class="symbol">\[</span>j<span class="symbol">\]</span>):  #计算LH的值</span><br><span class="line">                    L = max(0,alphas<span class="symbol">\[</span>j<span class="symbol">\]</span> - alphas<span class="symbol">\[</span>i<span class="symbol">\]</span>)</span><br><span class="line">                    H = min(C,C + alphas<span class="symbol">\[</span>j<span class="symbol">\]</span> - alphas<span class="symbol">\[</span>i<span class="symbol">\]</span>)</span><br><span class="line">                else:</span><br><span class="line">                    L = max(0,alphas<span class="symbol">\[</span>j<span class="symbol">\]</span> + alphas<span class="symbol">\[</span>i<span class="symbol">\]</span> - C)</span><br><span class="line">                    H = min(C,alphas<span class="symbol">\[</span>j<span class="symbol">\]</span> + alphas<span class="symbol">\[</span>i<span class="symbol">\]</span>)</span><br><span class="line">                if L == H: #如果L和H的值相等则结束本次循环</span><br><span class="line">                    print("L==H")</span><br><span class="line">                    continue</span><br><span class="line">                #eta是alphas<span class="symbol">\[</span>j<span class="symbol">\]</span>的最优秀改量</span><br><span class="line">                eta = 2.0 * dataMatrix<span class="symbol">\[</span>i,:<span class="symbol">\]</span> * dataMatrix<span class="symbol">\[</span>j,:<span class="symbol">\]</span>.T - dataMatrix<span class="symbol">\[</span>i,:<span class="symbol">\]</span> * dataMatrix<span class="symbol">\[</span>i,:<span class="symbol">\]</span>.T - dataMatrix<span class="symbol">\[</span>j,:<span class="symbol">\]</span> * dataMatrix<span class="symbol">\[</span>j,:<span class="symbol">\]</span>.T</span><br><span class="line">                if eta &gt;= 0:</span><br><span class="line">                    print("eta&gt;=0")</span><br><span class="line">                    continue</span><br><span class="line">                #对第二个alphas值进行更新</span><br><span class="line">                alphas<span class="symbol">\[</span>j<span class="symbol">\]</span> -= labelMat<span class="symbol">\[</span>j<span class="symbol">\]</span> + (Ei - Ej) / eta</span><br><span class="line">                alphas<span class="symbol">\[</span>j<span class="symbol">\]</span> = clipAlpha(alphas<span class="symbol">\[</span>j<span class="symbol">\]</span>,H,L)#并且进行调整</span><br><span class="line">                if (abs(alphas<span class="symbol">\[</span>j<span class="symbol">\]</span> - alphaJold) &lt; 0.00001):  #如果最新的得到的第二个alphas值和旧的值相差不够大则结束本次循环</span><br><span class="line">                    print("j 移动的不够充分")</span><br><span class="line">                    continue</span><br><span class="line">                #更新第一个alphas值</span><br><span class="line">                alphas<span class="symbol">\[</span>i<span class="symbol">\]</span> += labelMat<span class="symbol">\[</span>j<span class="symbol">\]</span> * labelMat<span class="symbol">\[</span>i<span class="symbol">\]</span> * (alphaJold - alphas<span class="symbol">\[</span>j<span class="symbol">\]</span>)</span><br><span class="line">                #分别根据第一个alphas值和第二个alphas值来计算出b1和b2</span><br><span class="line">                b1 = b - Ei - labelMat<span class="symbol">\[</span>i<span class="symbol">\]</span> * (alphas<span class="symbol">\[</span>i<span class="symbol">\]</span> - alphaIold) * dataMatrix<span class="symbol">\[</span>i,:<span class="symbol">\]</span>.T - labelMat<span class="symbol">\[</span>j<span class="symbol">\]</span> * (alphas<span class="symbol">\[</span>j<span class="symbol">\]</span> - alphaJold) * dataMatrix<span class="symbol">\[</span>i,:<span class="symbol">\]</span> * dataMatrix<span class="symbol">\[</span>j,:<span class="symbol">\]</span>.T</span><br><span class="line">                b2 = b - Ej - labelMat<span class="symbol">\[</span>i<span class="symbol">\]</span> * (alphas<span class="symbol">\[</span>i<span class="symbol">\]</span> - alphaIold) * dataMatrix<span class="symbol">\[</span>i,:<span class="symbol">\]</span>.T - labelMat<span class="symbol">\[</span>j<span class="symbol">\]</span> * (alphas<span class="symbol">\[</span>j<span class="symbol">\]</span> - alphaJold) * dataMatrix<span class="symbol">\[</span>j,:<span class="symbol">\]</span> * dataMatrix<span class="symbol">\[</span>j,:<span class="symbol">\]</span>.T</span><br><span class="line">                #根据约束条件的公式来决定b的值</span><br><span class="line">                if(0 &lt; alphas<span class="symbol">\[</span>i<span class="symbol">\]</span> and (C &gt; alphas<span class="symbol">\[</span>i<span class="symbol">\]</span>)):</span><br><span class="line">                    b = b1</span><br><span class="line">                elif(0 &lt; alphas<span class="symbol">\[</span>j<span class="symbol">\]</span>) and (C &gt; alphas<span class="symbol">\[</span>j<span class="symbol">\]</span>):</span><br><span class="line">                    b = b2</span><br><span class="line">                else:</span><br><span class="line">                    b = (b1 + b2) / 2.0</span><br><span class="line">                alphaPairsChanged += 1  #记录alphas被优化更改值的次数</span><br><span class="line">                print("iter: <span class="variable">%d  i:%</span>d,pairs changed <span class="variable">%d"%</span>(iter,i,alphaPairsChanged))</span><br><span class="line">        if(alphaPairsChanged == 0):  #用于判断alphas是否被优化如果没有被优化则iter+1</span><br><span class="line">            iter += 1</span><br><span class="line">        else :</span><br><span class="line">            iter = 0</span><br><span class="line">        print("iteration number: <span class="variable">%d" %</span> iter)</span><br><span class="line">    return b,alphas</span><br></pre></td></tr></table></figure>
<p>主要的原理还是几个预测公式，这个是前人推出来的，我有点看不懂但是直接用还是可以的。 这个函数写的累死我了光看书写就写了好久。 函数的五个参数为：数据集、类别标签、常数C、容错率、最大循环次数 np.mat（）函数作用是：将数组转换为二维的numpy矩阵，它和ndarray数组又有一些区别。 使用np.mat(classLabels).transpose() 是将行标签转置为了列向量，方便和矩阵每行进行对应。 使用zeros创建一个初始化长度为m的numpy数组并将其转换为矩阵，用来表示alphas 注：该alphas就是之前条件公式里面的阿尔法 创建iter 用来存储在alphas没有改变的情况下遍历数据集的次数，当该值达到最大循环次数时则结束。</p>
<ol>
<li>Multiply（）用来将两个矩阵/向量相乘 然后.T 是得到转置</li>
</ol>
<p>fXi = float(np.multiply(alphas,labelMat).T * (dataMatrix * dataMatrix[i,:].T)) + b  fXi用于表示预测值， Ei表示预测值和实际值的误差，如果误差很大则需要对alphas进行优化 eta是alphas[j]的最优秀改量 b的值是要结合eta的值以及得到最新的alphas值来计算。   由于是简单的SMO算法所以时间效率比较低下，空间资源利用不足，但是便于理解。 以上先给出一个简单的SMO方便用于理解，至于复杂的SMO算法在以后给出。</p>
]]></content>
      <categories>
        <category>向量机支持SVM</category>
        <category>文章页</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Algorithm</tag>
        <tag>SVM</tag>
      </tags>
  </entry>
  <entry>
    <title>基于遗传算法和非线性规划的函数寻优算法</title>
    <url>/2018/07/15/ji-yu-yi-chuan-suan-fa-he-fei-xian-xing-gui-hua-de-han-shu-xun-you-suan-fa-1/</url>
    <content><![CDATA[<p><strong>非线性规划研究一个n元实函数在一组等式或不等式的约束条件下的极值问题。</strong></p>
<p>非线性规划函数： 函数fmincon是MatLab最优化工具箱中求解非线性规划问题的函数，它从一个预估值触发，搜索约束条件下非线性多元函数的最小值。 函数fmincon的<strong>约束条件</strong>为： <img src="http://47.100.4.8/wp-content/uploads/2018/07/111.png" alt=""> 其中，<strong>x、b、beq、lb和ub是矢量，A和Aeq为矩阵；c（x）和ceq（x）返回矢量的函数；f（x）、c（x）和ceq（x）是非线性函数。</strong> <strong>函数fmincon（fun，x0，A，b，Aeq，beq，lb，ub）</strong> 其中lb和ub分别为x的下界和上界。当函数输入参数不包括A、b、Aeq、beq时，默认A=0、b=0，Aeq=[ ]，beq=[ ]   遗传算法从随机产生的初始解开始搜索，通过一定的选择、交叉、变异操作逐步迭代以产生新的解。群体种的每个个体代表问题的一个解，成为染色体，染色体的好坏用适应度值来衡量，根据适应度的好快从上一代中选择一定数量的优秀个体，通过交叉、变异来形成下一代群体。经过若干代迭代之后，收敛于最好的染色体。（但不一定是问题的最优解）   非线性规划算法大多采用梯度下降的方法求解，局部搜索能力强，但是全局搜索能力差，遗传算法则是全局搜索能力强，局部搜索能力差，因此二者集合能够得到问题的最优解。   <strong>采用遗传算法和非线性规划的方式求解的例子：</strong> 其中x1、x2、x3、x4、x5是0~0.9*π之间的实数。 该函数的最小值为-2，最小值的位置为（π/2，π/2，π/2，π/2，π/2）   非线性规划遗传算法的流程图： <img src="http://47.100.4.8/wp-content/uploads/2018/07/112.png" alt=""> N为一个固定值，当进化代数为N的倍数时采用非线性寻优的方法加快进化，非线性寻优利用当前染色体值采用函数fmincon寻找问题的局部最优值。   算法思路：</p>
<ol>
<li>种群初始化</li>
</ol>
<p>采用的编码方式有：位串编码、Grey编码、实数编码（浮点数编码）、多级参数编码、有序串编码、结构式编码等。</p>
<ol start="2">
<li>适应度函数</li>
</ol>
<p>因为这个例子中求得是函数最小值所有，把函数值的倒数最为个体的适应度值。目标函数值越小的个体，适应度越大，个体越优。</p>
<ol start="3">
<li>选择操作</li>
</ol>
<p>从旧群体中选择出优良个体组成新的种群，以繁殖到下一代，常用的选择算法有：轮盘赌算法、锦标赛算法等，常用的是轮盘赌算法。即基于适应度比例的选择策略 个体被选中的概率为：<img src="http://47.100.4.8/wp-content/uploads/2018/07/113.png" alt="">，Fi为个体的适应度值</p>
<ol start="4">
<li>交叉操作</li>
</ol>
<p>从种群中随机选择两个个体，通过两个染色体的交换组合，把父串的优秀特征遗传给子串，从而产生新的优秀个体。由于采用实数编码，因此采用实数交叉法：第k个单色提的ak和第L个染色体的al在j位的交叉操作</p>
<ol start="5">
<li>变异操作</li>
</ol>
<p>目的是维护种群的多样性，从种群中随机选择一个个体，选择个体中的一点进行变异以产生更优秀的个体。</p>
<ol start="6">
<li>非线性寻优</li>
</ol>
<p>每进化一定代数后，以所得到的结果为初始值，采用fmincon进行局部寻优，并把局部寻优的结果作为染色体继续进化 <strong>实现：</strong> 计算目标值的函数文件</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">function <span class="symbol">y</span> = fun(<span class="symbol">x</span>)</span><br><span class="line"></span><br><span class="line"><span class="symbol">y</span>=<span class="number">-5</span>\*<span class="built_in">sin</span>(<span class="symbol">x</span>(<span class="number">1</span>))\*<span class="built_in">sin</span>(<span class="symbol">x</span>(<span class="number">2</span>))\*<span class="built_in">sin</span>(<span class="symbol">x</span>(<span class="number">3</span>))\*<span class="built_in">sin</span>(<span class="symbol">x</span>(<span class="number">4</span>))\*<span class="built_in">sin</span>(<span class="symbol">x</span>(<span class="number">5</span>))-<span class="built_in">sin</span>(<span class="number">5</span>\*<span class="symbol">x</span>(<span class="number">1</span>))\*<span class="built_in">sin</span>(<span class="number">5</span>\*<span class="symbol">x</span>(<span class="number">2</span>))\*<span class="built_in">sin</span>(<span class="number">5</span>\*<span class="symbol">x</span>(<span class="number">3</span>))\*<span class="built_in">sin</span>(<span class="number">5</span>\*<span class="symbol">x</span>(<span class="number">4</span>))\*<span class="built_in">sin</span>(<span class="number">5</span>\*<span class="symbol">x</span>(<span class="number">5</span>))+<span class="number">8</span>;</span><br></pre></td></tr></table></figure>
<p>选择函数</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%选择操作  该函数对每一代种群中的染色体进行选择，以进行后面的交叉和变异</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ret</span> = <span class="title">select</span><span class="params">(indivduals,sizepop)</span> %<span class="title">indivduals</span>为种群信息   <span class="title">sizepop</span>为种群规模</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%indivduals input :种群信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%sizepop input :种群规模</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%opts input :选择方法的选择</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%ret output :经过选择后的种群</span></span><br><span class="line"></span><br><span class="line">indivduals.fitness = <span class="number">1.</span>/(indivduals.fitness); <span class="comment">%计算适应度</span></span><br><span class="line"></span><br><span class="line">sumfitness = sum(individuals.fitness); <span class="comment">%计算适应度之和</span></span><br><span class="line"></span><br><span class="line">sumf = indivduals.fitness./sumfitness;  <span class="comment">%计算适应度占比</span></span><br><span class="line"></span><br><span class="line">index = \[\];   <span class="comment">%创建一个空数组 用来存储选择出来的染色体的下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:sizepop  <span class="comment">%循环sizepop</span></span><br><span class="line"></span><br><span class="line">    pick = <span class="built_in">rand</span>;  <span class="comment">%将pick赋值为一个随机小数范围在0-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> pick == <span class="number">0</span>  <span class="comment">%设置一下防止rand 出来的值使pick为0</span></span><br><span class="line"></span><br><span class="line">        pick = <span class="built_in">rand</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span> = <span class="number">1</span> :sizepop <span class="comment">%遍历每一个染色体的适应度占比</span></span><br><span class="line"></span><br><span class="line">        pick = pick - sumf(<span class="built_in">j</span>); <span class="comment">%如果pick - 某个染色体的适应度占比小于0 则将该染色体对应的下表添加到index中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pick &lt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            index = \[index <span class="built_in">j</span>\];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">indivduals.chrom = indivduals.chrom(index,:);  <span class="comment">%将选择出来的染色体存到一个子种群中</span></span><br><span class="line"></span><br><span class="line">indivduals.fitness = indivduals.fitness(index);  <span class="comment">%将对应的适应度也存储到一起</span></span><br><span class="line"></span><br><span class="line">ret = indivduals;</span><br></pre></td></tr></table></figure>
<p>交叉操作函数：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%交叉操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ret</span> = <span class="title">Cross</span><span class="params">(pl,lenchrom,chrom,sizepop,bound)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">%pl input :交叉概率</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%lenchrom input :染色体的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%chrom input:染色体种群</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%sizepop input:种群规模</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%ret ouput:交叉后的染色体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:sizepop     <span class="comment">%是否进行交叉由交叉概率决定</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">%随机选择两个染色体进行交叉</span></span><br><span class="line"></span><br><span class="line">    pick = <span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">%产生两个0-1的随机数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> prod(pick) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        pick = <span class="built_in">rand</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    index = <span class="built_in">ceil</span>(pick.*sizepop);  <span class="comment">%将随机到的数转换为对应的染色体编号  ceil（x）是取比x大的最小整数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">%交叉概率决定是否进行交叉</span></span><br><span class="line"></span><br><span class="line">    pick  = <span class="built_in">rand</span>;  <span class="comment">%随机出来一个交叉概率</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> pick == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        pick = <span class="built_in">rand</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">%如何随机出来的交叉概率大于给定的交叉概率则结束本次循环</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pick &gt; pcross</span><br><span class="line"></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> flag == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">%随机选择交叉位置</span></span><br><span class="line"></span><br><span class="line">        pick = <span class="built_in">rand</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> pick ==<span class="number">0</span></span><br><span class="line"></span><br><span class="line">            pick = <span class="built_in">rand</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        pos = <span class="built_in">ceil</span>(pick.*sum(lenchrom));  <span class="comment">%将随机出来的数转换为染色体对应的某个基因</span></span><br><span class="line"></span><br><span class="line">        pick = <span class="built_in">rand</span>;  <span class="comment">%随即一个数用于在交叉时选择基因位置时作为参数</span></span><br><span class="line"></span><br><span class="line">        v1 = chrom(index(<span class="number">1</span>),pos);</span><br><span class="line"></span><br><span class="line">        v2 = chrom(index(<span class="number">2</span>),pos);</span><br><span class="line"></span><br><span class="line">        <span class="comment">%交叉公式</span></span><br><span class="line"></span><br><span class="line">        chrom(index(<span class="number">1</span>),pos) = pick * v2 + (<span class="number">1</span>-pick) * v1;</span><br><span class="line"></span><br><span class="line">        chrom(index(<span class="number">2</span>),pos) = pick * v1 + (<span class="number">1</span>-pick) * v2;</span><br><span class="line"></span><br><span class="line">        flag1 = test(lenchrom,bound,chrom(index(<span class="number">1</span>),:),fcode);</span><br><span class="line"></span><br><span class="line">        flag2 = test(lenchrom,bound,chrom(index(<span class="number">2</span>),:),fcode);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> flag1*flag2 == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">            flag =<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ret = chrom;</span><br></pre></td></tr></table></figure>
<p>变异操作：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%%变异操作</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ret</span> = <span class="title">Mutation</span><span class="params">(pm,lenchrom,chrom,sizepop,bound)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">%本函数完成变异操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%pcorss input :变异概率</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%lenchrom input : 染色体长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%chrom input:染色体群'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%sizepop input :种群规模</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%pop input:当前种群的进化代数和最大的进化代数信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% ret output:变异后的染色体</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> =<span class="number">1</span>;sizepop</span><br><span class="line"></span><br><span class="line">    <span class="comment">%随机选择一个染色体进行变异</span></span><br><span class="line"></span><br><span class="line">    pick = <span class="built_in">rand</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> pick == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        pick = <span class="built_in">rand</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    index = <span class="built_in">ceil</span>(pick * sizepop);  <span class="comment">%将随机出来的数转换为对应的染色体的编号</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">%决定该轮是否进行变异</span></span><br><span class="line"></span><br><span class="line">    pick = <span class="built_in">rand</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> pick &gt; pm</span><br><span class="line"></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> flag == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">%随机一个变异位置</span></span><br><span class="line"></span><br><span class="line">        pick = <span class="built_in">rand</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> pick == <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            pick = <span class="built_in">rand</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        pos = <span class="built_in">ceil</span>(pick * sum(lenchrom));  <span class="comment">%转换为对应染色体基因的位置</span></span><br><span class="line"></span><br><span class="line">        v = chrom(<span class="built_in">i</span>,pos);  <span class="comment">%得到该位置的值</span></span><br><span class="line"></span><br><span class="line">        v1 = v - bound(pos,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        v2 = bound(pos,<span class="number">2</span>) - v;</span><br><span class="line"></span><br><span class="line">        pick = <span class="built_in">rand</span>;  <span class="comment">%变异开始</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pick &gt; <span class="number">0.5</span>  <span class="comment">%变异分为两种情况</span></span><br><span class="line"></span><br><span class="line">            delta = v2 * (<span class="number">1</span> - pick((<span class="number">1</span> - pop(<span class="number">1</span>)/pop(<span class="number">2</span>))^<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">            chrom (<span class="built_in">i</span>,pos) = v + delta;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">            delta = v1 * (<span class="number">1</span> - pick((<span class="number">1</span> - pop(<span class="number">1</span>)/pop(<span class="number">2</span>))^<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">            chrom (<span class="built_in">i</span>,pos) = v - delta;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        flag = test(lenchrom,bound,chrom(<span class="built_in">i</span>,:),fcode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">ret = chrom;</span><br></pre></td></tr></table></figure>
<p>随机编码函数：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">function ret=Code(lenchrom,bound)</span><br><span class="line"></span><br><span class="line"><span class="variable">%本函数将变量编码成染色体，用于随机初始化一个种群</span></span><br><span class="line"><span class="variable"></span></span><br><span class="line"><span class="variable">%</span> lenchrom   input : 染色体长度</span><br><span class="line"></span><br><span class="line"><span class="variable">% bound      input : 变量的取值范围</span></span><br><span class="line"><span class="variable"></span></span><br><span class="line"><span class="variable">%</span> ret        output: 染色体的编码值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag=0;</span><br><span class="line"></span><br><span class="line">while flag==0</span><br><span class="line"></span><br><span class="line">    pick=rand(1,length(lenchrom));</span><br><span class="line"></span><br><span class="line">    ret=bound(:,1)'+(bound(:,2)-bound(:,1))'.*pick; <span class="variable">%线性插值</span></span><br><span class="line"><span class="variable"></span></span><br><span class="line"><span class="variable">    flag=test(lenchrom,bound,ret);             %</span>检验染色体的可行性</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">非线性优化函数：</span><br><span class="line"></span><br><span class="line">function ret = nonlinear(chrom,sizepop)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for i=1:sizepop</span><br><span class="line"></span><br><span class="line">    x=fmincon(inline('-5<span class="symbol">\*</span>sin(x(1))<span class="symbol">\*</span>sin(x(2))<span class="symbol">\*</span>sin(x(3))<span class="symbol">\*</span>sin(x(4))<span class="symbol">\*</span>sin(x(5))-sin(5<span class="symbol">\*</span>x(1))<span class="symbol">\*</span>sin(5<span class="symbol">\*</span>x(2))<span class="symbol">\*</span>sin(5<span class="symbol">\*</span>x(3))<span class="symbol">\*</span>sin(5<span class="symbol">\*</span>x(4))<span class="symbol">\*</span>sin(5<span class="symbol">\*</span>x(5))'),chrom(i,:)',<span class="symbol">\[</span><span class="symbol">\]</span>,<span class="symbol">\[</span><span class="symbol">\]</span>,<span class="symbol">\[</span><span class="symbol">\]</span>,<span class="symbol">\[</span><span class="symbol">\]</span>,<span class="symbol">\[</span>0 0 0 0 0<span class="symbol">\]</span>,<span class="symbol">\[</span>2.8274 2.8274 2.8274 2.8274 2.8274<span class="symbol">\]</span>);</span><br><span class="line"></span><br><span class="line">    ret(i,:)=x';</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>主函数：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 清空环境</span></span><br><span class="line"></span><br><span class="line">clc</span><br><span class="line"></span><br><span class="line">clear</span><br><span class="line"></span><br><span class="line">warning off</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 遗传算法参数</span></span><br><span class="line"></span><br><span class="line">maxgen=<span class="number">30</span>;                         <span class="comment">%进化代数</span></span><br><span class="line"></span><br><span class="line">sizepop=<span class="number">100</span>;                       <span class="comment">%种群规模</span></span><br><span class="line"></span><br><span class="line">pcross=\[<span class="number">0.6</span>\];                      <span class="comment">%交叉概率</span></span><br><span class="line"></span><br><span class="line">pmutation=\[<span class="number">0.01</span>\];                  <span class="comment">%变异概率</span></span><br><span class="line"></span><br><span class="line">lenchrom=\[<span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span>\];              <span class="comment">%变量字串长度</span></span><br><span class="line"></span><br><span class="line">bound=\[<span class="number">0</span> <span class="number">0.9</span>\*<span class="built_in">pi</span>;<span class="number">0</span> <span class="number">0.9</span>\*<span class="built_in">pi</span>;<span class="number">0</span> <span class="number">0.9</span>\*<span class="built_in">pi</span>;<span class="number">0</span> <span class="number">0.9</span>\*<span class="built_in">pi</span>;<span class="number">0</span> <span class="number">0.9</span>*<span class="built_in">pi</span>\];  <span class="comment">%变量范围</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 个体初始化</span></span><br><span class="line"></span><br><span class="line">individuals=struct(<span class="string">'fitness'</span>,<span class="built_in">zeros</span>(<span class="number">1</span>,sizepop), <span class="string">'chrom'</span>,\[\]);  <span class="comment">%种群结构体</span></span><br><span class="line"></span><br><span class="line">avgfitness=\[\];                                               <span class="comment">%种群平均适应度</span></span><br><span class="line"></span><br><span class="line">bestfitness=\[\];                                              <span class="comment">%种群最佳适应度</span></span><br><span class="line"></span><br><span class="line">bestchrom=\[\];                                                <span class="comment">%适应度最好染色体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 初始化种群</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:sizepop</span><br><span class="line"></span><br><span class="line">    individuals.chrom(<span class="built_in">i</span>,:)=Code(lenchrom,bound);       <span class="comment">%随机产生个体</span></span><br><span class="line"></span><br><span class="line">    x=individuals.chrom(<span class="built_in">i</span>,:);  <span class="comment">%得到每一个个体的值</span></span><br><span class="line"></span><br><span class="line">    individuals.fitness(<span class="built_in">i</span>)=fun(x);                     <span class="comment">%进行个体适应度的计算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%对初代进行操作   找最好的染色体</span></span><br><span class="line"></span><br><span class="line">\[bestfitness bestindex\]=<span class="built_in">min</span>(individuals.fitness);   <span class="comment">%得到本代中计算出目标函数值的最小的值</span></span><br><span class="line"></span><br><span class="line">bestchrom=individuals.chrom(bestindex,:);  <span class="comment">%得到最好的染色体</span></span><br><span class="line"></span><br><span class="line">avgfitness=sum(individuals.fitness)/sizepop; <span class="comment">%计算总染色体的平均适应度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 记录每一代进化中最好的适应度和平均适应度</span></span><br><span class="line"></span><br><span class="line">trace=\[\];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 进化开始</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:maxgen</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">% 选择操作</span></span><br><span class="line"></span><br><span class="line">    individuals=Select(individuals,sizepop);  <span class="comment">%选择出好的个体组成一个种群</span></span><br><span class="line"></span><br><span class="line">    avgfitness=sum(individuals.fitness)/sizepop; <span class="comment">%计算出子代种群的平均适应度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">% 交叉操作</span></span><br><span class="line"></span><br><span class="line">    individuals.chrom=Cross(pcross,lenchrom,individuals.chrom,sizepop,bound);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% 变异操作</span></span><br><span class="line"></span><br><span class="line">    individuals.chrom=Mutation(pmutation,lenchrom,individuals.chrom,sizepop,\[<span class="built_in">i</span> maxgen\],bound);</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">mod</span>(<span class="built_in">i</span>,<span class="number">10</span>)==<span class="number">0</span>  <span class="comment">%如果进化代数为10的倍数则进行非线性优化</span></span><br><span class="line"></span><br><span class="line">        individuals.chrom=nonlinear(individuals.chrom,sizepop);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">% 计算进行交叉变异之后的新种群适应度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="number">1</span>:sizepop</span><br><span class="line"></span><br><span class="line">        x=individuals.chrom(<span class="built_in">j</span>,:);</span><br><span class="line"></span><br><span class="line">        individuals.fitness(<span class="built_in">j</span>)=fun(x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">%找到最小和最大适应度的染色体及它们在种群中的位置</span></span><br><span class="line"></span><br><span class="line">    \[newbestfitness,newbestindex\]=<span class="built_in">min</span>(individuals.fitness);</span><br><span class="line"></span><br><span class="line">    \[worestfitness,worestindex\]=<span class="built_in">max</span>(individuals.fitness);</span><br><span class="line"></span><br><span class="line">    <span class="comment">% 代替上一次进化中最好的染色体</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bestfitness&gt;newbestfitness  <span class="comment">%如果上一代中最好的适应度大于当前代中最好的适应度则将它代替</span></span><br><span class="line"></span><br><span class="line">        bestfitness=newbestfitness;</span><br><span class="line"></span><br><span class="line">        bestchrom=individuals.chrom(newbestindex,:);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    individuals.chrom(worestindex,:)=bestchrom;</span><br><span class="line"></span><br><span class="line">    individuals.fitness(worestindex)=bestfitness;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    avgfitness=sum(individuals.fitness)/sizepop;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    trace=\[trace;avgfitness bestfitness\]; <span class="comment">%记录每一代进化中最好的适应度和平均适应度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%进化结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 结果显示</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line"></span><br><span class="line">\[r c\]=<span class="built_in">size</span>(trace);</span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(\[<span class="number">1</span>:r\]',trace(:,<span class="number">1</span>),<span class="string">'r-'</span>,\[<span class="number">1</span>:r\]',trace(:,<span class="number">2</span>),<span class="string">'b--'</span>);</span><br><span class="line"></span><br><span class="line">title(\[<span class="string">'函数值曲线  '</span> <span class="string">'终止代数＝'</span> num2str(maxgen)\],<span class="string">'fontsize'</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">xlabel(<span class="string">'进化代数'</span>,<span class="string">'fontsize'</span>,<span class="number">12</span>);ylabel(<span class="string">'函数值'</span>,<span class="string">'fontsize'</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">legend</span>(<span class="string">'各代平均值'</span>,<span class="string">'各代最佳值'</span>,<span class="string">'fontsize'</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">ylim(\[<span class="number">1.5</span> <span class="number">8</span>\])</span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'函数值                   变量'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% 窗口显示</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">disp</span>(\[bestfitness x\]);</span><br><span class="line"></span><br><span class="line">grid on</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/07/114.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/07/115.png" alt=""> 根据数值分析也可以看出随着迭代次数的增加，最好适应度的值变化减小，直道不在变化</p>
]]></content>
      <categories>
        <category>MatLab</category>
        <category>优化算法</category>
        <category>基于遗传算法和非线性规划的函数寻优算法</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>MatLab</tag>
        <tag>GA</tag>
        <tag>优化算法</tag>
        <tag>非线性规划</tag>
      </tags>
  </entry>
  <entry>
    <title>进程调度算法</title>
    <url>/2018/06/30/jin-cheng-diao-du-suan-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180529111458.png" alt=""> <strong>进程的调度方式：</strong></p>
<ul>
<li>非抢占方式：在这种调度方式下，一旦把处理机分配给某个进程后，就会一直让它运行下去，绝不会因为时钟中断或任何其他原因去抢占当前正在运行进程的处理机，直到该进程完成，或者发生某事件而被阻塞时，才会放弃处理机，这样系统才能把 处理机分配给其他进程。</li>
<li>抢占方式：这种调度方式允许调度进程根据某种原则，去暂停某个正在执行的进程，将已分配给该进程的处理机重新分配给另一个进程。</li>
</ul>
<p><strong>抢占方式也要遵循某种原则：</strong></p>
<ul>
<li>优先权原则</li>
<li>短进程优先原则</li>
<li>时间片原则</li>
</ul>
<p>1、2两个原则就不做过多的介绍了，在之前的作业调度算法中已经给出了较为详细的介绍，这里就说一下时间片原则，即为各进程按时间片轮转运行时，当正在执行的进程对一个时间片用完后，便停止该进程的执行而重新进行调度。   <strong>调度算法：</strong>         1.轮转调度算法RR：基于时间片的进行轮转调度，即：让就绪队列上的每一个进程每次仅运行一个时间片，然后就切换到下一个进程。 在轮转（RR）中，系统根据FCFS策略，将所有就绪进程排成一个就绪队列，并可设置每隔一定时间间隔产生一次中断，激活系统中的进程调度，完成一次调度，将CPU分配给新的队首进程（或新到达的紧迫进程）。 进程的切换时机，有两种情况：</p>
<ul>
<li>若一个时间片尚未用完，正在运行的进程便已经完成，则立即激活调度程序，将它从就绪队列中删除，再调度就绪队列中队首的进程运行，并启动一个新的时间片。</li>
<li>在一个时间片用完时，计时器中断处理程序被激活，如果进程尚未运行完毕，调度程序将把它送往就绪队列的末尾。</li>
</ul>
<p>时间片大小的选择一定要合适，如果太长则变为了FCFS算法，太短的话进程切换太频繁。 <img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180630225321.png" alt=""> 具体过程： <img src="http://47.100.4.8/wp-content/uploads/2018/06/%E8%87%AA%E8%A1%8C%E8%BD%A6%E8%87%AA%E8%A1%8C%E8%BD%A6%E9%80%89%E6%8B%A9.png" alt="">   <img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180630225321-1.png" alt=""> 具体过程： <img src="http://47.100.4.8/wp-content/uploads/2018/06/%E6%92%92%E5%A4%A7%E5%A3%B0%E5%9C%B0.png" alt="">    2.优先级调度算法 有两种类型：非抢占式优先级调度算法，抢占式优先级调度算法 优先级分别静态优先级和动态优先级 静态优先级：事先给进程分配一个优先级 动态优先级：根据进程的等待时间以及其他因素来分配优先级   3.多级反馈队列 <img src="http://47.100.4.8/wp-content/uploads/2018/06/1-1.png" alt=""> 设置多个就绪队列，每个队列赋予不同的优先级。第一个队列优先级最高，第二个次之，其余的队列优先级依次降低。算法为，每个队列赋予的时间片的大小也不同，在优先级越高的队列时间片越短。 其中每个队列都采用FCFS算法，如果有一个新的进程到达则把它放到第一个队列末端，按照FCFS原则等待调度。如果在该时间片内该进程没有运行结束，则把它放到下一个优先级的队列末端进行等待，如果在时间片内进程运行结束，则运行调度算法执行下一个进程，如果该队列中没有进程可以调度，则进入下一个优先级的队列。 例如：如果处于第二队列的进程在使用处理机，那么当一个新的进程到达时则把它放到第一个队列中等到调度，当正在执行的进程时间片结束之后，如果没有运行结束则把该进程放到第三优先级的队列末尾，然后重新回到第一队列中执行进程。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>调度</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>将汇编语言转换为机器语言</title>
    <url>/2018/07/26/jiang-hui-bian-yu-yan-zhuan-huan-wei-ji-qi-yu-yan-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180725093458.png" alt=""> <strong>将x86汇编语言翻译成机器语言，而机器语言是写入到硬件板子上的。</strong> 具体以如下格式展示：（分号右边的是注释） <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180726161957.png" alt=""> <strong>首先需要了解十五条基本指令，下面是指令的参考表</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180726162108.png" alt=""> <strong>下面大致介绍一下每条指令的功能：</strong> 1、MOV是将源寄存器中的内容存放到目的寄存器中  2、ADD是将源寄存器 和目的寄存器中的内容相加存放到目的寄存器中  3、SUB是将目的寄存器中的内容和源寄存器中的内容相减存放到目的寄存器中  4、AND是将目的寄存器和源寄存器中的内容进行二进制按位与存放到目的寄存器中  5、OR是将目的寄存器和源寄存器中的内容进行二进制按位或存放到目的寄存器中  6、RR是将将RS中的内容向右循环位移一位，存档到RD中  7、INC是将RD寄存器中的内容自加一  8、 LAD是按照M的寻址方式通过地址D来访问内存，取出来的内容存放到RD中  9、STA是按照M的寻址方式将RD中的内容存放到内存D地址的位置 10、JMP是按照寻址方式M无条件跳转到D地址 11、BZC是当FC或FZ等于一时按照寻址方式M跳转到地址D对应的位置 12、IN是得到I/O端输入的内容存放到寄存器RD中 13、OUT是将寄存器RD中的内容输出到I/O端 14、LDI是将一个立即数放到RD寄存器中 15、HALT是停机指令 机器指令的注释部分就是按照助记符号来编写的。 至于$P 后面的内容下面我会介绍。 <strong>指令的格式分四种：</strong> （1）单字节指令格式（其中包括ADD、AND、INC、SUB、OR、RR、HLT和MOV） <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180726162700.png" alt=""> 其中RS为源寄存器，RD为目的寄存器 （2）IN和OUT的指令格式为： <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180726162804.png" alt=""> 其中P为I/O端口号，IN的一般为00H，OUT的一般为40H （3）LAD、STA、JMP和BZC指令格式如下： <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180726163246.png" alt=""> 其中M为寻址方式（四种），D为地址 （4）LDI指令格式如下： <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180726163535.png" alt=""> data为向寄存器中存放的数据 <strong>寻址方式参考表：</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180726165040.png" alt=""> <strong>以下是寄存器的参考表：</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180726162414.png" alt=""> 以MOV指令为例： 它以0100开头（至于为什么之后在微指令的设计方面我会说），后面的RS和RD分别为寄存器   假设是将R0寄存器的内容存放到R1中具体的编码形式应为： 0100 00 01 以STA指令为例： 设计将R1寄存器中的内容按照直接寻址存放到内存中4FH对应的位置 STA指令是以1101开头  直接寻址方式为00  指令格式为： 1101  00 01 （要转化为十六进制） 4F <strong>在了解了上面的内容后，就可以一点一点的将汇编语言转换为助记符指令，然后在转换机器码就可以了。</strong> <strong>这里分享一个小小的心得，为了保证程序能够快速运行进行少用访问的指令，要充分使用寄存器。</strong> <strong>还有就是循环loop的话可以使用jmp配合bzc来进行循环或者是条件跳转</strong> <strong>下面分享一个我写的奇数偶数个数判断的机器码：</strong></p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">$P <span class="number">00</span> <span class="number">20</span> <span class="comment">; START:IN RO,00H</span></span><br><span class="line">$P <span class="number">01</span> <span class="number">00</span> <span class="comment">;</span></span><br><span class="line">$P <span class="number">02</span> D0 <span class="comment">; STA 00 R0,6FH</span></span><br><span class="line">$P <span class="number">03</span> 6F <span class="comment">;</span></span><br><span class="line">$P <span class="number">04</span> <span class="number">70</span> <span class="comment">; INC R0</span></span><br><span class="line">$P <span class="number">05</span> <span class="number">61</span> <span class="comment">; LDI 00,R1,01H</span></span><br><span class="line">$P <span class="number">06</span> <span class="number">01</span> <span class="comment">;</span></span><br><span class="line">$P <span class="number">07</span> <span class="number">22</span> <span class="comment">; LK:IN R2,00H</span></span><br><span class="line">$P <span class="number">08</span> <span class="number">00</span> <span class="comment">;</span></span><br><span class="line">$P <span class="number">09</span> <span class="number">16</span> <span class="comment">; AND R1,R2</span></span><br><span class="line">$P 0A <span class="number">99</span> <span class="comment">; JE R2,R1,JISHU</span></span><br><span class="line">$P <span class="number">0B</span> 0E <span class="comment">;</span></span><br><span class="line">$P 0C E0 <span class="comment">; JMP XUNHUAN</span></span><br><span class="line">$P <span class="number">0D</span> 0F <span class="comment">;</span></span><br><span class="line">$P 0E <span class="number">73</span> <span class="comment">; JISHU:INC R3</span></span><br><span class="line">$P 0F <span class="number">84</span> <span class="comment">; XUNHUAN:SUB R1,R0</span></span><br><span class="line">$P <span class="number">10</span> <span class="number">94</span> <span class="comment">; JE R1,R0,EXIT</span></span><br><span class="line">$P <span class="number">11</span> <span class="number">14</span> <span class="comment">;</span></span><br><span class="line">$P <span class="number">12</span> E0 <span class="comment">; JMP LK</span></span><br><span class="line">$P <span class="number">13</span> <span class="number">07</span> <span class="comment">;</span></span><br><span class="line">$P <span class="number">14</span> C0 <span class="comment">; EXIT:LAD 00 ,R0,6FH</span></span><br><span class="line">$P <span class="number">15</span> 6F <span class="comment">;</span></span><br><span class="line">$P <span class="number">16</span> 8C <span class="comment">; SUB R3,R0 </span></span><br><span class="line">$P <span class="number">17</span> 3C <span class="comment">; OUT R0,40H</span></span><br><span class="line">$P <span class="number">18</span> <span class="number">40</span> <span class="comment">;</span></span><br><span class="line">$P <span class="number">19</span> <span class="number">30</span> <span class="comment">; OUT R3,40H</span></span><br><span class="line">$P 1A <span class="number">40</span> <span class="comment">;</span></span><br><span class="line">$P <span class="number">1B</span> <span class="number">50</span> <span class="comment">; HLT</span></span><br><span class="line"></span><br><span class="line">至于微指令的编写，我会在以后的博文里面讲解。 偷偷分享一下自己写的汇编指令</span><br><span class="line"></span><br><span class="line">data <span class="meta">segment</span></span><br><span class="line">	input <span class="built_in">db</span> <span class="string">'please input a lot of number:'</span>,<span class="string">'$'</span></span><br><span class="line">	output1 <span class="built_in">db</span> <span class="string">'The number of odd numbers is:'</span>,<span class="string">'$'</span></span><br><span class="line">	output2 <span class="built_in">db</span> <span class="string">'The number of even numbers is:'</span>,<span class="string">'$'</span></span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code <span class="meta">segment</span></span><br><span class="line">	<span class="meta">assume</span> <span class="built_in">cs</span>:code,<span class="built_in">ds</span>:data</span><br><span class="line"><span class="symbol">	start:</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ax</span>,data</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">ds</span>,<span class="built_in">ax</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="number">ah</span>,<span class="number">01H</span>  <span class="comment">;输入要输入数据的个数</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21H</span></span><br><span class="line">	<span class="keyword">sub</span> <span class="built_in">al</span>,<span class="number">30H</span></span><br><span class="line"> </span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cx</span>,<span class="number">0H</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">cl</span>,<span class="built_in">al</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">dl</span>,<span class="number">0AH</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="number">ah</span>,<span class="number">02H</span></span><br><span class="line">    <span class="keyword">int</span> <span class="number">21H</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">bp</span>,<span class="number">0</span> <span class="comment">;偶数计数器</span></span><br><span class="line">	<span class="keyword">mov</span> <span class="built_in">si</span>,<span class="number">0</span> <span class="comment">;奇数计数器</span></span><br><span class="line"><span class="symbol">lk:</span>	</span><br><span class="line">	<span class="keyword">mov</span> <span class="number">ah</span>,<span class="number">01H</span></span><br><span class="line">	<span class="keyword">int</span> <span class="number">21H</span></span><br><span class="line">	<span class="keyword">sub</span> <span class="built_in">al</span>,<span class="number">30H</span></span><br><span class="line">	<span class="keyword">and</span> <span class="built_in">al</span>,<span class="number">01H</span></span><br><span class="line">	<span class="keyword">cmp</span> <span class="built_in">al</span>,<span class="number">01H</span></span><br><span class="line">	<span class="keyword">jz</span> jishu</span><br><span class="line">	<span class="keyword">inc</span> <span class="built_in">bp</span></span><br><span class="line">	<span class="keyword">jmp</span> useloop</span><br><span class="line"><span class="symbol">jishu:</span></span><br><span class="line">    <span class="keyword">inc</span> <span class="built_in">si</span></span><br><span class="line">    <span class="keyword">jmp</span> useloop</span><br><span class="line"></span><br><span class="line"><span class="symbol">useloop:</span></span><br><span class="line">    <span class="keyword">loop</span> lk</span><br><span class="line">    </span><br><span class="line"><span class="symbol">end1:</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">dl</span>,<span class="number">0AH</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="number">ah</span>,<span class="number">02H</span></span><br><span class="line">    <span class="keyword">int</span> <span class="number">21H</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="number">0H</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ax</span>,<span class="built_in">bp</span></span><br><span class="line">    <span class="keyword">add</span> <span class="built_in">ax</span>,<span class="number">30H</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="number">0H</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">bx</span>,<span class="built_in">si</span></span><br><span class="line">    <span class="keyword">add</span> <span class="built_in">bx</span>,<span class="number">30H</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">dl</span>,<span class="number">0H</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">dl</span>,<span class="built_in">al</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="number">ah</span>,<span class="number">02H</span></span><br><span class="line">    <span class="keyword">int</span> <span class="number">21H</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">dl</span>,<span class="number">0H</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">dl</span>,<span class="built_in">bl</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="number">ah</span>,<span class="number">02H</span></span><br><span class="line">    <span class="keyword">int</span> <span class="number">21H</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">mov</span> <span class="number">ah</span>,<span class="number">4ch</span></span><br><span class="line">    <span class="keyword">int</span> <span class="number">21H</span></span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>汇编语言</category>
        <category>硬件系统</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
        <tag>机器语言</tag>
      </tags>
  </entry>
  <entry>
    <title>进程同步之生产者消费者问题</title>
    <url>/2018/06/12/jin-cheng-tong-bu-zhi-sheng-chan-zhe-xiao-fei-zhe-wen-ti-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180612233953.png" alt=""> 主要介绍的是使用记录性信号量来实现生产者消费者问题。 在介绍生产者消费者问题之前先介绍一些记录型信号量：   采取的是让权等待策略，wait（）和signal（）分别用p（）和v（）来表示 其中包含了一个用于表示资源数目的整型变量value，还包含了一个进程链表指针list。 结构体代码：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"></span><br><span class="line">    int value;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process</span></span>\_control\_block *list;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  相应的p和v操作的伪代码：</span><br><span class="line"></span><br><span class="line">wait(semaphore *S)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    S-&gt;value--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(S-&gt;value&lt;<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        block(S-&gt;list);  <span class="comment">//如果资源数小于0,则调用阻塞进程将该进程阻塞</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">signal(semaphore *S)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    S-&gt;value++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(S-&gt;value&lt;=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        wakeup(S-&gt;list); <span class="comment">//如果有阻塞进程则将它唤醒，将进程转为就绪状态</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用PV操作实现互斥操作： Semaphore mutex=1； P（mutex） 操作； V（mutex） 一般在互斥操作中PV是成对出现的。 而在同步操作中PV操作一般是出现在不同的进程中。   使用记录性信号量来实现消费者生产者问题： 有三种情况：</p>
<ul>
<li>一个生产者、一个消费者、缓冲区只有一个容量</li>
<li>一个生产者、一个消费者、缓冲区有多个空间</li>
<li>多个生产者、多个消费者、缓冲区有多个空间</li>
</ul>
<p>情况一的实现伪代码：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//情况一</span></span><br><span class="line"></span><br><span class="line">semaphore full=<span class="number">0</span>,empty=<span class="number">1</span>;  <span class="comment">// full代表的是已经被占用的空间数量  empty未被使用的空间数量</span></span><br><span class="line"></span><br><span class="line">main<span class="literal">()</span></span><br><span class="line"></span><br><span class="line">cobegin</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    Process producer<span class="literal">()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        生产一个产品;</span><br><span class="line"></span><br><span class="line">        <span class="constructor">P(<span class="params">empty</span>)</span>;</span><br><span class="line"></span><br><span class="line">        将产品送入缓冲区;</span><br><span class="line"></span><br><span class="line">        <span class="constructor">V(<span class="params">full</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    Process customer<span class="literal">()</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="constructor">P(<span class="params">full</span>)</span>;</span><br><span class="line"></span><br><span class="line">        从缓冲区去除一个产品;</span><br><span class="line"></span><br><span class="line">        <span class="constructor">V(<span class="params">empty</span>)</span>;</span><br><span class="line"></span><br><span class="line">        使用产品;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;coend;</span><br></pre></td></tr></table></figure>
<p>由于只有一个消费者和一个生产者所以不需要设置互斥信号量   情况二的实现伪代码：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//情况二</span></span><br><span class="line"></span><br><span class="line">semaphore full=<span class="number">0</span>,empty=n;  <span class="comment">//full代表的是已经被占用的空间数量  empty未被使用的空间数量、它的总量为n</span></span><br><span class="line"></span><br><span class="line">semaphore buffer\[n\]; <span class="comment">//缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> <span class="keyword">in</span>,<span class="keyword">out</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span>=<span class="keyword">out</span>=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"></span><br><span class="line">cobegin</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    Process producer()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        生产一个产品;</span><br><span class="line"></span><br><span class="line">        P(empty);</span><br><span class="line"></span><br><span class="line">        将产品送入缓冲区buffer\[<span class="keyword">in</span>\];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">in</span> = (<span class="keyword">in</span>+<span class="number">1</span>)%n;</span><br><span class="line"></span><br><span class="line">        V(full);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    Process customer()</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        P(full);</span><br><span class="line"></span><br><span class="line">        从缓冲区buffer\[<span class="keyword">out</span>\]去除一个产品;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">out</span> = (<span class="keyword">out</span>+<span class="number">1</span>)%n;</span><br><span class="line"></span><br><span class="line">        V(empty);</span><br><span class="line"></span><br><span class="line">        使用产品;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;coend;</span><br></pre></td></tr></table></figure>
<p>情况三具体实现伪代码：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//情况三</span></span><br><span class="line"></span><br><span class="line">semaphore mutex=<span class="number">1</span>,full=<span class="number">0</span>,empty=n;  <span class="comment">//互斥信号量的初值为1 full代表的是已经被占用的空间数量  empty未被使用的空间数量、它的总量为n</span></span><br><span class="line"></span><br><span class="line">semaphore buffer\<span class="literal">[<span class="identifier">n</span>\]</span>; <span class="comment">//缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> <span class="keyword">in</span>,out;</span><br><span class="line"></span><br><span class="line"><span class="keyword">in</span>=out=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main<span class="literal">()</span></span><br><span class="line"></span><br><span class="line">cobegin</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    Process producer<span class="literal">()</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="constructor">P(<span class="params">empty</span>)</span>;</span><br><span class="line"></span><br><span class="line">        生产一个产品;</span><br><span class="line"></span><br><span class="line">        <span class="constructor">P(<span class="params">mutex</span>)</span>;</span><br><span class="line"></span><br><span class="line">        将产品送入缓冲区buffer\<span class="literal">[<span class="identifier">in</span>\]</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">in</span> = (<span class="keyword">in</span>+<span class="number">1</span>)%n;</span><br><span class="line"></span><br><span class="line">        <span class="constructor">V(<span class="params">mutex</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="constructor">V(<span class="params">full</span>)</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    Process customer<span class="literal">()</span></span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="constructor">P(<span class="params">full</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="constructor">P(<span class="params">mutex</span>)</span>;</span><br><span class="line"></span><br><span class="line">        从缓冲区buffer\<span class="literal">[<span class="identifier">out</span>\]</span>去除一个产品;</span><br><span class="line"></span><br><span class="line">        out = (out+<span class="number">1</span>)%n;</span><br><span class="line"></span><br><span class="line">        <span class="constructor">V(<span class="params">mutex</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="constructor">V(<span class="params">empty</span>)</span>;</span><br><span class="line"></span><br><span class="line">        使用产品;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;coend;</span><br></pre></td></tr></table></figure>
<p>多个消费者和多个消费者实现可以使用多线程来实现，具体实现代码我在之前的博文上已经给出大家可自行翻阅。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>OS</tag>
        <tag>Procuder&amp;Comsumer</tag>
      </tags>
  </entry>
  <entry>
    <title>k-邻近算法应用实例</title>
    <url>/2018/04/08/k-lin-jin-suan-fa-ying-yong-shi-li-1/</url>
    <content><![CDATA[<p>这里使用k-邻近算法解决约会网站问题： 步骤：</p>
<ul>
<li>收集数据：提供文本文件。</li>
<li>准备数据：使用python解析文本文件。</li>
<li>分析算法：使用Matplotlib画二维扩散图</li>
<li>训练算法：此步骤使用于k-邻近算法</li>
<li>测试算法：使用海伦提供的部分数据作为测试样本。测试样本和费测试样本的区别在于：测试样本是已经完成分类的数据，如果预测分类与实际类别不同，则标记为一个错误。</li>
<li>使用算法：产生简单的命令行程序，然后海伦可以输入一些特征数据以判断对方是否为自己喜欢的类型。</li>
</ul>
<p>准备数据算法： <img src="http://47.100.4.8/wp-content/uploads/2018/04/%E5%9C%A3%E8%AF%9E%E8%8A%82%E5%A5%BD%E6%83%B3%E5%90%83.png" alt=""> 测试算法： 使用matplotlib绘制第一列和第二列所有数据的散点图 <img src="http://47.100.4.8/wp-content/uploads/2018/04/%E4%B8%8B%E6%B0%B4%E9%81%93%E6%B3%95%E8%A7%84.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/04/%E4%B8%AA%E4%BA%BA%E7%89%B9%E8%AE%A9%E4%BB%96.png" alt=""> 归一化特征值：在有的时候会有一个特征值占的权重比较大影响整个计算结果，因此要进行归一化。即将所有的数据范围限制到0到1或-1到1之间 可以使用公式：newvalue=（oldValue-min）/（max-min） max和min分别是数据集中的最小特征值和最大特征值 <img src="http://47.100.4.8/wp-content/uploads/2018/04/%E5%BD%93%E9%9D%9E%E5%90%8C%E7%83%AD%E8%85%BE%E8%85%BE.png" alt=""> 测试代码： <img src="http://47.100.4.8/wp-content/uploads/2018/04/%E7%AA%81%E7%84%B6%E7%83%AD%E8%85%BE%E8%85%BE.png" alt=""> 结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/%E9%A2%9D%E5%A4%96%E7%83%AD%E6%B1%A1%E6%9F%93%E5%A4%A9.png" alt=""> 约会网站预测函数： <img src="http://47.100.4.8/wp-content/uploads/2018/04/%E7%AA%81%E7%84%B6%E5%AF%B9%E6%96%B9%E8%80%8C%E5%84%BF%E7%AB%A5.png" alt=""> 测试： <img src="http://47.100.4.8/wp-content/uploads/2018/04/1111111123123123.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/04/32443123123.png" alt="">   里面的datingtestset2.txt数据集文件的下载地址： <a href="https://download.csdn.net/download/qq_16184125/10331188">https://download.csdn.net/download/qq_16184125/10331188</a></p>
]]></content>
      <categories>
        <category>k-邻近算法</category>
        <category>文章页</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>KNN</tag>
        <tag>Machine Learnig</tag>
        <tag>Matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>k-邻近算法应用实例以及分析</title>
    <url>/2018/04/09/k-lin-jin-suan-fa-ying-yong-shi-li-yi-ji-fen-xi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/timg.jpg" alt=""> 这里的实例是手写数字识别系统。 步骤：</p>
<ul>
<li>收集数据：提供文本文件。</li>
<li>准备数据：编写函数img2vector（），将图像格式转换为分类器使用的向量格式</li>
<li>分析数据：在python命令提示符中检查数据，确保它符合要求</li>
<li>训练算法：此步骤不适用于k-邻近算法</li>
<li>测试算法：编写函数使用提供的部分数据集作为测试样本，测试样本与费测试样本的区别在于测试样本是已经完成分类的数据，如果预测分类与实际分类类别不同，则标记为一个错误。</li>
<li>使用算法：本实例中没有此步骤</li>
</ul>
<p>准备数据：将图像转换为测试向量 <img src="http://47.100.4.8/wp-content/uploads/2018/04/11.png" alt=""> 文档内容：（这里已经将手写的数字转换为了01数字） <img src="http://47.100.4.8/wp-content/uploads/2018/04/22.png" alt=""> 得到的向量就是一个一个array数组。   使用算法： <img src="http://47.100.4.8/wp-content/uploads/2018/04/33.png" alt=""> 训练数据集文件名： <img src="http://47.100.4.8/wp-content/uploads/2018/04/44.png" alt=""> 测试数据集文件名： <img src="http://47.100.4.8/wp-content/uploads/2018/04/55.png" alt=""> 使用： <img src="http://47.100.4.8/wp-content/uploads/2018/04/66.png" alt=""> 运行代码的结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/77.png" alt=""> 上面测试文件的下载地址：<a href="https://download.csdn.net/download/qq_16184125/10332382">https://download.csdn.net/download/qq_16184125/10332382</a> End！</p>
]]></content>
      <categories>
        <category>k-邻近算法</category>
        <category>文章页</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>KNN</tag>
      </tags>
  </entry>
  <entry>
    <title>logistic回归之梯度上升算法</title>
    <url>/2018/04/30/logistic-hui-gui-zhi-ti-du-shang-sheng-suan-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/timg.jpg" alt=""> <strong>梯度</strong>：在微积分里面，对多元函数的参数求∂偏导数，把求得的各个参数的偏导数以向量的形式写出来，就是梯度。 它几何上的意义是：函数变化增加最快的地方。也就是在（x，y）点处沿梯度方向就是增长最快的地方 回归系数的确定： 基于最优化方法的最佳回归系数确定的算法： <strong>梯度上升法算法</strong> 梯度上升的思想是：要找到某函数的最大值，最好的方法是沿着该函数的梯度方向探寻。 如果记梯度为▽则函数f（x，y）的梯度由 <img src="http://47.100.4.8/wp-content/uploads/2018/04/1.png" alt="">表达。   这个式子不是要去懂是如何去实现的，要了解这些符号的意思： <img src="http://47.100.4.8/wp-content/uploads/2018/04/2.png" alt="">表示的是要在沿x的方向上移动<img src="http://47.100.4.8/wp-content/uploads/2018/04/2.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/04/3.png" alt="">表示的是在沿y的方向上移动<img src="http://47.100.4.8/wp-content/uploads/2018/04/3.png" alt=""> 其中f（x，y）必须要在计算的点上有定义且可微。 一个具体的例子： 梯度上升算法是每到达一个点就重新估计运行的方向。 <img src="http://47.100.4.8/wp-content/uploads/2018/05/54134894.png" alt=""> 在从P0点开始，计算完该点的梯度，函数会根据该点的梯度继续移动，在到达P1点时再次重新计算在P1点梯度，然后沿着该梯度向P2点移动，直到运行到满足条件的位置。 这样就能确保每次都是沿着最佳的方向移动。   梯度算子总是指向函数值增长最快的方向。移动量的大小称为步长，记为α。 迭代公式为：<img src="http://47.100.4.8/wp-content/uploads/2018/04/4.png" alt=""> 该公式一直被迭代使用，直到满足特定的条件为止。 训练算法：使用梯度上升找到最佳参数 梯度上升的伪代码： 每个回归系数初始化为1 重复R次： 计算整个数据集的梯度 使用alpha*gradient更新回归系数的向量 返回回归系数   梯度上升算法的局限性：他只能处理100左右的数据集，但是要是涉及成千上万次的特征值时，使用该算法的时间复杂度就会很高。</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="built_in">import</span> numpy as np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#数据读取和处理函数</span></span><br><span class="line">def loadDataSet():</span><br><span class="line">    <span class="attr">dataMat</span> = \[\]</span><br><span class="line">    <span class="attr">labelMat</span> = \[\]</span><br><span class="line">    <span class="attr">fr</span> = open('testSet.txt')</span><br><span class="line">    for line <span class="keyword">in</span> fr.readlines():</span><br><span class="line">        <span class="attr">lineArr</span> = line.strip().split()</span><br><span class="line">        dataMat.append(\[<span class="number">2.0</span>,float(lineArr\[<span class="number">0</span>\]),float(lineArr\[<span class="number">1</span>\])\])   <span class="comment">#读取前两个字符作为X1和X2</span></span><br><span class="line">        labelMat.append(int(lineArr\[<span class="number">2</span>\]))  <span class="comment">#读取后面的标签</span></span><br><span class="line">    return dataMat,labelMat</span><br><span class="line"></span><br><span class="line"><span class="comment">#sigmoid 函数</span></span><br><span class="line">def sigmoid(inX):</span><br><span class="line">    return <span class="number">1.0</span>/(<span class="number">1</span> + np.exp(-inX)) <span class="comment">#公式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#梯度上升优化算法</span></span><br><span class="line">def gradAscent(dataMatIn,classLabels):</span><br><span class="line">    <span class="comment">#dataMatIn是一个二维numpy数组每一列分别代表每个不同的特征，每行则代表每个训练样本</span></span><br><span class="line">    <span class="attr">dataMatrix</span> = np.mat(dataMatIn)</span><br><span class="line">    <span class="attr">labelMat</span> = np.mat(classLabels).transpose()</span><br><span class="line">    <span class="comment">#上面是将数据转换为numpy矩阵</span></span><br><span class="line">    m,<span class="attr">n</span> = np.shape(dataMatrix)</span><br><span class="line">    <span class="attr">alpha</span> = <span class="number">0.001</span>  <span class="comment">#是步长</span></span><br><span class="line">    <span class="attr">maxCycle</span> = <span class="number">500</span>  <span class="comment">#迭代次数</span></span><br><span class="line">    <span class="attr">weight</span> = np.ones((n,<span class="number">1</span>)) <span class="comment">#初始化最佳参数 numpy矩阵的n是dataMatrix中的列数也就是每个数据特征值的个数</span></span><br><span class="line">    <span class="comment">#矩阵相乘</span></span><br><span class="line">    for k <span class="keyword">in</span> range(maxCycle): <span class="comment">#进行maxCycle词迭代</span></span><br><span class="line">        <span class="attr">example</span> = dataMatrix * weight  <span class="comment">#实现的是三个特征值乘以weight然后相加</span></span><br><span class="line">        <span class="attr">h</span> = sigmoid(dataMatrix * weight)  <span class="comment">#调用sigmoid函数得到每个数据通过使用sigmoid计算得到的值 位于0-1之间</span></span><br><span class="line">        <span class="attr">error</span> = (labelMat - h)  <span class="comment">#通过计算原值和分类值的差值</span></span><br><span class="line">        <span class="attr">example1</span> = dataMatrix.transpose()  <span class="comment">#矩阵转置</span></span><br><span class="line">        <span class="attr">weight</span> = weight + alpha * dataMatrix.transpose() * error  <span class="comment">#按照差值的重新调整回归系数</span></span><br><span class="line">return weight  <span class="comment">#返回新的回归系数</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">import</span> logRegres</span><br><span class="line"></span><br><span class="line">dataArr,<span class="attr">labelMat</span> = logRegres.loadDataSet()</span><br><span class="line">print(dataArr,labelMat)</span><br><span class="line">print(logRegres.gradAscent(dataArr,labelMat))</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/5.png" alt=""> 详细的代码运行过程，可以通过debug自行去了解，这里我推荐使用spyder 它的debug调试过程能够清楚的看到每个数据。</p>
]]></content>
      <categories>
        <category>logistic回归</category>
        <category>文章页</category>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Algorithm</tag>
        <tag>Logistic</tag>
        <tag>梯度上升算法</tag>
      </tags>
  </entry>
  <entry>
    <title>轮盘赌选择算法</title>
    <url>/2018/03/25/lun-pan-du-xuan-ze-suan-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/u35397200224224781813fm15gp0-300x201.jpg" alt=""> 轮盘赌算法：我所接触到的轮盘赌算法是我在用遗传算法解决旅行商问题时所用到的，用它来选择能够遗传下来的算子。 正所谓物竞天择，适者生存嘛。 它的基本思想：各个个体被选中的概率与其适应度函数值大小成正比。设群体大小为N，个体xi的适应度为 f(xi)，则个体xi的选择概率为： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180325181020.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-2-263x300.jpg" alt=""> 正如适应度轮盘所显示的，适应度高的会被选择的概率就高，而适应度正是根据基因的好坏所进行的积累。 根据这个特性就可以在遗传算法中应用： 通过如下过程来模拟： 1.在某个区间内（一般是0到1）生成一个随机数 2.根据各个染色体的适应度来和该随机数进行比较 3.如果某个染色体的适应度大于该随机数则该染色体被选中 这样就可以得到遗传的一代染色体。 能够很好的进行优秀父代的选择。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/cropped-timg-300x300.jpg" alt=""></p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>轮盘赌算法</tag>
      </tags>
  </entry>
  <entry>
    <title>MatLab学习笔记（二）</title>
    <url>/2018/07/09/matlab-xue-xi-bi-ji-er-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180706191552.png" alt=""></p>
<p>** 数值表示、变量及表达式**</p>
<p>变量命名规则：</p>
<ul>
<li>变量名、函数名对字母的大小写是敏感的。</li>
<li>变量名第一个字母必须是英文字母。（这里和其他语言不同）</li>
<li>变量名可以包含数字、字母、下划线</li>
<li>变量名不能包含空格和标点符号</li>
<li>变量名最多可以包含63个字符</li>
</ul>
<p><strong>Matlab中已经预定义的变量：</strong></p>
<p>ans</p>
<p>最近计算的正确结果的变量名（实时更新）</p>
<p>eps</p>
<p>Matlab定义的正的极小值=2.2204e-16</p>
<p>pi</p>
<p>圆周率π</p>
<p>inf</p>
<p>无限大</p>
<p>i或j</p>
<p>虚数单元、sqrt（-1）</p>
<p>NaN</p>
<p>非数，0/0</p>
<p><strong>基本的运算符</strong></p>
<p>运算</p>
<p>Matlab运算符</p>
<p>Matlab表达式</p>
<p>加</p>
<ul>
<li></li>
</ul>
<p>a+b</p>
<p>减</p>
<ul>
<li></li>
</ul>
<p>a-b</p>
<p>乘</p>
<ul>
<li></li>
</ul>
<p>a*b</p>
<p>除</p>
<p>/</p>
<p>a/b</p>
<p>幂</p>
<p>^</p>
<p>a^b</p>
<p>复数及其运算 Matlab中的复数表达式为 ai+b ，在matlab中把复数作为一个整体来计算 例如：</p>
<blockquote>
<p>&gt; z1 = 3 + 4i ; z2 = 1 + 2i;</p>
</blockquote>
<blockquote>
<p>&gt; z3 = z1 + z2;</p>
</blockquote>
<blockquote>
<p>&gt; z3</p>
</blockquote>
<p>z3 =</p>
<p>4.0000 + 6.0000i</p>
<p><strong>Matlab中矩阵（数组）的表示</strong> 数组的定义和其他语言的数组差不多，大家只要有C语言基础的话都是可以理解的（下标都是从1开始的）。 一般把一维数组都称为向量，二维数组称为矩阵 对于有效矩阵，就是标准矩阵 行数等于列数   在matlab中数组元素的访问通过  数组名（行号，列号） 来访问。 <strong>创建一维数组：</strong> <strong>第一种方法：</strong>   用[ ]直接创建  数组名=[1,2,3等其他数值]  习惯上用逗号分隔开</p>
<blockquote>
<p>&gt; a = [1,3,pi,3+5*i]</p>
</blockquote>
<p>a =</p>
<p>1.0000 + 0.0000i   3.0000 + 0.0000i   3.1416 + 0.0000i   3.0000 + 5.0000i</p>
<p><strong>第二种方法：</strong>    使用冒号“：”进行创建  格式： 数组名=起始数值（：间隔）：结束数值</p>
<blockquote>
<p>&gt; b = 1:3:10</p>
</blockquote>
<p>b =</p>
<p>1     4     7    10</p>
<p><strong>第三种方法：</strong>    利用函数linspace创建  语法： 数组名=linspace（x1，x2，n）  x1为第一个元素，x2位第二个元素，n为总的元素个数 ，元素之间的间隔 = （x2-x1）/（n-1） 例如：</p>
<blockquote>
<p>&gt; c = linspace(1,10,3)</p>
</blockquote>
<p>c =</p>
<p>1.0000    5.5000   10.0000</p>
<p><strong>第四种方法</strong>：利用函数logspace 创建列向量（使用“；”冒号）：</p>
<blockquote>
<p>&gt; d = [1;2;3]</p>
</blockquote>
<p>d =</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>使用单引号“<strong>’</strong>”可以将矩阵转置</p>
<blockquote>
<p>&gt; e = [1,2,3;4,5,6]</p>
</blockquote>
<p>e =</p>
<p>1     2     3</p>
<p>4     5     6</p>
<blockquote>
<p>&gt; e’</p>
</blockquote>
<p>ans =</p>
<p>1     4</p>
<p>2     5</p>
<p>3     6</p>
<p><strong>第五种</strong> Var = expression  var为变量名  expression为合法的表达式 同样里面可以用一个数组来初始化另一个数组</p>
<blockquote>
<p>&gt; f = [a,6+1,7]</p>
</blockquote>
<p>f =</p>
<p>1.0000 + 0.0000i   3.0000 + 0.0000i   3.1416 + 0.0000i   3.0000 + 5.0000i   7.0000 + 0.0000i   7.0000 + 0.0000i</p>
<p><strong>创建二维数组：</strong> <strong>第一种直接创建（使用[ ]）：</strong></p>
<blockquote>
<p>&gt; a = [1,2,3;4,5,6;7,8,9]</p>
</blockquote>
<p>a =</p>
<p>1     2     3</p>
<p>4     5     6</p>
<p>7     8     9</p>
<p><strong>第二种使用函数的方法创建：</strong> ones（生成全1矩阵） zeros（生成全0矩阵）、reshape（将一维数组按照要求转化为二维数组）   用法类似python中numpy使用</p>
<blockquote>
<p>&gt; ones(3,3)</p>
</blockquote>
<p>ans =</p>
<p>1     1     1</p>
<p>1     1     1</p>
<p>1     1     1</p>
<blockquote>
<p>&gt; zeros(3,3)</p>
</blockquote>
<p>ans =</p>
<p>0     0     0</p>
<p>0     0     0</p>
<p>0     0     0</p>
<blockquote>
<p>&gt; a = 1:2:11</p>
</blockquote>
<p>a =</p>
<p>1     3     5     7     9    11</p>
<blockquote>
<p>&gt; b = reshape(a,2,3)</p>
</blockquote>
<p>b =</p>
<p>1     5     9</p>
<p>3     7    11</p>
<p>使用一维数组给全0二维矩阵赋值时的访问顺序（要注意）</p>
<p>c =</p>
<p>1     2     3     4     5     6     7     8     9</p>
<blockquote>
<p>&gt; ans(:) = c</p>
</blockquote>
<p>ans =</p>
<p>1     4     7</p>
<p>2     5     8</p>
<p>3     6     9</p>
<p>下表访问：（和其他编程语言相似都是通过下标访问在matlab中使用（）来，但是注意下标是从1开始的） 可以同时通过下标访问多个元素：</p>
<blockquote>
<p>&gt; a = linspace(1,10,5)<br>
a =<br>
    1.0000    3.2500    5.5000    7.7500   10.0000</p>
</blockquote>
<blockquote>
<p>&gt; a([1,3,5])<br>
ans =</p>
</blockquote>
<p>1.0000    5.5000   10.0000</p>
<p>同样可以多次重复访问某一元素</p>
<p>c =</p>
<p>1     2     3     4     5     6     7     8     9</p>
<blockquote>
<p>&gt; c([1,2,1,2,1,2])</p>
</blockquote>
<p>ans =</p>
<p>1     2     1     2     1     2</p>
<p>通过将间隔改为负数可以得到逆序</p>
<blockquote>
<p>&gt; c</p>
</blockquote>
<p>c =</p>
<p>1     2     3     4     5     6     7     8     9</p>
<blockquote>
<p>&gt; c(4:-1:2)</p>
</blockquote>
<p>ans =</p>
<p>4     3     2</p>
<p>end可以得到同指定下标到末尾下标的数组</p>
<blockquote>
<p>&gt; c(3:end)</p>
</blockquote>
<p>ans =</p>
<p>3     4     5     6     7     8     9</p>
<p>也可以通过下标直接修改元素的值：</p>
<blockquote>
<p>&gt; c(1)=0</p>
</blockquote>
<p>c =</p>
<p>0     2     3     4     5     6     7     8     9</p>
<p>需要特别注意的是二维数组如果按照顺序排列是按照列来排序的，因此如果使用的单个下标的话，需要按照列来计算 例如：</p>
<blockquote>
<p>&gt; a = zeros(2,3)</p>
</blockquote>
<p>a =</p>
<p>0     0     0</p>
<p>0     0     0</p>
<blockquote>
<p>&gt; b = 1:6</p>
</blockquote>
<p>b =</p>
<p>1     2     3     4     5     6</p>
<blockquote>
<p>&gt; a(:) = b</p>
</blockquote>
<p>a =</p>
<p>1     3     5</p>
<p>2     4     6</p>
<blockquote>
<p>&gt; a(2,1)</p>
</blockquote>
<p>ans =</p>
<p>2</p>
<blockquote>
<p>&gt; a(2)</p>
</blockquote>
<p>ans =</p>
<p>2</p>
<p>双下标寻址方式：</p>
<blockquote>
<p>&gt; a(:,[2,3]) = 8</p>
</blockquote>
<p>a =</p>
<p>1     8     8</p>
<p>2     8     8</p>
<p>数组的length和size函数 Size函数返回变量的大小即变量数组的行数和列数</p>
<blockquote>
<p>&gt; size(a)</p>
</blockquote>
<p>ans =</p>
<p>2     3</p>
<p>Length函数返回变量数组的最大维数</p>
<blockquote>
<p>&gt; b = [1:6]</p>
</blockquote>
<p>b =</p>
<p>1     2     3     4     5     6</p>
<blockquote>
<p>&gt; length(a)</p>
</blockquote>
<p>ans =</p>
<p>3</p>
<blockquote>
<p>&gt; length(b)</p>
</blockquote>
<p>ans =</p>
<p>6</p>
<blockquote>
<p>&gt; b’</p>
</blockquote>
<p>ans =</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<p>5</p>
<p>6</p>
<blockquote>
<p>&gt; length(b’)</p>
</blockquote>
<p>ans =</p>
<p>6</p>
]]></content>
      <categories>
        <category>MatLab</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>MatLab</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MatLab学习笔记（一）</title>
    <url>/2018/07/06/matlab-xue-xi-bi-ji-yi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180706191552.png" alt=""></p>
<p><strong>Matlab基础学习</strong></p>
<p>命令窗口的使用（注意在每个语句结尾加上分号则不会显示该值除非你调用该值时才会显示）</p>
<p>① 直接输入简单公式按回车得到运算结果：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt;\&gt; \[<span class="number">12</span>+<span class="number">2</span>*(<span class="number">7</span><span class="number">-4</span>)\]/<span class="number">3</span>^<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>ans =</p>
<p>2</p>
<p>② 不仅支持简单的乘除法平方运算还支持sin（）cos（）sqrt（）等运算</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">&gt;\&gt; sin(<span class="number">45</span>*pi/<span class="number">180</span>)</span><br></pre></td></tr></table></figure>
<p>ans =</p>
<p>0.7071</p>
<p>这里的pi表示π ③ clc清除当前界面所有内容的命令 ④ 名字=公式 得到的结果显示为名字=结果（就不会在以answer来显示了）</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&gt;\&gt;<span class="built_in"> area </span>= pi<span class="number">*5</span>.2^2</span><br></pre></td></tr></table></figure>
<p>area =</p>
<p>84.9487</p>
<p>⑤ 常见的通用命令</p>
<p><strong>clc</strong></p>
<p><strong>清除命令窗口的显示内容</strong></p>
<p><strong>clear</strong></p>
<p><strong>清除matlab工作空间中保存的变量</strong></p>
<p><strong>who或whos</strong></p>
<p><strong>显示matlab工作空间中的变量信息</strong></p>
<p><strong>dir</strong></p>
<p><strong>显示当前工作目录的文件和子目录清单</strong></p>
<p><strong>cd</strong></p>
<p><strong>显示或设置当前工作目录</strong></p>
<p><strong>type</strong></p>
<p><strong>显示指定m文件的内容</strong></p>
<p><strong>Help或doc</strong></p>
<p><strong>获取在线帮助</strong></p>
<p><strong>Quit或exit</strong></p>
<p><strong>关闭或退出matlab</strong></p>
<p>具体的使用可以自行尝试 ⑥ 求取方程的全部根（使用roots） 建立方程： p = [2,0,71,-9,13];  %建立多项式系数向量 对应方程为<img src="http://47.100.4.8/wp-content/uploads/2018/07/1-3.png" alt=""> 这个只能靠记。 使用roots（得到所有结果） 代码：</p>
<blockquote>
<p>&gt; p = [2,0,71,-9,13];  %建立多项式系数向量</p>
</blockquote>
<blockquote>
<p>&gt; x = roots§;</p>
</blockquote>
<blockquote>
<p>&gt; x</p>
</blockquote>
<p>x =</p>
<p>-0.0640 + 5.9438i</p>
<p>-0.0640 - 5.9438i</p>
<p>0.0640 + 0.4241i</p>
<p>0.0640 - 0.4241i</p>
<p>⑦ 求解线性方程组 <img src="http://47.100.4.8/wp-content/uploads/2018/07/2-1.png" alt=""> 代码：</p>
<blockquote>
<p>&gt; a = [2,3,-1;8,2,3;45,3,9];  %建立系数矩阵a</p>
</blockquote>
<blockquote>
<p>&gt; b = [2;4;23];  %建立结果列向量</p>
</blockquote>
<blockquote>
<p>&gt; x = inv(a)*b;</p>
</blockquote>
<blockquote>
<p>&gt; x</p>
</blockquote>
<p>x =</p>
<p>0.5531</p>
<p>0.2051</p>
<p>-0.2784</p>
<p>要系数放在一个[ ]中 等于的结果放到一个[ ]中 并且不同方程的系数和值要用分号隔开 ⑧ 使用syms 定义符号变量  它定义的符号变量比如x  就是一个变量没有具体的数值，用于多项式等相关运算中。 使用slove（）可以求解方程配合syms使用 可以通过solve和syms配合来对⑦中的方程组来进行计算 代码：</p>
<blockquote>
<p>&gt; syms x y z %声明符号变量</p>
</blockquote>
<blockquote>
<p>&gt; [x,y,z] = solve(2*x+3*y-z-2,8*x+2*y+3*z-4,45*x+3*y+9*z-23)</p>
</blockquote>
<p>x =</p>
<p>151/273</p>
<p>y =</p>
<p>8/39</p>
<p>z =</p>
<p>-76/273</p>
<p>注意的是solve式子没有等号但是等号右边为0 所以要在每个式子分别减去其右边的非0数。   先到这里了，最近有一点小忙，虽然考完试了。\(<sup>o</sup>)/~</p>
]]></content>
      <categories>
        <category>MatLab</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>MatLab</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>maven出现问题的解决办法</title>
    <url>/2018/10/14/maven-chu-xian-wen-ti-de-jie-jue-ban-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/10/QQ%E5%9B%BE%E7%89%8720181014125017.png" alt=""> 由于之前自己的SpringBoost出现了运行方面的问题，根据报错看出是maven.jar包管理上面的问题。因此这里总结了一下尝试过的方法。</p>
<ol>
<li>可以尝试project中clean来清除一下试试</li>
<li>如果出现SQLServerDirver报错lang.IllegalStateException: Cannot load driver class: com.microsoft.sqlserver.jdbc.SQLServerDri 可以先去看看application.properties中的spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=SuperMarket和spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver是否出现书写错误，如果没有则看看是否有一些多余的空格没有删除</li>
<li>如果上面方法仍然行不通，可以去看报错中那个文件包报错，在E:\MavenReports\mavenjar\com删除出错的包，然后在xml中随便删除一个字符然后在添加回去，保存会自动下载对应的包，再次运行看看是否能正确运行。</li>
<li>以上方法均是在保证代码书写正确时来进行操作的，如果代码方面有问题，可以看一下dao包、service包、Implement包和mapper文件中中函数名称是否对应，调用的参数是否对应等等都需要注意是否一致。还有就是注入的方法@Autowired是否书写 ，还有@Controller是否在Controller类中书写，以及在ServiceImpl实现类中是否输出@Service，最后就是确定接口文件和实现类是否创建正确。</li>
</ol>
<p>上面的第三种方法 是我最后解决问题的办法，具体原因是因为maven出现了jar包缺少的问题。</p>
]]></content>
      <categories>
        <category>Maven</category>
        <category>SQLServer</category>
        <category>Web</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>maven</tag>
        <tag>问题解决</tag>
        <tag>SQLServer</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟退火算法（SAA）</title>
    <url>/2018/03/24/mo-ni-tui-huo-suan-fa-saa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180324133549-222x300.png" alt=""></p>
<h3 id="简介："><a class="header-anchor" href="#简介：">¶</a>简介：</h3>
<h3 id="模拟退火算法-是一种通用概率演算法，用来在一个大的搜寻空间内找寻命题的最优解。-它是基于Monte-Carlo迭代求解策略的一种随机寻优算法。模拟退火算法是解决TSP问题的有效方法之一。"><a class="header-anchor" href="#模拟退火算法-是一种通用概率演算法，用来在一个大的搜寻空间内找寻命题的最优解。-它是基于Monte-Carlo迭代求解策略的一种随机寻优算法。模拟退火算法是解决TSP问题的有效方法之一。">¶</a>模拟退火算法**是一种通用概率演算法，用来在一个大的搜寻空间内找寻命题的最优解。**它是基于Monte-Carlo迭代求解策略的一种随机寻优算法。<strong>模拟退火算法是解决TSP问题的有效方法之一。</strong></h3>
<p>模拟退火算法来源于固体退火原理。 固体退火：将固体加温至充分高，再让其徐徐冷却，加温时，固体内部粒子随<a href="https://baike.baidu.com/item/%E6%B8%A9%E5%8D%87">温升</a>变为无序状，内能增大，而徐徐冷却时粒子渐趋有序，在每个温度都达到平衡态，最后在常温时达到基态，内能减为最小。 ——百度百科 为了介绍模拟退火算法就必须为大家介绍一下爬山算法，简单地说模拟退火算法是在该算法上的改进。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/u25054793203405929506fm27gp0-300x97.jpg" alt=""> 这里的爬山算法就是一种简单的贪心算法，它又可以成为局部搜索算法，如上图所显示的，当它处于C点时，他回去寻找临近空间的最优解即为A点，但是当它找到A点时后，就不会在继续往下去搜索了，这就导致了在搜索过程陷入局部最优解中而出不来以至于找不到最优解。 相遇比较与非常贪心的爬山算法，模拟退火算法，则是一种全局搜索算法（它也是一种贪心算法）全局的意义在于：它在到达局部最优解时，会有一定的概率继续向右移动，以上图为例：当到达局部最优解A后会有一定的概率继续到达E点然后继续向右搜索，这样的过程就有可能会找到全局最优解B了。 关于上面提到的一定的概率解释如下： 如果：F（t+1）&lt;=F(t)即为移动后会有更优解，那么下次移动就一定会被接收 如果：F(t+1)&gt;F(t) 即为可能移动后的解比当前的解要差，则只能以一定的概率接收而这样的概率会逐渐减弱。这样的减弱取决于衰弱值a。当然减弱也要有一定的限度，即为最后趋于稳定的值。 下面是它的伪代码： <img src="http://47.100.4.8/wp-content/uploads/2018/03/%E8%A1%8C%E6%94%BF%E6%9D%91%E8%87%AA%E8%A1%8C%E8%BD%A6-300x190.png" alt="">   这就是模拟退火算法的主要思想介绍。 以上内容一部分参考了网络上别人的一些博文。</p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>SA</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟退火算法（SA）解决TSP问题</title>
    <url>/2018/09/17/mo-ni-tui-huo-suan-fa-sa-jie-jue-tsp-wen-ti-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/09/QQ%E5%9B%BE%E7%89%8720180917174510.png" alt=""></p>
<p><strong>使用SA来解决TSP问题</strong></p>
<p>模拟退火算法基本原理： 模拟退火（SA）算法的出发点是基于物理中固体物质的退火过程与一般的组合优化问题之间的相似性。模拟退火法是一种通用的优化算法，其物理退火过程由以下三部分组成：</p>
<ul>
<li>加温过程。其目的是增强粒子的热运动，使其偏离平衡位置。当温度足够高时，固体将熔为液体，从而消除系统原先存在的非均匀状态。</li>
<li>等温过程。对于与周围环境交换热量而温度不变的封闭系统，系统状态的自发变化总是朝自由能减少的方向进行的，当自由能达到最小时，系统达到平衡状态。</li>
<li>冷却过程。使粒子热运动减弱，系统能量下降，得到晶体结构。</li>
</ul>
<p>其中，加温过程对应算法的设定初温，等温过程对应算法的Metropolis抽样过程，冷却过程对应控制参数的下降。这里能量的变化就是目标函数，要得到的最优解就是能量低态。Metropolis准则是SA算法收敛于全局最优解的关键所在，Metropolis准则以一定的概率接受恶化解，这样就使算法跳离局部最优的陷阱。 模拟退火算法为求解传统方法难处理的TSP问题提供了一个有效的途径和通用框架，并逐渐发展成一种迭代自适应启发式概率性搜索算法。模拟退火算法可以用求解不同的非线性问题，对不可微甚至不连续的函数优化，能以较大概率求得全局优化解，该算法还具有较强的鲁棒性、全局收敛性、隐含并行性及广泛的适应性，并且能处理不同类型的优化设计变量（离散的、连续的和混合型的），不需要任何的辅助信息，对目标函数和约束函数没有任何要求。利用Metropolis算法并适当地控制温度下降过程，在优化问题中具有很强的竞争力。   SA算法实现过程如下（以最小化问题为例） ：</p>
<ul>
<li>初始化：取初始温度T0足够大，令T=T0，任取初始解S1，确定每个T时的迭代次数，即Metropolis链长L</li>
<li>对当前温度T和k=1,2，……，L重复步骤（3）~（5）</li>
<li>对当前解S1随机扰动产生一个新解S2</li>
<li>计算S2的增量df=f（S2）-f（S1），其中f（S1）为S1的代价函数</li>
<li>若df&lt;0，则接受S2作为新的当前解， 即S1=S2；否则计算S2的接受概率exp（-df/T），即随机产生（0,1）区间上均匀分布的随机数rand，若exp（-df/T）&gt;rand，也接受S2作为新的当前解，S1=S2；否则保留当前解S1。</li>
<li>如果满足终止条件Stop，则输出当前解S1为最优解，结束程序。终止条件Stop通常为：在连续若干个Metropolis链中新解S2都没有被接受时终止算法，或是设定结束温度。否则按衰减函数衰减T后返回步骤（2）。</li>
</ul>
<p>以上步骤称为Metropolis过程。逐渐降低控制温度，重复Metropolis过程，直至满足结束准备则Stop，求出最优解。   算法流程： <img src="http://47.100.4.8/wp-content/uploads/2018/09/321.png" alt=""> 模拟退火算法实现： （1）控制参数的设置 需要设置的主要参数有降温速率q、初始温度T0、结束温度Tend以及链长L。 （2）初始解 对于n个城市的TSP问题，得到的解就是对1~n的一个排序，其中每个数字为对应城市的编号，如对10个城市的TSP问题{1,2,3,4,5,6,7,8,9,10}，则|1|3|5|2|4|9|7|8|6|10|就是一个合法的解，采用产生随机排列的方法产生一个初始的解S。 （3）解变换生成新解 通过对当前解S1进行变换，产生新的路径数组即新解，这里采用的变换是产生随机数的方法来产生将要交换的两个城市，用二邻域变换法产生新的路径，即新的可行解S2。 （4）Metropolis准则fdf 若路径长度函数为f（S），则当前解的路径为f（S1），新解的路径为f（S2），路径差为 df=f（S2）-f（S1），则Metropolis准则为： <img src="http://47.100.4.8/wp-content/uploads/2018/09/333.png" alt=""> 如果df&lt;0，则以概率1接收新的路径了；否则以概率exp（-df/T）接收新的路径。 （5）降温 利用降温速率q进行降温，即T=qT，若T小于结束温度，则停止迭代输出当前状态，否则继续迭代。   程序实现 主程序代码：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc;</span><br><span class="line">clear;</span><br><span class="line">close all;</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">tic</span><br><span class="line">T0=<span class="number">1000</span>;   <span class="comment">% 初始温度</span></span><br><span class="line">Tend=<span class="number">1e-3</span>;  <span class="comment">% 终止温度</span></span><br><span class="line">L=<span class="number">500</span>;    <span class="comment">% 各温度下的迭代次数（链长L）</span></span><br><span class="line">q=<span class="number">0.9</span>;    <span class="comment">%降温速率</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 加载数据</span></span><br><span class="line">load CityPosition1;</span><br><span class="line"><span class="comment">%%</span></span><br><span class="line">D=Distanse(X);  <span class="comment">%计算距离矩阵</span></span><br><span class="line">N=<span class="built_in">size</span>(D,<span class="number">1</span>);    <span class="comment">%城市的个数</span></span><br><span class="line"><span class="comment">%% 初始解</span></span><br><span class="line">S1=randperm(N);  <span class="comment">%随机产生一个初始路线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 画出随机解的路径图</span></span><br><span class="line">DrawPath(S1,X)</span><br><span class="line">pause(<span class="number">0.0001</span>)</span><br><span class="line"><span class="comment">%% 输出随机解的路径和总距离</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'初始种群中的一个随机值:'</span>)</span><br><span class="line">OutputPath(S1);  <span class="comment">%输出用-&gt;表示的路径</span></span><br><span class="line">Rlength=PathLength(D,S1); <span class="comment">%输出路径总长度</span></span><br><span class="line"><span class="built_in">disp</span>(\[<span class="string">'总距离：'</span>,num2str(Rlength)\]);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 计算迭代的次数Time</span></span><br><span class="line"><span class="comment">%参考下面代码来修改solve式子</span></span><br><span class="line"><span class="comment">%syms x</span></span><br><span class="line"><span class="comment">%eqn = sin(x) == 1;</span></span><br><span class="line"><span class="comment">%solx = solve(eqn,x)</span></span><br><span class="line">syms x;</span><br><span class="line">eqns = <span class="number">1000</span>*(<span class="number">0.9</span>)^x == Tend; <span class="comment">%Time表示通过计算得到的迭代次数</span></span><br><span class="line">Time=<span class="built_in">ceil</span>(double(solve(eqns,x)));  <span class="comment">%ceil（小数）为朝着大整数 取整</span></span><br><span class="line">count=<span class="number">0</span>;        <span class="comment">%迭代计数</span></span><br><span class="line">Obj=<span class="built_in">zeros</span>(Time,<span class="number">1</span>);         <span class="comment">%目标值矩阵初始化</span></span><br><span class="line">track=<span class="built_in">zeros</span>(Time,N);       <span class="comment">%每代的最优路线矩阵初始化</span></span><br><span class="line"><span class="comment">%% 迭代</span></span><br><span class="line"><span class="keyword">while</span> T0&gt;Tend</span><br><span class="line">    count=count+<span class="number">1</span>;     <span class="comment">%更新迭代次数</span></span><br><span class="line">    temp=<span class="built_in">zeros</span>(L,N+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> k=<span class="number">1</span>:L</span><br><span class="line">        <span class="comment">%% 产生新解</span></span><br><span class="line">        S2=NewAnswer(S1);</span><br><span class="line">        <span class="comment">%% Metropolis法则判断是否接受新解</span></span><br><span class="line">        \[S1,R\]=Metropolis(S1,S2,D,T0);  <span class="comment">%Metropolis 抽样算法</span></span><br><span class="line">        temp(k,:)=\[S1 R\];          <span class="comment">%记录下一路线的及其路程</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment">%% 记录每次迭代过程的最优路线</span></span><br><span class="line">    \[d0,index\]=<span class="built_in">min</span>(temp(:,<span class="keyword">end</span>)); <span class="comment">%找出当前温度下最优路线</span></span><br><span class="line">    <span class="keyword">if</span> count==<span class="number">1</span> || d0&lt;Obj(count<span class="number">-1</span>)</span><br><span class="line">        Obj(count)=d0;           <span class="comment">%如果当前温度下最优路程小于上一路程则记录当前路程</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        Obj(count)=Obj(count<span class="number">-1</span>);<span class="comment">%如果当前温度下最优路程大于上一路程则记录上一路程</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    track(count,:)=temp(index,<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>);  <span class="comment">%记录当前温度的最优路线</span></span><br><span class="line">    T0=q*T0;     <span class="comment">%降温</span></span><br><span class="line">    fprintf(<span class="number">1</span>,<span class="string">'%d\\n'</span>,count)  <span class="comment">%输出当前迭代次数</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%% 优化过程迭代图</span></span><br><span class="line"><span class="built_in">figure</span></span><br><span class="line"><span class="built_in">plot</span>(<span class="number">1</span>:count,Obj)</span><br><span class="line">xlabel(<span class="string">'迭代次数'</span>)</span><br><span class="line">ylabel(<span class="string">'距离'</span>)</span><br><span class="line">title(<span class="string">'优化过程'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 最优解的路径图</span></span><br><span class="line">DrawPath(track(<span class="keyword">end</span>,:),X)</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 输出最优解的路线和总距离</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'最优解:'</span>)</span><br><span class="line">S=track(<span class="keyword">end</span>,:);</span><br><span class="line">p=OutputPath(S);</span><br><span class="line"><span class="built_in">disp</span>(\[<span class="string">'总距离：'</span>,num2str(PathLength(D,S))\]);</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'-------------------------------------------------------------'</span>)</span><br><span class="line">toc</span><br><span class="line"></span><br><span class="line">Distance函数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">D</span>=<span class="title">Distanse</span><span class="params">(a)</span></span></span><br><span class="line"><span class="comment">%% 计算两两城市之间的距离</span></span><br><span class="line"><span class="comment">%输入 a  各城市的位置坐标</span></span><br><span class="line"><span class="comment">%输出 D  两两城市之间的距离</span></span><br><span class="line">row=<span class="built_in">size</span>(a,<span class="number">1</span>);  <span class="comment">%得到城市总数</span></span><br><span class="line">D=<span class="built_in">zeros</span>(row,row);  <span class="comment">%初始化城市距离矩阵</span></span><br><span class="line"><span class="comment">%计算每一个城市和其他城市之间的距离</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:row</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">j</span>=<span class="built_in">i</span>+<span class="number">1</span>:row</span><br><span class="line">        D(<span class="built_in">i</span>,<span class="built_in">j</span>)=((a(<span class="built_in">i</span>,<span class="number">1</span>)-a(<span class="built_in">j</span>,<span class="number">1</span>))^<span class="number">2</span>+(a(<span class="built_in">i</span>,<span class="number">2</span>)-a(<span class="built_in">j</span>,<span class="number">2</span>))^<span class="number">2</span>)^<span class="number">0.5</span>;</span><br><span class="line">        D(<span class="built_in">j</span>,<span class="built_in">i</span>)=D(<span class="built_in">i</span>,<span class="built_in">j</span>);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">DrawPath函数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DrawPath</span><span class="params">(Chrom,X)</span></span></span><br><span class="line"><span class="comment">%% 画路径函数</span></span><br><span class="line"><span class="comment">%输入</span></span><br><span class="line"><span class="comment">% Chrom  待画路径   </span></span><br><span class="line"><span class="comment">% X      各城市坐标位置</span></span><br><span class="line">R=\[Chrom(<span class="number">1</span>,:) Chrom(<span class="number">1</span>,<span class="number">1</span>)\]; <span class="comment">%一个随机解(个体)  构成路径的循环</span></span><br><span class="line"><span class="built_in">figure</span>;</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="comment">%% 画点操作</span></span><br><span class="line"><span class="built_in">plot</span>(X(:,<span class="number">1</span>),X(:,<span class="number">2</span>),<span class="string">'o'</span>,<span class="string">'color'</span>,\[<span class="number">0.5</span>,<span class="number">0.5</span>,<span class="number">0.5</span>\])</span><br><span class="line"><span class="built_in">plot</span>(X(Chrom(<span class="number">1</span>,<span class="number">1</span>),<span class="number">1</span>),X(Chrom(<span class="number">1</span>,<span class="number">1</span>),<span class="number">2</span>),<span class="string">'rv'</span>,<span class="string">'MarkerSize'</span>,<span class="number">20</span>) <span class="comment">%标出起始点的位置</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">size</span>(X,<span class="number">1</span>)</span><br><span class="line">    text(X(<span class="built_in">i</span>,<span class="number">1</span>)+<span class="number">0.05</span>,X(<span class="built_in">i</span>,<span class="number">2</span>)+<span class="number">0.05</span>,num2str(<span class="built_in">i</span>),<span class="string">'color'</span>,\[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>\]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%% 画线操作</span></span><br><span class="line">A=X(R,:);</span><br><span class="line">row=<span class="built_in">size</span>(A,<span class="number">1</span>); <span class="comment">%得到路径上经过城市数（包括头尾城市）</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:row</span><br><span class="line">    \[arrowx,arrowy\] = dsxy2figxy(gca,A(<span class="built_in">i</span><span class="number">-1</span>:<span class="built_in">i</span>,<span class="number">1</span>),A(<span class="built_in">i</span><span class="number">-1</span>:<span class="built_in">i</span>,<span class="number">2</span>));<span class="comment">%坐标转换</span></span><br><span class="line">    annotation(<span class="string">'textarrow'</span>,arrowx,arrowy,<span class="string">'HeadWidth'</span>,<span class="number">8</span>,<span class="string">'color'</span>,\[<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>\]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">%% 构图信息</span></span><br><span class="line"><span class="built_in">hold</span> off</span><br><span class="line">xlabel(<span class="string">'横坐标'</span>)</span><br><span class="line">ylabel(<span class="string">'纵坐标'</span>)</span><br><span class="line">title(<span class="string">'轨迹图'</span>)</span><br><span class="line">box on </span><br><span class="line"></span><br><span class="line">Output函数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p</span>=<span class="title">OutputPath</span><span class="params">(R)</span></span></span><br><span class="line"><span class="comment">%% 输出路径函数</span></span><br><span class="line"><span class="comment">%输入：R 路径</span></span><br><span class="line">R=\[R,R(<span class="number">1</span>)\];</span><br><span class="line">N=<span class="built_in">length</span>(R);</span><br><span class="line">p=num2str(R(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">2</span>:N</span><br><span class="line">    p=\[p,<span class="string">'—&gt;'</span>,num2str(R(<span class="built_in">i</span>))\];</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">disp</span>(p) </span><br><span class="line"></span><br><span class="line">PathLength函数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">len</span>=<span class="title">PathLength</span><span class="params">(D,Chrom)</span></span></span><br><span class="line"><span class="comment">%% 计算各个体的路径长度</span></span><br><span class="line"><span class="comment">% 输入：</span></span><br><span class="line"><span class="comment">% D     两两城市之间的距离</span></span><br><span class="line"><span class="comment">% Chrom 个体的轨迹</span></span><br><span class="line">\[row,col\]=<span class="built_in">size</span>(D); <span class="comment">%得到距离矩阵的长和宽</span></span><br><span class="line">NIND=<span class="built_in">size</span>(Chrom,<span class="number">1</span>); <span class="comment">%城市总数 也就得到了总的路径条数</span></span><br><span class="line">len=<span class="built_in">zeros</span>(NIND,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:NIND <span class="comment">%遍历每条路径</span></span><br><span class="line">    p=\[Chrom(<span class="built_in">i</span>,:) Chrom(<span class="built_in">i</span>,<span class="number">1</span>)\]; <span class="comment">%构成经过城市循环</span></span><br><span class="line">    i1=p(<span class="number">1</span>:<span class="keyword">end</span><span class="number">-1</span>);</span><br><span class="line">    i2=p(<span class="number">2</span>:<span class="keyword">end</span>);</span><br><span class="line">    len(<span class="built_in">i</span>,<span class="number">1</span>)=sum(D((i1<span class="number">-1</span>)*col+i2)); <span class="comment">%路径累加</span></span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line">Metropolis函数：</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> \<span class="params">[S,R\]</span>=<span class="title">Metropolis</span><span class="params">(S1,S2,D,T)</span></span></span><br><span class="line"><span class="comment">%% 输入</span></span><br><span class="line"><span class="comment">% S1：  当前解</span></span><br><span class="line"><span class="comment">% S2:   新解</span></span><br><span class="line"><span class="comment">% D:    距离矩阵（两两城市的之间的距离）</span></span><br><span class="line"><span class="comment">% T:    当前温度</span></span><br><span class="line"><span class="comment">%% 输出</span></span><br><span class="line"><span class="comment">% S：   下一个当前解</span></span><br><span class="line"><span class="comment">% R：   下一个当前解的路线距离</span></span><br><span class="line"><span class="comment">%%</span></span><br><span class="line"><span class="comment">%首先根据距离矩阵分别计算两个解的路径长度</span></span><br><span class="line">R1=PathLength(D,S1);  <span class="comment">%计算路线长度</span></span><br><span class="line">N=<span class="built_in">length</span>(S1);         <span class="comment">%得到城市的个数</span></span><br><span class="line"></span><br><span class="line">R2=PathLength(D,S2);  <span class="comment">%计算路线长度</span></span><br><span class="line">dC=R2-R1;   <span class="comment">%计算能力之差</span></span><br><span class="line"><span class="keyword">if</span> dC&lt;<span class="number">0</span>       <span class="comment">%如果能力降低 接受新路线</span></span><br><span class="line">    S=S2;</span><br><span class="line">    R=R2;</span><br><span class="line"><span class="keyword">elseif</span> <span class="built_in">exp</span>(-dC/T)&gt;=<span class="built_in">rand</span>   <span class="comment">%以exp(-dC/T)概率接受新路线</span></span><br><span class="line">    S=S2;</span><br><span class="line">    R=R2;</span><br><span class="line"><span class="keyword">else</span>        <span class="comment">%不接受新路线</span></span><br><span class="line">    S=S1;</span><br><span class="line">    R=R1;</span><br><span class="line">End</span><br></pre></td></tr></table></figure>
<p>随机的路径图： <img src="http://47.100.4.8/wp-content/uploads/2018/09/333333.png" alt=""> 优化后的路径图： <img src="http://47.100.4.8/wp-content/uploads/2018/09/555555555555.png" alt=""> 优化过程； <img src="http://47.100.4.8/wp-content/uploads/2018/09/666666666666.png" alt=""> 初始种群中的一个随机值: 7—&gt;5—&gt;14—&gt;2—&gt;3—&gt;12—&gt;10—&gt;6—&gt;8—&gt;11—&gt;13—&gt;9—&gt;4—&gt;1—&gt;7 总距离：69.3773 最优解: 9—&gt;11—&gt;8—&gt;13—&gt;7—&gt;12—&gt;6—&gt;5—&gt;4—&gt;3—&gt;14—&gt;2—&gt;1—&gt;10—&gt;9 总距离：29.3405 ------------------------------------------------------------- 时间已过 3.718870 秒。   附加：CityPosition包 16.4700000000000        96.1000000000000 16.4700000000000        94.4400000000000 20.0900000000000        92.5400000000000 22.3900000000000        93.3700000000000 25.2300000000000        97.2400000000000 22                                         96.0500000000000 20.4700000000000        97.0200000000000 17.2000000000000        96.2900000000000 16.3000000000000        97.3800000000000 14.0500000000000        98.1200000000000 16.5300000000000        97.3800000000000 21.5200000000000        95.5900000000000 19.4100000000000        97.1300000000000 20.0900000000000        92.5500000000000</p>
]]></content>
      <categories>
        <category>SA</category>
        <category>TSP问题</category>
        <category>优化算法</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>TSP</tag>
        <tag>优化算法</tag>
        <tag>SA</tag>
        <tag>算法那</tag>
      </tags>
  </entry>
  <entry>
    <title>内存回收算法</title>
    <url>/2018/06/02/nei-cun-hui-shou-suan-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180529111458.png" alt=""> <strong>内存回收算法</strong>： 首先是输入你需要归还空间的地址start以及长度length，然后计算出空间的释放区下部地址len，然后循环遍历整个空间说明表，分为以下四种情况：</p>
<ul>
<li>释放区下部邻接空间区</li>
<li>释放区上部邻接空闲区</li>
<li>释放区上下部都邻接空闲区</li>
<li>释放区上下部均不邻接空闲区</li>
</ul>
<p>操作： 对于情况①，更新空间说明表最后一个元素的所有数据即可。 对于情况②，更新空间说明表第一个元素所有数据即可。 对于情况③，更新空间说明表所要释放位置前后元素的所有数据，并且将他们合并为一个。 对于情况④，重新创建一个模块，然后插入进队列即可。 代码：</p>
<p>#include<iostream><br>
#include<deque></p>
<p>using namespace std;</p>
<p>#define numUse 100  //定义空闲区说明表最多有十个可用存储空间</p>
<p>struct Mode{  //定义空闲区说明表<br>
int Start;  //起始地址<br>
int Length;  //长度<br>
char State;  //状态 R为未分配 F为以分配<br>
}mode[numUse];</p>
<p>deque<Mode> Q;  //创建一个空的deque队列用来存储可能空闲空间<br>
deque<Mode>::iterator pos;  //创建迭代器</p>
<p>//回收存储空间算法<br>
void HuiShou()<br>
{<br>
cout&lt;&lt;“Message：请根据空间空闲表来写入合适回收空间！”&lt;&lt;endl;<br>
int start1=0; //初始化<br>
int length1=0;  //初始化<br>
cout&lt;&lt;“请输入起始地址：”;<br>
cin&gt;&gt;start1;<br>
cout&lt;&lt;“请输入长度：”;<br>
cin&gt;&gt;length1;<br>
int len=start1+length1;  //释放区下部<br>
if(len&lt;=(<em>(Q.begin())).Start||start1&gt;=((</em>(Q.end()-1)).Start+(<em>(Q.end()-1)).Length))<br>
{<br>
if(len&lt;(</em>(Q.begin())).Start)<br>
{<br>
mode[n+q].Length=length1;<br>
mode[n+q].Start=start1;<br>
mode[n+q].State=‘R’;<br>
Q.push_front(mode[n+q]);<br>
q++;<br>
}<br>
else if(len==(<em>(Q.begin())).Start)<br>
{<br>
(</em>(Q.begin())).Start=start1;<br>
(<em>(Q.begin())).Length+=length1;<br>
}<br>
else if(start1==((</em>(Q.end()-1)).Start+(<em>(Q.end()-1)).Length))<br>
{<br>
(</em>(Q.end()-1)).Length+=length1;<br>
}<br>
else if(start1&gt;((<em>(Q.end()-1)).Start+(</em>(Q.end()-1)).Length))<br>
{<br>
mode[n+q].Length=length1;<br>
mode[n+q].Start=start1;<br>
mode[n+q].State=‘R’;<br>
Q.push_back(mode[n+q]);<br>
q++;<br>
}<br>
}<br>
else{<br>
for(pos=Q.begin();pos!=Q.end();pos++)<br>
{<br>
if(len==(<em>(pos+1)).Start&amp;&amp;start1==(*pos).Start+(*pos).Length)  //释放区上下部都与空间区邻接<br>
{<br>
(*pos).Length+=(*(pos+1)).Length+length1;<br>
Q.erase((pos+1));<br>
}<br>
else if((len&lt;(</em>(pos+1)).Start)&amp;&amp;(start1&gt;(*pos).Start+(*pos).Length))<br>
{<br>
mode[n+q].Start=start1;<br>
mode[n+q].Length=length1;<br>
mode[n+q].State=‘R’;<br>
Q.insert(pos+1,mode[n+q]);<br>
q++;<br>
}<br>
else if((len&lt;(<em>(pos+1)).Start)&amp;&amp;(start1==(*pos).Start+(*pos).Length))<br>
{<br>
(*pos).Length+=(*(pos+1)).Length+length1;<br>
}<br>
else if((len==(</em>(pos+1)).Start)&amp;&amp;(start1&gt;(*pos).Start+(*pos).Length))<br>
{<br>
(<em>(pos+1)).Start = start1;<br>
(</em>(pos+1)).Length += length1;<br>
}<br>
}<br>
}<br>
}</p>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/06/123.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>NSGA介绍</title>
    <url>/2018/09/05/nsga-jie-shao-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/09/QQ%E5%9B%BE%E7%89%8720180905144023.png" alt=""> <strong>非支配排序遗传算法（NSGA）是基于遗传算法的多目标优化算法，都是基于Pareto最优解讨论的多目标优化算法。</strong>   <strong>1.Pareto支配关系：</strong> 对于最小化多目标问题，n个目标分量fi（i=1……n）组成的向量f（X）=（f1（X），f2（X）……fn（X）），任意给定两个决策变量Xu，Xv∈U： <img src="http://47.100.4.8/wp-content/uploads/2018/09/QQ%E5%9B%BE%E7%89%8720180905143158.png" alt="">   <strong>2.Pareto最优解定义</strong> 多目标优化问题与单目标优化问题有很大差异。当只有一个目标函数时，人们寻找最好的解，这个解优于其他所有解，通常是全局最大或者最小，即全局最优解。而当存在多个目标时，优于目标之间存在冲突无法比较，所以很难找到一个解使得所有目标函数同时最优，也就是说，一个解可能对于某个目标函数是最好的，单对于其他的目标函数却不是最好的，甚至是最差的。因此，对于多目标优化问题，通常存在一个解集，这些解之间就全体目标函数而言是无法比较优劣的，其特点是：无法再改进任何目标函数的同时不削弱至少一个其它目标函数。这种解称作非支配解或者叫 Pareto最优解。   对于最小化多目标问题，n个目标分量fi（i=1……n）组成的向量f（X）=（f1（X），f2（X）……fn（X）），Xu∈U为决策变量，若Xu为Pareto最优解，则需满足： <img src="http://47.100.4.8/wp-content/uploads/2018/09/QQ%E5%9B%BE%E7%89%8720180905143247.png" alt="">   <strong>3.NSGA一般流程</strong> NSGA采用的非支配分层方法，可以使好的个体有更大的机会遗传到下一代；适应度共享策略则是得准Pareto面上的个体均匀分布，保持群体多样性，克服了超级个体的过度繁殖，防止过早的收敛（早熟）。 流程图如下： <img src="http://47.100.4.8/wp-content/uploads/2018/09/%E5%88%9B%E9%80%A0%E6%80%A7%E5%A4%A7%E7%9A%84.png" alt=""> 从图中可以看出，算法首先判断种群是否全部分级，如果全部分级，则在分级的基础上，使用基于拥挤策略（拥挤策略者是适应度高，但是不影响外界环境的个体）的小生境技术对虚拟适应度值进行调整，并确定每个种群的虚拟适应度值，然后根据虚拟适应度值的大小，确定优先选择使用遗传算法进行处理的种群。   NSGA与简单的遗传算法的主要区别在于：该算法在选择算子执行之前根据个体之间的支配关系进行了分层。其选择算子、交叉算子和变异算子与简单遗传算法没有区别。   <strong>4.非支配排序</strong> 考虑一个目标函数个体为K（K&gt;1）、规模大小为N的种群，通过非支配排序算法可以对该种群进行<strong>分层</strong>，具体步骤如下；</p>
<ul>
<li>设j=1</li>
<li>对于所有的g=1,2……n且g≠j，基于适应度函数比较个体xj和个体xr之间的支配和非支配关系</li>
<li>如果不存在任何一个个体xr优于xj，则xj标记为非支配个体</li>
<li>令j=j+1，转到步骤（1），直到找打所有的非支配个体</li>
</ul>
<p>通过上述步骤得到的非支配个体集是种群的第一级非支配层;然后,忽略这些标记的非支配个体,再遵循步骤(1)一(4),就会得到第二级非支配;依此类推,直到整个种群被分类。   <strong>5.虚拟适应度值的确定</strong> 在对种群进行非支配排序的过程中，需要给每一个非支配层制定一个虚拟适应度值。<strong>级数越大，虚拟适应度值越小</strong>；反之，虚拟适应度值越大。这样可以保证在选择操作中等级较低的非支配个体有更多的机会被选择进入下一代，使得算法以最快的速度收敛于最优区域。另一方面，为了得到分布均匀的Pareto最优解集，就要保证当前非支配层上的个体具有多样性。NSGA中引入了基于拥挤策略的小生境技术，即通过适应度共享函数的方法对原先指定的虚拟适应度值进行重新指定。 <strong>6.共享小生境技术</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/09/%E8%87%AA%E8%A1%8C%E8%BD%A6%E8%87%AA%E8%A1%8C%E8%BD%A6.png" alt="">            <img src="http://47.100.4.8/wp-content/uploads/2018/09/sad%E4%BB%8EV%E5%9E%8B.png" alt=""> 共享度适应值即为个体与种群中其他个体间共享函数值之和。     以上内容均来自于我对百度文库相关内容的整理。</p>
]]></content>
      <categories>
        <category>NSGA</category>
        <category>优化算法</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>优化算法</tag>
        <tag>NSGA</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1001（甲级）</title>
    <url>/2019/03/25/pat-1001-jia-ji-1/</url>
    <content><![CDATA[<p>1001 A+B Format （20 分) <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805528788582400">原文地址</a></p>
<p>Calculate a+b and output the sum in standard format – that is, the digits must be separated into groups of three by commas (unless there are less than four digits).</p>
<h3 id="Input-Specification"><a class="header-anchor" href="#Input-Specification">¶</a>Input Specification:</h3>
<p>Each input file contains one test case. Each case contains a pair of integers a and b where −10​6​​≤a,b≤10​6​​. The numbers are separated by a space.</p>
<h3 id="Output-Specification"><a class="header-anchor" href="#Output-Specification">¶</a>Output Specification:</h3>
<p>For each test case, you should output the sum of a and b in one line. The sum must be written in the standard format.</p>
<h3 id="Sample-Input"><a class="header-anchor" href="#Sample-Input">¶</a>Sample Input:</h3>
<pre><code>-1000000 9
</code></pre>
<h3 id="Sample-Output"><a class="header-anchor" href="#Sample-Output">¶</a>Sample Output:</h3>
<pre><code>-999,991
</code></pre>
<p>代码：（这里自己写过一个可以使所有数据进行相加减的大数运算 但是会发生time out 因此这个参考了网上大佬写的，基本上能看懂所以在这里就贴大佬的了）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="keyword">int</span> c=a+b;</span><br><span class="line">    <span class="keyword">if</span>(c&lt;<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">'-'</span>;</span><br><span class="line">    c=<span class="built_in">abs</span>(c);</span><br><span class="line">    <span class="keyword">char</span> s\[<span class="number">20</span>\];</span><br><span class="line">    <span class="built_in">sprintf</span>(s,<span class="string">"%d"</span>,c);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="comment">//if(len&lt;=3) &#123;cout&lt;&lt;s;return 0;&#125;</span></span><br><span class="line">    <span class="keyword">int</span> m=len/<span class="number">3</span>,n=len%<span class="number">3</span>,start=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;"m="&lt;&lt;m&lt;&lt;' '&lt;&lt;"n="&lt;&lt;n&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) &#123;<span class="built_in">cout</span>&lt;&lt;s\[<span class="number">0</span>\]&lt;&lt;s\[<span class="number">1</span>\]&lt;&lt;s\[<span class="number">2</span>\];start=<span class="number">3</span>;m--;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">1</span>) &#123;<span class="built_in">cout</span>&lt;&lt;s\[<span class="number">0</span>\];start=<span class="number">1</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>) &#123;<span class="built_in">cout</span>&lt;&lt;s\[<span class="number">0</span>\]&lt;&lt;s\[<span class="number">1</span>\];start=<span class="number">2</span>;&#125;</span><br><span class="line">    <span class="keyword">while</span>(m!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">','</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s\[start\]&lt;&lt;s\[start+<span class="number">1</span>\]&lt;&lt;s\[start+<span class="number">2</span>\];</span><br><span class="line">        start+=<span class="number">3</span>;</span><br><span class="line">        m--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1002（甲级）</title>
    <url>/2019/03/25/pat-1002-jia-ji-1/</url>
    <content><![CDATA[<p>1002 A+B for Polynomials （25 分) <a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805526272000000">原文地址</a></p>
<p>This time, you are supposed to find A+B where A and B are two polynomials.</p>
<h3 id="Input-Specification"><a class="header-anchor" href="#Input-Specification">¶</a>Input Specification:</h3>
<p>Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N​1​​ a​N​1​​​​ N​2​​ a​N​2​​​​ … N​K​​ a​N​K​​​​ where K is the number of nonzero terms in the polynomial, N​i​​ and a​N​i​​​​ (i=1,2,⋯,K) are the exponents and coefficients, respectively. It is given that 1≤K≤10，0≤N​K​​&lt;⋯&lt;N​2​​&lt;N​1​​≤1000.</p>
<h3 id="Output-Specification"><a class="header-anchor" href="#Output-Specification">¶</a>Output Specification:</h3>
<p>For each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.</p>
<h3 id="Sample-Input"><a class="header-anchor" href="#Sample-Input">¶</a>Sample Input:</h3>
<pre><code>2 1 2.4 0 3.2
2 2 1.5 1 0.5
</code></pre>
<h3 id="Sample-Output"><a class="header-anchor" href="#Sample-Output">¶</a>Sample Output:</h3>
<pre><code>3 2 1.5 1 2.9 0 3.2
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里面不需要输出系数为0的</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Plot</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> exponents; <span class="comment">//指数</span></span><br><span class="line">    <span class="keyword">float</span> coefficients; <span class="comment">//系数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Plot a,Plot b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.exponents &gt; b.exponents;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Plot&gt; list1;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Plot&gt;::iterator poss;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">float</span>&gt; Ploy;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">float</span>&gt;::iterator pos;</span><br><span class="line">    <span class="keyword">int</span> K1,K2,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;K1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K1;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t1;</span><br><span class="line">        <span class="keyword">float</span> t2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">        <span class="keyword">if</span>(Ploy.count(t1) == <span class="number">0</span>)&#123;</span><br><span class="line">            Ploy\[t1\] = t2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Ploy\[t1\] += t2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;K2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K2;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t1;</span><br><span class="line">        <span class="keyword">float</span> t2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">        <span class="keyword">if</span>(Ploy.count(t1) == <span class="number">0</span>)&#123;</span><br><span class="line">            Ploy\[t1\] = t2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            Ploy\[t1\] += t2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(pos=Ploy.<span class="built_in">begin</span>();pos!=Ploy.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((*pos).second != <span class="number">0</span>)&#123;</span><br><span class="line">            Plot tt;</span><br><span class="line">            tt.exponents = (*pos).first;</span><br><span class="line">            tt.coefficients = (*pos).second;</span><br><span class="line">            sum++;</span><br><span class="line">            list1.push_back(tt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(list1.<span class="built_in">begin</span>(),list1.<span class="built_in">end</span>(),cmp);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum;</span><br><span class="line">    <span class="keyword">for</span>(poss=list1.<span class="built_in">begin</span>();poss!=list1.<span class="built_in">end</span>();poss++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d %.1f"</span>,(\*poss).exponents,(\*poss).coefficients);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    if(sum != 1 &amp;&amp; sum != 0)&#123;</span></span><br><span class="line"><span class="comment">        pos = --Ploy.end();</span></span><br><span class="line"><span class="comment">        for(;pos!=Ploy.begin();pos--)&#123;</span></span><br><span class="line"><span class="comment">            printf(" %d %.1f",(\*pos).first,(\*pos).second);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        pos = Ploy.begin();</span></span><br><span class="line"><span class="comment">        printf(" %d %.1f",(\*pos).first,(\*pos).second);</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else if(sum == 1)&#123;</span></span><br><span class="line"><span class="comment">        pos = Ploy.begin();</span></span><br><span class="line"><span class="comment">        printf(" %d %.1f",(\*pos).first,(\*pos).second);</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1001（乙级）</title>
    <url>/2019/03/11/pat-1001-yi-ji-1/</url>
    <content><![CDATA[<p>1001 害死人不偿命的(3n+1)猜想 （15 分）  地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528">https://pintia.cn/problem-sets/994805260223102976/problems/994805325918486528</a></p>
<p>卡拉兹(Callatz)猜想： 对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展…… 我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 n，简单地数一下，需要多少步（砍几下）才能得到 n=1？</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个测试输入包含 1 个测试用例，即给出正整数 n 的值。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>输出从 n 计算到 1 需要的步数。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>3
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>5
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,<span class="built_in">step</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">while</span>(n != <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            n = n/<span class="number">2</span>;</span><br><span class="line">            <span class="built_in">step</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            n = (<span class="number">3</span>*n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="built_in">step</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">step</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>梦想并不遥远~~ (✿◡‿◡)</title>
    <url>/2018/03/11/meng-xiang-bing-bu-yao-yuan-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/Never-give-up-300x200.jpg" alt=""></p>
<h5 id="纽约时间比加州时间早三个小时，-New-York-is-3-hours-ahead-of-California"><a class="header-anchor" href="#纽约时间比加州时间早三个小时，-New-York-is-3-hours-ahead-of-California">¶</a>纽约时间比加州时间早三个小时， New York is 3 hours ahead of California,</h5>
<h5 id="但加州时间并没有变慢。-but-it-does-not-make-California-slow"><a class="header-anchor" href="#但加州时间并没有变慢。-but-it-does-not-make-California-slow">¶</a>但加州时间并没有变慢。 but it does not make California slow.</h5>
<h5 id="有人22岁就毕业了，-Someone-graduated-at-the-age-of-22"><a class="header-anchor" href="#有人22岁就毕业了，-Someone-graduated-at-the-age-of-22">¶</a>有人22岁就毕业了， Someone graduated at the age of 22,</h5>
<h5 id="但等了五年才找到好的工作！-but-waited-5-years-before-securing-a-good-job"><a class="header-anchor" href="#但等了五年才找到好的工作！-but-waited-5-years-before-securing-a-good-job">¶</a>但等了五年才找到好的工作！ but waited 5 years before securing a good job!</h5>
<h5 id="有人25岁就当上CEO，-Someone-became-a-CEO-at-25"><a class="header-anchor" href="#有人25岁就当上CEO，-Someone-became-a-CEO-at-25">¶</a>有人25岁就当上CEO， Someone became a CEO at 25,</h5>
<h5 id="却在50岁去世。-and-died-at-50"><a class="header-anchor" href="#却在50岁去世。-and-died-at-50">¶</a>却在50岁去世。 and died at 50.</h5>
<h5 id="也有人迟到50岁才当上CEO，-While-another-became-a-CEO-at-50"><a class="header-anchor" href="#也有人迟到50岁才当上CEO，-While-another-became-a-CEO-at-50">¶</a>也有人迟到50岁才当上CEO， While another became a CEO at 50,</h5>
<h5 id="然后活到90岁。-and-lived-to-90-years"><a class="header-anchor" href="#然后活到90岁。-and-lived-to-90-years">¶</a>然后活到90岁。 and lived to 90 years.</h5>
<h5 id="有人依然单身，-Someone-is-still-single"><a class="header-anchor" href="#有人依然单身，-Someone-is-still-single">¶</a>有人依然单身， Someone is still single,</h5>
<h5 id="同时也有人已婚。-while-someone-else-got-married"><a class="header-anchor" href="#同时也有人已婚。-while-someone-else-got-married">¶</a>同时也有人已婚。 while someone else got married.</h5>
<h5 id="奥巴马55岁就退休，-Obama-retires-at-55"><a class="header-anchor" href="#奥巴马55岁就退休，-Obama-retires-at-55">¶</a>奥巴马55岁就退休， Obama retires at 55,</h5>
<h5 id="川普70岁才开始当总统。-but-Trump-starts-at-70"><a class="header-anchor" href="#川普70岁才开始当总统。-but-Trump-starts-at-70">¶</a>川普70岁才开始当总统。 but Trump starts at 70.</h5>
<h5 id="世上每个人本来就有自己的发展时区。-Absolutely-everyone-in-this-world-works-based-on-their-Time-Zone"><a class="header-anchor" href="#世上每个人本来就有自己的发展时区。-Absolutely-everyone-in-this-world-works-based-on-their-Time-Zone">¶</a>世上每个人本来就有自己的发展时区。 Absolutely everyone in this world works based on their Time Zone.</h5>
<h5 id="身边有些人看似走在你前面，-People-around-you-might-seem-to-go-ahead-of-you"><a class="header-anchor" href="#身边有些人看似走在你前面，-People-around-you-might-seem-to-go-ahead-of-you">¶</a>身边有些人看似走在你前面， People around you might seem to go ahead of you,</h5>
<h5 id="也有人看似走在你后面。-some-might-seem-to-be-behind-you"><a class="header-anchor" href="#也有人看似走在你后面。-some-might-seem-to-be-behind-you">¶</a>也有人看似走在你后面。 some might seem to be behind you.</h5>
<h5 id="但其实每个人在自己的时区有自己的步程。-But-everyone-is-running-their-own-RACE-in-their-own-TIME"><a class="header-anchor" href="#但其实每个人在自己的时区有自己的步程。-But-everyone-is-running-their-own-RACE-in-their-own-TIME">¶</a>但其实每个人在自己的时区有自己的步程。 But everyone is running their own RACE, in their own TIME.</h5>
<h5 id="不用嫉妒或嘲笑他们。-Don’t-envy-them-or-mock-them"><a class="header-anchor" href="#不用嫉妒或嘲笑他们。-Don’t-envy-them-or-mock-them">¶</a>不用嫉妒或嘲笑他们。 Don’t envy them or mock them.</h5>
<h5 id="他们都在自己的时区里，你也是！-They-are-in-their-TIME-ZONE-and-you-are-in-yours"><a class="header-anchor" href="#他们都在自己的时区里，你也是！-They-are-in-their-TIME-ZONE-and-you-are-in-yours">¶</a>他们都在自己的时区里，你也是！ They are in their TIME ZONE, and you are in yours!</h5>
<h5 id="生命就是等待正确的行动时机。-Life-is-about-waiting-for-the-right-moment-to-act"><a class="header-anchor" href="#生命就是等待正确的行动时机。-Life-is-about-waiting-for-the-right-moment-to-act">¶</a>生命就是等待正确的行动时机。 Life is about waiting for the right moment to act.</h5>
<h5 id="所以，放轻松。-So-RELAX"><a class="header-anchor" href="#所以，放轻松。-So-RELAX">¶</a>所以，放轻松。 So, RELAX.</h5>
<h5 id="你没有落后。-You’re-not-LATE"><a class="header-anchor" href="#你没有落后。-You’re-not-LATE">¶</a>你没有落后。 You’re not LATE.</h5>
<h5 id="你没有领先。-You’re-not-EARLY"><a class="header-anchor" href="#你没有领先。-You’re-not-EARLY">¶</a>你没有领先。 You’re not EARLY.</h5>
<h5 id="在命运为你安排的属于自己的时区里，一切都准时。-You-are-very-much-ON-TIME-and-in-your-TIME-ZONE-Destiny-set-up-for-you"><a class="header-anchor" href="#在命运为你安排的属于自己的时区里，一切都准时。-You-are-very-much-ON-TIME-and-in-your-TIME-ZONE-Destiny-set-up-for-you">¶</a>在命运为你安排的属于自己的时区里，一切都准时。 You are very much ON TIME, and in your TIME ZONE Destiny set up for you.</h5>
]]></content>
      <categories>
        <category>励志</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>励志</tag>
        <tag>English</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1002（乙级）</title>
    <url>/2019/03/11/pat-1002-yi-ji-1/</url>
    <content><![CDATA[<p>1002 写出这个数 （20 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805324509200384">https://pintia.cn/problem-sets/994805260223102976/problems/994805324509200384</a></p>
<p>读入一个正整数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个测试输入包含 1 个测试用例，即给出自然数 n 的值。这里保证 n 小于 10​100​​。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行内输出 n 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>1234567890987654321123456789
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>yi san wu
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search_name</span><span class="params">(<span class="keyword">int</span> temp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(temp)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"ling"</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"yi"</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"er"</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"san"</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"si"</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"wu"</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"liu"</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"qi"</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"ba"</span>;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">9</span>:<span class="built_in">cout</span>&lt;&lt;<span class="string">"jiu"</span>;<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow10</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i!=<span class="number">0</span>)&#123;</span><br><span class="line">        m = m*<span class="number">10</span>;</span><br><span class="line">        i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> st1;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;st1;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>,temp,mess,t,m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;st1.length();i++)&#123;</span><br><span class="line">        sum += st1\[i\] - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = sum/<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(temp == <span class="number">0</span>)&#123;</span><br><span class="line">        temp = sum%<span class="number">10</span>;</span><br><span class="line">        search_name(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line">        temp = sum;</span><br><span class="line">        mess=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(temp != <span class="number">0</span>)&#123;</span><br><span class="line">            temp = temp/<span class="number">10</span>;</span><br><span class="line">            mess++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;mess&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=mess<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            m = pow10(i);</span><br><span class="line">            <span class="comment">//cout&lt;&lt;m&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</span><br><span class="line">                search_name(sum);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                t = sum/m;</span><br><span class="line">                search_name(t);</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">                sum -= (m*t);</span><br><span class="line">                <span class="comment">//cout&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1003（乙级）</title>
    <url>/2019/03/11/pat-1003-yi-ji-1/</url>
    <content><![CDATA[<p>1003 我要通过！ （20 分）  地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805323154440192">https://pintia.cn/problem-sets/994805260223102976/problems/994805323154440192</a></p>
<p>“<strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。 得到“<strong>答案正确</strong>”的条件是：</p>
<ol>
<li>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；</li>
<li>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；</li>
<li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li>
</ol>
<p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 n (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>8
PAT
PAAT
AAPATAA
AAPAATAAAA
xPATx
PT
Whatever
APAAATAA
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>YES
YES
YES
YES
NO
NO
NO
NO
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> c\[<span class="number">101</span>\];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">bool</span> result = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">int</span> count1 = <span class="number">0</span>, count2 = <span class="number">0</span>, count3 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> countP = <span class="number">0</span>, countT = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, c);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="built_in">strlen</span>(c);j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(c\[j\] != <span class="string">'P'</span> &amp;&amp; c\[j\] != <span class="string">'A'</span> &amp;&amp; c\[j\] != <span class="string">'T'</span>)&#123;</span><br><span class="line">                result = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c\[j\] == <span class="string">'P'</span>)&#123;</span><br><span class="line">                countP ++;</span><br><span class="line">                <span class="keyword">if</span>(countP == <span class="number">2</span>)&#123;</span><br><span class="line">                    result = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c\[j\] == <span class="string">'T'</span>)&#123;</span><br><span class="line">                countT ++;</span><br><span class="line">                <span class="keyword">if</span>(countT == <span class="number">2</span>)&#123;</span><br><span class="line">                    result = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(result)&#123;</span><br><span class="line">            <span class="built_in">string</span> s = c;</span><br><span class="line">            count1 = s.<span class="built_in">find</span>(<span class="string">"P"</span>);</span><br><span class="line">            count2 = s.<span class="built_in">find</span>(<span class="string">"A"</span>);</span><br><span class="line">            count3 = s.<span class="built_in">find</span>(<span class="string">"T"</span>);</span><br><span class="line">            <span class="keyword">if</span>(count1 == <span class="number">-1</span> || count2 == <span class="number">-1</span> || count3 == <span class="number">-1</span>)&#123;</span><br><span class="line">                result = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                result = ((count1 * (count3 - count1 - <span class="number">1</span>)) == (<span class="built_in">strlen</span>(c) - count3 - <span class="number">1</span>)) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(result)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"YES\\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1006（乙级）</title>
    <url>/2019/03/11/pat-1006-yi-ji-1/</url>
    <content><![CDATA[<p>1006 换个格式输出整数 （15 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805318855278592">https://pintia.cn/problem-sets/994805260223102976/problems/994805318855278592</a></p>
<p>让我们用字母 <code>B</code> 来表示“百”、字母 <code>S</code> 表示“十”，用 <code>12...n</code> 来表示不为零的个位数字 <code>n</code>（&lt;10），换个格式来输出任一个不超过 3 位的正整数。例如 <code>234</code> 应该被输出为 <code>BBSSS1234</code>，因为它有 2 个“百”、3 个“十”、以及个位的 4。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个测试输入包含 1 个测试用例，给出正整数 n（&lt;1000）。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>每个测试用例的输出占一行，用规定的格式输出 n。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>234
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>BBSSS1234
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>23
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>SS123
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> num;</span><br><span class="line">    <span class="keyword">int</span> temp,temp1,temp2;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">if</span>(num.length()==<span class="number">1</span>)&#123;</span><br><span class="line">       temp = num\[<span class="number">0</span>\] - <span class="string">'0'</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=temp;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(num.length()==<span class="number">2</span>)&#123;</span><br><span class="line">        temp = num\[<span class="number">0</span>\] - <span class="string">'0'</span>;</span><br><span class="line">        temp1 = num\[<span class="number">1</span>\] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=temp;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"S"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=temp1;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        temp = num\[<span class="number">0</span>\] - <span class="string">'0'</span>;</span><br><span class="line">        temp1 = num\[<span class="number">1</span>\] - <span class="string">'0'</span>;</span><br><span class="line">        temp2 = num\[<span class="number">2</span>\] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=temp;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"B"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=temp1;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"S"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=temp2;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1005（乙级）</title>
    <url>/2019/03/11/pat-1005-yi-ji-1/</url>
    <content><![CDATA[<p>1005 继续(3n+1)猜想 （25 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776">https://pintia.cn/problem-sets/994805260223102976/problems/994805320306507776</a></p>
<p>卡拉兹(Callatz)猜想已经在1001中给出了描述。在这个题目里，情况稍微有些复杂。 当我们验证卡拉兹猜想的时候，为了避免重复计算，可以记录下递推过程中遇到的每一个数。例如对 n=3 进行验证的时候，我们需要计算 3、5、8、4、2、1，则当我们对 n=5、8、4、2 进行验证的时候，就可以直接判定卡拉兹猜想的真伪，而不需要重复计算，因为这 4 个数已经在验证3的时候遇到过了，我们称 5、8、4、2 是被 3“覆盖”的数。我们称一个数列中的某个数 n 为“关键数”，如果 n 不能被数列中的其他数字所覆盖。 现在给定一系列待验证的数字，我们只需要验证其中的几个关键数，就可以不必再重复验证余下的数字。你的任务就是找出这些关键数字，并按从大到小的顺序输出它们。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个测试输入包含 1 个测试用例，第 1 行给出一个正整数 K (&lt;100)，第 2 行给出 K 个互不相同的待验证的正整数 n (1&lt;n≤100)的值，数字间用空格隔开。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>每个测试用例的输出占一行，按从大到小的顺序输出关键数字。数字间用 1 个空格隔开，但一行中最后一个数字后没有空格。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>6
3 5 6 7 8 11
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>7 6
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isIn</span><span class="params">(<span class="keyword">int</span> n,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; a)</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator pos;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(pos = a.<span class="built_in">begin</span>();pos!=a.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*pos == n)&#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> n,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; a)</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator pos;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(pos=a.<span class="built_in">begin</span>();pos!=a.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == *pos)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindNum</span><span class="params">(<span class="keyword">int</span> n,<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; a)</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator pos;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(pos=a.<span class="built_in">begin</span>();pos!=a.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == i)&#123;</span><br><span class="line">            <span class="keyword">return</span> *pos;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator pos;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line">    <span class="keyword">int</span> m,sum;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    sum = m;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; qun;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; qunNumber\[m\];</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(m&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        qun.insert(n);</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">1</span>)&#123;</span><br><span class="line">            qunNumber\[t\].insert(n);</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                n = n/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                n = (<span class="number">3</span>*n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        t++;</span><br><span class="line">        m--;</span><br><span class="line">        <span class="comment">/*cout&lt;&lt;"No."&lt;&lt;m&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">        for(pos = linshi.begin();pos!=linshi.end();pos++)&#123;</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;*pos&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(int i=0;i&lt;sum;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(pos = qunNumber\[i\].begin();pos!=qunNumber\[i\].end();pos++)&#123;</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;*pos&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">/*for(pos = qun.begin();pos!=qun.end();pos++)&#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;*pos&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;endl;*/</span></span><br><span class="line">    <span class="keyword">int</span> tongJi\[sum\];</span><br><span class="line">    <span class="built_in">memset</span>(tongJi,<span class="number">0</span>,sum*<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sum;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(pos=qunNumber\[i\].<span class="built_in">begin</span>();pos!=qunNumber\[i\].<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(isIn(*pos,qun))&#123;</span><br><span class="line">                <span class="keyword">int</span> t = *pos;</span><br><span class="line">                <span class="keyword">int</span> index=Find(t,qun);</span><br><span class="line">                tongJi\[index\]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(int i=0;i&lt;sum;i++)</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;tongJi\[i\]&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;endl;*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sum;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tongJi\[i\] == <span class="number">1</span>)&#123;</span><br><span class="line">            t=FindNum(i,qun);</span><br><span class="line">            result.insert(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(pos = qun.begin();pos!=qun.end();pos++)&#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;*pos&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;endl;*/</span></span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; result1;</span><br><span class="line">    <span class="keyword">for</span>(pos=result.<span class="built_in">begin</span>();pos!=result.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        result1.push(*pos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(result1.<span class="built_in">size</span>()!=<span class="number">1</span>)&#123;</span><br><span class="line">        t = result1.top();</span><br><span class="line">        result1.pop();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;result1.top()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    for(pos = result.begin();pos!=result.end();pos++)&#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;*pos&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;endl;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1004（乙级）</title>
    <url>/2019/03/11/pat-1004-yi-ji-1/</url>
    <content><![CDATA[<p>1004 成绩排名 （20 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805321640296448">https://pintia.cn/problem-sets/994805260223102976/problems/994805321640296448</a></p>
<p>读入 n（&gt;0）名学生的姓名、学号、成绩，分别输出成绩最高和成绩最低学生的姓名和学号。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个测试输入包含 1 个测试用例，格式为</p>
<pre><code>第 1 行：正整数 n
第 2 行：第 1 个学生的姓名 学号 成绩
第 3 行：第 2 个学生的姓名 学号 成绩
  ... ... ...
第 n+1 行：第 n 个学生的姓名 学号 成绩
</code></pre>
<p>其中<code>姓名</code>和<code>学号</code>均为不超过 10 个字符的字符串，成绩为 0 到 100 之间的一个整数，这里保证在一组测试用例中没有两个学生的成绩是相同的。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对每个测试用例输出 2 行，第 1 行是成绩最高学生的姓名和学号，第 2 行是成绩最低学生的姓名和学号，字符串间有 1 空格。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>3
Joe Math990112 89
Mike CS991301 100
Mary EE990830 95
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>Mike CS991301
Joe Math990112
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">paixu</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> ID;</span><br><span class="line">    <span class="keyword">int</span> grade;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zijian</span><span class="params">(<span class="keyword">int</span> n\[\],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = len;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((n\[t\]<span class="number">-1</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            n\[t\]--;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            n\[t\] = <span class="number">9</span>;</span><br><span class="line">            t--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(flag!=<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">equalZero</span><span class="params">(<span class="keyword">int</span> n\[\],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n\[i\]!=<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sorted</span><span class="params">(<span class="built_in">deque</span>&lt;paixu&gt; test)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;test.<span class="built_in">size</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">       t = i;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;test.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(test\[j\].grade &gt; test\[t\].grade)&#123;</span><br><span class="line">                swap(test\[i\],test\[j\]);</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;paixu&gt; mess;</span><br><span class="line">    <span class="built_in">deque</span>&lt;paixu&gt; result;</span><br><span class="line">    <span class="built_in">string</span> number;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;number;</span><br><span class="line">    <span class="keyword">int</span> BigNum\[number.length()\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=number.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        BigNum\[i\] = number\[i\] - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(equalZero(BigNum,number.length()) == <span class="literal">false</span>)&#123;</span><br><span class="line">        paixu <span class="built_in">text</span>;</span><br><span class="line">        <span class="built_in">string</span> s1;</span><br><span class="line">        <span class="built_in">string</span> s2;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s1;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">        <span class="built_in">text</span>.name = s1;</span><br><span class="line">        <span class="built_in">text</span>.ID = s2;</span><br><span class="line">        <span class="built_in">text</span>.grade = num;</span><br><span class="line">        mess.push_back(<span class="built_in">text</span>);</span><br><span class="line">        zijian(BigNum,number.length()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mess.<span class="built_in">size</span>()<span class="number">-1</span>;i++)&#123;</span><br><span class="line">       t =  i;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;mess.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(mess\[j\].grade &gt; mess\[t\].grade)&#123;</span><br><span class="line">                swap(mess\[t\],mess\[j\]);</span><br><span class="line">            &#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(int i=0;i&lt;mess.size();i++)&#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;mess\[i\].grade&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;mess\[<span class="number">0</span>\].name&lt;&lt;<span class="string">" "</span>&lt;&lt;mess\[<span class="number">0</span>\].ID&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;mess\[mess.<span class="built_in">size</span>()<span class="number">-1</span>\].name&lt;&lt;<span class="string">" "</span>&lt;&lt;mess\[mess.<span class="built_in">size</span>()<span class="number">-1</span>\].ID&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1007（乙级）</title>
    <url>/2019/03/11/pat-1007-yi-ji-1/</url>
    <content><![CDATA[<p>1007 素数对猜想 （20 分）地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805317546655744">https://pintia.cn/problem-sets/994805260223102976/problems/994805317546655744</a></p>
<p>让我们定义d​n​​为：d​n​​=p​n+1​​−p​n​​，其中p​i​​是第i个素数。显然有d​1​​=1，且对于n&gt;1有d​n​​是偶数。“素数对猜想”认为“存在无穷多对相邻且差为2的素数”。 现给定任意正整数<code>N</code>(&lt;10​5​​)，请计算不超过<code>N</code>的满足猜想的素数对的个数。</p>
<h3 id="输入格式"><a class="header-anchor" href="#输入格式">¶</a>输入格式:</h3>
<p>输入在一行给出正整数<code>N</code>。</p>
<h3 id="输出格式"><a class="header-anchor" href="#输出格式">¶</a>输出格式:</h3>
<p>在一行中输出不超过<code>N</code>的满足猜想的素数对的个数。</p>
<h3 id="输入样例"><a class="header-anchor" href="#输入样例">¶</a>输入样例:</h3>
<pre><code>20
</code></pre>
<h3 id="输出样例"><a class="header-anchor" href="#输出样例">¶</a>输出样例:</h3>
<pre><code>4
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="comment">//stack&lt;int&gt; primeStack;</span></span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> temp1,temp2;</span><br><span class="line">    <span class="comment">//求素数</span></span><br><span class="line">    temp1 = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=<span class="built_in">sqrt</span>(i);j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>)&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag &amp;&amp; i!=<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;i&lt;&lt;" ";</span></span><br><span class="line">            temp2 = i;</span><br><span class="line">            <span class="keyword">if</span>((temp2 - temp1) == <span class="number">2</span>)&#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            temp1 = i;</span><br><span class="line">            <span class="comment">//primeStack.push(i);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">/*temp1 = primeStack.top();</span></span><br><span class="line"><span class="comment">    primeStack.pop();</span></span><br><span class="line"><span class="comment">    while(!primeStack.empty())&#123;</span></span><br><span class="line"><span class="comment">        temp2 = primeStack.top();</span></span><br><span class="line"><span class="comment">        //cout&lt;&lt;temp2&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">        primeStack.pop();</span></span><br><span class="line"><span class="comment">        if((temp1 - temp2) == 2)&#123;</span></span><br><span class="line"><span class="comment">            sum++;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        temp1 = temp2;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1010（乙级）</title>
    <url>/2019/03/11/pat-1010-yi-ji-1/</url>
    <content><![CDATA[<p>1010 一元多项式求导 （25 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584">https://pintia.cn/problem-sets/994805260223102976/problems/994805313708867584</a></p>
<p>设计函数求一元多项式的导数。（注：x​n​​（n为整数）的一阶导数为nx​n−1​​。）</p>
<h3 id="输入格式"><a class="header-anchor" href="#输入格式">¶</a>输入格式:</h3>
<p>以指数递降方式输入多项式非零项系数和指数（绝对值均为不超过 1000 的整数）。数字间以空格分隔。</p>
<h3 id="输出格式"><a class="header-anchor" href="#输出格式">¶</a>输出格式:</h3>
<p>以与输入相同的格式输出导数多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。注意“零多项式”的指数和系数都是 0，但是表示为 <code>0 0</code>。</p>
<h3 id="输入样例"><a class="header-anchor" href="#输入样例">¶</a>输入样例:</h3>
<pre><code>3 4 -5 2 6 1 -2 0
</code></pre>
<h3 id="输出样例"><a class="header-anchor" href="#输出样例">¶</a>输出样例:</h3>
<pre><code>12 3 -10 1 6 0
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp1,temp2;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;temp1&gt;&gt;temp2;</span><br><span class="line">    <span class="keyword">if</span>(temp2 == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(temp2 != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;temp1*temp2&lt;&lt;<span class="string">" "</span>&lt;&lt;temp2<span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp1&gt;&gt;temp2;</span><br><span class="line">        <span class="keyword">if</span>(temp2!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1008（乙级）</title>
    <url>/2019/03/11/pat-1008-yi-ji-1/</url>
    <content><![CDATA[<p>1008 数组元素循环右移问题 （20 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808">https://pintia.cn/problem-sets/994805260223102976/problems/994805316250615808</a></p>
<p>一个数组A中存有N（&gt;0）个整数，在不允许使用另外数组的前提下，将每个整数循环向右移M（≥0）个位置，即将A中的数据由（A​0​​A​1​​⋯A​N−1​​）变换为（A​N−M​​⋯A​N−1​​A​0​​A​1​​⋯A​N−M−1​​）（最后M个数循环移至最前面的M个位置）。如果需要考虑程序移动数据的次数尽量少，要如何设计移动的方法？</p>
<h3 id="输入格式"><a class="header-anchor" href="#输入格式">¶</a>输入格式:</h3>
<p>每个输入包含一个测试用例，第1行输入N（1≤N≤100）和M（≥0）；第2行输入N个整数，之间用空格分隔。</p>
<h3 id="输出格式"><a class="header-anchor" href="#输出格式">¶</a>输出格式:</h3>
<p>在一行中输出循环右移M位以后的整数序列，之间用空格分隔，序列结尾不能有多余空格。</p>
<h3 id="输入样例"><a class="header-anchor" href="#输入样例">¶</a>输入样例:</h3>
<pre><code>6 2
1 2 3 4 5 6
</code></pre>
<h3 id="输出样例"><a class="header-anchor" href="#输出样例">¶</a>输出样例:</h3>
<pre><code>5 6 1 2 3 4
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; Queue;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator pos;</span><br><span class="line">    <span class="keyword">int</span> num,moves,temp,t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;moves;</span><br><span class="line">    t = num;</span><br><span class="line">    <span class="keyword">while</span>(t&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">        Queue.push_back(temp);</span><br><span class="line">        t--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(moves&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        temp = Queue.back();</span><br><span class="line">        Queue.pop_back();</span><br><span class="line">        Queue.push_front(temp);</span><br><span class="line">        moves--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(pos = Queue.<span class="built_in">begin</span>();pos!=Queue.<span class="built_in">end</span>()<span class="number">-1</span>;pos++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*pos&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    pos = Queue.<span class="built_in">end</span>()<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*pos&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1009（乙级）</title>
    <url>/2019/03/11/pat-1009-yi-ji-1/</url>
    <content><![CDATA[<p>1009 说反话 （20 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960">https://pintia.cn/problem-sets/994805260223102976/problems/994805314941992960</a></p>
<p>给定一句英语，要求你编写程序，将句中所有单词的顺序颠倒输出。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>测试输入包含一个测试用例，在一行内给出总长度不超过 80 的字符串。字符串由若干单词和若干空格组成，其中单词是由英文字母（大小写有区分）组成的字符串，单词之间用 1 个空格分开，输入保证句子末尾没有多余的空格。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>每个测试用例的输出占一行，输出倒序后的句子。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>Hello World Here I Come
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>Come I Here World Hello
</code></pre>
<p>代码：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">include</span>&lt;iostream&gt;</span><br><span class="line">#<span class="keyword">include</span>&lt;deque&gt;</span><br><span class="line">#<span class="keyword">include</span>&lt;<span class="built_in">string</span>.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span>&#123;</span><br><span class="line">    deque&lt;<span class="built_in">string</span>&gt; Queue;</span><br><span class="line">    deque&lt;<span class="built_in">string</span>&gt;::iterator pos;</span><br><span class="line">    <span class="built_in">string</span> s1;</span><br><span class="line">    <span class="built_in">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;s1)&#123;</span><br><span class="line">        <span class="module-access"><span class="module"><span class="identifier">Queue</span>.</span></span>push<span class="constructor">_front(<span class="params">s1</span>)</span>;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">if</span>(cin.get<span class="literal">()</span>==<span class="character">'\\n'</span>)&#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(pos = <span class="module-access"><span class="module"><span class="identifier">Queue</span>.</span></span><span class="keyword">begin</span><span class="literal">()</span>;pos!=<span class="module-access"><span class="module"><span class="identifier">Queue</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>-<span class="number">1</span>;pos++)</span><br><span class="line">        cout&lt;&lt;*pos&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    pos = <span class="module-access"><span class="module"><span class="identifier">Queue</span>.</span></span><span class="keyword">end</span><span class="literal">()</span>-<span class="number">1</span>;</span><br><span class="line">    cout&lt;&lt;*pos&lt;&lt;endl;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1011（乙级）</title>
    <url>/2019/03/11/pat-1011-yi-ji-1/</url>
    <content><![CDATA[<p>1011 A+B 和 C （15 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805312417021952">https://pintia.cn/problem-sets/994805260223102976/problems/994805312417021952</a></p>
<p>给定区间 [−2​31​​,2​31​​] 内的 3 个整数 A、B 和 C，请判断 A+B 是否大于 C。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第 1 行给出正整数 T (≤10)，是测试用例的个数。随后给出 T 组测试用例，每组占一行，顺序给出 A、B 和 C。整数间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对每组测试用例，在一行中输出 <code>Case #X: true</code> 如果 A+B&gt;C，否则输出 <code>Case #X: false</code>，其中 <code>X</code> 是测试用例的编号（从 1 开始）。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>4
1 2 3
2 3 4
2147483647 0 2147483646
0 -2147483648 -2147483647
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>Case #1: false
Case #2: true
Case #3: true
Case #4: false
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cunchu</span>&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> qwe1;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> qwe2;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> qwe3;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;cunchu&gt; qu;</span><br><span class="line">    <span class="built_in">deque</span>&lt;cunchu&gt;::iterator pos;</span><br><span class="line">    <span class="keyword">int</span> num,tempA,tempB,tempC,sum,flag;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    sum = num;</span><br><span class="line">    <span class="keyword">while</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        cunchu q1;</span><br><span class="line">        num--;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;tempA&gt;&gt;tempB&gt;&gt;tempC;</span><br><span class="line">        q1.qwe1 = tempA;</span><br><span class="line">        q1.qwe2 = tempB;</span><br><span class="line">        q1.qwe3 = tempC;</span><br><span class="line">        qu.push_back(q1);</span><br><span class="line">    &#125;</span><br><span class="line">    num = sum;</span><br><span class="line">    <span class="keyword">for</span>(pos=qu.<span class="built_in">begin</span>();pos!=qu.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        num--;</span><br><span class="line">        <span class="keyword">if</span>((\*pos).qwe1+(\*pos).qwe2&gt;(*pos).qwe3)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;sum-num&lt;&lt;<span class="string">": true"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="built_in">cout</span>&lt;&lt;<span class="string">"Case #"</span>&lt;&lt;sum-num&lt;&lt;<span class="string">": false"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1012（乙级）</title>
    <url>/2019/03/11/pat-1012-yi-ji-1/</url>
    <content><![CDATA[<p>1012 数字分类 （20 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840">https://pintia.cn/problem-sets/994805260223102976/problems/994805311146147840</a></p>
<p>给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：</p>
<ul>
<li>A​1​​ = 能被 5 整除的数字中所有偶数的和；</li>
<li>A​2​​ = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 n​1​​−n​2​​+n​3​​−n​4​​⋯；</li>
<li>A​3​​ = 被 5 除后余 2 的数字的个数；</li>
<li>A​4​​ = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；</li>
<li>A​5​​ = 被 5 除后余 4 的数字中最大数字。</li>
</ul>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N，随后给出 N 个不超过 1000 的待分类的正整数。数字间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对给定的 N 个正整数，按题目要求计算 A​1​​~A​5​​ 并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。 若其中某一类数字不存在，则在相应位置输出 <code>N</code>。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>13 1 2 3 4 5 6 7 8 9 10 20 16 18
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>30 11 2 9.7 9
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>8 1 2 4 5 6 7 9 16
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>N 11 2 N 9
</code></pre>
<p>代码：（有一个测试点一直通不过）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> qwe,temp,num=<span class="number">0</span>,A1=<span class="number">0</span>,A2=<span class="number">0</span>,A3=<span class="number">0</span>,A5=<span class="number">0</span>,sum=<span class="number">0</span>,r1=<span class="number">0</span>,r2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">float</span> A4=<span class="number">0</span>,t=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;qwe;</span><br><span class="line">    <span class="keyword">while</span>(qwe&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        qwe--;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">        r1 = temp/<span class="number">5</span>;</span><br><span class="line">        r2 = temp - r1*<span class="number">5</span>;</span><br><span class="line">        <span class="keyword">if</span>(r2==<span class="number">0</span> &amp;&amp; temp%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            A1 += temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(r2==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                A2 += temp;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                A2 -= temp;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(r2==<span class="number">2</span>)&#123;</span><br><span class="line">            A3++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(r2==<span class="number">3</span>)&#123;</span><br><span class="line">            A4 += temp;</span><br><span class="line">            t++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(r2==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp&gt;A5)&#123;</span><br><span class="line">                A5=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(A1 == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"N "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;A1&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(A2 == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"N "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;A2&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(A3 == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"N "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;A3&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(A4 == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"N "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">float</span> q = A4/t;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(<span class="number">1</span>)&lt;&lt;q&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(A5 == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"N"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;A5&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考别人后改正的：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, A\[<span class="number">5</span>\] = &#123; <span class="number">0</span> &#125;, j = <span class="number">1</span>, num = <span class="number">0</span>, <span class="built_in">max</span> = <span class="number">0</span>, dig\[<span class="number">5</span>\] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *p = <span class="keyword">new</span> <span class="keyword">int</span>\[N\];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p\[i\];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (p\[i\] % <span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> ((p\[i\] &amp; <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                A\[<span class="number">0</span>\] += p\[i\];</span><br><span class="line">                dig\[<span class="number">0</span>\] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            A\[<span class="number">1</span>\] += p\[i\] * j;</span><br><span class="line">            j = -j;</span><br><span class="line">            dig\[<span class="number">1</span>\] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            A\[<span class="number">2</span>\]++;</span><br><span class="line">            dig\[<span class="number">2</span>\] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            A\[<span class="number">3</span>\] += p\[i\];</span><br><span class="line">            num++;</span><br><span class="line">            dig\[<span class="number">3</span>\] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">if</span> (p\[i\] &gt; <span class="built_in">max</span>)</span><br><span class="line">                <span class="built_in">max</span> = p\[i\];</span><br><span class="line">            dig\[<span class="number">4</span>\] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    A\[<span class="number">4</span>\] = <span class="built_in">max</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dig\[i\])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">3</span>)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; A\[i\];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">1</span>) &lt;&lt; <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(A\[<span class="number">3</span>\]) / num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"N"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">4</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>\[\] p;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1013（乙级）</title>
    <url>/2019/03/11/pat-1013-yi-ji-1/</url>
    <content><![CDATA[<p>1013 数素数 （20 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805309963354112">https://pintia.cn/problem-sets/994805260223102976/problems/994805309963354112</a></p>
<p>令 P​i​​ 表示第 i 个素数。现任给两个正整数 M≤N≤10​4​​，请输出 P​M​​ 到 P​N​​ 的所有素数。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中给出 M 和 N，其间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>输出从 P​M​​ 到 P​N​​ 的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>5 27
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>11 13 17 19 23 29 31 37 41 43
47 53 59 61 67 71 73 79 83 89
97 101 103
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start,ends,sum,t=<span class="number">0</span>,q=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;start&gt;&gt;ends;</span><br><span class="line">    sum = ends-start+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(start == <span class="number">0</span>)&#123;</span><br><span class="line">        sum--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">1000000000</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">2</span>;j&lt;=<span class="built_in">sqrt</span>(i);j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%j==<span class="number">0</span>)&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="literal">true</span>)&#123;</span><br><span class="line">            t++;</span><br><span class="line">            <span class="keyword">if</span>(t&gt;=start)&#123;</span><br><span class="line">                <span class="keyword">if</span>(sum==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                q++;</span><br><span class="line">                sum--;</span><br><span class="line">                <span class="keyword">if</span>(q%<span class="number">10</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1014（乙级）</title>
    <url>/2019/03/11/pat-1014-yi-ji-1/</url>
    <content><![CDATA[<p>1014 福尔摩斯的约会 （20 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560">https://pintia.cn/problem-sets/994805260223102976/problems/994805308755394560</a></p>
<p>大侦探福尔摩斯接到一张奇怪的字条：<code>我们约会吧！ 3485djDkxh4hhGE 2984akDfkkkkggEdsb s&amp;hgsfdk d&amp;Hyscvnm</code>。大侦探很快就明白了，字条上奇怪的乱码实际上就是约会的时间<code>星期四 14:04</code>，因为前面两字符串中第 1 对相同的大写英文字母（大小写有区分）是第 4 个字母 <code>D</code>，代表星期四；第 2 对相同的字符是 <code>E</code> ，那是第 5 个英文字母，代表一天里的第 14 个钟头（于是一天的 0 点到 23 点由数字 0 到 9、以及大写字母 <code>A</code> 到 <code>N</code> 表示）；后面两字符串第 1 对相同的英文字母 <code>s</code> 出现在第 4 个位置（从 0 开始计数）上，代表第 4 分钟。现给定两对字符串，请帮助福尔摩斯解码得到约会的时间。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在 4 行中分别给出 4 个非空、不包含空格、且长度不超过 60 的字符串。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出约会的时间，格式为 <code>DAY HH:MM</code>，其中 <code>DAY</code> 是某星期的 3 字符缩写，即 <code>MON</code> 表示星期一，<code>TUE</code> 表示星期二，<code>WED</code> 表示星期三，<code>THU</code> 表示星期四，<code>FRI</code> 表示星期五，<code>SAT</code> 表示星期六，<code>SUN</code> 表示星期日。题目输入保证每个测试存在唯一解。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>3485djDkxh4hhGE 
2984akDfkkkkggEdsb 
s&amp;hgsfdk 
d&amp;Hyscvnm
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>THU 14:04
</code></pre>
<p>代码：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">string findDay(char s1)&#123;</span><br><span class="line">    switch(s1)&#123;</span><br><span class="line">        case <span class="string">'A'</span>:<span class="keyword">return</span> <span class="string">"MON"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'B'</span>:<span class="keyword">return</span> <span class="string">"TUE"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'C'</span>:<span class="keyword">return</span> <span class="string">"WED"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'D'</span>:<span class="keyword">return</span> <span class="string">"THU"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'E'</span>:<span class="keyword">return</span> <span class="string">"FRI"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'F'</span>:<span class="keyword">return</span> <span class="string">"SAT"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'G'</span>:<span class="keyword">return</span> <span class="string">"SUN"</span>;<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string findHour(char s1)&#123;</span><br><span class="line">    switch(s1)&#123;</span><br><span class="line">        case <span class="string">'0'</span>:<span class="keyword">return</span> <span class="string">"00:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'1'</span>:<span class="keyword">return</span> <span class="string">"01:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'2'</span>:<span class="keyword">return</span> <span class="string">"02:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'3'</span>:<span class="keyword">return</span> <span class="string">"03:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'4'</span>:<span class="keyword">return</span> <span class="string">"04:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'5'</span>:<span class="keyword">return</span> <span class="string">"05:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'6'</span>:<span class="keyword">return</span> <span class="string">"06:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'7'</span>:<span class="keyword">return</span> <span class="string">"07:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'8'</span>:<span class="keyword">return</span> <span class="string">"08:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'9'</span>:<span class="keyword">return</span> <span class="string">"09:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'A'</span>:<span class="keyword">return</span> <span class="string">"10:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'B'</span>:<span class="keyword">return</span> <span class="string">"11:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'C'</span>:<span class="keyword">return</span> <span class="string">"12:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'D'</span>:<span class="keyword">return</span> <span class="string">"13:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'E'</span>:<span class="keyword">return</span> <span class="string">"14:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'F'</span>:<span class="keyword">return</span> <span class="string">"15:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'G'</span>:<span class="keyword">return</span> <span class="string">"16:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'H'</span>:<span class="keyword">return</span> <span class="string">"17:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'I'</span>:<span class="keyword">return</span> <span class="string">"18:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'J'</span>:<span class="keyword">return</span> <span class="string">"19:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'K'</span>:<span class="keyword">return</span> <span class="string">"20:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'L'</span>:<span class="keyword">return</span> <span class="string">"21:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'M'</span>:<span class="keyword">return</span> <span class="string">"22:"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="string">'N'</span>:<span class="keyword">return</span> <span class="string">"23:"</span>;<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">string findMinu(int num)&#123;</span><br><span class="line">    <span class="keyword">if</span>(num&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">        string s1,s2,s3;</span><br><span class="line">        int temp,temp1;</span><br><span class="line">        temp = num%<span class="number">10</span>;</span><br><span class="line">        temp1 = num/<span class="number">10</span>;</span><br><span class="line">        s2 = temp1 + <span class="string">'0'</span>;</span><br><span class="line">        s3 = temp + <span class="string">'0'</span>;</span><br><span class="line">        s1 = s2 + s3;</span><br><span class="line">        <span class="keyword">return</span> s1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">    switch(num)&#123;</span><br><span class="line">        case <span class="number">0</span>:<span class="keyword">return</span> <span class="string">"00"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="number">1</span>:<span class="keyword">return</span> <span class="string">"01"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="number">2</span>:<span class="keyword">return</span> <span class="string">"02"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="number">3</span>:<span class="keyword">return</span> <span class="string">"03"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="number">4</span>:<span class="keyword">return</span> <span class="string">"04"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="number">5</span>:<span class="keyword">return</span> <span class="string">"05"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="number">6</span>:<span class="keyword">return</span> <span class="string">"06"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="number">7</span>:<span class="keyword">return</span> <span class="string">"07"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="number">8</span>:<span class="keyword">return</span> <span class="string">"08"</span>;<span class="keyword">break</span>;</span><br><span class="line">        case <span class="number">9</span>:<span class="keyword">return</span> <span class="string">"09"</span>;<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    string s1,s2,s3,s4,day,hour,minu;</span><br><span class="line">    bool flag = <span class="literal">false</span>;</span><br><span class="line">    cin&gt;&gt;s1&gt;&gt;s2&gt;&gt;s3&gt;&gt;s4;</span><br><span class="line">    int len;</span><br><span class="line">    <span class="keyword">if</span>(s1.length()&gt;s2.length())&#123;</span><br><span class="line">        len = s2.length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        len = s1.length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1\[i\] == s2\[i\] &amp;&amp; s1\[i\]&gt;=<span class="string">'A'</span> &amp;&amp; s1\[i\]&lt;=<span class="string">'G'</span> &amp;&amp; flag == <span class="literal">false</span>)&#123;</span><br><span class="line">            day = findDay(s1\[i\]);</span><br><span class="line">            cout&lt;&lt;day&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">          <span class="keyword">if</span>(s1\[i\] == s2\[i\] &amp;&amp; ((s1\[i\]&gt;=<span class="string">'A'</span> &amp;&amp; s1\[i\]&lt;=<span class="string">'N'</span>)||(s1\[i\]&gt;=<span class="string">'0'</span> &amp;&amp; s1\[i\]&lt;=<span class="string">'9'</span>)))&#123;</span><br><span class="line">            hour = findHour(s1\[i\]);</span><br><span class="line">            cout&lt;&lt;hour;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s3.length()&gt;s4.length())&#123;</span><br><span class="line">        len = s4.length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        len = s3.length();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s3\[i\] == s4\[i\] &amp;&amp; ((s3\[i\]&gt;=<span class="string">'a'</span> &amp;&amp; s4\[i\]&lt;=<span class="string">'z'</span>)||(s3\[i\]&gt;=<span class="string">'A'</span> &amp;&amp; s4\[i\]&lt;=<span class="string">'Z'</span>)))&#123;</span><br><span class="line">            minu = findMinu(i);</span><br><span class="line">            cout&lt;&lt;minu&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1017（乙级）</title>
    <url>/2019/03/11/pat-1017-yi-ji-1/</url>
    <content><![CDATA[<p>1017 A除以B （20 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805305181847552">https://pintia.cn/problem-sets/994805260223102976/problems/994805305181847552</a></p>
<p>本题要求计算 A/B，其中 A 是不超过 1000 位的正整数，B 是 1 位正整数。你需要输出商数 Q 和余数 R，使得 A=B×Q+R 成立。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中依次给出 A 和 B，中间以 1 空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中依次输出 Q 和 R，中间以 1 空格分隔。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>123456789050987654321 7
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>17636684150141093474 3
</code></pre>
<p>代码（大数除法）：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getBiggerOne</span><span class="params">(<span class="built_in">string</span> s1,<span class="built_in">string</span> s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(s1.length() &gt; s2.length())&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(s1.length() &lt; s2.length())&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1\[i\] != s2\[i\])&#123;</span><br><span class="line">                <span class="keyword">int</span> temp1,temp2;</span><br><span class="line">                temp1 = s1\[i\] - <span class="string">'0'</span>;</span><br><span class="line">                temp2 = s2\[i\] - <span class="string">'0'</span>;</span><br><span class="line">                <span class="keyword">if</span>(temp1 &gt; temp2)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">BigNumberJian</span><span class="params">(<span class="built_in">string</span> s1,<span class="built_in">string</span> s2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s1 == s2)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">result</span><span class="params">(<span class="number">10000</span>,<span class="string">'0'</span>)</span></span>;</span><br><span class="line">    <span class="keyword">bool</span> flag = getBiggerOne(s1,s2);</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        swap(s1,s2);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;"3"&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">    reverse(s2.<span class="built_in">begin</span>(),s2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        result\[i\] = s1\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s2.length();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp1,temp2;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;"1"&lt;&lt;endl;</span></span><br><span class="line">        temp1 = result\[i\] - <span class="string">'0'</span>;</span><br><span class="line">        temp2 = s2\[i\] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp1 &gt;= temp2)&#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;"1"&lt;&lt;endl;</span></span><br><span class="line">            result\[i\] = temp1 - temp2 + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;"2"&lt;&lt;endl;</span></span><br><span class="line">            result\[i+<span class="number">1</span>\] = result\[i+<span class="number">1</span>\] - <span class="string">'0'</span> - <span class="number">1</span> + <span class="string">'0'</span>;</span><br><span class="line">            result\[i\] = result\[i\] - <span class="string">'0'</span> + <span class="number">10</span> - (s2\[i\]-<span class="string">'0'</span>) + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">    result = result.substr(result.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>));</span><br><span class="line">    <span class="comment">//负号判断</span></span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        reverse(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">        result += <span class="string">'-'</span>;</span><br><span class="line">        reverse(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BigNumberChu</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2,s(<span class="number">10000</span>,<span class="string">'0'</span>),res;</span><br><span class="line">    <span class="keyword">int</span> len1,len2,disc;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    <span class="keyword">if</span>(getBiggerOne(s1,s2))&#123; <span class="comment">//s1&lt;s2 则s1/s2商为0</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"0 "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        len1 = s1.length();</span><br><span class="line">        len2 = s2.length();</span><br><span class="line">        disc = len1 - len2; <span class="comment">//记录除数和被除数之间位数之差 扩大除数disc个0</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;disc;i++)&#123;</span><br><span class="line">            s2 += <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;s2&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">while</span>(disc&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">            <span class="built_in">string</span> temp = BigNumberJian(s1,s2);</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;temp&lt;&lt;" ";</span></span><br><span class="line">                <span class="keyword">if</span>(temp.<span class="built_in">find</span>\_first\_not_of(<span class="string">'-'</span>))&#123;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                sum++;</span><br><span class="line">                s1 = temp;</span><br><span class="line">                temp = BigNumberJian(s1,s2);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line">            s\[s.length()-disc<span class="number">-1</span>\] = sum + <span class="string">'0'</span>;</span><br><span class="line">            disc--;</span><br><span class="line">            s2 = s2.substr(<span class="number">0</span>,len2+disc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>) == <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"0 "</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">string</span> t = s.substr(s.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>));</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="string">" "</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;BigNumberJian("22222222","22222433")&lt;&lt;endl;</span></span><br><span class="line">    BigNumberChu();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1016（乙级）</title>
    <url>/2019/03/11/pat-1016-yi-ji-1/</url>
    <content><![CDATA[<p>1016 部分A+B （15 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805306310115328">https://pintia.cn/problem-sets/994805260223102976/problems/994805306310115328</a></p>
<p>正整数 A 的“D​A​​（为 1 位整数）部分”定义为由 A 中所有 D​A​​ 组成的新整数 P​A​​。例如：给定 A=3862767，D​A​​=6，则 A 的“6 部分”P​A​​ 是 66，因为 A 中有 2 个 6。 现给定 A、D​A​​、B、D​B​​，请编写程序计算 P​A​​+P​B​​。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中依次给出 A、D​A​​、B、D​B​​，中间以空格分隔，其中 0&lt;A,B&lt;10​10​​。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出 P​A​​+P​B​​ 的值。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>3862767 6 13530293 3
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>399
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>3862767 1 13530293 8
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>0
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">charToint</span><span class="params">(<span class="keyword">char</span> t,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">0</span>,temp=<span class="number">0</span>,t1;</span><br><span class="line">        temp = t - <span class="string">'0'</span>;</span><br><span class="line">        result = temp;</span><br><span class="line">        num--;</span><br><span class="line">        <span class="keyword">while</span>(num&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            result = result*<span class="number">10</span> + temp;</span><br><span class="line">            num--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> A,Da,B,Db;</span><br><span class="line">    <span class="keyword">int</span> Pa,Pb,numA=<span class="number">0</span>,numB=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;A&gt;&gt;Da&gt;&gt;B&gt;&gt;Db;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(A\[i\] == Da\[<span class="number">0</span>\])&#123;</span><br><span class="line">            numA++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(B\[i\] == Db\[<span class="number">0</span>\])&#123;</span><br><span class="line">            numB++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;"test"&lt;&lt;endl;</span></span><br><span class="line">    Pa = charToint(Da\[<span class="number">0</span>\],numA);</span><br><span class="line">    Pb = charToint(Db\[<span class="number">0</span>\],numB);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;Pa + Pb&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1015（乙级）</title>
    <url>/2019/03/11/pat-1015-yi-ji-1/</url>
    <content><![CDATA[<p>1015 德才论 （25 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805307551629312">https://pintia.cn/problem-sets/994805260223102976/problems/994805307551629312</a></p>
<p>宋代史学家司马光在《资治通鉴》中有一段著名的“德才论”：“是故才德全尽谓之圣人，才德兼亡谓之愚人，德胜才谓之君子，才胜德谓之小人。凡取人之术，苟不得圣人，君子而与之，与其得小人，不若得愚人。” 现给出一批考生的德才分数，请根据司马光的理论给出录取排名。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出 3 个正整数，分别为：N（≤10​5​​），即考生总数；L（≥60），为录取最低分数线，即德分和才分均不低于 L 的考生才有资格被考虑录取；H（&lt;100），为优先录取线——德分和才分均不低于此线的被定义为“才德全尽”，此类考生按德才总分从高到低排序；才分不到但德分到线的一类考生属于“德胜才”，也按总分排序，但排在第一类考生之后；德才分均低于 H，但是德分不低于才分的考生属于“才德兼亡”但尚有“德胜才”者，按总分排序，但排在第二类考生之后；其他达到最低线 L 的考生也按总分排序，但排在第三类考生之后。 随后 N 行，每行给出一位考生的信息，包括：<code>准考证号 德分 才分</code>，其中<code>准考证号</code>为 8 位整数，德才分为区间 [0, 100] 内的整数。数字间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>输出第一行首先给出达到最低分数线的考生人数 M，随后 M 行，每行按照输入格式输出一位考生的信息，考生按输入中说明的规则从高到低排序。当某类考生中有多人总分相同时，按其德分降序排列；若德分也并列，则按准考证号的升序输出。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>14 60 80
10000001 64 90
10000002 90 60
10000011 85 80
10000003 85 80
10000004 80 85
10000005 82 77
10000006 83 76
10000007 90 78
10000008 75 79
10000009 59 90
10000010 88 45
10000012 80 100
10000013 90 99
10000014 66 60
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>12
10000013 90 99
10000012 80 100
10000003 85 80
10000011 85 80
10000004 80 85
10000007 90 78
10000006 83 76
10000005 82 77
10000002 90 60
10000014 66 60
10000008 75 79
10000001 64 90
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mess</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ID;</span><br><span class="line">    <span class="keyword">int</span> De;</span><br><span class="line">    <span class="keyword">int</span> Cai;</span><br><span class="line">    <span class="keyword">int</span> Zong;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(mess a,mess b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.Zong != b.Zong)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.Zong&gt;b.Zong;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.De != b.De)&#123;</span><br><span class="line">            <span class="keyword">return</span> a.De&gt;b.De;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.ID&lt;b.ID;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num,low,better,temp1,temp2,temp3,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num&gt;&gt;low&gt;&gt;better;</span><br><span class="line">    mess student\[num\];</span><br><span class="line">    <span class="built_in">vector</span>&lt;mess&gt; first_level;</span><br><span class="line">    <span class="built_in">vector</span>&lt;mess&gt; second_level;</span><br><span class="line">    <span class="built_in">vector</span>&lt;mess&gt; third_level;</span><br><span class="line">    <span class="built_in">vector</span>&lt;mess&gt; forst_level;</span><br><span class="line">    <span class="built_in">vector</span>&lt;mess&gt;::iterator pos;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp1&gt;&gt;temp2&gt;&gt;temp3;</span><br><span class="line">        student\[i\].ID = temp1;</span><br><span class="line">        student\[i\].De = temp2;</span><br><span class="line">        student\[i\].Cai = temp3;</span><br><span class="line">        student\[i\].Zong = temp2 + temp3;</span><br><span class="line">        <span class="keyword">if</span>(student\[i\].De&gt;=low &amp;&amp; student\[i\].Cai&gt;=low)&#123;</span><br><span class="line">            <span class="keyword">if</span>(student\[i\].De&gt;=better &amp;&amp; student\[i\].Cai&gt;=better)&#123;</span><br><span class="line">                first\_level.push\_back(student\[i\]);</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(student\[i\].De&gt;=better &amp;&amp; student\[i\].Cai&lt;better)&#123;</span><br><span class="line">                second\_level.push\_back(student\[i\]);</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(student\[i\].De&gt;=student\[i\].Cai &amp;&amp; student\[i\].Cai&lt;=better &amp;&amp; student\[i\].De&lt;=better)&#123;</span><br><span class="line">                third\_level.push\_back(student\[i\]);</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                forst\_level.push\_back(student\[i\]);</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    sort(first\_level.<span class="built_in">begin</span>(),first\_level.<span class="built_in">end</span>(),cmp2);</span><br><span class="line">    sort(second\_level.<span class="built_in">begin</span>(),second\_level.<span class="built_in">end</span>(),cmp2);</span><br><span class="line">    sort(third\_level.<span class="built_in">begin</span>(),third\_level.<span class="built_in">end</span>(),cmp2);</span><br><span class="line">    sort(forst\_level.<span class="built_in">begin</span>(),forst\_level.<span class="built_in">end</span>(),cmp2);</span><br><span class="line">    <span class="keyword">for</span>(pos = first\_level.<span class="built_in">begin</span>();pos!=first\_level.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(\*pos).ID&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos).De&lt;&lt;<span class="string">" "</span>&lt;&lt;(*pos).Cai&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(pos = second\_level.<span class="built_in">begin</span>();pos!=second\_level.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(\*pos).ID&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos).De&lt;&lt;<span class="string">" "</span>&lt;&lt;(*pos).Cai&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(pos = third\_level.<span class="built_in">begin</span>();pos!=third\_level.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(\*pos).ID&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos).De&lt;&lt;<span class="string">" "</span>&lt;&lt;(*pos).Cai&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(pos = forst\_level.<span class="built_in">begin</span>();pos!=forst\_level.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(\*pos).ID&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos).De&lt;&lt;<span class="string">" "</span>&lt;&lt;(*pos).Cai&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">上面代码由于使用的算法不够好，导致两个测试点运行超时 下面改正过得：</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>  </span></span><br><span class="line"><span class="class">&#123;</span>  </span><br><span class="line">    <span class="keyword">int</span> kaohao;  </span><br><span class="line">    <span class="keyword">int</span> defen;  </span><br><span class="line">    <span class="keyword">int</span> caifen;  </span><br><span class="line">    <span class="keyword">int</span> zongfen;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(student a,student b)</span> <span class="comment">//比较a在b前则返回true,表示a在b前面  </span></span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(a.zongfen&gt;b.zongfen)  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a.zongfen == b.zongfen)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(a.defen&gt;b.defen)  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.defen==b.defen)  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(a.kaohao&lt;b.kaohao)  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">vector</span>&lt;student&gt; v1,v2,v3,v4;<span class="comment">//表示四类考生  </span></span><br><span class="line">    student stu;<span class="comment">//学生信息临时保存  </span></span><br><span class="line">    <span class="keyword">int</span> count=<span class="number">0</span>;<span class="comment">//达标的学生总数  </span></span><br><span class="line">    <span class="keyword">int</span> N,L,H;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//cin&gt;&gt;N&gt;&gt;L&gt;&gt;H;  </span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;N,&amp;L,&amp;H);    </span><br><span class="line">    <span class="keyword">int</span> K,D,C;  </span><br><span class="line">    <span class="keyword">while</span>(N--)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="comment">//cin&gt;&gt;K&gt;&gt;D&gt;&gt;C;  </span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;K,&amp;D,&amp;C);    </span><br><span class="line">        stu.kaohao = K;  </span><br><span class="line">        stu.defen = D;  </span><br><span class="line">        stu.caifen = C;  </span><br><span class="line">        stu.zongfen = D+C;  </span><br><span class="line">        <span class="keyword">if</span>(D&gt;=L &amp;&amp; C&gt;=L)  </span><br><span class="line">        &#123;  </span><br><span class="line">            count++;  </span><br><span class="line">            <span class="keyword">if</span>(D&gt;=H &amp;&amp; C&gt;=H)  </span><br><span class="line">                v1.push_back(stu);    </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(D&gt;=H &amp;&amp; C&lt;H )  </span><br><span class="line">                v2.push_back(stu);  </span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(D&lt;H &amp;&amp; C&lt;H  &amp;&amp; D&gt;=C)  </span><br><span class="line">                v3.push_back(stu);  </span><br><span class="line">            <span class="keyword">else</span>   </span><br><span class="line">                v4.push_back(stu);  </span><br><span class="line">        &#125;  </span><br><span class="line">      </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\\n"</span>,count);  </span><br><span class="line">    sort(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">end</span>(),compare);  </span><br><span class="line">    sort(v2.<span class="built_in">begin</span>(),v2.<span class="built_in">end</span>(),compare);  </span><br><span class="line">    sort(v3.<span class="built_in">begin</span>(),v3.<span class="built_in">end</span>(),compare);  </span><br><span class="line">    sort(v4.<span class="built_in">begin</span>(),v4.<span class="built_in">end</span>(),compare);  </span><br><span class="line">  </span><br><span class="line">    <span class="built_in">vector</span>&lt;student&gt;::iterator itr;  </span><br><span class="line">    <span class="keyword">for</span>(itr=v1.<span class="built_in">begin</span>();itr!=v1.<span class="built_in">end</span>();itr++)  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\\n"</span>,itr-&gt;kaohao,itr-&gt;defen,itr-&gt;caifen);  </span><br><span class="line">    <span class="keyword">for</span>(itr=v2.<span class="built_in">begin</span>();itr!=v2.<span class="built_in">end</span>();itr++)  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\\n"</span>,itr-&gt;kaohao,itr-&gt;defen,itr-&gt;caifen);  </span><br><span class="line">    <span class="keyword">for</span>(itr=v3.<span class="built_in">begin</span>();itr!=v3.<span class="built_in">end</span>();itr++)  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\\n"</span>,itr-&gt;kaohao,itr-&gt;defen,itr-&gt;caifen);  </span><br><span class="line">    <span class="keyword">for</span>(itr=v4.<span class="built_in">begin</span>();itr!=v4.<span class="built_in">end</span>();itr++)  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\\n"</span>,itr-&gt;kaohao,itr-&gt;defen,itr-&gt;caifen);  </span><br><span class="line">  </span><br><span class="line">    system(<span class="string">"pause"</span>);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1018（乙级）</title>
    <url>/2019/03/11/pat-1018-yi-ji-1/</url>
    <content><![CDATA[<p>1018 锤子剪刀布 （20 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805304020025344">https://pintia.cn/problem-sets/994805260223102976/problems/994805304020025344</a></p>
<p>大家应该都会玩“锤子剪刀布”的游戏：两人同时给出手势，胜负规则如图所示： <img src="https://images.ptausercontent.com/724da598-b37f-4f1f-99b4-71459654ce3a.jpg" alt="FigCJB.jpg"> 现给出两人的交锋记录，请统计双方的胜、平、负次数，并且给出双方分别出什么手势的胜算最大。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第 1 行给出正整数 N（≤10​5​​），即双方交锋的次数。随后 N 行，每行给出一次交锋的信息，即甲、乙双方同时给出的的手势。<code>C</code> 代表“锤子”、<code>J</code> 代表“剪刀”、<code>B</code> 代表“布”，第 1 个字母代表甲方，第 2 个代表乙方，中间有 1 个空格。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>输出第 1、2 行分别给出甲、乙的胜、平、负次数，数字间以 1 个空格分隔。第 3 行给出两个字母，分别代表甲、乙获胜次数最多的手势，中间有 1 个空格。如果解不唯一，则输出按字母序最小的解。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>10
C J
J B
C B
B B
B C
C C
C B
J B
B C
J J
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>5 3 2
2 3 5
B B
</code></pre>
<p>代码（有一个测试点一直过不去）：  改正方法为应该是没有满足如果解不唯一，则输出按字母序最小的解。这个条件 所以应该采用将结果保存下来然后sort进行排序</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void zijian(int n\[\],int len)&#123;</span><br><span class="line">    int t = len;</span><br><span class="line">    bool <span class="built_in">flag</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>((n\[t\]-<span class="number">1</span>)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            n\[t\]--;</span><br><span class="line">            <span class="built_in">flag</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            n\[t\] = <span class="number">9</span>;</span><br><span class="line">            t--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span>(<span class="built_in">flag</span>!=<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool equalZero(int n\[\],int len)&#123;</span><br><span class="line">    bool <span class="built_in">flag</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(int i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n\[i\]!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">flag</span> = <span class="literal">false</span>;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="built_in">flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int num\<span class="variable">_Jia</span>\<span class="variable">_C</span>=<span class="number">0</span>,num\<span class="variable">_Jia</span>\<span class="variable">_J</span>=<span class="number">0</span>,num\<span class="variable">_Jia</span>\<span class="variable">_B</span>=<span class="number">0</span>,num\<span class="variable">_Yi</span>\<span class="variable">_C</span>=<span class="number">0</span>,num\<span class="variable">_Yi</span>\<span class="variable">_J</span>=<span class="number">0</span>,num\<span class="variable">_Yi</span>\<span class="variable">_B</span>=<span class="number">0</span>;</span><br><span class="line">    int Jia\<span class="variable">_Win</span>=<span class="number">0</span>,Jia\<span class="variable">_Ping</span>=<span class="number">0</span>,Jia\<span class="variable">_Lose</span>=<span class="number">0</span>,Yi\<span class="variable">_Win</span>=<span class="number">0</span>,Yi\<span class="variable">_Ping</span>=<span class="number">0</span>,Yi\<span class="variable">_Lose</span>=<span class="number">0</span>;</span><br><span class="line">    string number;</span><br><span class="line">    cin&gt;&gt;number;</span><br><span class="line">    int BigNum\[number.length()\];</span><br><span class="line">    <span class="keyword">for</span>(int i=number.length()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        BigNum\[i\] = number\[i\] - <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// C锤子 J剪刀 B布</span></span><br><span class="line">    <span class="keyword">while</span>(equalZero(BigNum,number.length()) == <span class="literal">false</span>)&#123;</span><br><span class="line">        string s1,s2;</span><br><span class="line">        cin&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">        <span class="keyword">if</span>(s1\[<span class="number">0</span>\] == <span class="string">'C'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s2\[<span class="number">0</span>\] == <span class="string">'C'</span>)&#123;</span><br><span class="line">                Jia_Ping++;</span><br><span class="line">                Yi_Ping++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s2\[<span class="number">0</span>\] == <span class="string">'B'</span>)&#123;</span><br><span class="line">                num\<span class="variable">_Yi</span>\<span class="variable">_B</span>++;</span><br><span class="line">                Yi_Win++;</span><br><span class="line">                Jia_Lose++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                num\<span class="variable">_Jia</span>\<span class="variable">_C</span>++;</span><br><span class="line">                Yi_Lose++;</span><br><span class="line">                Jia_Win++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s1\[<span class="number">0</span>\] == <span class="string">'B'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s2\[<span class="number">0</span>\] == <span class="string">'C'</span>)&#123;</span><br><span class="line">                num\<span class="variable">_Jia</span>\<span class="variable">_B</span>++;</span><br><span class="line">                Yi_Lose++;</span><br><span class="line">                Jia_Win++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s2\[<span class="number">0</span>\] == <span class="string">'B'</span>)&#123;</span><br><span class="line">                Jia_Ping++;</span><br><span class="line">                Yi_Ping++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                num\<span class="variable">_Yi</span>\<span class="variable">_J</span>++;</span><br><span class="line">                Yi_Win++;</span><br><span class="line">                Jia_Lose++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(s2\[<span class="number">0</span>\] == <span class="string">'C'</span>)&#123;</span><br><span class="line">                num\<span class="variable">_Yi</span>\<span class="variable">_C</span>++;</span><br><span class="line">                Yi_Win++;</span><br><span class="line">                Jia_Lose++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s2\[<span class="number">0</span>\] == <span class="string">'B'</span>)&#123;</span><br><span class="line">                num\<span class="variable">_Jia</span>\<span class="variable">_J</span>++;</span><br><span class="line">                Yi_Lose++;</span><br><span class="line">                Jia_Win++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                Jia_Ping++;</span><br><span class="line">                Yi_Ping++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        zijian(BigNum,number.length()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;Jia\<span class="variable">_Win</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;Jia\<span class="variable">_Ping</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;Jia_Lose&lt;&lt;<span class="literal">endl</span>;</span><br><span class="line">    cout&lt;&lt;Yi\<span class="variable">_Win</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;Yi\<span class="variable">_Ping</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;Yi_Lose&lt;&lt;<span class="literal">endl</span>;</span><br><span class="line">    <span class="keyword">if</span>((num\<span class="variable">_Jia</span>\<span class="variable">_C</span> &gt;= num\<span class="variable">_Jia</span>\<span class="variable">_B</span>) &amp;&amp; (num\<span class="variable">_Jia</span>\<span class="variable">_C</span> &gt;= num\<span class="variable">_Jia</span>\<span class="variable">_J</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(num\<span class="variable">_Jia</span>\<span class="variable">_B</span> == num\<span class="variable">_Jia</span>\<span class="variable">_C</span> == num\<span class="variable">_Jia</span>\<span class="variable">_J</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"B "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num\<span class="variable">_Jia</span>\<span class="variable">_B</span> == num\<span class="variable">_Jia</span>\<span class="variable">_C</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"B "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"C "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((num\<span class="variable">_Jia</span>\<span class="variable">_B</span> &gt;= num\<span class="variable">_Jia</span>\<span class="variable">_C</span>) &amp;&amp; (num\<span class="variable">_Jia</span>\<span class="variable">_B</span> &gt;= num\<span class="variable">_Jia</span>\<span class="variable">_J</span>))&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">"B "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((num\<span class="variable">_Jia</span>\<span class="variable">_J</span> &gt;= num\<span class="variable">_Jia</span>\<span class="variable">_C</span>) &amp;&amp; (num\<span class="variable">_Jia</span>\<span class="variable">_J</span> &gt;= num\<span class="variable">_Jia</span>\<span class="variable">_B</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(num\<span class="variable">_Jia</span>\<span class="variable">_J</span> == num\<span class="variable">_Jia</span>\<span class="variable">_C</span> == num\<span class="variable">_Jia</span>\<span class="variable">_B</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"B "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num\<span class="variable">_Jia</span>\<span class="variable">_J</span> == num\<span class="variable">_Jia</span>\<span class="variable">_B</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"B "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num\<span class="variable">_Jia</span>\<span class="variable">_J</span> == num\<span class="variable">_Jia</span>\<span class="variable">_C</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"C "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"J "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((num\<span class="variable">_Yi</span>\<span class="variable">_C</span> &gt;= num\<span class="variable">_Yi</span>\<span class="variable">_B</span>) &amp;&amp; (num\<span class="variable">_Yi</span>\<span class="variable">_C</span> &gt;= num\<span class="variable">_Yi</span>\<span class="variable">_J</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(num\<span class="variable">_Yi</span>\<span class="variable">_B</span> == num\<span class="variable">_Yi</span>\<span class="variable">_C</span> == num\<span class="variable">_Yi</span>\<span class="variable">_J</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"B"</span>&lt;&lt;<span class="literal">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num\<span class="variable">_Yi</span>\<span class="variable">_B</span> == num\<span class="variable">_Yi</span>\<span class="variable">_C</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"B"</span>&lt;&lt;<span class="literal">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"C"</span>&lt;&lt;<span class="literal">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((num\<span class="variable">_Yi</span>\<span class="variable">_B</span> &gt;= num\<span class="variable">_Yi</span>\<span class="variable">_C</span>) &amp;&amp; (num\<span class="variable">_Yi</span>\<span class="variable">_B</span> &gt;= num\<span class="variable">_Yi</span>\<span class="variable">_J</span>))&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">"B"</span>&lt;&lt;<span class="literal">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((num\<span class="variable">_Yi</span>\<span class="variable">_J</span> &gt;= num\<span class="variable">_Yi</span>\<span class="variable">_C</span>) &amp;&amp; (num\<span class="variable">_Yi</span>\<span class="variable">_J</span> &gt;= num\<span class="variable">_Yi</span>\<span class="variable">_B</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(num\<span class="variable">_Yi</span>\<span class="variable">_J</span> == num\<span class="variable">_Yi</span>\<span class="variable">_C</span> == num\<span class="variable">_Yi</span>\<span class="variable">_B</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"B"</span>&lt;&lt;<span class="literal">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num\<span class="variable">_Yi</span>\<span class="variable">_J</span> == num\<span class="variable">_Yi</span>\<span class="variable">_B</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"B"</span>&lt;&lt;<span class="literal">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(num\<span class="variable">_Yi</span>\<span class="variable">_J</span> == num\<span class="variable">_Yi</span>\<span class="variable">_C</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"C"</span>&lt;&lt;<span class="literal">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"J"</span>&lt;&lt;<span class="literal">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1020（乙级）</title>
    <url>/2019/03/11/pat-1020-yi-ji-1/</url>
    <content><![CDATA[<p>1020 月饼 （25 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805301562163200">https://pintia.cn/problem-sets/994805260223102976/problems/994805301562163200</a></p>
<p>月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。 注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 D 表示市场最大需求量。随后一行给出 N 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 N 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>3 20
18 15 10
75 72 45
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>94.50
</code></pre>
<p>代码：（一直有一个测试点过不去的版本）应该是有些细节没注意到</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#include&lt;iomanip&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> namespace std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> selectBest(<span class="type">double</span> te\[\],<span class="type">int</span> num)&#123;</span><br><span class="line">    <span class="type">int</span> <span class="keyword">index</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="type">double</span> <span class="keyword">temp</span>;</span><br><span class="line">    <span class="keyword">temp</span> = te\[<span class="number">0</span>\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(te\[i\]&gt;=<span class="keyword">temp</span>)&#123;</span><br><span class="line">            <span class="keyword">index</span> = i;</span><br><span class="line">            <span class="keyword">temp</span> = te\[i\];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">index</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//考虑即使所有的都加起来也根本不满足最大值的情况</span><br><span class="line"><span class="type">bool</span> IsEmpty(<span class="type">double</span> te\[\],<span class="type">int</span> num)&#123;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(te\[i\] != <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main()&#123;</span><br><span class="line">    <span class="type">int</span> num,sum,<span class="keyword">index</span>;</span><br><span class="line">    cin&gt;&gt;num&gt;&gt;sum;</span><br><span class="line">    <span class="type">int</span> KuCun\[num\],ShouJia\[num\];</span><br><span class="line">    <span class="type">double</span> DanJia\[num\],<span class="type">money</span>=<span class="number">0</span>,<span class="keyword">temp</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        cin&gt;&gt;KuCun\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        cin&gt;&gt;ShouJia\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        DanJia\[i\] = <span class="type">double</span>(ShouJia\[i\])/<span class="type">double</span>(KuCun\[i\]);</span><br><span class="line">        //cout&lt;&lt;DanJia\[i\]&lt;&lt;" ";</span><br><span class="line">    &#125;</span><br><span class="line">    //cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">while</span>(sum&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(IsEmpty(DanJia,num))&#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        //cout&lt;&lt;"1"&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">index</span> = selectBest(DanJia,num);</span><br><span class="line">        //cout&lt;&lt;<span class="keyword">index</span>&lt;&lt;endl;</span><br><span class="line">        DanJia\[<span class="keyword">index</span>\] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(KuCun\[<span class="keyword">index</span>\]&lt;=sum)&#123;</span><br><span class="line">            sum -= KuCun\[<span class="keyword">index</span>\];</span><br><span class="line">            <span class="type">money</span> = <span class="type">money</span> + ShouJia\[<span class="keyword">index</span>\];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">temp</span> = <span class="type">double</span>((<span class="type">double</span>(sum)/<span class="type">double</span>(KuCun\[<span class="keyword">index</span>\]))*<span class="type">double</span>(ShouJia\[<span class="keyword">index</span>\]));</span><br><span class="line">            <span class="type">money</span> += <span class="keyword">temp</span>;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        //cout&lt;&lt;<span class="type">money</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;<span class="type">money</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考后改正的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mooncake</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> a;</span><br><span class="line">    <span class="keyword">double</span> b;</span><br><span class="line">    <span class="keyword">double</span> c;</span><br><span class="line">&#125; aa\[<span class="number">1100</span>\];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(mooncake n,mooncake m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n.c&gt;m.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;aa\[i\].a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;aa\[j\].b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        aa\[i\].c=aa\[i\].b/aa\[i\].a;</span><br><span class="line">    sort(aa,aa+n,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(aa\[i\].a&lt;=m)</span><br><span class="line">        &#123;</span><br><span class="line">            m-=aa\[i\].a;</span><br><span class="line">            sum+=aa\[i\].b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(aa\[i\].a&gt;m)</span><br><span class="line">        &#123;</span><br><span class="line">            sum+=aa\[i\].c*m;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f\\n"</span>,sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1021（乙级）</title>
    <url>/2019/03/12/pat-1021-yi-ji-1/</url>
    <content><![CDATA[<p>1021 个位数统计 （15 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805300404535296">https://pintia.cn/problem-sets/994805260223102976/problems/994805300404535296</a></p>
<p>给定一个 k 位整数 N=d​k−1​​10​k−1​​+⋯+d​1​​10​1​​+d​0​​ (0≤d​i​​≤9, i=0,⋯,k−1, d​k−1​​&gt;0)，请编写程序统计每种不同的个位数字出现的次数。例如：给定 N=100311，则有 2 个 0，3 个 1，和 1 个 3。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个输入包含 1 个测试用例，即一个不超过 1000 位的正整数 N。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对 N 中每一种不同的个位数字，以 <code>D:M</code> 的格式在一行中输出该位数字 <code>D</code> 及其在 N 中出现的次数 <code>M</code>。要求按 <code>D</code> 的升序输出。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>100311
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>0:2
1:3
3:1
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">number</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">int</span> counts;</span><br><span class="line">&#125;qwe\[<span class="number">10</span>\];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> sen;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;sen;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        qwe\[i\].num = i;</span><br><span class="line">        qwe\[i\].counts = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sen.length();i++)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(sen\[i\])&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'0'</span>:&#123;</span><br><span class="line">                qwe\[sen\[i\]-<span class="string">'0'</span>\].counts++;</span><br><span class="line">            &#125;;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'1'</span>:&#123;</span><br><span class="line">                qwe\[sen\[i\]-<span class="string">'0'</span>\].counts++;</span><br><span class="line">            &#125;;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'2'</span>:&#123;</span><br><span class="line">                qwe\[sen\[i\]-<span class="string">'0'</span>\].counts++;</span><br><span class="line">            &#125;;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'3'</span>:&#123;</span><br><span class="line">                qwe\[sen\[i\]-<span class="string">'0'</span>\].counts++;</span><br><span class="line">            &#125;;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'4'</span>:&#123;</span><br><span class="line">                qwe\[sen\[i\]-<span class="string">'0'</span>\].counts++;</span><br><span class="line">            &#125;;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'5'</span>:&#123;</span><br><span class="line">                qwe\[sen\[i\]-<span class="string">'0'</span>\].counts++;</span><br><span class="line">            &#125;;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'6'</span>:&#123;</span><br><span class="line">                qwe\[sen\[i\]-<span class="string">'0'</span>\].counts++;</span><br><span class="line">            &#125;;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'7'</span>:&#123;</span><br><span class="line">                qwe\[sen\[i\]-<span class="string">'0'</span>\].counts++;</span><br><span class="line">            &#125;;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'8'</span>:&#123;</span><br><span class="line">                qwe\[sen\[i\]-<span class="string">'0'</span>\].counts++;</span><br><span class="line">            &#125;;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'9'</span>:&#123;</span><br><span class="line">                qwe\[sen\[i\]-<span class="string">'0'</span>\].counts++;</span><br><span class="line">            &#125;;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(qwe\[i\].counts != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;qwe\[i\].num&lt;&lt;<span class="string">":"</span>&lt;&lt;qwe\[i\].counts&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1022（乙级）</title>
    <url>/2019/03/12/pat-1022-yi-ji-1/</url>
    <content><![CDATA[<p>1022 D进制的A+B （20 分）<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805299301433344">原文地址</a></p>
<p>输入两个非负 10 进制整数 A 和 B (≤2​30​​−1)，输出 A+B 的 D (1&lt;D≤10)进制数。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中依次给出 3 个整数 A、B 和 D。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>输出 A+B 的 D 进制数。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>123 456 8
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>1103
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; qwe;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> A,B,C,D;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;A&gt;&gt;B&gt;&gt;D;</span><br><span class="line">    C = A + B;</span><br><span class="line">    <span class="keyword">if</span>(C==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"0"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(C!=<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">int</span> t = C % D;</span><br><span class="line">           qwe.push(t);</span><br><span class="line">           C = C / D;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!qwe.empty())&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;qwe.top();</span><br><span class="line">            qwe.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1019（乙级）</title>
    <url>/2019/03/11/pat-1019-yi-ji-1/</url>
    <content><![CDATA[<p>1019 数字黑洞 （20 分） 地址：<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805302786899968">https://pintia.cn/problem-sets/994805260223102976/problems/994805302786899968</a></p>
<p>给定任一个各位数字不完全相同的 4 位正整数，如果我们先把 4 个数字按非递增排序，再按非递减排序，然后用第 1 个数字减第 2 个数字，将得到一个新的数字。一直重复这样做，我们很快会停在有“数字黑洞”之称的 <code>6174</code>，这个神奇的数字也叫 Kaprekar 常数。 例如，我们从<code>6767</code>开始，将得到</p>
<pre><code>7766 - 6677 = 1089
9810 - 0189 = 9621
9621 - 1269 = 8352
8532 - 2358 = 6174
7641 - 1467 = 6174
... ...
</code></pre>
<p>现给定任意 4 位正整数，请编写程序演示到达黑洞的过程。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入给出一个 (0,10​4​​) 区间内的正整数 N。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>如果 N 的 4 位数字全相等，则在一行内输出 <code>N - N = 0000</code>；否则将计算的每一步在一行内输出，直到 <code>6174</code> 作为差出现，输出格式见样例。注意每个数字按 <code>4</code> 位数格式输出。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>6767
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>7766 - 6677 = 1089
9810 - 0189 = 9621
9621 - 1269 = 8352
8532 - 2358 = 6174
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>2222
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>2222 - 2222 = 0000
</code></pre>
<p>代码：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">include</span>&lt;iostream&gt;</span><br><span class="line">#<span class="keyword">include</span>&lt;iomanip&gt;</span><br><span class="line">#<span class="keyword">include</span>&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"><span class="built_in">bool</span> cmp(<span class="built_in">int</span> a,<span class="built_in">int</span> b)<span class="comment">//设计函数以降序 </span></span><br><span class="line">&#123;</span><br><span class="line">	return a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> <span class="constructor">GetNum(<span class="params">int</span> <span class="operator">*</span><span class="params">a</span>)</span><span class="comment">//将数组内的元素转为数字 </span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">int</span> sum=<span class="number">0</span>;</span><br><span class="line">	for(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">	sum=sum*<span class="number">10</span>+a\<span class="literal">[<span class="identifier">i</span>\]</span>;</span><br><span class="line">	return sum;</span><br><span class="line">&#125;</span><br><span class="line">void <span class="constructor">Clear(<span class="params">int</span> <span class="operator">*</span><span class="params">a</span>)</span><span class="comment">//清空数组内的元素，即将数组内的元素置0 </span></span><br><span class="line">&#123;</span><br><span class="line">	for(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">	a\<span class="literal">[<span class="identifier">i</span>\]</span>=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">void <span class="constructor">StoreNum(<span class="params">int</span> <span class="operator">*</span><span class="params">a</span>,<span class="params">int</span> <span class="params">n</span>)</span><span class="comment">//将数字存储至数组中 </span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">int</span> i=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(n)</span><br><span class="line">	&#123;</span><br><span class="line">		a\<span class="literal">[<span class="identifier">i</span><span class="operator">++</span>\]</span>=n%<span class="number">10</span>;</span><br><span class="line">		n/=<span class="number">10</span>;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">void <span class="constructor">OutPut(<span class="params">int</span> <span class="operator">*</span><span class="params">a</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">int</span> n1,n2,n;</span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		sort(a,a+<span class="number">4</span>,cmp);<span class="comment">//降序 </span></span><br><span class="line">		n1=<span class="constructor">GetNum(<span class="params">a</span>)</span>;</span><br><span class="line">		cout&lt;&lt;setw(<span class="number">4</span>)&lt;&lt;setfill(<span class="character">'0'</span>)&lt;&lt;right&lt;&lt;n1&lt;&lt;<span class="string">" - "</span>;</span><br><span class="line">		sort(a,a+<span class="number">4</span>);<span class="comment">//升序 </span></span><br><span class="line">		n2=<span class="constructor">GetNum(<span class="params">a</span>)</span>;</span><br><span class="line">		n=n1-n2;</span><br><span class="line">		cout&lt;&lt;setw(<span class="number">4</span>)&lt;&lt;setfill(<span class="character">'0'</span>)&lt;&lt;right&lt;&lt;n2&lt;&lt;<span class="string">" = "</span>;</span><br><span class="line">		cout&lt;&lt;setw(<span class="number">4</span>)&lt;&lt;setfill(<span class="character">'0'</span>)&lt;&lt;right&lt;&lt;n&lt;&lt;<span class="character">'\\n'</span>;</span><br><span class="line">		<span class="constructor">Clear(<span class="params">a</span>)</span>;<span class="comment">//清空 </span></span><br><span class="line">		<span class="constructor">StoreNum(<span class="params">a</span>,<span class="params">n</span>)</span>;<span class="comment">//存储差 </span></span><br><span class="line">	&#125;<span class="keyword">while</span>(n!=<span class="number">6174</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">int</span> N,a\<span class="literal">[<span class="number">4</span>\]</span>=&#123;<span class="number">0</span>&#125;,i=<span class="number">0</span>;<span class="comment">//定义存储数字的数组,初始化元素都为0 </span></span><br><span class="line">	cin&gt;&gt;N;</span><br><span class="line">	<span class="constructor">StoreNum(<span class="params">a</span>,N)</span>;</span><br><span class="line">	<span class="keyword">if</span>(a\<span class="literal">[<span class="number">0</span>\]</span>==a\<span class="literal">[<span class="number">1</span>\]</span>&amp;&amp;a\<span class="literal">[<span class="number">0</span>\]</span>==a\<span class="literal">[<span class="number">2</span>\]</span>&amp;&amp;a\<span class="literal">[<span class="number">0</span>\]</span>==a\<span class="literal">[<span class="number">3</span>\]</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout&lt;&lt;a\<span class="literal">[<span class="number">0</span>\]</span>&lt;&lt;a\<span class="literal">[<span class="number">0</span>\]</span>&lt;&lt;a\<span class="literal">[<span class="number">0</span>\]</span>&lt;&lt;a\<span class="literal">[<span class="number">0</span>\]</span>&lt;&lt;<span class="string">" - "</span>&lt;&lt;a\<span class="literal">[<span class="number">0</span>\]</span>&lt;&lt;a\<span class="literal">[<span class="number">0</span>\]</span>&lt;&lt;a\<span class="literal">[<span class="number">0</span>\]</span>&lt;&lt;a\<span class="literal">[<span class="number">0</span>\]</span>;</span><br><span class="line">		cout&lt;&lt;<span class="string">" = 0000"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> </span><br><span class="line">	<span class="constructor">OutPut(<span class="params">a</span>)</span>;</span><br><span class="line">	return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1023（乙级）</title>
    <url>/2019/03/12/pat-1023-yi-ji-1/</url>
    <content><![CDATA[<p>1023 组个最小数 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805298269634560">原文地址</a></p>
<p>给定数字 0-9 各若干个。你可以以任意顺序排列这些数字，但必须全部使用。目标是使得最后得到的数尽可能小（注意 0 不能做首位）。例如：给定两个 0，两个 1，三个 5，一个 8，我们得到的最小的数就是 10015558。 现给定数字，请编写程序输出能够组成的最小的数。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中给出 10 个非负整数，顺序表示我们拥有数字 0、数字 1、……数字 9 的个数。整数间用一个空格分隔。10 个数字的总个数不超过 50，且至少拥有 1 个非 0 的数字。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出能够组成的最小的数。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>2 2 0 0 0 3 0 0 1 0
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>10015558
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">char</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> sen = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> t,index;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;t;j++)&#123;</span><br><span class="line">            sen += (i + <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(sen.<span class="built_in">begin</span>(),sen.<span class="built_in">end</span>(),cmp);</span><br><span class="line">    index = sen.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">char</span> a = sen\[<span class="number">0</span>\];</span><br><span class="line">    sen\[<span class="number">0</span>\] = sen\[index\];</span><br><span class="line">    sen\[index\] = a;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sen&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1025（乙级）</title>
    <url>/2019/03/12/pat-1025-yi-ji-1/</url>
    <content><![CDATA[<p>1025 反转链表 （25 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805296180871168">原文地址</a></p>
<p>给定一个常数 K 以及一个单链表 L，请编写程序将 L 中每 K 个结点反转。例如：给定 L 为 1→2→3→4→5→6，K 为 3，则输出应该为 3→2→1→6→5→4；如果 K 为 4，则输出应该为 4→3→2→1→5→6，即最后不到 K 个元素不反转。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出第 1 个结点的地址、结点总个数正整数 N (≤10​5​​)、以及正整数 K (≤N)，即要求反转的子链结点的个数。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。 接下来有 N 行，每行格式为：</p>
<pre><code>Address Data Next
</code></pre>
<p>其中 <code>Address</code> 是结点地址，<code>Data</code> 是该结点保存的整数数据，<code>Next</code> 是下一结点的地址。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对每个测试用例，顺序输出反转后的链表，其上每个结点占一行，格式与输入相同。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>00100 6 4
00000 4 99999
00100 1 12309
68237 6 -1
33218 3 00000
99999 5 68237
12309 2 33218
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>00000 4 33218
33218 3 12309
12309 2 00100
00100 1 99999
99999 5 68237
68237 6 -1
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这里一定要注意 对于链表的排序 一定不能使用排序算法  应该采用map类似字典的方式去寻找下一个节点</span></span><br><span class="line"><span class="comment">对于逆序的话则是采用reverse来进行高效的逆置*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> address;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="built_in">string</span> next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sorted</span><span class="params">(Node nodes\[\],<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j&lt;num;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nodes\[i\].next == nodes\[j\].address)&#123;</span><br><span class="line">                s1 = nodes\[i+<span class="number">1</span>\].address;</span><br><span class="line">                t = nodes\[i+<span class="number">1</span>\].data;</span><br><span class="line">                s2 = nodes\[i+<span class="number">1</span>\].next;</span><br><span class="line">                nodes\[i+<span class="number">1</span>\].address = nodes\[j\].address;</span><br><span class="line">                nodes\[i+<span class="number">1</span>\].data = nodes\[j\].data;</span><br><span class="line">                nodes\[i+<span class="number">1</span>\].next = nodes\[j\].next;</span><br><span class="line">                nodes\[j\].address = s1;</span><br><span class="line">                nodes\[j\].data = t;</span><br><span class="line">                nodes\[j\].next = s2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,Node&gt; qwe;</span><br><span class="line">    <span class="built_in">string</span> start;</span><br><span class="line">    <span class="keyword">int</span> num,temp;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;start&gt;&gt;num&gt;&gt;temp;</span><br><span class="line">    Node nodes\[num\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> s1,s2,s3,s4;</span><br><span class="line">        <span class="keyword">int</span> t,t1;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;t&gt;&gt;s2;</span><br><span class="line">        qwe\[s1\].data = t;</span><br><span class="line">        qwe\[s1\].next = s2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> num1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        nodes\[i\] = &#123;start,qwe\[start\].data,<span class="string">"0"</span>&#125;;</span><br><span class="line">        start = qwe\[start\].next;</span><br><span class="line">        <span class="keyword">if</span>(start == <span class="string">"-1"</span>)&#123;</span><br><span class="line">            num1 = i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sorted(nodes,num);</span></span><br><span class="line">    <span class="comment">/*cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;num1;i++)&#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;nodes\[i\].address&lt;&lt;" "&lt;&lt;nodes\[i\].data&lt;&lt;" "&lt;&lt;nodes\[i\].next&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;endl;*/</span></span><br><span class="line">    <span class="keyword">if</span>(temp &gt; num1)&#123; <span class="comment">//不足temp个的情况</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num1;i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;nodes\[i\].address&lt;&lt;<span class="string">" "</span>&lt;&lt;nodes\[i\].data&lt;&lt;<span class="string">" "</span>&lt;&lt;nodes\[i\].next&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(temp == num1)&#123;</span><br><span class="line">        reverse(nodes,nodes+num1);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num1;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == num1<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;nodes\[i\].address&lt;&lt;<span class="string">" "</span>&lt;&lt;nodes\[i\].data&lt;&lt;<span class="string">" -1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;nodes\[i\].address&lt;&lt;<span class="string">" "</span>&lt;&lt;nodes\[i\].data&lt;&lt;<span class="string">" "</span>&lt;&lt;nodes\[i+<span class="number">1</span>\].address&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum,rez,m,n,<span class="built_in">step</span>=<span class="number">0</span>;</span><br><span class="line">        sum = num1 / temp; <span class="comment">//总共sum次反转</span></span><br><span class="line">        rez = num1 % temp; <span class="comment">//剩余rez个不反转</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sum;i++)&#123;</span><br><span class="line">            m = i * temp;</span><br><span class="line">            n = (i + <span class="number">1</span>) * temp;</span><br><span class="line">            reverse(nodes+m,nodes+n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num1;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == num1<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;nodes\[i\].address&lt;&lt;<span class="string">" "</span>&lt;&lt;nodes\[i\].data&lt;&lt;<span class="string">" -1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;nodes\[i\].address&lt;&lt;<span class="string">" "</span>&lt;&lt;nodes\[i\].data&lt;&lt;<span class="string">" "</span>&lt;&lt;nodes\[i+<span class="number">1</span>\].address&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1024（乙级）</title>
    <url>/2019/03/12/pat-1024-yi-ji-1/</url>
    <content><![CDATA[<p>1024 科学计数法 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805297229447168">原文地址</a></p>
<p>科学计数法是科学家用来表示很大或很小的数字的一种方便的方法，其满足正则表达式 [±][1-9]<code>.</code>[0-9]+E[±][0-9]+，即数字的整数部分只有 1 位，小数部分至少有 1 位，该数字及其指数部分的正负号即使对正数也必定明确给出。 现以科学计数法的格式给出实数 A，请编写程序按普通数字表示法输出 A，并保证所有有效位都被保留。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个输入包含 1 个测试用例，即一个以科学计数法表示的实数 A。该数字的存储长度不超过 9999 字节，且其指数的绝对值不超过 9999。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对每个测试用例，在一行中按普通数字表示法输出 A，并保证所有有效位都被保留，包括末尾的 0。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>+1.23400E-03
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>0.00123400
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>-1.2E+10
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>-12000000000
</code></pre>
<p>代码:</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="meta">#include&lt;math.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> namespace std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main()&#123;</span><br><span class="line">    string s1,s3,qwe;</span><br><span class="line">    cin&gt;&gt;s1;</span><br><span class="line">    <span class="type">int</span> pointBack,flag = <span class="number">0</span>,flag1=<span class="number">0</span>;</span><br><span class="line">    pointBack = <span class="number">0</span>; //小数点后面的位数</span><br><span class="line">    qwe += s1\[<span class="number">0</span>\];</span><br><span class="line">    qwe += s1\[<span class="number">1</span>\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1\[i\] == <span class="string">'.'</span>)&#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s1\[i\] == <span class="string">'E'</span>)&#123;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">            flag1 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag == <span class="number">1</span>)&#123;</span><br><span class="line">            pointBack++;</span><br><span class="line">            qwe += s1\[i\];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag1 == <span class="number">1</span>)&#123;</span><br><span class="line">            s3 += s1\[i\];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //cout&lt;&lt;qwe&lt;&lt;" "&lt;&lt;s3&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> a,b,sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> t = s3\[<span class="number">0</span>\];</span><br><span class="line">    s3\[<span class="number">0</span>\] = <span class="string">'0'</span>;</span><br><span class="line">    <span class="type">int</span> <span class="keyword">index</span> = s3.find\_first\_not_of(<span class="string">'0'</span>);</span><br><span class="line">    s3\[<span class="number">0</span>\] = t;</span><br><span class="line">    //cout&lt;&lt;<span class="keyword">index</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="keyword">index</span>;i&lt;s3.length();i++)&#123;</span><br><span class="line">        a = s3\[i\] - <span class="string">'0'</span>;</span><br><span class="line">        b = round(pow(<span class="number">10</span>,s3.length()<span class="number">-1</span>-i));</span><br><span class="line">        sum += (a*b);</span><br><span class="line">        //cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;" "&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    //cout&lt;&lt;qwe&lt;&lt;" "&lt;&lt;s3&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">if</span>(s3\[<span class="number">0</span>\] == <span class="string">'-'</span>)&#123;</span><br><span class="line">        //cout&lt;&lt;"qqwe"&lt;&lt;endl;</span><br><span class="line">        string <span class="keyword">temp</span>(sum,<span class="string">'0'</span>),result;</span><br><span class="line">        //cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">if</span>(qwe\[<span class="number">0</span>\] == <span class="string">'-'</span>)&#123;</span><br><span class="line">            qwe = qwe\[<span class="number">0</span>\] + <span class="keyword">temp</span> + qwe.substr(<span class="number">1</span>,qwe.length());</span><br><span class="line">            result = qwe.substr(<span class="number">0</span>,<span class="number">2</span>) + <span class="string">'.'</span> + qwe.substr(<span class="number">2</span>,qwe.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            qwe = <span class="keyword">temp</span> + qwe.substr(<span class="number">1</span>,qwe.length());</span><br><span class="line">            result = qwe.substr(<span class="number">0</span>,<span class="number">1</span>) + <span class="string">'.'</span> + qwe.substr(<span class="number">1</span>,qwe.length());</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;result&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        string result;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; pointBack)&#123;</span><br><span class="line">            string temp1(sum-pointBack,<span class="string">'0'</span>);</span><br><span class="line">            result = qwe + temp1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum == pointBack)&#123;</span><br><span class="line">            result = qwe;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            //cout&lt;&lt;sum&lt;&lt;" "&lt;&lt;pointBack&lt;&lt;endl;</span><br><span class="line">            result = qwe.substr(<span class="number">0</span>,sum+<span class="number">2</span>) + <span class="string">'.'</span> + qwe.substr(sum+<span class="number">2</span>,qwe.length());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(qwe\[<span class="number">0</span>\] == <span class="string">'+'</span>)&#123;</span><br><span class="line">            result = result.substr(<span class="number">1</span>,result.length());</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;result&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1026（乙级）</title>
    <url>/2019/03/12/pat-1026-yi-ji-1/</url>
    <content><![CDATA[<p>1026 程序运行时间 （15 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805295203598336">原文地址</a></p>
<p>要获得一个 C 语言程序的运行时间，常用的方法是调用头文件 time.h，其中提供了 clock() 函数，可以捕捉从程序开始运行到 clock() 被调用时所耗费的时间。这个时间单位是 clock tick，即“时钟打点”。同时还有一个常数 CLK_TCK，给出了机器时钟每秒所走的时钟打点数。于是为了获得一个函数 f 的运行时间，我们只要在调用 f 之前先调用 clock()，获得一个时钟打点数 C1；在 f 执行完成后再调用 clock()，获得另一个时钟打点数 C2；两次获得的时钟打点数之差 (C2-C1) 就是 f 运行所消耗的时钟打点数，再除以常数 CLK_TCK，就得到了以秒为单位的运行时间。 这里不妨简单假设常数 CLK_TCK 为 100。现给定被测函数前后两次获得的时钟打点数，请你给出被测函数运行的时间。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中顺序给出 2 个整数 C1 和 C2。注意两次获得的时钟打点数肯定不相同，即 C1 &lt; C2，并且取值在 [0,10​7​​]。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出被测函数运行的时间。运行时间必须按照 <code>hh:mm:ss</code>（即2位的 <code>时:分:秒</code>）格式输出；不足 1 秒的时间四舍五入到秒。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>123 4577973
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>12:42:59
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CLK 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    c = b - a;</span><br><span class="line">    <span class="keyword">int</span> hour = c/(<span class="number">3600</span>*CLK);</span><br><span class="line">    c = c%(<span class="number">3600</span>*CLK);</span><br><span class="line">    <span class="keyword">int</span> minu = c/(<span class="number">60</span>*CLK);</span><br><span class="line">    c = c%(<span class="number">60</span>*CLK);</span><br><span class="line">    <span class="keyword">int</span> q=round((<span class="keyword">double</span>)c/CLK);</span><br><span class="line">    <span class="built_in">cout</span>.<span class="built_in">fill</span>(<span class="string">'0'</span>); <span class="comment">//填充只能用字符串</span></span><br><span class="line">    <span class="built_in">cout</span>.<span class="built_in">width</span>(<span class="number">2</span>); <span class="comment">//指定宽度 只对下面一个cout有用</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;hour&lt;&lt;<span class="string">":"</span>;</span><br><span class="line">    <span class="built_in">cout</span>.<span class="built_in">width</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;minu&lt;&lt;<span class="string">":"</span>;</span><br><span class="line">    <span class="built_in">cout</span>.<span class="built_in">width</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;q&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1027（乙级）</title>
    <url>/2019/03/12/pat-1027-yi-ji-1/</url>
    <content><![CDATA[<p>1027 打印沙漏 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805294251491328">原文地址</a></p>
<p>本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印</p>
<pre><code>*****
 ***
  *
 ***
*****
</code></pre>
<p>所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。 给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。</p>
<h3 id="输入格式"><a class="header-anchor" href="#输入格式">¶</a>输入格式:</h3>
<p>输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。</p>
<h3 id="输出格式"><a class="header-anchor" href="#输出格式">¶</a>输出格式:</h3>
<p>首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。</p>
<h3 id="输入样例"><a class="header-anchor" href="#输入样例">¶</a>输入样例:</h3>
<pre><code>19 *
</code></pre>
<h3 id="输出样例"><a class="header-anchor" href="#输出样例">¶</a>输出样例:</h3>
<pre><code>*****
 ***
  *
 ***
*****
2
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num,maxnum,sum=<span class="number">0</span>,temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> te;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num&gt;&gt;te;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        num -= temp;</span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;te&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            temp = temp + <span class="number">2</span>;</span><br><span class="line">            num -= <span class="number">2</span>*temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            num += temp*<span class="number">2</span>;</span><br><span class="line">            temp -= <span class="number">2</span>;</span><br><span class="line">            sum = num;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;num&lt;&lt;" "&lt;&lt;temp&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line">            maxnum = temp; <span class="comment">//最大个数的*</span></span><br><span class="line">            <span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(temp,te)</span></span>;</span><br><span class="line">            <span class="keyword">int</span> flag1 = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">if</span>(temp &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">            temp = temp - <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">while</span>(temp != maxnum)&#123;</span><br><span class="line">                <span class="keyword">int</span> n = maxnum - temp;</span><br><span class="line">                <span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(temp,te)</span></span>;</span><br><span class="line">                <span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(n/<span class="number">2</span>,<span class="string">' '</span>)</span></span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;s2+s1+s2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">if</span>(flag1 == <span class="number">0</span>)&#123;</span><br><span class="line">                    temp = temp - <span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">if</span>(temp == <span class="number">1</span>)&#123;</span><br><span class="line">                        flag1 = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    temp = temp + <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="built_in">string</span> <span class="title">s3</span><span class="params">(maxnum,te)</span></span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s3&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1028（乙级）</title>
    <url>/2019/03/12/pat-1028-yi-ji-1/</url>
    <content><![CDATA[<p>1028 人口普查 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805293282607104">原文地址</a></p>
<p>某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。 这里确保每个输入的日期都是合法的，但不一定是合理的——假设已知镇上没有超过 200 岁的老人，而今天是 2014 年 9 月 6 日，所以超过 200 岁的生日和未出生的生日都是不合理的，应该被过滤掉。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第一行给出正整数 N，取值在(0,10​5​​]；随后 N 行，每行给出 1 个人的姓名（由不超过 5 个英文字母组成的字符串）、以及按 <code>yyyy/mm/dd</code>（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>5
John 2001/05/12
Tom 1814/09/06
Ann 2121/01/30
James 1814/09/05
Steve 1967/11/20
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>3 Tom John
</code></pre>
<p>代码：</p>
<figure class="highlight gml"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;   </span><br><span class="line">    int n,cnt=<span class="number">0</span>;</span><br><span class="line">    scanf(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    struct birth&#123;</span><br><span class="line">        char name\[<span class="number">6</span>\];</span><br><span class="line">        int <span class="symbol">y</span>;</span><br><span class="line">        int m;</span><br><span class="line">        int d;</span><br><span class="line">    &#125;a,<span class="built_in">max</span>,<span class="built_in">min</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">max</span>.<span class="symbol">y</span>=<span class="number">2014</span>;<span class="built_in">max</span>.m=<span class="number">9</span>;<span class="built_in">max</span>.d=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">min</span>.<span class="symbol">y</span>=<span class="number">1814</span>;<span class="built_in">max</span>.m=<span class="number">9</span>;<span class="built_in">max</span>.d=<span class="number">5</span>; </span><br><span class="line">    <span class="keyword">for</span>(int i = <span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        scanf(<span class="string">"%s %d/%d/%d"</span>,&amp;a.name,&amp;a.<span class="symbol">y</span>,&amp;a.m,&amp;a.d);</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">if</span>(a.<span class="symbol">y</span>&gt;<span class="number">2014</span>||(a.<span class="symbol">y</span>==<span class="number">2014</span>&amp;&amp;a.m&gt;<span class="number">9</span>)||(a.<span class="symbol">y</span>==<span class="number">2014</span>&amp;&amp;a.m==<span class="number">9</span>&amp;&amp;a.d&gt;<span class="number">6</span>)||a.<span class="symbol">y</span>&lt;<span class="number">1814</span>||(a.<span class="symbol">y</span>==<span class="number">1814</span>&amp;&amp;a.m&lt;<span class="number">9</span>)||(a.<span class="symbol">y</span>==<span class="number">1814</span>&amp;&amp;a.m==<span class="number">9</span>&amp;&amp;a.d&lt;<span class="number">6</span>))&#123;</span><br><span class="line">            cnt--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a.<span class="symbol">y</span>&lt;<span class="built_in">max</span>.<span class="symbol">y</span>||(a.<span class="symbol">y</span>==<span class="built_in">max</span>.<span class="symbol">y</span>&amp;&amp;a.m&lt;<span class="built_in">max</span>.m)||(a.<span class="symbol">y</span>==<span class="built_in">max</span>.<span class="symbol">y</span>&amp;&amp;a.m==<span class="built_in">max</span>.m&amp;&amp;a.d&lt;<span class="built_in">max</span>.d))&#123;</span><br><span class="line">            <span class="built_in">max</span>=a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a.<span class="symbol">y</span>&gt;<span class="built_in">min</span>.<span class="symbol">y</span>||(a.<span class="symbol">y</span>==<span class="built_in">min</span>.<span class="symbol">y</span>&amp;&amp;a.m&gt;<span class="built_in">min</span>.m)||(a.<span class="symbol">y</span>==<span class="built_in">min</span>.<span class="symbol">y</span>&amp;&amp;a.m==<span class="built_in">min</span>.m&amp;&amp;a.d&gt;<span class="built_in">min</span>.d))&#123;</span><br><span class="line">            <span class="built_in">min</span>=a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"%d"</span>,cnt);</span><br><span class="line">    <span class="keyword">if</span>(cnt!=<span class="number">0</span>)&#123;</span><br><span class="line">        printf(<span class="string">" %s %s"</span>,<span class="built_in">max</span>.name,<span class="built_in">min</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1029（乙级）</title>
    <url>/2019/03/12/pat-1029-yi-ji-1/</url>
    <content><![CDATA[<p>1029 旧键盘 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805292322111488">原文地址</a></p>
<p>旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及实际被输入的文字，请你列出肯定坏掉的那些键。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在 2 行中分别给出应该输入的文字、以及实际被输入的文字。每段文字是不超过 80 个字符的串，由字母 A-Z（包括大、小写）、数字 0-9、以及下划线 <code>_</code>（代表空格）组成。题目保证 2 个字符串均非空。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>按照发现顺序，在一行中输出坏掉的键。其中英文字母只输出大写，每个坏键只输出一次。题目保证至少有 1 个坏键。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>7_This_is_a_test
_hs_s_a_es
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>7TI
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>,i=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> s1,s2;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; result;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::iterator pos;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    transform(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>(),s1.<span class="built_in">begin</span>(),::<span class="built_in">toupper</span>);</span><br><span class="line">    transform(s2.<span class="built_in">begin</span>(),s2.<span class="built_in">end</span>(),s2.<span class="built_in">begin</span>(),::<span class="built_in">toupper</span>);</span><br><span class="line">    <span class="keyword">while</span>(i!=s2.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1\[index\] != s2\[i\])&#123;</span><br><span class="line">            pos = <span class="built_in">find</span>(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>(),s1\[index\]);</span><br><span class="line">            <span class="keyword">if</span>(pos == result.<span class="built_in">end</span>())&#123;</span><br><span class="line">                result.push_back(s1\[index\]);</span><br><span class="line">            &#125;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            i++;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index != (s1.length()<span class="number">-1</span>))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=index;index&lt;s1.length();index++)&#123;</span><br><span class="line">            pos = <span class="built_in">find</span>(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>(),s1\[index\]);</span><br><span class="line">            <span class="keyword">if</span>(pos == result.<span class="built_in">end</span>())&#123;</span><br><span class="line">                result.push_back(s1\[index\]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(pos=result.<span class="built_in">begin</span>();pos!=result.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*pos;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1031（乙级）</title>
    <url>/2019/03/12/pat-1031-yi-ji-1/</url>
    <content><![CDATA[<p>1031 查验身份证 （15 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805290334011392">原文地址</a></p>
<p>一个合法的身份证号码由17位地区、日期编号和顺序编号加1位校验码组成。校验码的计算规则如下： 首先对前17位数字加权求和，权重分配为：{7，9，10，5，8，4，2，1，6，3，7，9，10，5，8，4，2}；然后将计算的和对11取模得到值<code>Z</code>；最后按照以下关系对应<code>Z</code>值与校验码<code>M</code>的值：</p>
<pre><code>Z：0 1 2 3 4 5 6 7 8 9 10
M：1 0 X 9 8 7 6 5 4 3 2
</code></pre>
<p>现在给定一些身份证号码，请你验证校验码的有效性，并输出有问题的号码。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出正整数N（≤100）是输入的身份证号码的个数。随后N行，每行给出1个18位身份证号码。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>按照输入的顺序每行输出1个有问题的身份证号码。这里并不检验前17位是否合理，只检查前17位是否全为数字且最后1位校验码计算准确。如果所有号码都正常，则输出<code>All passed</code>。</p>
<h3 id="输入样例1："><a class="header-anchor" href="#输入样例1：">¶</a>输入样例1：</h3>
<pre><code>4
320124198808240056
12010X198901011234
110108196711301866
37070419881216001X
</code></pre>
<h3 id="输出样例1："><a class="header-anchor" href="#输出样例1：">¶</a>输出样例1：</h3>
<pre><code>12010X198901011234
110108196711301866
37070419881216001X
</code></pre>
<h3 id="输入样例2："><a class="header-anchor" href="#输入样例2：">¶</a>输入样例2：</h3>
<pre><code>2
320124198808240056
110108196711301862
</code></pre>
<h3 id="输出样例2："><a class="header-anchor" href="#输出样例2：">¶</a>输出样例2：</h3>
<pre><code>All passed
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt; dir;</span><br><span class="line">    dir\[<span class="number">0</span>\] = <span class="string">'1'</span>;</span><br><span class="line">    dir\[<span class="number">1</span>\] = <span class="string">'0'</span>;</span><br><span class="line">    dir\[<span class="number">2</span>\] = <span class="string">'X'</span>;</span><br><span class="line">    dir\[<span class="number">3</span>\] = <span class="string">'9'</span>;</span><br><span class="line">    dir\[<span class="number">4</span>\] = <span class="string">'8'</span>;</span><br><span class="line">    dir\[<span class="number">5</span>\] = <span class="string">'7'</span>;</span><br><span class="line">    dir\[<span class="number">6</span>\] = <span class="string">'6'</span>;</span><br><span class="line">    dir\[<span class="number">7</span>\] = <span class="string">'5'</span>;</span><br><span class="line">    dir\[<span class="number">8</span>\] = <span class="string">'4'</span>;</span><br><span class="line">    dir\[<span class="number">9</span>\] = <span class="string">'3'</span>;</span><br><span class="line">    dir\[<span class="number">10</span>\] = <span class="string">'2'</span>;</span><br><span class="line">    <span class="keyword">int</span> quan\[<span class="number">17</span>\] = &#123;<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">string</span> str\[num\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;str\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp1,sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">17</span>;j++)&#123;</span><br><span class="line">            temp = str\[i\]\[j\];</span><br><span class="line">            <span class="keyword">if</span>(temp == <span class="string">'X'</span>)&#123;</span><br><span class="line">                sum = sum + quan\[j\]*<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sum = sum + quan\[j\]*(temp-<span class="string">'0'</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum = sum%<span class="number">11</span>;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line">        temp = str\[i\]\[<span class="number">17</span>\];</span><br><span class="line">        <span class="keyword">if</span>(temp == <span class="string">'X'</span>)&#123;</span><br><span class="line">            temp1 = <span class="string">'X'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            temp1 = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dir\[sum\] != temp1)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;str\[i\]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"All passed"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1030（乙级）</title>
    <url>/2019/03/12/pat-1030-yi-ji-1/</url>
    <content><![CDATA[<p>1030 完美数列 （25 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805291311284224">原文地址</a></p>
<p>给定一个正整数数列，和正整数 p，设这个数列中的最大值是 M，最小值是 m，如果 M≤mp，则称这个数列是完美数列。 现在给定参数 p 和一些正整数，请你从中选择尽可能多的数构成一个完美数列。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出两个正整数 N 和 p，其中 N（≤10​5​​）是输入的正整数的个数，p（≤10​9​​）是给定的参数。第二行给出 N 个正整数，每个数不超过 10​9​​。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出最多可以选择多少个数可以用它们组成一个完美数列。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>10 8
2 3 20 4 5 1 6 7 8 9
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>8
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&lt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> num,q;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num&gt;&gt;q;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> li\[num\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;li\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(li,li+num,cmp);</span><br><span class="line">    <span class="keyword">int</span> temp,maxnum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i+maxnum&lt;=num;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(temp=i+maxnum;temp&lt;num;temp++)&#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">int</span> mq = li\[i\] * q;</span><br><span class="line">            <span class="keyword">if</span>(li\[temp\]&lt;=mq)&#123;</span><br><span class="line">                maxnum = temp+<span class="number">1</span>-i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maxnum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1032（乙级）</title>
    <url>/2019/03/12/pat-1032-yi-ji-1/</url>
    <content><![CDATA[<p>1032 挖掘机技术哪家强 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805289432236032">原文地址</a></p>
<p>为了用事实说明挖掘机技术到底哪家强，PAT 组织了一场挖掘机技能大赛。现请你根据比赛结果统计出技术最强的那个学校。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第 1 行给出不超过 10​5​​ 的正整数 N，即参赛人数。随后 N 行，每行给出一位参赛者的信息和成绩，包括其所代表的学校的编号（从 1 开始连续编号）、及其比赛成绩（百分制），中间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中给出总得分最高的学校的编号、及其总分，中间以空格分隔。题目保证答案唯一，没有并列。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>6
3 65
2 80
1 100
2 70
3 40
3 0
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>2 150
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; list1;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator pos;</span><br><span class="line">    <span class="keyword">int</span> num,temp,temp1;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp&gt;&gt;temp1;</span><br><span class="line">        <span class="keyword">if</span>(list1.count(temp) != <span class="number">0</span>)&#123;</span><br><span class="line">            list1\[temp\] += temp1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            list1\[temp\] = temp1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> index,maxnum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(pos=list1.<span class="built_in">begin</span>();pos!=list1.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos-&gt;second &gt; maxnum)&#123;</span><br><span class="line">            index = pos-&gt;first;</span><br><span class="line">            maxnum = pos-&gt;second;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;index&lt;&lt;<span class="string">" "</span>&lt;&lt;list1\[index\]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1033（乙级）</title>
    <url>/2019/03/12/pat-1033-yi-ji-1/</url>
    <content><![CDATA[<p>1033 旧键盘打字 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805288530460672">原文地址</a></p>
<p>旧键盘上坏了几个键，于是在敲一段文字的时候，对应的字符就不会出现。现在给出应该输入的一段文字、以及坏掉的那些键，打出的结果文字会是怎样？</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在 2 行中分别给出坏掉的那些键、以及应该输入的文字。其中对应英文字母的坏键以大写给出；每段文字是不超过 10​5​​ 个字符的串。可用的字符包括字母 [<code>a</code>-<code>z</code>, <code>A</code>-<code>Z</code>]、数字 <code>0</code>-<code>9</code>、以及下划线 <code>_</code>（代表空格）、<code>,</code>、<code>.</code>、<code>-</code>、<code>+</code>（代表上档键）。题目保证第 2 行输入的文字串非空。 注意：如果上档键坏掉了，那么大写的英文字母无法被打出。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出能够被打出的结果文字。如果没有一个字符能被打出，则输出空行。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>7+IE.
7_This_is_a_test.
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>_hs_s_a_tst
</code></pre>
<p>代码：（这里要仔细理解题意 只有+是上档键）</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//这里只有+是上档键</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2,s3;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; list1;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;::iterator pos;</span><br><span class="line">    getline(<span class="built_in">cin</span>,s1);</span><br><span class="line">    getline(<span class="built_in">cin</span>,s2);</span><br><span class="line">    s3 = s2;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>,flag1 = <span class="literal">true</span>;</span><br><span class="line">    transform(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>(),s1.<span class="built_in">begin</span>(),::<span class="built_in">toupper</span>);</span><br><span class="line">    transform(s3.<span class="built_in">begin</span>(),s3.<span class="built_in">end</span>(),s3.<span class="built_in">begin</span>(),::<span class="built_in">toupper</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        list1.push_back(s1\[i\]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s1.<span class="built_in">find</span>(<span class="string">'+'</span>) != <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s2.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(list1.<span class="built_in">begin</span>(),list1.<span class="built_in">end</span>(),s3\[i\]) == list1.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag &amp;&amp; s2\[i\]!=<span class="string">'+'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(s2\[i\]&lt;<span class="string">'A'</span>||s2\[i\]&gt;<span class="string">'Z'</span>)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;s2\[i\];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;s2\[i\];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1034（乙级）</title>
    <url>/2019/03/12/pat-1034-yi-ji-1/</url>
    <content><![CDATA[<p>1034 有理数四则运算 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805287624491008">原文地址</a></p>
<p>本题要求编写程序，计算 2 个有理数的和、差、积、商。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中按照 <code>a1/b1 a2/b2</code> 的格式给出两个分数形式的有理数，其中分子和分母全是整型范围内的整数，负号只可能出现在分子前，分母不为 0。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>分别在 4 行中按照 <code>有理数1 运算符 有理数2 = 结果</code> 的格式顺序输出 2 个有理数的和、差、积、商。注意输出的每个有理数必须是该有理数的最简形式 <code>k a/b</code>，其中 <code>k</code> 是整数部分，<code>a/b</code> 是最简分数部分；若为负数，则须加括号；若除法分母为 0，则输出 <code>Inf</code>。题目保证正确的输出中没有超过整型范围的整数。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>2/3 -4/2
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>2/3 + (-2) = (-1 1/3)
2/3 - (-2) = 2 2/3
2/3 * (-2) = (-1 1/3)
2/3 / (-2) = (-1/3)
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>5/3 0/6
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>1 2/3 + 0 = 1 2/3
1 2/3 - 0 = 1 2/3
1 2/3 * 0 = 0
1 2/3 / 0 = Inf
</code></pre>
<p>代码：（复杂版本）</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//以下版本实现实在是太复杂了 所以不采用了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strToNum</span><span class="params">(<span class="built_in">string</span> s1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = s1.length();</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        num += (s1\[len<span class="number">-1</span>\] - <span class="string">'0'</span>)*round(<span class="built_in">pow</span>(<span class="number">10</span>,len<span class="number">-1</span>));</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">numberOper</span><span class="params">(<span class="built_in">string</span> s1,<span class="built_in">string</span> s2,<span class="keyword">bool</span> flag1,<span class="keyword">bool</span> flag2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index1 = s1.<span class="built_in">find</span>(<span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">int</span> index2 = s2.<span class="built_in">find</span>(<span class="string">'/'</span>);</span><br><span class="line">    <span class="keyword">int</span> q1\_front,q1\_back,q2\_front,q2\_back;</span><br><span class="line">    <span class="keyword">int</span> s1\_front,s1\_back,s2\_front,s2\_back;</span><br><span class="line">    <span class="keyword">if</span>(flag1)&#123;</span><br><span class="line">        s1_front = strToNum(s1.substr(<span class="number">1</span>,index1<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s1_front = strToNum(s1.substr(<span class="number">0</span>,index1));</span><br><span class="line">    &#125;</span><br><span class="line">    s1_back = strToNum(s1.substr(index1+<span class="number">1</span>,s1.length()));</span><br><span class="line">    <span class="keyword">if</span>(flag2)&#123;</span><br><span class="line">        s2_front = strToNum(s2.substr(<span class="number">1</span>,index2<span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        s2_front = strToNum(s2.substr(<span class="number">0</span>,index2));</span><br><span class="line">    &#125;</span><br><span class="line">    s2_back = strToNum(s2.substr(index2+<span class="number">1</span>,s2.length()));</span><br><span class="line">    <span class="comment">//cout&lt;&lt;s1\_front&lt;&lt;" "&lt;&lt;s1\_back&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//cout&lt;&lt;s2\_front&lt;&lt;" "&lt;&lt;s2\_back&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">int</span> fenmu = s2\_back * s1\_back;</span><br><span class="line">    <span class="keyword">int</span> s1\_fenzi = s1\_front * s2_back;</span><br><span class="line">    <span class="keyword">int</span> s2\_fenzi = s2\_front * s1_back;</span><br><span class="line">    <span class="keyword">if</span>(flag1)&#123;</span><br><span class="line">        s1\_fenzi = s1\_fenzi * <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag2)&#123;</span><br><span class="line">        s2\_fenzi = s2\_fenzi * <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;flag1&lt;&lt;flag2&lt;&lt;s1\_fenzi&lt;&lt;<span class="string">" "</span>&lt;&lt;s2\_fenzi&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> fenzi = s1\_fenzi + s2\_fenzi;</span><br><span class="line">    <span class="keyword">bool</span> flag3 = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(fenzi &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        flag3 = <span class="literal">true</span>;</span><br><span class="line">        fenzi = <span class="number">0</span> - fenzi;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> jinwei = <span class="number">0</span>,yuwei = <span class="number">-1</span>;</span><br><span class="line">    jinwei = fenzi/fenmu;</span><br><span class="line">    <span class="keyword">if</span>(jinwei != <span class="number">0</span>)&#123;</span><br><span class="line">        yuwei = fenzi%fenmu;</span><br><span class="line">        fenzi = yuwei;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;fenzi&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(fenmu%fenzi == <span class="number">0</span>)&#123;</span><br><span class="line">        fenmu = fenmu/fenzi;</span><br><span class="line">        fenzi = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(jinwei == <span class="number">0</span>)&#123;</span><br><span class="line">       <span class="built_in">cout</span>&lt;&lt;fenzi&lt;&lt;<span class="string">"/"</span>&lt;&lt;fenmu&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag3)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"-"</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;jinwei&lt;&lt;<span class="string">" "</span>&lt;&lt;fenzi&lt;&lt;<span class="string">"/"</span>&lt;&lt;fenmu&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    <span class="keyword">bool</span> flag1=<span class="literal">false</span>,flag2=<span class="literal">false</span>; <span class="comment">//正负标志</span></span><br><span class="line">    <span class="keyword">if</span>(s1\[<span class="number">0</span>\] == <span class="string">'-'</span>)&#123;</span><br><span class="line">        flag1 = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s2\[<span class="number">0</span>\] == <span class="string">'-'</span>)&#123;</span><br><span class="line">        flag2 = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    numberOper(s1,s2,flag1,flag2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于上面的版本太过复杂所以不在采用了，下面是优化版本 代码：</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求两个数的最大公约数</span></span><br><span class="line">long int huajian(long int a,long int b)&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">        return a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        return huajian(b,a%b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//化简函数</span></span><br><span class="line">void simplf(long int fronts,long int backs)&#123;</span><br><span class="line">    bool <span class="built_in">flag</span> = <span class="literal">false</span>;<span class="comment">//是否为负数的分子判断</span></span><br><span class="line">    long int jinwei=<span class="number">0</span>,yushu=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(backs == <span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">"Inf"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(fronts == <span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(fronts &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">flag</span> = <span class="literal">true</span>;</span><br><span class="line">            fronts = <span class="number">0</span> - fronts;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fronts &gt; backs)&#123;</span><br><span class="line">            jinwei = fronts / backs;</span><br><span class="line">            yushu = fronts % backs;</span><br><span class="line">            fronts = yushu;</span><br><span class="line">        &#125;</span><br><span class="line">        long int gcd = huajian(fronts,backs);</span><br><span class="line">        fronts = fronts / gcd;</span><br><span class="line">        backs = backs / gcd;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">flag</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">"(-"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(jinwei != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fronts == <span class="number">0</span>)&#123;</span><br><span class="line">                cout&lt;&lt;jinwei;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;jinwei&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(fronts != <span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;fronts&lt;&lt;<span class="string">"/"</span>&lt;&lt;backs;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">flag</span>)&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">")"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    long int t1\<span class="variable">_front</span>,t1\<span class="variable">_back</span>,t2\<span class="variable">_front</span>,t2\<span class="variable">_back</span>,result\<span class="variable">_front</span>,result\<span class="variable">_back</span>;</span><br><span class="line">    scanf(<span class="string">"%ld/%ld %ld/%ld"</span>,&amp;t1\<span class="variable">_front</span>,&amp;t1\<span class="variable">_back</span>,&amp;t2\<span class="variable">_front</span>,&amp;t2\<span class="variable">_back</span>);</span><br><span class="line">    <span class="comment">//加法</span></span><br><span class="line">    result\<span class="variable">_front</span> = t1\<span class="variable">_front</span> * t2\<span class="variable">_back</span> + t2\<span class="variable">_front</span> * t1_back;</span><br><span class="line">    result\<span class="variable">_back</span> = t2\<span class="variable">_back</span> * t1_back;</span><br><span class="line">    simplf(t1\<span class="variable">_front</span>,t1\<span class="variable">_back</span>);cout&lt;&lt;<span class="string">" + "</span>;simplf(t2\<span class="variable">_front</span>,t2\<span class="variable">_back</span>);cout&lt;&lt;<span class="string">" = "</span>;simplf(result\<span class="variable">_front</span>,result\<span class="variable">_back</span>);cout&lt;&lt;<span class="literal">endl</span>;</span><br><span class="line">    <span class="comment">//减法</span></span><br><span class="line">    result\<span class="variable">_front</span> = t1\<span class="variable">_front</span> * t2\<span class="variable">_back</span> - t2\<span class="variable">_front</span> * t1_back;</span><br><span class="line">    result\<span class="variable">_back</span> = t2\<span class="variable">_back</span> * t1_back;</span><br><span class="line">    simplf(t1\<span class="variable">_front</span>,t1\<span class="variable">_back</span>);cout&lt;&lt;<span class="string">" - "</span>;simplf(t2\<span class="variable">_front</span>,t2\<span class="variable">_back</span>);cout&lt;&lt;<span class="string">" = "</span>;simplf(result\<span class="variable">_front</span>,result\<span class="variable">_back</span>);cout&lt;&lt;<span class="literal">endl</span>;</span><br><span class="line">    <span class="comment">//乘法</span></span><br><span class="line">    result\<span class="variable">_front</span> = t1\<span class="variable">_front</span> * t2_front;</span><br><span class="line">    result\<span class="variable">_back</span> = t2\<span class="variable">_back</span> * t1_back;</span><br><span class="line">    simplf(t1\<span class="variable">_front</span>,t1\<span class="variable">_back</span>);cout&lt;&lt;<span class="string">" * "</span>;simplf(t2\<span class="variable">_front</span>,t2\<span class="variable">_back</span>);cout&lt;&lt;<span class="string">" = "</span>;simplf(result\<span class="variable">_front</span>,result\<span class="variable">_back</span>);cout&lt;&lt;<span class="literal">endl</span>;</span><br><span class="line">    <span class="comment">//除法</span></span><br><span class="line">    bool <span class="built_in">flag</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(t2_front&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">flag</span> = <span class="literal">true</span>;</span><br><span class="line">        t2\<span class="variable">_front</span> = <span class="number">0</span> - t2\<span class="variable">_front</span>;</span><br><span class="line">        t2\<span class="variable">_back</span> = t2\<span class="variable">_back</span> * -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    result\<span class="variable">_front</span> = t1\<span class="variable">_front</span> * t2_back;</span><br><span class="line">    result\<span class="variable">_back</span> = t1\<span class="variable">_back</span> * t2_front;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">flag</span>)&#123;</span><br><span class="line">        t2\<span class="variable">_back</span> = <span class="number">0</span> - t2\<span class="variable">_back</span>;</span><br><span class="line">        t2\<span class="variable">_front</span> = t2\<span class="variable">_front</span> * -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    simplf(t1\<span class="variable">_front</span>,t1\<span class="variable">_back</span>);cout&lt;&lt;<span class="string">" / "</span>;simplf(t2\<span class="variable">_front</span>,t2\<span class="variable">_back</span>);cout&lt;&lt;<span class="string">" = "</span>;simplf(result\<span class="variable">_front</span>,result\<span class="variable">_back</span>);cout&lt;&lt;<span class="literal">endl</span>;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1036（乙级）</title>
    <url>/2019/03/12/pat-1036-yi-ji-1/</url>
    <content><![CDATA[<p>1036 跟奥巴马一起编程 （15 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805285812551680">原文地址</a></p>
<p>美国总统奥巴马不仅呼吁所有人都学习编程，甚至以身作则编写代码，成为美国历史上首位编写计算机代码的总统。2014 年底，为庆祝“计算机科学教育周”正式启动，奥巴马编写了很简单的计算机代码：在屏幕上画一个正方形。现在你也跟他一起画吧！</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中给出正方形边长 N（3≤N≤20）和组成正方形边的某种字符 C，间隔一个空格。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>输出由给定字符 C 画出的正方形。但是注意到行间距比列间距大，所以为了让结果看上去更像正方形，我们输出的行数实际上是列数的 50%（四舍五入取整）。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>10 a
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>aaaaaaaaaa
a        a
a        a
a        a
aaaaaaaaaa
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num,lie,hang;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">    lie = round(<span class="keyword">float</span>(num)/<span class="number">2</span>)<span class="number">-2</span>; <span class="comment">//除了上下两行的行数</span></span><br><span class="line">    hang = num - <span class="number">2</span>; <span class="comment">//空格数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == num <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ch&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lie;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ch;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;hang;j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ch&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == num <span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ch&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ch;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1037（乙级）</title>
    <url>/2019/03/12/pat-1037-yi-ji-1/</url>
    <content><![CDATA[<p>1037 在霍格沃茨找零钱 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805284923359232">原文地址</a></p>
<p>如果你是哈利·波特迷，你会知道魔法世界有它自己的货币系统 —— 就如海格告诉哈利的：“十七个银西可(Sickle)兑一个加隆(Galleon)，二十九个纳特(Knut)兑一个西可，很容易。”现在，给定哈利应付的价钱 P 和他实付的钱 A，你的任务是写一个程序来计算他应该被找的零钱。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在 1 行中分别给出 P 和 A，格式为 <code>Galleon.Sickle.Knut</code>，其间用 1 个空格分隔。这里 <code>Galleon</code> 是 [0, 10​7​​] 区间内的整数，<code>Sickle</code> 是 [0, 17) 区间内的整数，<code>Knut</code> 是 [0, 29) 区间内的整数。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中用与输入同样的格式输出哈利应该被找的零钱。如果他没带够钱，那么输出的应该是负数。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>10.16.27 14.1.28
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>3.2.1
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>14.1.28 10.16.27
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>-3.2.1
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="comment">//思路：将所有钱转换为最小的单位 然后减完之后在换算回去</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Galleon = <span class="number">17</span> * <span class="number">29</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Sickle  = <span class="number">29</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv\[\])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a1, b1, c1;</span><br><span class="line">    <span class="keyword">int</span> a2, b2, c2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d.%d.%d %d.%d.%d"</span>, &amp;a1, &amp;b1, &amp;c1, &amp;a2, &amp;b2, &amp;c2 );</span><br><span class="line">    <span class="keyword">int</span> price = a1 * Galleon + b1 * Sickle + c1;</span><br><span class="line">    <span class="keyword">int</span> money = a2 * Galleon + b2 * Sickle + c2;</span><br><span class="line">    <span class="keyword">int</span> change = money - price; <span class="comment">//找零的钱</span></span><br><span class="line">    <span class="keyword">if</span>(change &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">        change = -change;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d.%d.%d\\n"</span>, change / Galleon, change % Galleon / Sickle, change % Sickle);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1039（乙级）</title>
    <url>/2019/03/12/pat-1039-yi-ji-1/</url>
    <content><![CDATA[<p>1039 到底买不买 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805283241443328">原文地址</a></p>
<p>小红想买些珠子做一串自己喜欢的珠串。卖珠子的摊主有很多串五颜六色的珠串，但是不肯把任何一串拆散了卖。于是小红要你帮忙判断一下，某串珠子里是否包含了全部自己想要的珠子？如果是，那么告诉她有多少多余的珠子；如果不是，那么告诉她缺了多少珠子。 为方便起见，我们用[0-9]、[a-z]、[A-Z]范围内的字符来表示颜色。例如在图1中，第3串是小红想做的珠串；那么第1串可以买，因为包含了全部她想要的珠子，还多了8颗不需要的珠子；第2串不能买，因为没有黑色珠子，并且少了一颗红色的珠子。 <img src="https://images.ptausercontent.com/b7e2ffa6-8819-436d-ad79-a41263abe914.jpg" alt="figbuy.jpg"> 图 1</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个输入包含 1 个测试用例。每个测试用例分别在 2 行中先后给出摊主的珠串和小红想做的珠串，两串都不超过 1000 个珠子。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>如果可以买，则在一行中输出 <code>Yes</code> 以及有多少多余的珠子；如果不可以买，则在一行中输出 <code>No</code> 以及缺了多少珠子。其间以 1 个空格分隔。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>ppRYYGrrYBR2258
YrR8RrY
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>Yes 8
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>ppRYYGrrYB225
YrR8RrY
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>No 2
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; t1;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; t2;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;::iterator pos;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t1.count(s1\[i\]) != <span class="number">0</span>)&#123;</span><br><span class="line">            t1\[s1\[i\]\] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            t1\[s1\[i\]\] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s2.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t2.count(s2\[i\]) != <span class="number">0</span>)&#123;</span><br><span class="line">            t2\[s2\[i\]\] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            t2\[s2\[i\]\] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(pos=t2.<span class="built_in">begin</span>();pos!=t2.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t1.count(pos-&gt;first) == <span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(t1\[pos-&gt;first\] - pos-&gt;second &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes "</span>&lt;&lt;s1.length()-s2.length()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(pos=t2.<span class="built_in">begin</span>();pos!=t2.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t1.count(pos-&gt;first) == <span class="number">0</span>)&#123;</span><br><span class="line">                sum += pos-&gt;second;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(t1\[pos-&gt;first\] - pos-&gt;second &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                    sum += (pos-&gt;second - t1\[pos-&gt;first\]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"No "</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1038（乙级）</title>
    <url>/2019/03/12/pat-1038-yi-ji-1/</url>
    <content><![CDATA[<p>1038 统计同成绩学生 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805284092887040">原文地址</a></p>
<p>本题要求读入 N 名学生的成绩，将获得某一给定分数的学生人数输出。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第 1 行给出不超过 10​5​​ 的正整数 N，即学生总人数。随后一行给出 N 名学生的百分制整数成绩，中间以空格分隔。最后一行给出要查询的分数个数 K（不超过 N 的正整数），随后是 K 个分数，中间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中按查询顺序给出得分等于指定分数的学生人数，中间以空格分隔，但行末不得有多余空格。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>10
60 75 90 55 75 99 82 90 75 50
3 75 90 88
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>3 2 0
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dir\[<span class="number">10000</span>\]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> num,temp,m;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">        dir\[temp\]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">        <span class="keyword">if</span>(i == m<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;dir\[temp\]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;dir\[temp\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1041（乙级）</title>
    <url>/2019/03/12/pat-1041-yi-ji-1/</url>
    <content><![CDATA[<p>1041 考试座位号 （15 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805281567916032">原文地址</a></p>
<p>每个 PAT 考生在参加考试时都会被分配两个座位号，一个是试机座位，一个是考试座位。正常情况下，考生在入场时先得到试机座位号码，入座进入试机状态后，系统会显示该考生的考试座位号码，考试时考生需要换到考试座位就座。但有些考生迟到了，试机已经结束，他们只能拿着领到的试机座位号码求助于你，从后台查出他们的考试座位号码。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出一个正整数 N（≤1000），随后 N 行，每行给出一个考生的信息：<code>准考证号 试机座位号 考试座位号</code>。其中<code>准考证号</code>由 16 位数字组成，座位从 1 到 N 编号。输入保证每个人的准考证号都不同，并且任何时候都不会把两个人分配到同一个座位上。 考生信息之后，给出一个正整数 M（≤N），随后一行中给出 M 个待查询的试机座位号码，以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对应每个需要查询的试机座位号码，在一行中输出对应考生的准考证号和考试座位号码，中间用 1 个空格分隔。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>4
3310120150912233 2 4
3310120150912119 4 1
3310120150912126 1 3
3310120150912002 3 2
2
3 4
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>3310120150912002 2
3310120150912119 1
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> t1;</span><br><span class="line">    <span class="keyword">int</span> t2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,Node&gt; li;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> index,temp;</span><br><span class="line">        <span class="built_in">string</span> s1;</span><br><span class="line">        Node node;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s1;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;index;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">        node.t1 = s1;</span><br><span class="line">        node.t2 = temp;</span><br><span class="line">        li\[index\] = node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">int</span> lis\[num\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;lis\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;li\[lis\[i\]\].t1&lt;&lt;<span class="string">" "</span>&lt;&lt;li\[lis\[i\]\].t2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1040（乙级）</title>
    <url>/2019/03/12/pat-1040-yi-ji-1/</url>
    <content><![CDATA[<p>1040 有几个PAT （25 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805282389999616">原文地址</a></p>
<p>字符串 <code>APPAPT</code> 中包含了两个单词 <code>PAT</code>，其中第一个 <code>PAT</code> 是第 2 位(<code>P</code>)，第 4 位(<code>A</code>)，第 6 位(<code>T</code>)；第二个 <code>PAT</code> 是第 3 位(<code>P</code>)，第 4 位(<code>A</code>)，第 6 位(<code>T</code>)。 现给定字符串，问一共可以形成多少个 <code>PAT</code>？</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入只有一行，包含一个字符串，长度不超过10​5​​，只包含 <code>P</code>、<code>A</code>、<code>T</code> 三种字母。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出给定字符串中包含多少个 <code>PAT</code>。由于结果可能比较大，只输出对 1000000007 取余数的结果。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>APPAPT
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>2
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> sum=<span class="number">0</span>,num1=<span class="number">0</span>,num2=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s1.length()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1\[i\] == <span class="string">'T'</span>)&#123;</span><br><span class="line">            num2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s1\[i\] == <span class="string">'A'</span>)&#123;</span><br><span class="line">            num1 = num1+num2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s1\[i\] == <span class="string">'P'</span>)&#123;</span><br><span class="line">            sum = num1 + sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum%<span class="number">1000000007</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1042（乙级）</title>
    <url>/2019/03/12/pat-1042-yi-ji-1/</url>
    <content><![CDATA[<p>1042 字符统计 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805280817135616">原文地址</a></p>
<p>请编写程序，找出一段给定文字中出现最频繁的那个英文字母。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中给出一个长度不超过 1000 的字符串。字符串由 ASCII 码表中任意可见字符及空格组成，至少包含 1 个英文字母，以回车结束（回车不算在内）。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出出现频率最高的那个英文字母及其出现次数，其间以空格分隔。如果有并列，则输出按字母序最小的那个字母。统计时不区分大小写，输出小写字母。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>This is a simple TEST.  There ARE numbers and other symbols 1&amp;2&amp;3...........
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>e 7
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; PAIR;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; out, <span class="keyword">const</span> PAIR&amp; p) &#123;</span><br><span class="line">  <span class="keyword">return</span> out &lt;&lt; p.first &lt;&lt; <span class="string">" "</span> &lt;&lt; p.second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> cmp\_by\_value(<span class="keyword">const</span> PAIR&amp; t1,<span class="keyword">const</span> PAIR&amp; t2)&#123;</span><br><span class="line">    <span class="keyword">if</span>(t1.second == t2.second)&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.first &lt; t2.first;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.second &gt; t2.second;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; dir;</span><br><span class="line">    <span class="built_in">string</span> s1;</span><br><span class="line">    getline(<span class="built_in">cin</span>,s1);</span><br><span class="line">    transform(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>(),s1.<span class="built_in">begin</span>(),::<span class="built_in">tolower</span>);</span><br><span class="line">    <span class="comment">//cout&lt;&lt;s1&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1\[i\]&gt;=<span class="string">'a'</span> &amp;&amp; s1\[i\]&lt;=<span class="string">'z'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dir.count(s1\[i\]) == <span class="number">0</span>)&#123;</span><br><span class="line">                dir\[s1\[i\]\] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dir\[s1\[i\]\] +=<span class="number">1</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;PAIR&gt; dir_vec(dir.<span class="built_in">begin</span>(),dir.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">vector</span>&lt;PAIR&gt;::iterator pos;</span><br><span class="line">    sort(dir\_vec.<span class="built_in">begin</span>(),dir\_vec.<span class="built_in">end</span>(),cmp\_by\_value);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*dir_vec.<span class="built_in">begin</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1043（乙级）</title>
    <url>/2019/03/12/pat-1043-yi-ji-1/</url>
    <content><![CDATA[<p>1043 输出PATest （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805280074743808">原文地址</a></p>
<p>给定一个长度不超过 10​4​​ 的、仅由英文字母构成的字符串。请将字符重新调整顺序，按 <code>PATestPATest....</code> 这样的顺序输出，并忽略其它字符。当然，六种字符的个数不一定是一样多的，若某种字符已经输出完，则余下的字符仍按 PATest 的顺序打印，直到所有字符都被输出。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中给出一个长度不超过 10​4​​ 的、仅由英文字母构成的非空字符串。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中按题目要求输出排序后的字符串。题目保证输出非空。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>redlesPayBestPATTopTeePHPereatitAPPT
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>PATestPATestPTetPTePePee
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1;</span><br><span class="line">    <span class="keyword">int</span> num\_P=<span class="number">0</span>,num\_A=<span class="number">0</span>,num\_T=<span class="number">0</span>,num\_e=<span class="number">0</span>,num\_s=<span class="number">0</span>,num\<span class="keyword">_t</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1\[i\] == <span class="string">'P'</span>)&#123;</span><br><span class="line">            num_P++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s1\[i\] == <span class="string">'A'</span>)&#123;</span><br><span class="line">            num_A++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s1\[i\] == <span class="string">'T'</span>)&#123;</span><br><span class="line">            num_T++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s1\[i\] == <span class="string">'e'</span>)&#123;</span><br><span class="line">            num_e++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s1\[i\] == <span class="string">'s'</span>)&#123;</span><br><span class="line">            num_s++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s1\[i\] == <span class="string">'t'</span>)&#123;</span><br><span class="line">            <span class="keyword">num_t</span>++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(num\_P!=<span class="number">0</span> || num\_A!=<span class="number">0</span> || num\_T!=<span class="number">0</span> || num\_e!=<span class="number">0</span> || num\_s!=<span class="number">0</span> || num\<span class="keyword">_t</span>!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(num_P &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"P"</span>;</span><br><span class="line">            num_P--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num_A &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"A"</span>;</span><br><span class="line">            num_A--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num_T &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"T"</span>;</span><br><span class="line">            num_T--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num_e &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"e"</span>;</span><br><span class="line">            num_e--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num_s &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"s"</span>;</span><br><span class="line">            num_s--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">num_t</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"t"</span>;</span><br><span class="line">            <span class="keyword">num_t</span>--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1044（乙级）</title>
    <url>/2019/03/12/pat-1044-yi-ji-1/</url>
    <content><![CDATA[<p>1044 火星数字 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805279328157696">原文地址</a></p>
<p>火星人是以 13 进制计数的：</p>
<ul>
<li>地球人的 0 被火星人称为 tret。</li>
<li>地球人数字 1 到 12 的火星文分别为：jan, feb, mar, apr, may, jun, jly, aug, sep, oct, nov, dec。</li>
<li>火星人将进位以后的 12 个高位数字分别称为：tam, hel, maa, huh, tou, kes, hei, elo, syy, lok, mer, jou。</li>
</ul>
<p>例如地球人的数字 <code>29</code> 翻译成火星文就是 <code>hel mar</code>；而火星文 <code>elo nov</code> 对应地球数字 <code>115</code>。为了方便交流，请你编写程序实现地球和火星数字之间的互译。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出一个正整数 N（&lt;100），随后 N 行，每行给出一个 [0, 169) 区间内的数字 —— 或者是地球文，或者是火星文。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对应输入的每一行，在一行中输出翻译后的另一种语言的数字。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>4
29
5
elo nov
tam
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>hel mar
may
115
13
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> num1\[<span class="number">25</span>\] = &#123;<span class="string">"tret"</span>,<span class="string">"jan"</span>, <span class="string">"feb"</span>, <span class="string">"mar"</span>, <span class="string">"apr"</span>, <span class="string">"may"</span>, <span class="string">"jun"</span>, <span class="string">"jly"</span>, <span class="string">"aug"</span>, <span class="string">"sep"</span>, <span class="string">"oct"</span>, <span class="string">"nov"</span>, <span class="string">"dec"</span>,<span class="string">"tam"</span>, <span class="string">"hel"</span>, <span class="string">"maa"</span>, <span class="string">"huh"</span>, <span class="string">"tou"</span>, <span class="string">"kes"</span>, <span class="string">"hei"</span>, <span class="string">"elo"</span>, <span class="string">"syy"</span>, <span class="string">"lok"</span>, <span class="string">"mer"</span>, <span class="string">"jou"</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> num2\[<span class="number">13</span>\] = &#123;<span class="string">""</span>,<span class="string">"tam"</span>, <span class="string">"hel"</span>, <span class="string">"maa"</span>, <span class="string">"huh"</span>, <span class="string">"tou"</span>, <span class="string">"kes"</span>, <span class="string">"hei"</span>, <span class="string">"elo"</span>, <span class="string">"syy"</span>, <span class="string">"lok"</span>, <span class="string">"mer"</span>, <span class="string">"jou"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串变为数字</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strToNum</span><span class="params">(<span class="built_in">string</span> s1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = s1.length();</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        num += (s1\[len<span class="number">-1</span>\] - <span class="string">'0'</span>)*round(<span class="built_in">pow</span>(<span class="number">10</span>,len<span class="number">-1</span>));</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地球转火星</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EarthToMars</span><span class="params">(<span class="built_in">string</span> s1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = strToNum(s1);</span><br><span class="line">    <span class="keyword">if</span>(temp &lt; <span class="number">13</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;num1\[temp\]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(temp%<span class="number">13</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;num2\[temp/<span class="number">13</span>\]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;num2\[temp/<span class="number">13</span>\]&lt;&lt;<span class="string">" "</span>&lt;&lt;num1\[temp%<span class="number">13</span>\]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//火星转地球</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MarsToEarth</span><span class="params">(<span class="built_in">string</span> s1)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a\[<span class="number">13</span>\] = &#123;<span class="string">"###"</span>, <span class="string">"jan"</span>, <span class="string">"feb"</span>, <span class="string">"mar"</span>, <span class="string">"apr"</span>, <span class="string">"may"</span>, <span class="string">"jun"</span>, <span class="string">"jly"</span>, <span class="string">"aug"</span>, <span class="string">"sep"</span>, <span class="string">"oct"</span>, <span class="string">"nov"</span>, <span class="string">"dec"</span>&#125;;</span><br><span class="line">    <span class="built_in">string</span> b\[<span class="number">13</span>\] = &#123;<span class="string">"###"</span>, <span class="string">"tam"</span>, <span class="string">"hel"</span>, <span class="string">"maa"</span>, <span class="string">"huh"</span>, <span class="string">"tou"</span>, <span class="string">"kes"</span>, <span class="string">"hei"</span>, <span class="string">"elo"</span>, <span class="string">"syy"</span>, <span class="string">"lok"</span>, <span class="string">"mer"</span>, <span class="string">"jou"</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> len = s1.length();</span><br><span class="line">    <span class="keyword">if</span>(len == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">13</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1 == a\[i\])&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s1 == b\[i\])&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i * <span class="number">13</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp1=<span class="number">0</span>,temp2=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">string</span> t1 = s1.substr(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">string</span> t2 = s1.substr(<span class="number">4</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">13</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(t1 == b\[i\])&#123;</span><br><span class="line">                temp1 = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(t2 == a\[i\])&#123;</span><br><span class="line">                temp2 = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;temp1 * <span class="number">13</span> + temp2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num,t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    t = num;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t == num)&#123;</span><br><span class="line">            <span class="built_in">cin</span>.<span class="built_in">get</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        getline(<span class="built_in">cin</span>,str);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;s1;</span></span><br><span class="line">        <span class="keyword">if</span>(str\[<span class="number">0</span>\]&gt;=<span class="string">'0'</span> &amp;&amp; str\[<span class="number">0</span>\]&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">            EarthToMars(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            MarsToEarth(str);</span><br><span class="line">        &#125;</span><br><span class="line">        num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1045（乙级）</title>
    <url>/2019/03/12/pat-1045-yi-ji-1/</url>
    <content><![CDATA[<p>1045 快速排序 （25 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805278589960192">原文地址</a></p>
<p>著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 N 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？ 例如给定 $N = 5$, 排列是1、3、2、4、5。则：</p>
<ul>
<li>1 的左边没有元素，右边的元素都比它大，所以它可能是主元；</li>
<li>尽管 3 的左边元素都比它小，但其右边的 2 比它小，所以它不能是主元；</li>
<li>尽管 2 的右边元素都比它大，但其左边的 3 比它大，所以它不能是主元；</li>
<li>类似原因，4 和 5 都可能是主元。</li>
</ul>
<p>因此，有 3 个元素可能是主元。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第 1 行中给出一个正整数 N（≤10​5​​）； 第 2 行是空格分隔的 N 个不同的正整数，每个数不超过 10​9​​。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>5
1 3 2 4 5
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>3
1 4 5
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//思路：将数组排序，排序后的结果和原来的数组比较如果相同位置的数字相同也是不会小于之前（包含自己）的最大值 则为主元</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> len,sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;len;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> num\[len\],goal\[len\],result\[len\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;num\[i\];</span><br><span class="line">        goal\[i\] = num\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(num,num+len,cmp);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> maxx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(goal\[i\] &gt; maxx)&#123;</span><br><span class="line">            maxx = goal\[i\];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(goal\[i\] == num\[i\] &amp;&amp; num\[i\] == maxx)&#123;</span><br><span class="line">            result\[sum\] = num\[i\];</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;sum;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == sum<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;result\[i\];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;result\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1046（乙级）</title>
    <url>/2019/03/12/pat-1046-yi-ji-1/</url>
    <content><![CDATA[<p>1046 划拳 （15 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805277847568384">原文地址</a></p>
<p>划拳是古老中国酒文化的一个有趣的组成部分。酒桌上两人划拳的方法为：每人口中喊出一个数字，同时用手比划出一个数字。如果谁比划出的数字正好等于两人喊出的数字之和，谁就赢了，输家罚一杯酒。两人同赢或两人同输则继续下一轮，直到唯一的赢家出现。 下面给出甲、乙两人的划拳记录，请你统计他们最后分别喝了多少杯酒。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行先给出一个正整数 N（≤100），随后 N 行，每行给出一轮划拳的记录，格式为：</p>
<pre><code>甲喊 甲划 乙喊 乙划
</code></pre>
<p>其中<code>喊</code>是喊出的数字，<code>划</code>是划出的数字，均为不超过 100 的正整数（两只手一起划）。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中先后输出甲、乙两人喝酒的杯数，其间以一个空格分隔。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>5
8 10 9 12
5 10 5 10
3 8 5 12
12 18 1 13
4 16 12 15
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>1 2
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>,Jia=<span class="number">0</span>,Yi=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> jia\_han,jia\_hua,yi\_han,yi\_hua,sum;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;jia\_han&gt;&gt;jia\_hua&gt;&gt;yi\_han&gt;&gt;yi\_hua;</span><br><span class="line">        sum = jia\_han + yi\_han;</span><br><span class="line">        <span class="keyword">if</span>(jia\_hua == sum &amp;&amp; yi\_hua == sum)&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum == jia_hua)&#123;</span><br><span class="line">            Yi++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sum == yi_hua)&#123;</span><br><span class="line">            Jia++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;Jia&lt;&lt;<span class="string">" "</span>&lt;&lt;Yi&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1049（乙级）</title>
    <url>/2019/03/12/pat-1049-yi-ji-1/</url>
    <content><![CDATA[<p>1049 数列的片段和 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805275792359424">原文地址</a></p>
<p>给定一个正数数列，我们可以从中截取任意的连续的几个数，称为片段。例如，给定数列 { 0.1, 0.2, 0.3, 0.4 }，我们有 (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4) 这 10 个片段。 给定正整数数列，求出全部片段包含的所有的数之和。如本例中 10 个片段总和是 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 = 5.0。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出一个不超过 10​5​​ 的正整数 N，表示数列中数的个数，第二行给出 N 个不超过 1.0 的正数，是数列中的数，其间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出该序列所有片段包含的数之和，精确到小数点后 2 位。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>4
0.1 0.2 0.3 0.4
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>5.00
</code></pre>
<p>代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include&lt;iomanip&gt;</span></span><br><span class="line"><span class="comment">#include&lt;cstdio&gt;</span></span><br><span class="line"><span class="string">//思路：因为是累加可以考虑重复次数乘原来的数来得到累加纵向考虑</span></span><br><span class="line"><span class="string">/*例如:</span> <span class="number">1</span></span><br><span class="line">        <span class="number">1</span> <span class="number">2</span></span><br><span class="line">        <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">        <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">          <span class="number">2</span></span><br><span class="line">          <span class="number">2</span> <span class="number">3</span></span><br><span class="line">          <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">            <span class="number">3</span></span><br><span class="line">            <span class="number">3</span> <span class="number">4</span></span><br><span class="line">              <span class="number">4</span></span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        <span class="number">1</span> <span class="number">2</span></span><br><span class="line">        <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line">        <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">        <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">        <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">          <span class="number">2</span></span><br><span class="line">          <span class="number">2</span> <span class="number">3</span></span><br><span class="line">          <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line">          <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">          <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">            <span class="number">3</span></span><br><span class="line">            <span class="number">3</span> <span class="number">4</span></span><br><span class="line">            <span class="number">3</span> <span class="number">4</span> <span class="number">5</span></span><br><span class="line">            <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">              <span class="number">4</span></span><br><span class="line">              <span class="number">4</span> <span class="number">5</span></span><br><span class="line">              <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">                <span class="number">5</span></span><br><span class="line">                <span class="number">5</span> <span class="number">6</span></span><br><span class="line">                  <span class="number">6</span></span><br><span class="line">                <span class="string">*/</span></span><br><span class="line"><span class="string">using</span> <span class="string">namespace</span> <span class="string">std;</span></span><br><span class="line"></span><br><span class="line"><span class="string">int</span> <span class="string">main()&#123;</span></span><br><span class="line">    <span class="string">int</span> <span class="string">num,m=0;</span></span><br><span class="line">    <span class="string">scanf("%d",&amp;num);</span></span><br><span class="line">    <span class="string">double</span> <span class="string">list1\[num\];</span></span><br><span class="line">    <span class="string">double</span> <span class="string">sum</span> <span class="string">=</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">    <span class="string">for(int</span> <span class="string">i=0;i&lt;num;i++)&#123;</span></span><br><span class="line">        <span class="string">cin&gt;&gt;list1\[i\];</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">for(int</span> <span class="string">i=0;i&lt;num;i++)&#123;</span></span><br><span class="line">        <span class="string">sum</span> <span class="string">+=</span> <span class="string">(double)(num</span> <span class="bullet">-</span> <span class="string">i)</span> <span class="string">*</span> <span class="string">(double)(i</span> <span class="string">+</span> <span class="number">1</span><span class="string">)</span> <span class="string">*</span> <span class="string">list1\[i\];</span> <span class="string">//根据上面的规律总结出来的</span></span><br><span class="line">    <span class="string">&#125;</span></span><br><span class="line">    <span class="string">cout&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(2)&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line">    <span class="string">return</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1047（乙级）</title>
    <url>/2019/03/12/pat-1047-yi-ji-1/</url>
    <content><![CDATA[<p>1047 编程团体赛 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805277163896832">原文地址</a></p>
<p>编程团体赛的规则为：每个参赛队由若干队员组成；所有队员独立比赛；参赛队的成绩为所有队员的成绩和；成绩最高的队获胜。 现给定所有队员的比赛成绩，请你编写程序找出冠军队。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出一个正整数 N（≤10​4​​），即所有参赛队员总数。随后 N 行，每行给出一位队员的成绩，格式为：<code>队伍编号-队员编号 成绩</code>，其中<code>队伍编号</code>为 1 到 1000 的正整数，<code>队员编号</code>为 1 到 10 的正整数，<code>成绩</code>为 0 到 100 的整数。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出冠军队的编号和总成绩，其间以一个空格分隔。注意：题目保证冠军队是唯一的。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>6
3-10 99
11-5 87
102-1 0
102-3 100
11-9 89
3-2 61
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>11 176
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; dir;</span><br><span class="line">    <span class="keyword">int</span> num,t1,t2,t3,index=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d-%d %d"</span>,&amp;t1,&amp;t2,&amp;t3);</span><br><span class="line">        <span class="keyword">if</span>(dir.count(t1) == <span class="number">0</span>)&#123;</span><br><span class="line">            dir\[t1\] = t3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            dir\[t1\] += t3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dir\[t1\] &gt; dir\[index\])&#123;</span><br><span class="line">            index = t1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;index&lt;&lt;<span class="string">" "</span>&lt;&lt;dir\[index\]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1048（乙级）</title>
    <url>/2019/03/12/pat-1048-yi-ji-1/</url>
    <content><![CDATA[<p>1048 数字加密 （20 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805276438282240">原文地址</a></p>
<p>本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出加密后的结果。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>1234567 368782971
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>3695Q8118
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//比较两个长度对 长度较短的那个补0</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2,result=<span class="string">""</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    <span class="keyword">int</span> cha = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(s1.length() &lt; s2.length())&#123;</span><br><span class="line">        cha = s2.length() - s1.length();</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">temp</span><span class="params">(cha,<span class="string">'0'</span>)</span></span>;</span><br><span class="line">        s1 = temp + s1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(s1.length() &gt; s2.length())&#123;</span><br><span class="line">        cha = s1.length() - s2.length();</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">temp</span><span class="params">(cha,<span class="string">'0'</span>)</span></span>;</span><br><span class="line">        s2 = temp + s2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s2.length();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp1,temp2,sum;</span><br><span class="line">        <span class="keyword">int</span> j = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(j%<span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">            temp1 = s1\[i\] - <span class="string">'0'</span>;</span><br><span class="line">            temp2 = s2\[i\] - <span class="string">'0'</span>;</span><br><span class="line">            sum = temp1 + temp2;</span><br><span class="line">            sum = sum % <span class="number">13</span>;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(sum &lt; <span class="number">10</span>)&#123;</span><br><span class="line">                <span class="keyword">char</span> s3 = (sum + <span class="string">'0'</span>);</span><br><span class="line">                result = result + s3;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum == <span class="number">10</span>)&#123;</span><br><span class="line">                result = result + <span class="string">'J'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum == <span class="number">11</span>)&#123;</span><br><span class="line">                result = result + <span class="string">'Q'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum == <span class="number">12</span>)&#123;</span><br><span class="line">                result = result + <span class="string">'K'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            temp1 = s1\[i\] - <span class="string">'0'</span>;</span><br><span class="line">            temp2 = s2\[i\] - <span class="string">'0'</span>;</span><br><span class="line">            sum = temp2 - temp1;</span><br><span class="line">            <span class="keyword">if</span>(sum &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                sum += <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">char</span> s3 = (sum + <span class="string">'0'</span>);</span><br><span class="line">            result = result + s3;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1051（乙级）</title>
    <url>/2019/03/18/pat-1051-yi-ji-1/</url>
    <content><![CDATA[<p>1051 复数乘法 （15 分)  <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805274496319488">原文地址</a></p>
<p>复数可以写成 (A+Bi) 的常规形式，其中 A 是实部，B 是虚部，i 是虚数单位，满足 i​2​​=−1；也可以写成极坐标下的指数形式 (R×e​(Pi)​​)，其中 R 是复数模，P 是辐角，i 是虚数单位，其等价于三角形式 (R(cos§+isin§)。 现给定两个复数的 R 和 P，要求输出两数乘积的常规形式。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中依次给出两个复数的 R​1​​, P​1​​, R​2​​, P​2​​，数字间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中按照 <code>A+Bi</code> 的格式输出两数乘积的常规形式，实部和虚部均保留 2 位小数。注意：如果 <code>B</code> 是负数，则应该写成 <code>A-|B|i</code> 的形式。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>2.3 3.5 5.2 0.4
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>-8.68-8.23i
</code></pre>
<p>代码：</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">#include</span> &lt;stdio.h&gt;</span><br><span class="line"><span class="symbol">#include</span> &lt;math.h&gt;</span><br><span class="line">//思路：根据提供指数形式进行乘法，然后在转换为sin（） cos（）的形式</span><br><span class="line"><span class="symbol">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    double <span class="built_in">R1</span>, <span class="built_in">P1</span>, <span class="built_in">R2</span>, <span class="built_in">P2</span><span class="comment">;</span></span><br><span class="line">    double A, <span class="keyword">B;</span></span><br><span class="line"><span class="keyword"> </span>   scanf(<span class="string">"%lf %lf %lf %lf"</span>, &amp;<span class="built_in">R1</span>, &amp;<span class="built_in">P1</span>, &amp;<span class="built_in">R2</span>, &amp;<span class="built_in">P2</span>)<span class="comment">;</span></span><br><span class="line">    A = <span class="built_in">R1</span> * <span class="built_in">R2</span> * cos(<span class="built_in">P1</span> + <span class="built_in">P2</span>)<span class="comment">;</span></span><br><span class="line">    <span class="keyword">B </span>= <span class="built_in">R1</span> * <span class="built_in">R2</span> * sin(<span class="built_in">P1</span> + <span class="built_in">P2</span>)<span class="comment">;</span></span><br><span class="line">    <span class="meta">if</span>(A &lt; <span class="number">0</span> &amp;&amp; A &gt; -<span class="number">0</span>.<span class="number">005</span>)&#123;</span><br><span class="line">        A = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">if</span>(<span class="keyword">B </span>&lt; <span class="number">0</span> &amp;&amp; <span class="keyword">B </span>&gt; -<span class="number">0</span>.<span class="number">005</span>)&#123;</span><br><span class="line">        <span class="keyword">B </span>= <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    printf(<span class="string">"%.2lf%+.2lfi"</span>, A, <span class="keyword">B);</span></span><br><span class="line"><span class="keyword"> </span>   return <span class="number">0</span><span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1050（乙级）</title>
    <url>/2019/03/12/pat-1050-yi-ji-1/</url>
    <content><![CDATA[<p>1050 螺旋矩阵 （25 分）<a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805275146436608">原文地址</a></p>
<p>本题要求将给定的 N 个正整数按非递增的顺序，填入“螺旋矩阵”。所谓“螺旋矩阵”，是指从左上角第 1 个格子开始，按顺时针螺旋方向填充。要求矩阵的规模为 m 行 n 列，满足条件：m×n 等于 N；m≥n；且 m−n 取所有可能值中的最小值。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第 1 行中给出一个正整数 N，第 2 行给出 N 个待填充的正整数。所有数字不超过 10​4​​，相邻数字以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>输出螺旋矩阵。每行 n 个数字，共 m 行。相邻数字以 1 个空格分隔，行末不得有多余空格。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>12
37 76 20 98 76 42 53 95 60 81 58 93
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>98 95 93
42 37 81
53 20 76
58 60 76
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n,num,t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">int</span> list1\[num\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;list1\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(list1,list1+num,cmp);</span><br><span class="line">    <span class="comment">/*for(int i=0;i&lt;num;i++)&#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;list1\[i\]&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;endl;*/</span></span><br><span class="line">    n = <span class="built_in">floor</span>(<span class="built_in">sqrt</span>(num));</span><br><span class="line">    m = <span class="keyword">int</span>(num / n);</span><br><span class="line">    <span class="keyword">while</span>(n*m != num)&#123;</span><br><span class="line">        n--;</span><br><span class="line">        m = <span class="keyword">int</span>(num / n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m)&#123;</span><br><span class="line">        t = n;</span><br><span class="line">        n = m;</span><br><span class="line">        m = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> result\[m\]\[n\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            result\[i\]\[j\] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> heng,zong,index=<span class="number">0</span>,dire=<span class="number">0</span>; <span class="comment">//dire为方向 0向右移动  1向下移动  2向左移动 3向上移动</span></span><br><span class="line">    heng = <span class="number">0</span>;</span><br><span class="line">    zong = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(index &lt; num)&#123;</span><br><span class="line">        result\[heng\]\[zong\] = list1\[index\];</span><br><span class="line">        <span class="comment">//cout&lt;&lt;heng&lt;&lt;" "&lt;&lt;zong&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(dire == <span class="number">0</span>)&#123; <span class="comment">//向右</span></span><br><span class="line">            <span class="keyword">if</span>(zong &lt; n<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(result\[heng\]\[zong+<span class="number">1</span>\] == <span class="number">0</span>)&#123;</span><br><span class="line">                    zong++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dire = <span class="number">1</span>;</span><br><span class="line">                    heng++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dire = <span class="number">1</span>;</span><br><span class="line">                heng++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dire == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(heng &lt; m<span class="number">-1</span>)&#123; <span class="comment">//向下</span></span><br><span class="line">                <span class="keyword">if</span>(result\[heng+<span class="number">1</span>\]\[zong\] == <span class="number">0</span>)&#123;</span><br><span class="line">                    heng++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dire = <span class="number">2</span>;</span><br><span class="line">                    zong--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dire = <span class="number">2</span>;</span><br><span class="line">                zong--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dire == <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(zong &gt; <span class="number">0</span>)&#123; <span class="comment">//向左</span></span><br><span class="line">                <span class="keyword">if</span>(result\[heng\]\[zong<span class="number">-1</span>\] == <span class="number">0</span>)&#123;</span><br><span class="line">                    zong--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dire = <span class="number">3</span>;</span><br><span class="line">                    heng--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dire = <span class="number">3</span>;</span><br><span class="line">                heng--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(dire == <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(heng &gt; <span class="number">0</span>)&#123; <span class="comment">//向上</span></span><br><span class="line">                <span class="keyword">if</span>(result\[heng<span class="number">-1</span>\]\[zong\] == <span class="number">0</span>)&#123;</span><br><span class="line">                    heng--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    dire = <span class="number">0</span>;</span><br><span class="line">                    zong++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                dire = <span class="number">0</span>;</span><br><span class="line">                zong++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;result\[i\]\[j\];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;result\[i\]\[j\];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1052（乙级）</title>
    <url>/2019/03/18/pat-1052-yi-ji-1/</url>
    <content><![CDATA[<p>1052 卖个萌 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805273883951104">原文地址</a></p>
<p>萌萌哒表情符号通常由“手”、“眼”、“口”三个主要部分组成。简单起见，我们假设一个表情符号是按下列格式输出的：</p>
<pre><code>[左手]([左眼][口][右眼])[右手]
</code></pre>
<p>现给出可选用的符号集合，请你按用户的要求输出表情。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入首先在前三行顺序对应给出手、眼、口的可选符号集。每个符号括在一对方括号 <code>[]</code>内。题目保证每个集合都至少有一个符号，并不超过 10 个符号；每个符号包含 1 到 4 个非空字符。 之后一行给出一个正整数 K，为用户请求的个数。随后 K 行，每行给出一个用户的符号选择，顺序为左手、左眼、口、右眼、右手——这里只给出符号在相应集合中的序号（从 1 开始），数字间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对每个用户请求，在一行中输出生成的表情。若用户选择的序号不存在，则输出 <code>Are you kidding me? @\/@</code>。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>[╮][╭][o][~\][/~]  [&lt;][&gt;]
 [╯][╰][^][-][=][&gt;][&lt;][@][⊙]
[Д][▽][_][ε][^]  ...
4
1 1 2 2 2
6 8 1 5 5
3 3 4 3 3
2 10 3 9 3
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>╮(╯▽╰)╭
&lt;(@Д=)/~
o(^ε^)o
Are you kidding me? @\/@
</code></pre>
<p>代码（有一个测试点没通过）：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; str;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; list1;</span><br><span class="line">        <span class="built_in">string</span> temp;</span><br><span class="line">        getline(<span class="built_in">cin</span>,temp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;temp.length();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(temp\[j\] == <span class="string">'\['</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> k = j+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(k++ &lt; temp.length())&#123;</span><br><span class="line">                    <span class="keyword">if</span>(temp\[k\] == <span class="string">'\]'</span>)&#123;</span><br><span class="line">                        list1.push_back(temp.substr(j+<span class="number">1</span>,k-j<span class="number">-1</span>));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str.push_back(list1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(int i=0;i&lt;3;i++)&#123;</span></span><br><span class="line"><span class="comment">        for(int j=0;j&lt;str\[i\].size();j++)&#123;</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;str\[i\]\[j\]&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b,c,d,e;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d&gt;&gt;e;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; str\[<span class="number">0</span>\].<span class="built_in">size</span>()|| b &gt; str\[<span class="number">1</span>\].<span class="built_in">size</span>() || c &gt; str\[<span class="number">2</span>\].<span class="built_in">size</span>() || d &gt; str\[<span class="number">1</span>\].<span class="built_in">size</span>() || e &gt; str\[<span class="number">0</span>\].<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Are you kidding me? @\\\/@"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;str\[<span class="number">0</span>\]\[a<span class="number">-1</span>\]&lt;&lt;<span class="string">"("</span>&lt;&lt;str\[<span class="number">1</span>\]\[b<span class="number">-1</span>\]&lt;&lt;str\[<span class="number">2</span>\]\[c<span class="number">-1</span>\]&lt;&lt;str\[<span class="number">1</span>\]\[d<span class="number">-1</span>\]&lt;&lt;<span class="string">")"</span>&lt;&lt;str\[<span class="number">0</span>\]\[e<span class="number">-1</span>\]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">修改版本：</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; &gt; v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        getline(<span class="built_in">cin</span>, s);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; row;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; s.length()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s\[j\] == <span class="string">'\['</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span>(k++ &lt; s.length()) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s\[k\] == <span class="string">'\]'</span>) &#123;</span><br><span class="line">                        row.push_back(s.substr(j+<span class="number">1</span>, k-j<span class="number">-1</span>));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        v.push_back(row);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c, d, e;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d &gt;&gt; e;</span><br><span class="line">        <span class="keyword">if</span>(a &gt; v\[<span class="number">0</span>\].<span class="built_in">size</span>() || b &gt; v\[<span class="number">1</span>\].<span class="built_in">size</span>() || c &gt; v\[<span class="number">2</span>\].<span class="built_in">size</span>() || d &gt; v\[<span class="number">1</span>\].<span class="built_in">size</span>() || e &gt; v\[<span class="number">0</span>\].<span class="built_in">size</span>() || a &lt; <span class="number">1</span> || b &lt; <span class="number">1</span> || c &lt; <span class="number">1</span> || d &lt; <span class="number">1</span> || e &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Are you kidding me? @\\\/@"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v\[<span class="number">0</span>\]\[a<span class="number">-1</span>\] &lt;&lt; <span class="string">"("</span> &lt;&lt; v\[<span class="number">1</span>\]\[b<span class="number">-1</span>\] &lt;&lt; v\[<span class="number">2</span>\]\[c<span class="number">-1</span>\] &lt;&lt; v\[<span class="number">1</span>\]\[d<span class="number">-1</span>\] &lt;&lt; <span class="string">")"</span> &lt;&lt; v\[<span class="number">0</span>\]\[e<span class="number">-1</span>\] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1056（乙级）</title>
    <url>/2019/03/18/pat-1056-yi-ji-1/</url>
    <content><![CDATA[<p>1056 组合数的和 （15 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805271455449088">原文地址</a></p>
<p>给定 N 个非 0 的个位数字，用其中任意 2 个数字都可以组合成 1 个 2 位的数字。要求所有可能组合出来的 2 位数字的和。例如给定 2、5、8，则可以组合出：25、28、52、58、82、85，它们的和为330。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中先给出 N（1 &lt; N &lt; 10），随后给出 N 个不同的非 0 个位数字。数字间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>输出所有可能组合出来的2位数字的和。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>3 2 8 5
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>330
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">//思路对三个数进行全排列，然后只取前两位即可</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dir;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strToNum</span><span class="params">(<span class="built_in">string</span> s1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = s1.length();</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        num += (s1\[len<span class="number">-1</span>\] - <span class="string">'0'</span>)*round(<span class="built_in">pow</span>(<span class="number">10</span>,len<span class="number">-1</span>));</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Permutation</span><span class="params">(<span class="built_in">string</span> str,<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="string">""</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(index == str.length() - <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = strToNum(str.substr(<span class="number">0</span>,<span class="number">2</span>));</span><br><span class="line">        <span class="comment">//去重复 如果为 输入为 3个1  通过全排列得到的结果为 111  111 111 111 111 111 111 然后进行去重 最后只得到了 11</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(dir.<span class="built_in">begin</span>(),dir.<span class="built_in">end</span>(),temp) == dir.<span class="built_in">end</span>())&#123;</span><br><span class="line">            sum += temp;</span><br><span class="line">            dir.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=index;i&lt;str.length();i++)&#123;</span><br><span class="line">        <span class="comment">//首部和他后面的字符进行交换</span></span><br><span class="line">        <span class="keyword">char</span> temp = str\[i\];</span><br><span class="line">        str\[i\] = str\[index\];</span><br><span class="line">        str\[index\] = temp;</span><br><span class="line">        <span class="comment">//递归求后面的字符的排列</span></span><br><span class="line">        Permutation(str,index+<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//由于前面交换了一下还要交换回来</span></span><br><span class="line">        temp = str\[i\];</span><br><span class="line">        str\[i\] = str\[index\];</span><br><span class="line">        str\[index\] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">char</span> ch\[num\];</span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;ch\[i\];</span><br><span class="line">        s1 += ch\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    Permutation(s1,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1053（乙级）</title>
    <url>/2019/03/18/pat-1053-yi-ji-1/</url>
    <content><![CDATA[<p>1053 住房空置率 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805273284165632">原文地址</a></p>
<p>在不打扰居民的前提下，统计住房空置率的一种方法是根据每户用电量的连续变化规律进行判断。判断方法如下：</p>
<ul>
<li>在观察期内，若存在超过一半的日子用电量低于某给定的阈值 e，则该住房为“可能空置”；</li>
<li>若观察期超过某给定阈值 D 天，且满足上一个条件，则该住房为“空置”。</li>
</ul>
<p>现给定某居民区的住户用电量数据，请你统计“可能空置”的比率和“空置”比率，即以上两种状态的住房占居民区住房总套数的百分比。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出正整数 N（≤1000），为居民区住房总套数；正实数 e，即低电量阈值；正整数 D，即观察期阈值。随后 N 行，每行按以下格式给出一套住房的用电量数据： K E​1​​ E​2​​ … E​K​​ 其中 K 为观察的天数，E​i​​ 为第 i 天的用电量。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出“可能空置”的比率和“空置”比率的百分比值，其间以一个空格分隔，保留小数点后 1 位。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>5 0.5 10
6 0.3 0.4 0.5 0.2 0.8 0.6
10 0.0 0.1 0.2 0.3 0.0 0.8 0.6 0.7 0.0 0.5
5 0.4 0.3 0.5 0.1 0.7
11 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1
11 2 2 2 1 1 0.1 1 0.1 0.1 0.1 0.1
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>40.0% 20.0%
</code></pre>
<p>（样例解释：第2、3户为“可能空置”，第4户为“空置”，其他户不是空置。）</p>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">float</span> e,D,maybe\_num=<span class="number">0</span>,must\_num=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num&gt;&gt;e&gt;&gt;D;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">bool</span> maybe\_flag = <span class="literal">false</span>,must\_flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">float</span> t=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;temp;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">            <span class="keyword">if</span>(t &lt; e)&#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; temp/<span class="number">2</span>)&#123;</span><br><span class="line">            maybe_flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(maybe_flag &amp;&amp; temp &gt; D)&#123;</span><br><span class="line">            must_flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(must_flag)&#123;</span><br><span class="line">            must_num++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(maybe_flag)&#123;</span><br><span class="line">            maybe_num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%0.1f%% %0.1f%%\\n"</span>,(maybe\_num/num)\*<span class="number">100</span>,(must\_num/num)\*<span class="number">100</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1054（乙级）</title>
    <url>/2019/03/18/pat-1054-yi-ji-1/</url>
    <content><![CDATA[<p>1054 求平均值 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805272659214336">原文地址</a></p>
<p>本题的基本要求非常简单：给定 N 个实数，计算它们的平均值。但复杂的是有些输入数据可能是非法的。一个“合法”的输入是 [−1000,1000] 区间内的实数，并且最多精确到小数点后 2 位。当你计算平均值的时候，不能把那些非法的数据算在内。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出正整数 N（≤100）。随后一行给出 N 个实数，数字间以一个空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对每个非法输入，在一行中输出 <code>ERROR: X is not a legal number</code>，其中 <code>X</code> 是输入。最后在一行中输出结果：<code>The average of K numbers is Y</code>，其中 <code>K</code> 是合法输入的个数，<code>Y</code> 是它们的平均值，精确到小数点后 2 位。如果平均值无法计算，则用 <code>Undefined</code> 替换 <code>Y</code>。如果 <code>K</code> 为 1，则输出 <code>The average of 1 number is Y</code>。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>7
5 -3.2 aaa 9999 2.3.4 7.123 2.35
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>ERROR: aaa is not a legal number
ERROR: 9999 is not a legal number
ERROR: 2.3.4 is not a legal number
ERROR: 7.123 is not a legal number
The average of 3 numbers is 1.38
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>2
aaa -9999
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>ERROR: aaa is not a legal number
ERROR: -9999 is not a legal number
The average of 0 numbers is Undefined
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//第三个测试点为K=1时 输出的是number而不是numbers</span></span><br><span class="line"><span class="comment">//第四个测试点是边界值的考察</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串中小数点前面的字符转换为整数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strToNum</span><span class="params">(<span class="built_in">string</span> s1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = s1.length();</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        num += (s1\[len<span class="number">-1</span>\] - <span class="string">'0'</span>)*round(<span class="built_in">pow</span>(<span class="number">10</span>,len<span class="number">-1</span>));</span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将小数点后面的小数转换为小数 例如可以将213 转换为0.213</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">strToPoint</span><span class="params">(<span class="built_in">string</span> s1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = s1.length();</span><br><span class="line">    <span class="keyword">float</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; len)&#123;</span><br><span class="line">        num += (s1\[i\] - <span class="string">'0'</span>)\*<span class="built_in">pow</span>(<span class="number">10</span>,(i+<span class="number">1</span>)\*<span class="number">-1</span>);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否每个输入的数据均为数字 小数点除外</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsNum</span><span class="params">(<span class="built_in">string</span> s1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1\[i\] &lt; <span class="string">'0'</span> || s1\[i\] &gt; <span class="string">'9'</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1\[i\] != <span class="string">'.'</span>)&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num,sum_num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">-1</span>; <span class="comment">//小数点下标</span></span><br><span class="line">        <span class="keyword">bool</span> fu = <span class="literal">false</span>; <span class="comment">//负数标志</span></span><br><span class="line">        <span class="keyword">bool</span> <span class="built_in">point</span> = <span class="literal">false</span>; <span class="comment">//小数标志</span></span><br><span class="line">        <span class="keyword">bool</span> legal = <span class="literal">false</span>; <span class="comment">//是否合法标志</span></span><br><span class="line">        <span class="built_in">string</span> s1,s2,front\_point,back\_point;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s2;</span><br><span class="line">        <span class="keyword">if</span>(s2\[<span class="number">0</span>\] == <span class="string">'-'</span>)&#123;</span><br><span class="line">            s1 = s2.substr(<span class="number">1</span>,s2.length());</span><br><span class="line">            fu = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            s1 = s2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(IsNum(s1))&#123;</span><br><span class="line">            <span class="comment">//小数处理</span></span><br><span class="line">            <span class="comment">//cout&lt;&lt;count(s1.begin(),s1.end(),'.')&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(count(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>(),<span class="string">'.'</span>) == <span class="number">1</span>)&#123; <span class="comment">//带小数的要考虑边界值</span></span><br><span class="line">                <span class="comment">//cout&lt;&lt;"qwe"&lt;&lt;endl;</span></span><br><span class="line">                <span class="built_in">point</span> = <span class="literal">true</span>;</span><br><span class="line">                index = s1.<span class="built_in">find</span>(<span class="string">'.'</span>);</span><br><span class="line">                front_point = s1.substr(<span class="number">0</span>,index);</span><br><span class="line">                back_point = s1.substr(index+<span class="number">1</span>,s1.length()-index<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">if</span>(back_point.length() &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp1 = strToNum(front_point);</span><br><span class="line">                    <span class="keyword">double</span> temp2 = strToPoint(back_point);</span><br><span class="line">                    <span class="keyword">double</span> t = temp1+temp2;</span><br><span class="line">                    <span class="keyword">if</span>(fu)&#123;</span><br><span class="line">                        t = t*<span class="number">-1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(t&gt;=<span class="number">-1000</span> &amp;&amp; t&lt;=<span class="number">1000</span>)&#123;</span><br><span class="line">                        sum += t;</span><br><span class="line">                        sum_num++;</span><br><span class="line">                        legal = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//整数处理</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;"asd"&lt;&lt;endl;</span></span><br><span class="line">                <span class="keyword">int</span> temp = strToNum(s1);</span><br><span class="line">                <span class="keyword">if</span>(fu)&#123;</span><br><span class="line">                    temp = temp * <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(temp&gt;=<span class="number">-1000</span> &amp;&amp; temp&lt;=<span class="number">1000</span>)&#123;</span><br><span class="line">                    sum += temp;</span><br><span class="line">                    sum_num++;</span><br><span class="line">                    legal = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!legal)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"ERROR: "</span>&lt;&lt;s2&lt;&lt;<span class="string">" is not a legal number"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum_num == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"The average of 0 numbers is Undefined"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sum_num == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"The average of 1 number is "</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%0.2f\\n"</span>,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"The average of "</span>&lt;&lt;sum_num&lt;&lt;<span class="string">" numbers is "</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%0.2f\\n"</span>,<span class="keyword">double</span>(sum/sum_num));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1055（乙级）</title>
    <url>/2019/03/18/pat-1055-yi-ji-1/</url>
    <content><![CDATA[<p>1055 集体照 （25 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805272021680128">原文地址</a></p>
<p>拍集体照时队形很重要，这里对给定的 N 个人 K 排的队形设计排队规则如下：</p>
<ul>
<li>每排人数为 N/K（向下取整），多出来的人全部站在最后一排；</li>
<li>后排所有人的个子都不比前排任何人矮；</li>
<li>每排中最高者站中间（中间位置为 m/2+1，其中 m 为该排人数，除法向下取整）；</li>
<li>每排其他人以中间人为轴，按身高非增序，先右后左交替入队站在中间人的两侧（例如5人身高为190、188、186、175、170，则队形为175、188、190、186、170。这里假设你面对拍照者，所以你的左边是中间人的右边）；</li>
<li>若多人身高相同，则按名字的字典序升序排列。这里保证无重名。</li>
</ul>
<p>现给定一组拍照人，请编写程序输出他们的队形。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出两个正整数 N（≤10​4​​，总人数）和 K（≤10，总排数）。随后 N 行，每行给出一个人的名字（不包含空格、长度不超过 8 个英文字母）和身高（[30, 300] 区间内的整数）。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>输出拍照的队形。即K排人名，其间以空格分隔，行末不得有多余空格。注意：假设你面对拍照者，后排的人输出在上方，前排输出在下方。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>10 3
Tom 188
Mike 170
Eva 168
Tim 160
Joe 190
Ann 168
Bob 175
Nick 186
Amy 160
John 159
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>Bob Tom Joe Nick
Ann Mike Eva
Tim Amy John
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">height</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(struct node a, struct node b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">height</span> != b.<span class="built_in">height</span> ? a.<span class="built_in">height</span> &gt; b.<span class="built_in">height</span> : a.name &lt; b.name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="built_in">vector</span>&lt;node&gt; stu(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; stu\[i\].name &gt;&gt; stu\[i\].<span class="built_in">height</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(stu.<span class="built_in">begin</span>(), stu.<span class="built_in">end</span>(), cmp);</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>, row = k;</span><br><span class="line">    <span class="keyword">while</span>(row) &#123;</span><br><span class="line">        <span class="keyword">if</span>(row == k)</span><br><span class="line">            m = n - n / k * (k - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            m = n / k;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; ans(m);</span><br><span class="line">        ans\[m / <span class="number">2</span>\] = stu\[t\].name;</span><br><span class="line">        <span class="comment">// 左边一列</span></span><br><span class="line">        <span class="keyword">int</span> j = m / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = t + <span class="number">1</span>; i &lt; t + m; i = i + <span class="number">2</span>)</span><br><span class="line">            ans\[j--\] = stu\[i\].name;</span><br><span class="line">        <span class="comment">// 右边一列</span></span><br><span class="line">        j = m / <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = t + <span class="number">2</span>; i &lt; t + m; i = i + <span class="number">2</span>)</span><br><span class="line">            ans\[j++\] = stu\[i\].name;</span><br><span class="line">        <span class="comment">// 输出当前排</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans\[<span class="number">0</span>\];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span> &lt;&lt; ans\[i\];</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        t = t + m;</span><br><span class="line">        row--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1057（乙级）</title>
    <url>/2019/03/18/pat-1057-yi-ji-1/</url>
    <content><![CDATA[<p>1057 数零壹 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805270914383872">原文地址</a></p>
<p>给定一串长度不超过 10​5​​ 的字符串，本题要求你将其中所有英文字母的序号（字母 a-z 对应序号 1-26，不分大小写）相加，得到整数 N，然后再分析一下 N 的二进制表示中有多少 0、多少 1。例如给定字符串 <code>PAT (Basic)</code>，其字母序号之和为：16+1+20+2+1+19+9+3=71，而 71 的二进制是 1000111，即有 3 个 0、4 个 1。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中给出长度不超过 10​5​​、以回车结束的字符串。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中先后输出 0 的个数和 1 的个数，其间以空格分隔。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>PAT (Basic)
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>3 4
</code></pre>
<p>代码：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">map&lt;char,int&gt; dir;</span><br><span class="line">//计算二进制</span><br><span class="line">string IntToBinary(int t)&#123;</span><br><span class="line">    string s1="";</span><br><span class="line">    while(t &gt; 0)&#123;</span><br><span class="line">        int temp,temp1;</span><br><span class="line">        temp = t <span class="comment">% 2;</span></span><br><span class="line">        s1 += (temp + '0');</span><br><span class="line">        t = t / 2;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(s1.begin(),s1.end());</span><br><span class="line">    return s1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    dir<span class="tag">\<span class="name">[</span></span>'A'<span class="tag">\<span class="name">]</span> = <span class="number">1</span></span>;dir<span class="tag">\<span class="name">[</span></span>'B'<span class="tag">\<span class="name">]</span> = <span class="number">2</span></span>;dir<span class="tag">\<span class="name">[</span></span>'C'<span class="tag">\<span class="name">]</span> = <span class="number">3</span></span>;dir<span class="tag">\<span class="name">[</span></span>'D'<span class="tag">\<span class="name">]</span> = <span class="number">4</span></span>;dir<span class="tag">\<span class="name">[</span></span>'E'<span class="tag">\<span class="name">]</span> = <span class="number">5</span></span>;dir<span class="tag">\<span class="name">[</span></span>'F'<span class="tag">\<span class="name">]</span> = <span class="number">6</span></span>;dir<span class="tag">\<span class="name">[</span></span>'G'<span class="tag">\<span class="name">]</span> = <span class="number">7</span></span>;dir<span class="tag">\<span class="name">[</span></span>'H'<span class="tag">\<span class="name">]</span> = <span class="number">8</span></span>;dir<span class="tag">\<span class="name">[</span></span>'I'<span class="tag">\<span class="name">]</span> = <span class="number">9</span></span>;dir<span class="tag">\<span class="name">[</span></span>'J'<span class="tag">\<span class="name">]</span> = <span class="number">10</span></span>;dir<span class="tag">\<span class="name">[</span></span>'K'<span class="tag">\<span class="name">]</span> = <span class="number">11</span></span>;dir<span class="tag">\<span class="name">[</span></span>'L'<span class="tag">\<span class="name">]</span> = <span class="number">12</span></span>;</span><br><span class="line">    dir<span class="tag">\<span class="name">[</span></span>'M'<span class="tag">\<span class="name">]</span> = <span class="number">13</span></span>;dir<span class="tag">\<span class="name">[</span></span>'N'<span class="tag">\<span class="name">]</span> = <span class="number">14</span></span>;dir<span class="tag">\<span class="name">[</span></span>'O'<span class="tag">\<span class="name">]</span> = <span class="number">15</span></span>;dir<span class="tag">\<span class="name">[</span></span>'P'<span class="tag">\<span class="name">]</span> = <span class="number">16</span></span>;dir<span class="tag">\<span class="name">[</span></span>'Q'<span class="tag">\<span class="name">]</span> = <span class="number">17</span></span>;dir<span class="tag">\<span class="name">[</span></span>'R'<span class="tag">\<span class="name">]</span> = <span class="number">18</span></span>;dir<span class="tag">\<span class="name">[</span></span>'S'<span class="tag">\<span class="name">]</span> = <span class="number">19</span></span>;dir<span class="tag">\<span class="name">[</span></span>'T'<span class="tag">\<span class="name">]</span> = <span class="number">20</span></span>;dir<span class="tag">\<span class="name">[</span></span>'U'<span class="tag">\<span class="name">]</span> = <span class="number">21</span></span>;dir<span class="tag">\<span class="name">[</span></span>'V'<span class="tag">\<span class="name">]</span> = <span class="number">22</span></span>;dir<span class="tag">\<span class="name">[</span></span>'W'<span class="tag">\<span class="name">]</span> = <span class="number">23</span></span>;</span><br><span class="line">    dir<span class="tag">\<span class="name">[</span></span>'X'<span class="tag">\<span class="name">]</span> = <span class="number">24</span></span>;dir<span class="tag">\<span class="name">[</span></span>'Y'<span class="tag">\<span class="name">]</span> = <span class="number">25</span></span>;dir<span class="tag">\<span class="name">[</span></span>'Z'<span class="tag">\<span class="name">]</span> = <span class="number">26</span></span>;</span><br><span class="line">    string s1;</span><br><span class="line">    getline(cin,s1);</span><br><span class="line">    transform(s1.begin(),s1.end(),s1.begin(),::toupper);</span><br><span class="line">    //计算总和</span><br><span class="line">    int sum = 0;</span><br><span class="line">    for(int i=0;i&lt;s1.length();i++)&#123;</span><br><span class="line">        if(s1<span class="tag">\<span class="name">[</span></span>i<span class="tag">\<span class="name">]</span></span>&gt;='A' &amp;&amp; s1<span class="tag">\<span class="name">[</span></span>i<span class="tag">\<span class="name">]</span></span>&lt;='Z')&#123;</span><br><span class="line">            //cout&lt;&lt;dir<span class="tag">\<span class="name">[</span></span>s1<span class="tag">\<span class="name">[</span></span>i<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">]</span></span>&lt;&lt;endl;</span><br><span class="line">            sum += dir<span class="tag">\<span class="name">[</span></span>s1<span class="tag">\<span class="name">[</span></span>i<span class="tag">\<span class="name">]</span></span><span class="tag">\<span class="name">]</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    string binary = IntToBinary(sum);</span><br><span class="line">    //cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;count(binary.begin(),binary.end(),'0')&lt;&lt;" "&lt;&lt;count(binary.begin(),binary.end(),'1')&lt;&lt;endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1060（乙级）</title>
    <url>/2019/03/18/pat-1060-yi-ji-1/</url>
    <content><![CDATA[<p>1060 爱丁顿数 （25 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805269312159744">原文地址</a> 英国天文学家爱丁顿很喜欢骑车。据说他为了炫耀自己的骑车功力，还定义了一个“爱丁顿数” E ，即满足有 E 天骑车超过 E 英里的最大整数 E。据说爱丁顿自己的 E 等于87。 现给定某人 N 天的骑车距离，请你算出对应的爱丁顿数 E（≤N）。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出一个正整数 N (≤10​5​​)，即连续骑车的天数；第二行给出 N 个非负整数，代表每天的骑车距离。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中给出 N 天的爱丁顿数。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>10
6 7 6 9 3 10 8 2 7 8
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>6
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,sum=<span class="number">0</span>,aver=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line">    <span class="keyword">int</span> list1\[N\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;list1\[i\]);</span><br><span class="line">        sum += list1\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    aver = <span class="number">1</span>;</span><br><span class="line">    sort(list1,list1+N,cmp);</span><br><span class="line">    <span class="comment">//对排序的结果从大到小访问 如果值小于等于 计数值则结束</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(list1\[i\] &lt;= aver)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        aver++;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;--aver&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1058（乙级）</title>
    <url>/2019/03/18/pat-1058-yi-ji-1/</url>
    <content><![CDATA[<p>1058 选择题 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805270356541440">原文地址</a></p>
<p>批改多选题是比较麻烦的事情，本题就请你写个程序帮助老师批改多选题，并且指出哪道题错的人最多。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第一行给出两个正整数 N（≤ 1000）和 M（≤ 100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为 <code>(选中的选项个数 选项1 ……)</code>，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>按照输入的顺序给出每个学生的得分，每个分数占一行。注意判题时只有选择全部正确才能得到该题的分数。最后一行输出错得最多的题目的错误次数和编号（题目按照输入的顺序从 1 开始编号）。如果有并列，则按编号递增顺序输出。数字间用空格分隔，行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出 <code>Too simple</code>。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>3 4 
3 4 2 a c
2 5 1 b
5 3 2 b c
1 5 4 a b d e
(2 a c) (2 b d) (2 a c) (3 a b e)
(2 a c) (1 b) (2 a b) (4 a b d e)
(2 b d) (1 e) (2 b c) (4 a b c d)
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>3
6
5
2 2 3 4
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Answer</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fenzhi; <span class="comment">//分值</span></span><br><span class="line">    <span class="keyword">int</span> num_xuan; <span class="comment">//选项个数</span></span><br><span class="line">    <span class="keyword">int</span> num_yes; <span class="comment">//正确选项个数</span></span><br><span class="line">    <span class="built_in">string</span> ans; <span class="comment">//答案</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Statistics</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num_error; <span class="comment">//出错数</span></span><br><span class="line">    <span class="keyword">int</span> number; <span class="comment">//编号</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Statistics a,Statistics b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.num\_error == b.num\_error)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.number &lt; b.number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> a.num\_error &gt; b.num\_error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,M,sum=<span class="number">0</span>;<span class="comment">//sum总分</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M;</span><br><span class="line">    Answer ans_list\[M\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t1,t2,t3;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t1&gt;&gt;t2&gt;&gt;t3;</span><br><span class="line">        sum += t1;</span><br><span class="line">        ans_list\[i\].fenzhi = t1;</span><br><span class="line">        ans\_list\[i\].num\_xuan = t2;</span><br><span class="line">        ans\_list\[i\].num\_yes = t3;</span><br><span class="line">        <span class="built_in">string</span> s1=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;t3;j++)&#123;</span><br><span class="line">            <span class="keyword">char</span> t;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">            s1 += t;</span><br><span class="line">        &#125;</span><br><span class="line">        ans_list\[i\].ans = s1;</span><br><span class="line">    &#125;</span><br><span class="line">    Statistics dir\[M\] = &#123;<span class="number">0</span>,<span class="number">0</span>&#125;; <span class="comment">//出错统计</span></span><br><span class="line">    <span class="keyword">int</span> grade\[N\] = &#123;<span class="number">0</span>&#125;; <span class="comment">//学生得分</span></span><br><span class="line">    getchar();<span class="comment">//去掉回车</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> s1;</span><br><span class="line">        getline(<span class="built_in">cin</span>,s1);</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>; <span class="comment">//题号</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>; <span class="comment">//下标</span></span><br><span class="line">        <span class="built_in">string</span> temp = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; s1.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1\[index\] == <span class="string">'('</span>)&#123;</span><br><span class="line">                index++;</span><br><span class="line">                <span class="keyword">if</span>(s1\[index\]&gt;=<span class="string">'0'</span> &amp;&amp; s1\[index\]&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">                    t = s1\[index\] - <span class="string">'0'</span>;</span><br><span class="line">                    index++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s1\[index\] &gt;= <span class="string">'a'</span> &amp;&amp; s1\[index\] &lt;= <span class="string">'z'</span>)&#123;</span><br><span class="line">                temp += s1\[index\];</span><br><span class="line">                index++;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;j&lt;&lt;endl;</span></span><br><span class="line">                <span class="comment">//cout&lt;&lt;temp&lt;&lt;endl;</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s1\[index\] == <span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(t != ans\_list\[j\].num\_yes)&#123;</span><br><span class="line">                    dir\[j\].number = j;</span><br><span class="line">                    dir\[j\].num_error++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(temp == ans_list\[j\].ans)&#123;</span><br><span class="line">                        grade\[i\] += ans_list\[j\].fenzhi;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        dir\[j\].number = j;</span><br><span class="line">                        dir\[j\].num_error++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                j++;</span><br><span class="line">                temp = <span class="string">""</span>;</span><br><span class="line">                index++;</span><br><span class="line">                t = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出每个学生的得分</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;grade\[i\]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(dir,dir+M,cmp);</span><br><span class="line">    <span class="comment">/*for(int i=0;i&lt;M;i++)&#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;dir\[i\].number&lt;&lt;" "&lt;&lt;dir\[i\].num_error&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">if</span>(dir\[<span class="number">0</span>\].num_error == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Too simple"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//寻找相同的出错书</span></span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">if</span>(dir\[j\].num\_error != dir\[j+<span class="number">1</span>\].num\_error)&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印结果</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;dir\[<span class="number">0</span>\].num_error&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=j;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i != j)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;dir\[i\].number + <span class="number">1</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;dir\[i\].number + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1059（乙级）</title>
    <url>/2019/03/18/pat-1059-yi-ji-1/</url>
    <content><![CDATA[<p>1059 C语言竞赛 （20 分)  <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805269828059136">原文地址</a></p>
<p>C 语言竞赛是浙江大学计算机学院主持的一个欢乐的竞赛。既然竞赛主旨是为了好玩，颁奖规则也就制定得很滑稽：</p>
<ul>
<li>0、冠军将赢得一份“神秘大奖”（比如很巨大的一本学生研究论文集……）。</li>
<li>1、排名为素数的学生将赢得最好的奖品 —— 小黄人玩偶！</li>
<li>2、其他人将得到巧克力。</li>
</ul>
<p>给定比赛的最终排名以及一系列参赛者的 ID，你要给出这些参赛者应该获得的奖品。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出一个正整数 N（≤10​4​​），是参赛者人数。随后 N 行给出最终排名，每行按排名顺序给出一位参赛者的 ID（4 位数字组成）。接下来给出一个正整数 K 以及 K 个需要查询的 ID。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对每个要查询的 ID，在一行中输出 <code>ID: 奖品</code>，其中奖品或者是 <code>Mystery Award</code>（神秘大奖）、或者是 <code>Minion</code>（小黄人）、或者是 <code>Chocolate</code>（巧克力）。如果所查 ID 根本不在排名里，打印 <code>Are you kidding?</code>（耍我呢？）。如果该 ID 已经查过了（即奖品已经领过了），打印 <code>ID: Checked</code>（不能多吃多占）。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>6
1111
6666
8888
1234
5555
0001
6
8888
0001
1111
2222
8888
2222
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>8888: Minion
0001: Chocolate
1111: Mystery Award
2222: Are you kidding?
8888: Checked
2222: Are you kidding?
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//思路通过map来存储数据 进行是否存在判断时 不需要进行遍历（使用散列表） 节省时间免去了查找所花费的时间</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;=<span class="built_in">sqrt</span>(n); i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(n%i==<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> t;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">		m\[t\] = i;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> q;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=q; i++)&#123;</span><br><span class="line">		<span class="keyword">int</span> t;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">		<span class="keyword">if</span>(m\[t\]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			<span class="keyword">if</span>(m\[t\]==<span class="number">1</span>)&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%04d: Mystery Award\\n"</span>, t);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(isPrime(m\[t\]))&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%04d: Minion\\n"</span>, t);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">"%04d: Chocolate\\n"</span>, t);</span><br><span class="line">			&#125;</span><br><span class="line">			m\[t\] = m\[t\] * <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(!m\[t\])&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%04d: Are you kidding?\\n"</span>, t);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">"%04d: Checked\\n"</span>, t);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1063（乙级）</title>
    <url>/2019/03/18/pat-1063-yi-ji-1/</url>
    <content><![CDATA[<p>1063 计算谱半径 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805267860930560">原文地址</a></p>
<p>在数学中，矩阵的“谱半径”是指其特征值的模集合的上确界。换言之，对于给定的 n 个复数空间的特征值 { a​1​​+b​1​​i,⋯,a​n​​+b​n​​i }，它们的模为实部与虚部的平方和的开方，而“谱半径”就是最大模。 现在给定一些复数空间的特征值，请你计算并输出这些特征值的谱半径。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出正整数 N（≤ 10 000）是输入的特征值的个数。随后 N 行，每行给出 1 个特征值的实部和虚部，其间以空格分隔。注意：题目保证实部和虚部均为绝对值不超过 1000 的整数。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出谱半径，四舍五入保留小数点后 2 位。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>5
0 1
2 0
-1 0
3 3
0 -3
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>4.24
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">float</span> R=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">sqrt</span>(a\*a+b\*b) &gt; R)&#123;</span><br><span class="line">            R = <span class="built_in">sqrt</span>(a\*a+b\*b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>,R);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1064（乙级）</title>
    <url>/2019/03/18/pat-1064-yi-ji-1/</url>
    <content><![CDATA[<p>1064 朋友数 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805267416334336">原文地址</a></p>
<p>如果两个整数各位数字的和是一样的，则被称为是“朋友数”，而那个公共的和就是它们的“朋友证号”。例如 123 和 51 就是朋友数，因为 1+2+3 = 5+1 = 6，而 6 就是它们的朋友证号。给定一些整数，要求你统计一下它们中有多少个不同的朋友证号。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出正整数 N。随后一行给出 N 个正整数，数字间以空格分隔。题目保证所有数字小于 10​4​​。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>首先第一行输出给定数字中不同的朋友证号的个数；随后一行按递增顺序输出这些朋友证号，数字间隔一个空格，且行末不得有多余空格。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>8
123 899 51 998 27 33 36 12
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>4
3 6 9 26
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串转换为整数并求和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strToNum</span><span class="params">(<span class="built_in">string</span> s1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        sum += (s1\[i\] - <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num,ls=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; dir;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator pos;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> s1;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s1;</span><br><span class="line">        <span class="keyword">int</span> temp = strToNum(s1);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;temp&lt;&lt;" ";</span></span><br><span class="line">        <span class="keyword">if</span>(dir.count(temp) == <span class="number">0</span>)&#123;</span><br><span class="line">            dir\[temp\] = <span class="number">1</span>;</span><br><span class="line">            ls++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            dir\[temp\] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ls&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(pos=dir.<span class="built_in">begin</span>();pos!=dir.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos == dir.<span class="built_in">begin</span>())&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;pos-&gt;first;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;pos-&gt;first;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1062（乙级）</title>
    <url>/2019/03/18/pat-1062-yi-ji-1/</url>
    <content><![CDATA[<p>1062 最简分数 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805268334886912">原文地址</a></p>
<p>一个分数一般写成两个整数相除的形式：N/M，其中 M 不为0。最简分数是指分子和分母没有公约数的分数表示形式。 现给定两个不相等的正分数 N​1​​/M​1​​ 和 N​2​​/M​2​​，要求你按从小到大的顺序列出它们之间分母为 K 的最简分数。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中按 N/M 的格式给出两个正分数，随后是一个正整数分母 K，其间以空格分隔。题目保证给出的所有整数都不超过 1000。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中按 N/M 的格式列出两个给定分数之间分母为 K 的所有最简分数，按从小到大的顺序，其间以 1 个空格分隔。行首尾不得有多余空格。题目保证至少有 1 个输出。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>7/18 13/20 12
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>5/12 7/12
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//辗转相除 求公因子</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(k != <span class="number">0</span>)&#123;</span><br><span class="line">        c = t%k;</span><br><span class="line">        t = k;</span><br><span class="line">        k = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N1,M1,N2,M2,K,temp,t1,t2;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d/%d %d/%d %d"</span>,&amp;N1,&amp;M1,&amp;N2,&amp;M2,&amp;K);</span><br><span class="line">    temp = M1 * M2;</span><br><span class="line">    t1 = N1 * M2;</span><br><span class="line">    t2 = N2 * M1;</span><br><span class="line">    <span class="keyword">if</span>(t1 &gt; t2)&#123;</span><br><span class="line">        <span class="keyword">int</span> t = N1;</span><br><span class="line">        N1 = N2;</span><br><span class="line">        N2 = t;</span><br><span class="line">        t = M1;</span><br><span class="line">        M1 = M2;</span><br><span class="line">        M2 = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> list1\[<span class="number">1000</span>\]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i\*M1 &gt; N1\*K &amp;&amp; i\*M2 &lt; K\*N2)&#123;</span><br><span class="line">            <span class="keyword">if</span>(judge(i,K) == <span class="number">1</span>)&#123;</span><br><span class="line">                list1\[num\] = i;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(i\*M2 &gt; K\*N2)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;list1\[i\]&lt;&lt;<span class="string">"/"</span>&lt;&lt;K;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;list1\[i\]&lt;&lt;<span class="string">"/"</span>&lt;&lt;K;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1061（乙级）</title>
    <url>/2019/03/18/pat-1061-yi-ji-1/</url>
    <content><![CDATA[<p>1061 判断题 （15 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805268817231872">原文地址</a></p>
<p>判断题的评判很简单，本题就要求你写个简单的程序帮助老师判题并统计学生们判断题的得分。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第一行给出两个不超过 100 的正整数 N 和 M，分别是学生人数和判断题数量。第二行给出 M 个不超过 5 的正整数，是每道题的满分值。第三行给出每道题对应的正确答案，0 代表“非”，1 代表“是”。随后 N 行，每行给出一个学生的解答。数字间均以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>按照输入的顺序输出每个学生的得分，每个分数占一行。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>3 6
2 1 3 3 4 5
0 0 1 0 1 1
0 1 1 0 0 1
1 0 1 0 1 0
1 1 0 0 1 1
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>13
11
12
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Answer</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> fenzhi; <span class="comment">//分值</span></span><br><span class="line">    <span class="keyword">int</span> answer; <span class="comment">//答案</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,M;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M;</span><br><span class="line">    Answer ans\[M\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">        ans\[i\].fenzhi = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">        ans\[i\].answer = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> student\[N\]=&#123;<span class="number">0</span>&#125;; <span class="comment">//学生分值计数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;M;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">            <span class="keyword">if</span>(ans\[j\].answer == temp)&#123;</span><br><span class="line">                student\[i\] += ans\[j\].fenzhi;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;student\[i\]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1066（乙级）</title>
    <url>/2019/03/18/pat-1066-yi-ji-1/</url>
    <content><![CDATA[<p>1066 图像过滤 （15 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805266514558976">原文地址</a></p>
<p>图像过滤是把图像中不重要的像素都染成背景色，使得重要部分被凸显出来。现给定一幅黑白图像，要求你将灰度值位于某指定区间内的所有像素颜色都用一种指定的颜色替换。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第一行给出一幅图像的分辨率，即两个正整数 M 和 N（0&lt;M,N≤500），另外是待过滤的灰度值区间端点 A 和 B（0≤A&lt;B≤255）、以及指定的替换灰度值。随后 M 行，每行给出 N个像素点的灰度值，其间以空格分隔。所有灰度值都在 [0, 255] 区间内。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>输出按要求过滤后的图像。即输出 M 行，每行 N 个像素灰度值，每个灰度值占 3 位（例如黑色要显示为 <code>000</code>），其间以一个空格分隔。行首尾不得有多余空格。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>3 5 100 150 0
3 189 254 101 119
150 233 151 99 100
88 123 149 0 255
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>003 189 254 000 000
000 233 151 099 000
088 000 000 000 255
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统计如果小于100则需要补零的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countZero</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t - <span class="number">10</span> &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,M,A,B,T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M&gt;&gt;A&gt;&gt;B&gt;&gt;T;</span><br><span class="line">    <span class="keyword">int</span> pic\[N\]\[M\];</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;M;j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">            <span class="keyword">if</span>(temp&gt;=A&amp;&amp;temp&lt;=B)&#123;</span><br><span class="line">                pic\[i\]\[j\] = T;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                pic\[i\]\[j\] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;M;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pic\[i\]\[j\] &lt; <span class="number">100</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> m = countZero(pic\[i\]\[j\]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">0</span>;q&lt;m;q++)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;pic\[i\]\[j\];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1067（乙级）</title>
    <url>/2019/03/18/pat-1067-yi-ji-1/</url>
    <content><![CDATA[<p>1067 试密码 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805266007048192">原文地址</a></p>
<p>当你试图登录某个系统却忘了密码时，系统一般只会允许你尝试有限多次，当超出允许次数时，账号就会被锁死。本题就请你实现这个小功能。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第一行给出一个密码（长度不超过 20 的、不包含空格、Tab、回车的非空字符串）和一个正整数 N（≤ 10），分别是正确的密码和系统允许尝试的次数。随后每行给出一个以回车结束的非空字符串，是用户尝试输入的密码。输入保证至少有一次尝试。当读到一行只有单个 # 字符时，输入结束，并且这一行不是用户的输入。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对用户的每个输入，如果是正确的密码且尝试次数不超过 N，则在一行中输出 <code>Welcome in</code>，并结束程序；如果是错误的，则在一行中按格式输出 <code>Wrong password: 用户输入的错误密码</code>；当错误尝试达到 N 次时，再输出一行 <code>Account locked</code>，并结束程序。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>Correct%pw 3
correct%pw
Correct@PW
whatisthepassword!
Correct%pw
#
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>Wrong password: correct%pw
Wrong password: Correct@PW
Wrong password: whatisthepassword!
Account locked
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>cool@gplt 3
coolman@gplt
coollady@gplt
cool@gplt
try again
#
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>Wrong password: coolman@gplt
Wrong password: coollady@gplt
Welcome in
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="built_in">string</span>&gt; que;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="built_in">string</span>&gt;::iterator pos;</span><br><span class="line">    <span class="built_in">string</span> passwordR;</span><br><span class="line">    <span class="keyword">int</span> num,iter = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;passwordR&gt;&gt;num;</span><br><span class="line">    <span class="built_in">string</span> s1=<span class="string">""</span>;</span><br><span class="line">    <span class="built_in">cin</span>.<span class="built_in">get</span>(); <span class="comment">//解决geiline提前读取一个回车的问题</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        getline(<span class="built_in">cin</span>,s1); <span class="comment">//使用getline防止出现cin 无法读取的数据</span></span><br><span class="line">        <span class="keyword">if</span>(s1 == <span class="string">"#"</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        que.push_back(s1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(pos=que.<span class="built_in">begin</span>();pos!=que.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        s1 = *pos;</span><br><span class="line">        <span class="keyword">if</span>(iter &lt; num &amp;&amp; s1 != passwordR)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Wrong password: "</span>&lt;&lt;s1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            iter++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(iter &gt;= num)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Account locked"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s1 == passwordR)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Welcome in"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1069（乙级）</title>
    <url>/2019/03/18/pat-1069-yi-ji-1/</url>
    <content><![CDATA[<p>1069 微博转发抽奖 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805265159798784">原文地址</a></p>
<p>小明 PAT 考了满分，高兴之余决定发起微博转发抽奖活动，从转发的网友中按顺序每隔 N 个人就发出一个红包。请你编写程序帮助他确定中奖名单。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出三个正整数 M（≤ 1000）、N 和 S，分别是转发的总量、小明决定的中奖间隔、以及第一位中奖者的序号（编号从 1 开始）。随后 M 行，顺序给出转发微博的网友的昵称（不超过 20 个字符、不包含空格回车的非空字符串）。 注意：可能有人转发多次，但不能中奖多次。所以如果处于当前中奖位置的网友已经中过奖，则跳过他顺次取下一位。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>按照输入的顺序输出中奖名单，每个昵称占一行。如果没有人中奖，则输出 <code>Keep going...</code>。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>9 3 2
Imgonnawin!
PickMe
PickMeMeMeee
LookHere
Imgonnawin!
TryAgainAgain
TryAgainAgain
Imgonnawin!
TryAgainAgain
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>PickMe
Imgonnawin!
TryAgainAgain
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>2 3 5
Imgonnawin!
PickMe
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>Keep going...
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M,N,S,index = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;M&gt;&gt;N&gt;&gt;S;</span><br><span class="line">    <span class="built_in">string</span> nameList\[M\];</span><br><span class="line">    <span class="built_in">string</span> winList\[M\]=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;nameList\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(S &gt;= M)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Keep going..."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(S &lt;= M)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count(winList,winList+M,nameList\[S<span class="number">-1</span>\]) == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;nameList\[S<span class="number">-1</span>\]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                winList\[index++\] = nameList\[S<span class="number">-1</span>\];</span><br><span class="line">                S += N;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                S++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1070（乙级）</title>
    <url>/2019/03/18/pat-1070-yi-ji-1/</url>
    <content><![CDATA[<p>1070 结绳 （25 分)  <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805264706813952">原文地址</a></p>
<p>给定一段一段的绳子，你需要把它们串成一条绳。每次串连的时候，是把两段绳子对折，再如下图所示套接在一起。这样得到的绳子又被当成是另一段绳子，可以再次对折去跟另一段绳子串连。每次串连后，原来两段绳子的长度就会减半。 <img src="https://images.ptausercontent.com/46293e57-aa0e-414b-b5c3-7c4b2d5201e2.jpg" alt="rope.jpg"> 给定 N 段绳子的长度，你需要找出它们能串成的绳子的最大长度。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个输入包含 1 个测试用例。每个测试用例第 1 行给出正整数 N (2≤N≤10​4​​)；第 2 行给出 N 个正整数，即原始绳段的长度，数字间以空格分隔。所有整数都不超过10​4​​。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出能够串成的绳子的最大长度。结果向下取整，即取为不超过最大长度的最近整数。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>8
10 15 12 3 4 13 1 15
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>14
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">分析：因为所有长度都要串在一起，每次都等于(旧的绳子长度+新的绳子长度)/2，所以越是早加入绳子长</span></span><br><span class="line"><span class="comment">度中的段，越要对折的次数多，所以既然希望绳子长度是最长的，就必须让长的段对折次数尽可能的短。所以将所</span></span><br><span class="line"><span class="comment">有段从小到大排序，然后从头到尾从小到大分别将每一段依次加入结绳的绳子中，最后得到的结果才会是最长的结果</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num,index=<span class="number">2</span>,maxLen = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">float</span> len\[num\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;len\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(len,len+num);</span><br><span class="line">    maxLen = <span class="built_in">floor</span>((len\[<span class="number">0</span>\] + len\[<span class="number">1</span>\])/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">while</span>(index &lt; num)&#123;</span><br><span class="line">        maxLen = <span class="built_in">floor</span>((maxLen + len\[index++\])/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;maxLen&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1071（乙级）</title>
    <url>/2019/03/18/pat-1071-yi-ji-1/</url>
    <content><![CDATA[<p>1071 小赌怡情 （15 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805264312549376">原文地址</a></p>
<p>常言道“小赌怡情”。这是一个很简单的小游戏：首先由计算机给出第一个整数；然后玩家下注赌第二个整数将会比第一个数大还是小；玩家下注 t 个筹码后，计算机给出第二个数。若玩家猜对了，则系统奖励玩家 t 个筹码；否则扣除玩家 t 个筹码。 注意：玩家下注的筹码数不能超过自己帐户上拥有的筹码数。当玩家输光了全部筹码后，游戏就结束。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第一行给出 2 个正整数 T 和 K（≤ 100），分别是系统在初始状态下赠送给玩家的筹码数、以及需要处理的游戏次数。随后 K 行，每行对应一次游戏，顺序给出 4 个数字：</p>
<pre><code>n1 b t n2
</code></pre>
<p>其中 <code>n1</code> 和 <code>n2</code> 是计算机先后给出的两个[0, 9]内的整数，保证两个数字不相等。<code>b</code> 为 0 表示玩家赌<code>小</code>，为 1 表示玩家赌<code>大</code>。<code>t</code> 表示玩家下注的筹码数，保证在整型范围内。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对每一次游戏，根据下列情况对应输出（其中 <code>t</code> 是玩家下注量，<code>x</code> 是玩家当前持有的筹码量）：</p>
<ul>
<li>玩家赢，输出 <code>Win t! Total = x.</code>；</li>
<li>玩家输，输出 <code>Lose t. Total = x.</code>；</li>
<li>玩家下注超过持有的筹码量，输出 <code>Not enough tokens. Total = x.</code>；</li>
<li>玩家输光后，输出 <code>Game Over.</code> 并结束程序。</li>
</ul>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>100 4
8 0 100 2
3 1 50 1
5 1 200 6
7 0 200 8
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>Win 100!  Total = 200.
Lose 50.  Total = 150.
Not enough tokens.  Total = 150.
Not enough tokens.  Total = 150.
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>100 4
8 0 100 2
3 1 200 1
5 1 200 6
7 0 200 8
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>Win 100!  Total = 200.
Lose 200.  Total = 0.
Game Over.
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tokens,num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;tokens&gt;&gt;num;</span><br><span class="line">    <span class="keyword">while</span>(num &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> n1,b,t,n2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n1&gt;&gt;b&gt;&gt;t&gt;&gt;n2;</span><br><span class="line">        <span class="keyword">if</span>(tokens &lt; t)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Not enough tokens.  Total = "</span>&lt;&lt;tokens&lt;&lt;<span class="string">"."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            num--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n1 &gt; n2)&#123; <span class="comment">//第二个数比第一个数小</span></span><br><span class="line">            <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">                tokens += t;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"Win "</span>&lt;&lt;t&lt;&lt;<span class="string">"!  Total = "</span>&lt;&lt;tokens&lt;&lt;<span class="string">"."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tokens -= t;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"Lose "</span>&lt;&lt;t&lt;&lt;<span class="string">".  Total = "</span>&lt;&lt;tokens&lt;&lt;<span class="string">"."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">                tokens -= t;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"Lose "</span>&lt;&lt;t&lt;&lt;<span class="string">".  Total = "</span>&lt;&lt;tokens&lt;&lt;<span class="string">"."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                tokens += t;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"Win "</span>&lt;&lt;t&lt;&lt;<span class="string">"!  Total = "</span>&lt;&lt;tokens&lt;&lt;<span class="string">"."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tokens == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Game Over."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1065（乙级）</title>
    <url>/2019/03/18/pat-1065-yi-ji-1/</url>
    <content><![CDATA[<p>1065 单身狗 （25 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805266942377984">原文地址</a></p>
<p>“单身狗”是中文对于单身人士的一种爱称。本题请你从上万人的大型派对中找出落单的客人，以便给予特殊关爱。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出一个正整数 N（≤ 50 000），是已知夫妻/伴侣的对数；随后 N 行，每行给出一对夫妻/伴侣——为方便起见，每人对应一个 ID 号，为 5 位数字（从 00000 到 99999），ID 间以空格分隔；之后给出一个正整数 M（≤ 10 000），为参加派对的总人数；随后一行给出这 M 位客人的 ID，以空格分隔。题目保证无人重婚或脚踩两条船。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>首先第一行输出落单客人的总人数；随后第二行按 ID 递增顺序列出落单的客人。ID 间用 1 个空格分隔，行的首尾不得有多余空格。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>3
11111 22222
33333 44444
55555 66666
7
55555 44444 10000 88888 22222 11111 23333
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>5
10000 23333 44444 55555 88888
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//统计如果小于10000则需要补零的个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countZero</span><span class="params">(<span class="keyword">int</span> t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t - <span class="number">10</span> &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t - <span class="number">100</span> &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t - <span class="number">1000</span> &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; dir;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> num1,num2,iter=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%ld"</span>,&amp;num1);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num1;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t1,t2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t1);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t2);</span><br><span class="line">        dir\[t1\] = t2;</span><br><span class="line">        dir\[t2\] = t1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%ld"</span>,&amp;num2);</span><br><span class="line">    <span class="keyword">int</span> list1\[num2\];</span><br><span class="line">    <span class="keyword">int</span> loser\[num2\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num2;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">        list1\[i\] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num2;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(count(list1,list1+num2,dir\[list1\[i\]\]) == <span class="number">0</span>)&#123;</span><br><span class="line">            loser\[iter\] = list1\[i\];</span><br><span class="line">            iter++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(loser,loser+iter);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;iter&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">long</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;iter;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(loser\[i\] &lt; <span class="number">10000</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> q = countZero(loser\[i\]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q;i++)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;loser\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1068（乙级）</title>
    <url>/2019/03/18/pat-1068-yi-ji-1/</url>
    <content><![CDATA[<p>1068 万绿丛中一点红 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805265579229184">原文地址</a></p>
<p>对于计算机而言，颜色不过是像素点对应的一个 24 位的数值。现给定一幅分辨率为 M×N 的画，要求你找出万绿丛中的一点红，即有独一无二颜色的那个像素点，并且该点的颜色与其周围 8 个相邻像素的颜色差充分大。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出三个正整数，分别是 M 和 N（≤ 1000），即图像的分辨率；以及 TOL，是所求像素点与相邻点的颜色差阈值，色差超过 TOL 的点才被考虑。随后 N 行，每行给出 M 个像素的颜色值，范围在 [0,2​24​​) 内。所有同行数字间用空格或 TAB 分开。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中按照 <code>(x, y): color</code> 的格式输出所求像素点的位置以及颜色值，其中位置 <code>x</code> 和 <code>y</code> 分别是该像素在图像矩阵中的列、行编号（从 1 开始编号）。如果这样的点不唯一，则输出 <code>Not Unique</code>；如果这样的点不存在，则输出 <code>Not Exist</code>。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>8 6 200
0 	 0 	  0 	   0	    0 	     0 	      0        0
65280 	 65280    65280    16711479 65280    65280    65280    65280
16711479 65280    65280    65280    16711680 65280    65280    65280
65280 	 65280    65280    65280    65280    65280    165280   165280
65280 	 65280 	  16777015 65280    65280    165280   65480    165280
16777215 16777215 16777215 16777215 16777215 16777215 16777215 16777215
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>(5, 3): 16711680
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>4 5 2
0 0 0 0
0 0 3 0
0 0 0 0
0 5 0 0
0 0 0 0
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>Not Unique
</code></pre>
<h3 id="输入样例-3："><a class="header-anchor" href="#输入样例-3：">¶</a>输入样例 3：</h3>
<pre><code>3 3 5
1 2 3
3 4 5
5 6 7
</code></pre>
<h3 id="输出样例-3："><a class="header-anchor" href="#输出样例-3：">¶</a>输出样例 3：</h3>
<pre><code>Not Exist
</code></pre>
<p>代码：</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line">//要注意的是其中如果一个点满足和其他点之间差值大于阈值时 同样要没有另外一个点也满足该条件 同样该点不能多次出现</span><br><span class="line">//题目中说周围八个点感觉迷惑性比较强应该算上边界值的 不应该去掉 可以是四个点或者三个点之类的。</span><br><span class="line">//注意点：1.该元素是否唯一     2.该元素是否比周围元素相差TOL    3.输出的坐标是（列，行）</span><br><span class="line">int main()&#123;</span><br><span class="line">    int M,N,TOL;</span><br><span class="line">    cin&gt;&gt;N&gt;&gt;M&gt;&gt;TOL;</span><br><span class="line">    long int pic<span class="symbol">\[</span>M<span class="symbol">\]</span><span class="symbol">\[</span>N<span class="symbol">\]</span> = &#123;0&#125;;</span><br><span class="line">    for(int i=0;i&lt;M;i++)&#123;</span><br><span class="line">        for(int j=0;j&lt;N;j++)&#123;</span><br><span class="line">            cin&gt;&gt;pic<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    int num=0,x=-1,y=-1,t1 = -1,t2 = -1;</span><br><span class="line">    bool flag = false;</span><br><span class="line">    for(int i=0;i&lt;M;i++)&#123;</span><br><span class="line">        for(int j=0;j&lt;N;j++)&#123;</span><br><span class="line">            if(abs(pic<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>-pic<span class="symbol">\[</span>i-1<span class="symbol">\]</span><span class="symbol">\[</span>j-1<span class="symbol">\]</span>)&gt;TOL &amp;&amp; abs(pic<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>-pic<span class="symbol">\[</span>i+1<span class="symbol">\]</span><span class="symbol">\[</span>j-1<span class="symbol">\]</span>)&gt;TOL &amp;&amp; abs(pic<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>-pic<span class="symbol">\[</span>i+1<span class="symbol">\]</span><span class="symbol">\[</span>j+1<span class="symbol">\]</span>)&gt;TOL &amp;&amp; abs(pic<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>-pic<span class="symbol">\[</span>i-1<span class="symbol">\]</span><span class="symbol">\[</span>j+1<span class="symbol">\]</span>)&gt;TOL &amp;&amp; abs(pic<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>-pic<span class="symbol">\[</span>i-1<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>)&gt;TOL &amp;&amp; abs(pic<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>-pic<span class="symbol">\[</span>i+1<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>)&gt;TOL &amp;&amp; abs(pic<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>-pic<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j-1<span class="symbol">\]</span>)&gt;TOL &amp;&amp; abs(pic<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j<span class="symbol">\]</span>-pic<span class="symbol">\[</span>i<span class="symbol">\]</span><span class="symbol">\[</span>j+1<span class="symbol">\]</span>)&gt;TOL)&#123;</span><br><span class="line">                x = i;</span><br><span class="line">                y = j;</span><br><span class="line">                bool unique_pixel = true;</span><br><span class="line">                for(int m=0;m&lt;M;m++)&#123;</span><br><span class="line">                    for(int n=0;n&lt;N;n++)&#123;</span><br><span class="line">                        if(m!=x &amp;&amp; n!=y)&#123;</span><br><span class="line">                            if(pic<span class="symbol">\[</span>m<span class="symbol">\]</span><span class="symbol">\[</span>n<span class="symbol">\]</span> == pic<span class="symbol">\[</span>x<span class="symbol">\]</span><span class="symbol">\[</span>y<span class="symbol">\]</span>)&#123;</span><br><span class="line">                                unique_pixel = false;</span><br><span class="line">                                break;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if(unique_pixel)&#123;</span><br><span class="line">                    t1 = x;</span><br><span class="line">                    t2 = y;</span><br><span class="line">                    num++;</span><br><span class="line">                    if(num == 2)&#123;</span><br><span class="line">                        flag = true;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    x = -1;</span><br><span class="line">                    y = -1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(flag)&#123;</span><br><span class="line">        cout&lt;&lt;"Not Unique"&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else if(num == 0)&#123;</span><br><span class="line">        cout&lt;&lt;"Not Exist"&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        cout&lt;&lt;"("&lt;&lt;t2+1&lt;&lt;", "&lt;&lt;t1+1&lt;&lt;"): "&lt;&lt;pic<span class="symbol">\[</span>t1<span class="symbol">\]</span><span class="symbol">\[</span>t2<span class="symbol">\]</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1072（乙级）</title>
    <url>/2019/03/18/pat-1072-yi-ji-1/</url>
    <content><![CDATA[<p>1072 开学寄语 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805263964422144">原文地址</a></p>
<p>下图是上海某校的新学期开学寄语：天将降大任于斯人也，必先删其微博，卸其 QQ，封其电脑，夺其手机，收其 ipad，断其 wifi，使其百无聊赖，然后，净面、理发、整衣，然后思过、读书、锻炼、明智、开悟、精进。而后必成大器也！ <img src="https://images.ptausercontent.com/3b1d9f4a-778b-4942-a9e2-836262f363aa.JPG" alt="jiyu.JPG"> 本题要求你写个程序帮助这所学校的老师检查所有学生的物品，以助其成大器。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出两个正整数 N（≤ 1000）和 M（≤ 6），分别是学生人数和需要被查缴的物品种类数。第二行给出 M 个需要被查缴的物品编号，其中编号为 4 位数字。随后 N 行，每行给出一位学生的姓名缩写（由 1-4 个大写英文字母组成）、个人物品数量 K（0 ≤ K ≤ 10）、以及 K 个物品的编号。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>顺次检查每个学生携带的物品，如果有需要被查缴的物品存在，则按以下格式输出该生的信息和其需要被查缴的物品的信息（注意行末不得有多余空格）：</p>
<pre><code>姓名缩写: 物品编号1 物品编号2 ……
</code></pre>
<p>最后一行输出存在问题的学生的总人数和被查缴物品的总数。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>4 2
2333 6666
CYLL 3 1234 2345 3456
U 4 9966 6666 8888 6666
GG 2 2333 7777
JJ 3 0012 6666 2333
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>U: 6666 6666
GG: 2333
JJ: 6666 2333
3 5
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,M,num\_s=<span class="number">0</span>,num\<span class="keyword">_t</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M;</span><br><span class="line">    <span class="built_in">string</span> illeagal\[M\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;illeagal\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; list1;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;::iterator pos;</span><br><span class="line">        <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;name&gt;&gt;num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)&#123;</span><br><span class="line">            <span class="built_in">string</span> s1;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s1;</span><br><span class="line">            <span class="keyword">if</span>(count(illeagal,illeagal+M,s1) != <span class="number">0</span>)&#123;</span><br><span class="line">                list1.push_back(s1);</span><br><span class="line">                <span class="keyword">num_t</span>++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!list1.empty())&#123;</span><br><span class="line">            num_s++;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;name&lt;&lt;<span class="string">":"</span>;</span><br><span class="line">            <span class="keyword">for</span>(pos = list1.<span class="built_in">begin</span>();pos!=list1.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;*pos;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;num\_s&lt;&lt;<span class="string">" "</span>&lt;&lt;num\<span class="keyword">_t</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1073（乙级）</title>
    <url>/2019/03/18/pat-1073-yi-ji-1/</url>
    <content><![CDATA[<p>1073 多选题常见计分法 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805263624683520">原文地址</a></p>
<p>批改多选题是比较麻烦的事情，有很多不同的计分方法。有一种最常见的计分方法是：如果考生选择了部分正确选项，并且没有选择任何错误选项，则得到 50% 分数；如果考生选择了任何一个错误的选项，则不能得分。本题就请你写个程序帮助老师批改多选题，并且指出哪道题的哪个选项错的人最多。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第一行给出两个正整数 N（≤1000）和 M（≤100），分别是学生人数和多选题的个数。随后 M 行，每行顺次给出一道题的满分值（不超过 5 的正整数）、选项个数（不少于 2 且不超过 5 的正整数）、正确选项个数（不超过选项个数的正整数）、所有正确选项。注意每题的选项从小写英文字母 a 开始顺次排列。各项间以 1 个空格分隔。最后 N 行，每行给出一个学生的答题情况，其每题答案格式为 <code>(选中的选项个数 选项1 ……)</code>，按题目顺序给出。注意：题目保证学生的答题情况是合法的，即不存在选中的选项数超过实际选项数的情况。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>按照输入的顺序给出每个学生的得分，每个分数占一行，输出小数点后 1 位。最后输出错得最多的题目选项的信息，格式为：<code>错误次数 题目编号（题目按照输入的顺序从1开始编号）-选项号</code>。如果有并列，则每行一个选项，按题目编号递增顺序输出；再并列则按选项号递增顺序输出。行首尾不得有多余空格。如果所有题目都没有人错，则在最后一行输出 <code>Too simple</code>。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>3 4 
3 4 2 a c
2 5 1 b
5 3 2 b c
1 5 4 a b d e
(2 a c) (3 b d e) (2 a c) (3 a b e)
(2 a c) (1 b) (2 a b) (4 a b d e)
(2 b d) (1 e) (1 c) (4 a b c d)
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>3.5
6.0
2.5
2 2-e
2 3-a
2 3-b
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>2 2 
3 4 2 a c
2 5 1 b
(2 a c) (1 b)
(2 a c) (1 b)
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>5.0
5.0
Too simple
</code></pre>
<p>代码（本题和之前的一题十分类似）：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LEN = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ques</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> score;</span><br><span class="line">	<span class="keyword">int</span> ans\[LEN\]; <span class="comment">//答案向量，1表示含此答案，0表示不含此答案</span></span><br><span class="line">	<span class="keyword">int</span> ansCount;</span><br><span class="line">	<span class="keyword">int</span> wrongNum\[LEN\];<span class="comment">//答错向量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> n, m;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	ques qu\[m\];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">		<span class="built_in">memset</span>(qu\[i\].ans, <span class="number">0</span>, <span class="keyword">sizeof</span>(qu\[i\].ans));</span><br><span class="line">		<span class="built_in">memset</span>(qu\[i\].wrongNum, <span class="number">0</span>, <span class="keyword">sizeof</span>(qu\[i\].wrongNum));</span><br><span class="line">		qu\[i\].ansCount = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">double</span> stuScore\[n\] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;qu\[i\].score;</span><br><span class="line">		<span class="keyword">int</span> t, c;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;t&gt;&gt;c;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;c; j++) &#123;</span><br><span class="line">			<span class="keyword">char</span> ch;</span><br><span class="line">			<span class="built_in">cin</span>&gt;&gt;ch;</span><br><span class="line">			qu\[i\].ans\[ch-<span class="string">'a'</span>\] = <span class="number">1</span>;</span><br><span class="line">			qu\[i\].ansCount++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">string</span> s1;</span><br><span class="line">	getline(<span class="built_in">cin</span>, s1);</span><br><span class="line">	<span class="keyword">int</span> maxWrongNum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">		getline(<span class="built_in">cin</span>, s1);</span><br><span class="line">		<span class="built_in">string</span> s2;</span><br><span class="line">		<span class="comment">//remove blank</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;s1.length(); j++) &#123;</span><br><span class="line">			<span class="keyword">if</span>(s1.at(j)!=<span class="string">' '</span>) &#123;</span><br><span class="line">				s2 += s1.at(j);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++) &#123;</span><br><span class="line">			<span class="comment">//find one answer</span></span><br><span class="line">			<span class="keyword">int</span> start = s2.<span class="built_in">find</span>(<span class="string">"("</span>);</span><br><span class="line">			<span class="keyword">int</span> <span class="built_in">end</span> = s2.<span class="built_in">find</span>(<span class="string">")"</span>);</span><br><span class="line">			<span class="built_in">string</span> tmp = s2.substr(start, <span class="built_in">end</span>-start+<span class="number">1</span>);</span><br><span class="line">			<span class="keyword">int</span> tmpAns\[LEN\] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;tmp.at(<span class="number">1</span>)-<span class="string">'0'</span>; k++) &#123;</span><br><span class="line">				tmpAns\[tmp.at(<span class="number">2</span>+k)-<span class="string">'a'</span>\] = <span class="number">1</span>; <span class="comment">//该学生选了此选项，tmp.at(2+k)是该选项，-'a'是把字母变成数字</span></span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//judge whether correct</span></span><br><span class="line">			<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">int</span> tmpCount = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;LEN; k++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(tmpAns\[k\]==<span class="number">1</span>) &#123;</span><br><span class="line">					tmpCount++;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span>(tmpAns\[k\]==<span class="number">0</span> &amp;&amp; qu\[j\].ans\[k\]==<span class="number">1</span>) &#123;</span><br><span class="line">					qu\[j\].wrongNum\[k\]++;</span><br><span class="line">					<span class="keyword">if</span>(qu\[j\].wrongNum\[k\]&gt;maxWrongNum) &#123;</span><br><span class="line">						maxWrongNum = qu\[j\].wrongNum\[k\];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">else</span> <span class="keyword">if</span>(tmpAns\[k\]==<span class="number">1</span> &amp;&amp; qu\[j\].ans\[k\]==<span class="number">0</span>) &#123;</span><br><span class="line">					qu\[j\].wrongNum\[k\]++;</span><br><span class="line">					flag = <span class="literal">false</span>;</span><br><span class="line">					<span class="keyword">if</span>(qu\[j\].wrongNum\[k\]&gt;maxWrongNum) &#123;</span><br><span class="line">						maxWrongNum = qu\[j\].wrongNum\[k\];</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">//correct or semi-correct</span></span><br><span class="line">			<span class="keyword">if</span>(flag &amp;&amp; tmpCount==qu\[j\].ansCount) &#123;</span><br><span class="line">				stuScore\[i\] += qu\[j\].score;</span><br><span class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">				stuScore\[i\] += qu\[j\].score/<span class="number">2.0</span>;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			s2 = s2.substr(<span class="built_in">end</span>+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(<span class="number">1</span>)&lt;&lt;stuScore\[i\]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(maxWrongNum&gt;<span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++) &#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;LEN; k++) &#123;</span><br><span class="line">				<span class="keyword">if</span>(qu\[j\].wrongNum\[k\]==maxWrongNum) &#123;</span><br><span class="line">					<span class="built_in">cout</span>&lt;&lt;maxWrongNum&lt;&lt;<span class="string">" "</span>&lt;&lt;(j+<span class="number">1</span>)&lt;&lt;<span class="string">"-"</span>&lt;&lt;(<span class="keyword">char</span>)(k+<span class="string">'a'</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">"Too simple"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1075（乙级）</title>
    <url>/2019/03/18/pat-1075-yi-ji-1/</url>
    <content><![CDATA[<p>1075 链表元素分类 （25 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805262953594880">原文地址</a></p>
<p>给定一个单链表，请编写程序将链表元素进行分类排列，使得所有负值元素都排在非负值元素的前面，而 [0, K] 区间内的元素都排在大于 K 的元素前面。但每一类内部元素的顺序是不能改变的。例如：给定链表为 18→7→-4→0→5→-6→10→11→-2，K 为 10，则输出应该为 -4→-6→-2→7→0→5→10→18→11。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>每个输入包含一个测试用例。每个测试用例第 1 行给出：第 1 个结点的地址；结点总个数，即正整数N (≤10​5​​)；以及正整数K (≤10​3​​)。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。 接下来有 N 行，每行格式为：</p>
<pre><code>Address Data Next
</code></pre>
<p>其中 <code>Address</code> 是结点地址；<code>Data</code> 是该结点保存的数据，为 [−10​5​​,10​5​​] 区间内的整数；<code>Next</code> 是下一结点的地址。题目保证给出的链表不为空。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对每个测试用例，按链表从头到尾的顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>00100 9 10
23333 10 27777
00000 0 99999
00100 18 12309
68237 -6 23333
33218 -4 00000
48652 -2 -1
99999 5 68237
27777 11 48652
12309 7 33218
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>33218 -4 68237
68237 -6 48652
48652 -2 12309
12309 7 00000
00000 0 99999
99999 5 23333
23333 10 00100
00100 18 27777
27777 11 -1
</code></pre>
<p>代码（两个测试点通过不了的版本）：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> Address;</span><br><span class="line">    <span class="keyword">int</span> Data;</span><br><span class="line">    <span class="built_in">string</span> Next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sorted</span><span class="params">(Node nodes\[\],<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j&lt;num;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nodes\[i\].Next == nodes\[j\].Address)&#123;</span><br><span class="line">                swap(nodes\[j\],nodes\[i+<span class="number">1</span>\]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Node&gt; que1; <span class="comment">//小于0</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Node&gt; que2; <span class="comment">//大于等于0 小于等于K</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Node&gt; que3; <span class="comment">//大于K</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;Node&gt;::iterator pos;</span><br><span class="line">    <span class="built_in">string</span> start;</span><br><span class="line">    <span class="keyword">int</span> num,K;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;start&gt;&gt;num&gt;&gt;K;</span><br><span class="line">    Node nodes\[num\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;nodes\[i\].Address&gt;&gt;nodes\[i\].Data&gt;&gt;nodes\[i\].Next;</span><br><span class="line">        <span class="keyword">if</span>(nodes\[i\].Address == start &amp;&amp; i != <span class="number">0</span>)&#123;</span><br><span class="line">            swap(nodes\[<span class="number">0</span>\],nodes\[i\]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sorted(nodes,num);</span><br><span class="line">    <span class="comment">/*cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;num;i++)&#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;nodes\[i\].Address&lt;&lt;" "&lt;&lt;nodes\[i\].Data&lt;&lt;" "&lt;&lt;nodes\[i\].Next&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    cout&lt;&lt;endl;*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nodes\[i\].Data &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            que1.push_back(nodes\[i\]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(nodes\[i\].Data &gt;= <span class="number">0</span> &amp;&amp; nodes\[i\].Data &lt;= K)&#123;</span><br><span class="line">            que2.push_back(nodes\[i\]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            que3.push_back(nodes\[i\]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!que1.empty())&#123;</span><br><span class="line">        <span class="keyword">for</span>(pos=que1.<span class="built_in">begin</span>();pos != que1.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pos != que1.<span class="built_in">end</span>()<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;(\*pos).Address&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos).Data&lt;&lt;<span class="string">" "</span>&lt;&lt;(*(pos+<span class="number">1</span>)).Address&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;(\*pos).Address&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos).Data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!que2.empty())&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(*que2.<span class="built_in">begin</span>()).Address&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!que3.empty())&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(*que3.<span class="built_in">begin</span>()).Address&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!que2.empty())&#123;</span><br><span class="line">        <span class="keyword">for</span>(pos=que2.<span class="built_in">begin</span>();pos != que2.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pos != que2.<span class="built_in">end</span>()<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;(\*pos).Address&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos).Data&lt;&lt;<span class="string">" "</span>&lt;&lt;(*(pos+<span class="number">1</span>)).Address&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;(\*pos).Address&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos).Data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!que3.empty())&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(*que3.<span class="built_in">begin</span>()).Address&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!que3.empty())&#123;</span><br><span class="line">        <span class="keyword">for</span>(pos=que3.<span class="built_in">begin</span>();pos != que3.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(pos != que3.<span class="built_in">end</span>()<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;(\*pos).Address&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos).Data&lt;&lt;<span class="string">" "</span>&lt;&lt;(*(pos+<span class="number">1</span>)).Address&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;(\*pos).Address&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos).Data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"-1"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>改正后版本：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">#<span class="keyword">include</span> &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const <span class="built_in">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span> st, N, K;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Node&#123;</span><br><span class="line">    <span class="built_in">int</span> address;</span><br><span class="line">    <span class="built_in">int</span> <span class="keyword">val</span>;</span><br><span class="line">    <span class="built_in">int</span> nx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Node n;</span><br><span class="line">vector&lt;Node&gt; l;</span><br><span class="line">vector&lt;Node&gt; ans;</span><br><span class="line">Node add\<span class="literal">[<span class="identifier">maxn</span>\]</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main<span class="literal">()</span> &#123;</span><br><span class="line">    scanf(<span class="string">"%d%d%d"</span>, &amp;st, &amp;N, &amp;K);</span><br><span class="line">    for(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; N; i ++) &#123;</span><br><span class="line">        scanf(<span class="string">"%d%d%d"</span>, &amp;n.address, &amp;n.<span class="keyword">val</span>, &amp;n.nx);</span><br><span class="line">        add\<span class="literal">[<span class="identifier">n</span>.<span class="identifier">address</span>\]</span> = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> first = st;</span><br><span class="line">    <span class="keyword">while</span>(first != -<span class="number">1</span>) &#123;</span><br><span class="line">        l.push<span class="constructor">_back(<span class="params">add</span>\[<span class="params">first</span>\])</span>;</span><br><span class="line">        first = add\<span class="literal">[<span class="identifier">first</span>\]</span>.nx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> sz = l.size<span class="literal">()</span>;</span><br><span class="line">    for(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sz; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l\<span class="literal">[<span class="identifier">i</span>\]</span>.<span class="keyword">val</span> &lt; <span class="number">0</span>)</span><br><span class="line">            ans.push<span class="constructor">_back(<span class="params">l</span>\[<span class="params">i</span>\])</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    for(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sz; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l\<span class="literal">[<span class="identifier">i</span>\]</span>.<span class="keyword">val</span> &gt;= <span class="number">0</span><span class="operator"> &amp;&amp; </span>l\<span class="literal">[<span class="identifier">i</span>\]</span>.<span class="keyword">val</span> &lt;= K)</span><br><span class="line">            ans.push<span class="constructor">_back(<span class="params">l</span>\[<span class="params">i</span>\])</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    for(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sz; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(l\<span class="literal">[<span class="identifier">i</span>\]</span>.<span class="keyword">val</span> &gt; K)</span><br><span class="line">            ans.push<span class="constructor">_back(<span class="params">l</span>\[<span class="params">i</span>\])</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; sz; i ++) &#123;</span><br><span class="line">        ans\<span class="literal">[<span class="identifier">i</span>\]</span>.nx = ans\<span class="literal">[<span class="identifier">i</span> + <span class="number">1</span>\]</span>.address;</span><br><span class="line">        <span class="keyword">if</span>(i != sz - <span class="number">1</span>)</span><br><span class="line">            printf(<span class="string">"%05d %d %05d\\n"</span>, ans\<span class="literal">[<span class="identifier">i</span>\]</span>.address, ans\<span class="literal">[<span class="identifier">i</span>\]</span>.<span class="keyword">val</span>, ans\<span class="literal">[<span class="identifier">i</span>\]</span>.nx);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            printf(<span class="string">"%05d %d -1\\n"</span>, ans\<span class="literal">[<span class="identifier">i</span>\]</span>.address, ans\<span class="literal">[<span class="identifier">i</span>\]</span>.<span class="keyword">val</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1077（乙级）</title>
    <url>/2019/03/18/pat-1077-yi-ji-1/</url>
    <content><![CDATA[<p>1077 互评成绩计算 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805262303477760">原文地址</a></p>
<p>在浙大的计算机专业课中，经常有互评分组报告这个环节。一个组上台介绍自己的工作，其他组在台下为其表现评分。最后这个组的互评成绩是这样计算的：所有其他组的评分中，去掉一个最高分和一个最低分，剩下的分数取平均分记为 G​1​​；老师给这个组的评分记为 G​2​​。该组得分为 (G​1​​+G​2​​)/2，最后结果四舍五入后保留整数分。本题就要求你写个程序帮助老师计算每个组的互评成绩。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出两个正整数 N（&gt; 3）和 M，分别是分组数和满分，均不超过 100。随后 N 行，每行给出该组得到的 N 个分数（均保证为整型范围内的整数），其中第 1 个是老师给出的评分，后面 N−1个是其他组给的评分。合法的输入应该是 [0,M] 区间内的整数，若不在合法区间内，则该分数须被忽略。题目保证老师的评分都是合法的，并且每个组至少会有 3 个来自同学的合法评分。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>为每个组输出其最终得分。每个得分占一行。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>6 50
42 49 49 35 38 41
36 51 50 28 -1 30
40 36 41 33 47 49
30 250 -25 27 45 31
48 0 0 50 50 1234
43 41 36 29 42 29
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>42
33
41
31
37
39
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num,M;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num&gt;&gt;M;</span><br><span class="line">    <span class="keyword">int</span> grade\[num\]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> g1=<span class="number">0</span>,g2=<span class="number">0</span>,tt=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rate;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;g2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">            <span class="keyword">if</span>(temp&gt;=<span class="number">0</span> &amp;&amp; temp&lt;=M)&#123;</span><br><span class="line">                rate.push_back(temp);</span><br><span class="line">                tt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(rate.<span class="built_in">begin</span>(),rate.<span class="built_in">end</span>(),cmp);</span><br><span class="line">        <span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">1</span>;m&lt;tt<span class="number">-1</span>;m++)&#123;</span><br><span class="line">            sum += rate\[m\];</span><br><span class="line">        &#125;</span><br><span class="line">        g1 = round(((sum/(tt<span class="number">-2</span>)) + g2)/<span class="number">2</span>);</span><br><span class="line">        grade\[i\] = g1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;grade\[i\]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1076（乙级）</title>
    <url>/2019/03/18/pat-1076-yi-ji-1/</url>
    <content><![CDATA[<p>1076 Wifi密码 （15 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805262622244864">原文地址</a></p>
<p>下面是微博上流传的一张照片：“各位亲爱的同学们，鉴于大家有时需要使用 wifi，又怕耽误亲们的学习，现将 wifi 密码设置为下列数学题答案：A-1；B-2；C-3；D-4；请同学们自己作答，每两日一换。谢谢合作！！~”—— 老师们为了促进学生学习也是拼了…… 本题就要求你写程序把一系列题目的答案按照卷子上给出的对应关系翻译成 wifi 的密码。这里简单假设每道选择题都有 4 个选项，有且只有 1 个正确答案。 <img src="https://images.ptausercontent.com/7e56be3f-caba-45f1-b9cb-38a96d44de76.jpg" alt="wifi.jpg"></p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出一个正整数 N（≤ 100），随后 N 行，每行按照 <code>编号-答案</code> 的格式给出一道题的 4 个选项，<code>T</code> 表示正确选项，<code>F</code> 表示错误选项。选项间用空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出 wifi 密码。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>8
A-T B-F C-F D-F
C-T B-F A-F D-F
A-F D-F C-F B-T
B-T A-F C-F D-F
B-F D-T A-F C-F
A-T C-F B-F D-F
D-T B-F C-F A-F
C-T A-F B-F D-F
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>13224143
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">char</span>&gt; dir;</span><br><span class="line">    dir\[<span class="string">'A'</span>\] = <span class="string">'1'</span>; dir\[<span class="string">'B'</span>\] = <span class="string">'2'</span>; dir\[<span class="string">'C'</span>\] = <span class="string">'3'</span>; dir\[<span class="string">'D'</span>\] = <span class="string">'4'</span>;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="built_in">string</span> wifi_password=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)&#123;</span><br><span class="line">            <span class="built_in">string</span> temp;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">            <span class="keyword">if</span>(temp\[<span class="number">2</span>\] == <span class="string">'T'</span>)&#123;</span><br><span class="line">                wifi_password += dir\[temp\[<span class="number">0</span>\]\];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;wifi_password&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1074（乙级）</title>
    <url>/2019/03/18/pat-1074-yi-ji-1/</url>
    <content><![CDATA[<p>1074 宇宙无敌加法器 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805263297527808">原文地址</a></p>
<p>地球人习惯使用十进制数，并且默认一个数字的每一位都是十进制的。而在 PAT 星人开挂的世界里，每个数字的每一位都是不同进制的，这种神奇的数字称为“PAT数”。每个 PAT 星人都必须熟记各位数字的进制表，例如“……0527”就表示最低位是 7 进制数、第 2 位是 2 进制数、第 3 位是 5 进制数、第 4 位是 10 进制数，等等。每一位的进制 d 或者是 0（表示十进制）、或者是 [2，9] 区间内的整数。理论上这个进制表应该包含无穷多位数字，但从实际应用出发，PAT 星人通常只需要记住前 20 位就够用了，以后各位默认为 10 进制。 在这样的数字系统中，即使是简单的加法运算也变得不简单。例如对应进制表“0527”，该如何计算“6203 + 415”呢？我们得首先计算最低位：3 + 5 = 8；因为最低位是 7 进制的，所以我们得到 1 和 1 个进位。第 2 位是：0 + 1 + 1（进位）= 2；因为此位是 2 进制的，所以我们得到 0 和 1 个进位。第 3 位是：2 + 4 + 1（进位）= 7；因为此位是 5 进制的，所以我们得到 2 和 1 个进位。第 4 位是：6 + 1（进位）= 7；因为此位是 10 进制的，所以我们就得到 7。最后我们得到：6203 + 415 = 7201。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入首先在第一行给出一个 N 位的进制表（0 &lt; N ≤ 20），以回车结束。 随后两行，每行给出一个不超过 N 位的非负的 PAT 数。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出两个 PAT 数之和。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>30527
06203
415
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>7201
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> pat,num1,num2,result=<span class="string">""</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;pat&gt;&gt;num1&gt;&gt;num2;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    num = pat.length() - num1.length();</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">tt</span><span class="params">(num,<span class="string">'0'</span>)</span></span>;</span><br><span class="line">    num1 = tt + num1;</span><br><span class="line">    num = pat.length() - num2.length();</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">tt1</span><span class="params">(num,<span class="string">'0'</span>)</span></span>;</span><br><span class="line">    num2 = tt1 + num2;</span><br><span class="line">    reverse(pat.<span class="built_in">begin</span>(),pat.<span class="built_in">end</span>());</span><br><span class="line">    reverse(num1.<span class="built_in">begin</span>(),num1.<span class="built_in">end</span>());</span><br><span class="line">    reverse(num2.<span class="built_in">begin</span>(),num2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>; <span class="comment">//进位标志</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num1.length();i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> jinzhi;</span><br><span class="line">        <span class="keyword">if</span>(pat\[i\] == <span class="string">'d'</span>)&#123;</span><br><span class="line">            jinzhi = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            jinzhi = pat\[i\] - <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> t1,t2;</span><br><span class="line">        t1 = num1\[i\] - <span class="string">'0'</span>;</span><br><span class="line">        t2 = num2\[i\] - <span class="string">'0'</span>;</span><br><span class="line">        <span class="keyword">if</span>(jinzhi == <span class="number">0</span>)&#123;</span><br><span class="line">            jinzhi = <span class="number">10</span>;</span><br><span class="line">            result += (((t1+t2+flag)%jinzhi) + <span class="string">'0'</span>);</span><br><span class="line">            flag = (t1+t2+flag)/jinzhi;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            result += (((t1+t2+flag)%jinzhi) + <span class="string">'0'</span>);</span><br><span class="line">            flag = (t1+t2+flag)/jinzhi;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag != <span class="number">0</span>)&#123;</span><br><span class="line">        result += (flag + <span class="string">'0'</span>); <span class="comment">//特别处理如果大于进制表的位数 则对进位的数据按照十进制来添加到头</span></span><br><span class="line">    &#125;</span><br><span class="line">    reverse(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span>(result.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>) == <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;result.substr(result.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>),result.length())&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1080（乙级）</title>
    <url>/2019/03/18/pat-1080-yi-ji-1/</url>
    <content><![CDATA[<p>1080 MOOC期终成绩 （25 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805261493977088">原文地址</a></p>
<p>对于在中国大学MOOC（<a href="http://www.icourse163.org/">http://www.icourse163.org/</a> ）学习“数据结构”课程的学生，想要获得一张合格证书，必须首先获得不少于200分的在线编程作业分，然后总评获得不少于60分（满分100）。总评成绩的计算公式为 G=(G​mid−term​​×40%+G​final​​×60%)，如果 G​mid−term​​&gt;G​final​​；否则总评 G 就是 G​final​​。这里 G​mid−term​​ 和 G​final​​ 分别为学生的期中和期末成绩。 现在的问题是，每次考试都产生一张独立的成绩单。本题就请你编写程序，把不同的成绩单合为一张。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第一行给出3个整数，分别是 P（做了在线编程作业的学生数）、M（参加了期中考试的学生数）、N（参加了期末考试的学生数）。每个数都不超过10000。 接下来有三块输入。第一块包含 P 个在线编程成绩 G​p​​；第二块包含 M 个期中考试成绩 G​mid−term​​；第三块包含 N 个期末考试成绩 G​final​​。每个成绩占一行，格式为：<code>学生学号 分数</code>。其中<code>学生学号</code>为不超过20个字符的英文字母和数字；<code>分数</code>是非负整数（编程总分最高为900分，期中和期末的最高分为100分）。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>打印出获得合格证书的学生名单。每个学生占一行，格式为： <code>学生学号</code> G​p​​ G​mid−term​​ G​final​​ G 如果有的成绩不存在（例如某人没参加期中考试），则在相应的位置输出“−1”。输出顺序为按照总评分数（四舍五入精确到整数）递减。若有并列，则按学号递增。题目保证学号没有重复，且至少存在1个合格的学生。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>6 6 7
01234 880
a1903 199
ydjh2 200
wehu8 300
dx86w 220
missing 400
ydhfu77 99
wehu8 55
ydjh2 98
dx86w 88
a1903 86
01234 39
ydhfu77 88
a1903 66
01234 58
wehu8 84
ydjh2 82
missing 99
dx86w 81
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>missing 400 -1 99 99
ydjh2 200 98 82 88
dx86w 220 88 81 84
wehu8 300 55 84 84
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> P;</span><br><span class="line">    <span class="keyword">int</span> Gm;</span><br><span class="line">    <span class="keyword">int</span> Gf;</span><br><span class="line">    <span class="keyword">int</span> G;</span><br><span class="line">    Student();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//结构体设置初值</span></span><br><span class="line">Student::Student()&#123;</span><br><span class="line">    P = <span class="number">-1</span>;</span><br><span class="line">    Gm = <span class="number">-1</span>;</span><br><span class="line">    Gf = <span class="number">-1</span>;</span><br><span class="line">    G = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> P1;</span><br><span class="line">    <span class="keyword">int</span> Gm1;</span><br><span class="line">    <span class="keyword">int</span> Gf1;</span><br><span class="line">    <span class="keyword">int</span> G1;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node t1,Node t2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t1.G1 == t2.G1)&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.name &lt; t2.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t1.G1 &gt; t2.G1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,Student&gt; studentList;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,Student&gt;::iterator pos;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Node&gt; list1;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Node&gt;::iterator pos1;</span><br><span class="line">    <span class="keyword">int</span> P,M,N;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;P&gt;&gt;M&gt;&gt;N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;P;i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> temp;</span><br><span class="line">        <span class="keyword">int</span> grade;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp&gt;&gt;grade;</span><br><span class="line">        studentList\[temp\].P = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> temp;</span><br><span class="line">        <span class="keyword">int</span> grade;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp&gt;&gt;grade;</span><br><span class="line">        studentList\[temp\].Gm = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> temp;</span><br><span class="line">        <span class="keyword">int</span> grade;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp&gt;&gt;grade;</span><br><span class="line">        studentList\[temp\].Gf = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(pos = studentList.<span class="built_in">begin</span>();pos!=studentList.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pos-&gt;second.Gm &gt; pos-&gt;second.Gf)&#123;</span><br><span class="line">            pos-&gt;second.G = round((<span class="keyword">float</span>)(pos-&gt;second.Gm * <span class="number">0.4</span> + pos-&gt;second.Gf * <span class="number">0.6</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            pos-&gt;second.G = pos-&gt;second.Gf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pos-&gt;second.P &gt;= <span class="number">200</span> &amp;&amp; pos-&gt;second.G &gt;= <span class="number">60</span>)&#123;</span><br><span class="line">            Node nodes = &#123;pos-&gt;first,pos-&gt;second.P,pos-&gt;second.Gm,pos-&gt;second.Gf,pos-&gt;second.G&#125;;</span><br><span class="line">            list1.push_back(nodes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;pos-&gt;first&lt;&lt;" "&lt;&lt;pos-&gt;second.P&lt;&lt;" "&lt;&lt;pos-&gt;second.Gm&lt;&lt;" "&lt;&lt;pos-&gt;second.Gf&lt;&lt;" "&lt;&lt;pos-&gt;second.G&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    sort(list1.<span class="built_in">begin</span>(),list1.<span class="built_in">end</span>(),cmp);</span><br><span class="line">    <span class="keyword">for</span>(pos1 = list1.<span class="built_in">begin</span>();pos1!= list1.<span class="built_in">end</span>();pos1++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;(\*pos1).name&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos1).P1&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos1).Gm1&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos1).Gf1&lt;&lt;<span class="string">" "</span>&lt;&lt;(*pos1).G1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1083（乙级）</title>
    <url>/2019/03/18/pat-1083-yi-ji-1/</url>
    <content><![CDATA[<p>1083 是否存在相等的差 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805260780945408">原文地址</a></p>
<p>给定 N 张卡片，正面分别写上 1、2、……、N，然后全部翻面，洗牌，在背面分别写上 1、2、……、N。将每张牌的正反两面数字相减（大减小），得到 N 个非负差值，其中是否存在相等的差？</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出一个正整数 N（2 ≤ N ≤ 10 000），随后一行给出 1 到 N 的一个洗牌后的排列，第 i 个数表示正面写了 i 的那张卡片背面的数字。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>按照“差值 重复次数”的格式从大到小输出重复的差值及其重复的次数，每行输出一个结果。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>8
3 5 8 6 2 1 4 7
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>5 2
3 3
2 2
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> t1;</span><br><span class="line">    <span class="keyword">int</span> t2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a,Node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.t1 &gt; b.t1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; dir;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;::iterator pos;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Node&gt; dir_vec;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Node&gt;::iterator pos1;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> cha,temp;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">        <span class="keyword">if</span>(temp &gt; i+<span class="number">1</span>)&#123;</span><br><span class="line">            cha = temp - (i+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cha = (i+<span class="number">1</span>) - temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dir.count(cha) == <span class="number">0</span>)&#123;</span><br><span class="line">            dir\[cha\] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            dir\[cha\] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(pos=dir.<span class="built_in">begin</span>();pos!=dir.<span class="built_in">end</span>();pos++)&#123;</span><br><span class="line">        Node node = &#123;(\*pos).first,(\*pos).second&#125;;</span><br><span class="line">        <span class="keyword">if</span>((*pos).second &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            dir\_vec.push\_back(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dir_vec.empty())&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">       sort(dir\_vec.<span class="built_in">begin</span>(),dir\_vec.<span class="built_in">end</span>(),cmp);</span><br><span class="line">        <span class="keyword">for</span>(pos1 = dir\_vec.<span class="built_in">begin</span>();pos1!=dir\_vec.<span class="built_in">end</span>();pos1++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(\*pos1).t1&lt;&lt;<span class="string">" "</span>&lt;&lt;(\*pos1).t2&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1078（乙级）</title>
    <url>/2019/03/18/pat-1078-yi-ji-1/</url>
    <content><![CDATA[<p>1078 字符串压缩与解压 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805262018265088">原文地址</a></p>
<p>文本压缩有很多种方法，这里我们只考虑最简单的一种：把由相同字符组成的一个连续的片段用这个字符和片段中含有这个字符的个数来表示。例如 <code>ccccc</code> 就用 <code>5c</code> 来表示。如果字符没有重复，就原样输出。例如 <code>aba</code> 压缩后仍然是 <code>aba</code>。 解压方法就是反过来，把形如 <code>5c</code> 这样的表示恢复为 <code>ccccc</code>。 本题需要你根据压缩或解压的要求，对给定字符串进行处理。这里我们简单地假设原始字符串是完全由英文字母和空格组成的非空字符串。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出一个字符，如果是 <code>C</code> 就表示下面的字符串需要被压缩；如果是 <code>D</code> 就表示下面的字符串需要被解压。第二行给出需要被压缩或解压的不超过 1000 个字符的字符串，以回车结尾。题目保证字符重复个数在整型范围内，且输出文件不超过 1MB。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>根据要求压缩或解压字符串，并在一行中输出结果。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>C
TTTTThhiiiis isssss a   tesssst CAaaa as
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>5T2h4is i5s a3 te4st CA3a as
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>D
5T2h4is i5s a3 te4st CA3a as10Z
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>TTTTThhiiiis isssss a   tesssst CAaaa asZZZZZZZZZZ
</code></pre>
<p>代码：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"><span class="meta">#include&lt;string.h&gt;</span></span><br><span class="line"><span class="meta">#include&lt;math.h&gt;</span></span><br><span class="line"><span class="meta">#include&lt;algorithm&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> namespace std;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> strToNum(string s1)&#123;</span><br><span class="line">    <span class="type">int</span> len = s1.length();</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    reverse(s1.<span class="keyword">begin</span>(),s1.<span class="keyword">end</span>());</span><br><span class="line">    <span class="keyword">while</span>(len &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        num += (s1\[len<span class="number">-1</span>\] - <span class="string">'0'</span>)*round(pow(<span class="number">10</span>,len<span class="number">-1</span>));</span><br><span class="line">        len<span class="comment">--;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main()&#123;</span><br><span class="line">    <span class="type">char</span> tt;</span><br><span class="line">    cin&gt;&gt;tt;</span><br><span class="line">    string s1="";</span><br><span class="line">    cin.<span class="keyword">get</span>();</span><br><span class="line">    <span class="keyword">if</span>(tt == <span class="string">'C'</span>)&#123;</span><br><span class="line">        getline(cin,s1);</span><br><span class="line">        <span class="type">int</span> <span class="keyword">index</span> = <span class="number">0</span>,num = <span class="number">1</span>;</span><br><span class="line">        <span class="type">char</span> <span class="keyword">temp</span> = s1\[<span class="keyword">index</span>++\];</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">index</span> &lt;= s1.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">temp</span> == s1\[<span class="keyword">index</span>\])&#123;</span><br><span class="line">                num++;</span><br><span class="line">                <span class="keyword">index</span>++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">temp</span> != s1\[<span class="keyword">index</span>\])&#123;</span><br><span class="line">                <span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line">                    cout&lt;&lt;<span class="keyword">temp</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cout&lt;&lt;num&lt;&lt;<span class="keyword">temp</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">temp</span> = s1\[<span class="keyword">index</span>++\];</span><br><span class="line">                num = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(tt == <span class="string">'D'</span>)&#123;</span><br><span class="line">        getline(cin,s1);</span><br><span class="line">        <span class="type">int</span> <span class="keyword">index</span> = <span class="number">0</span>,num = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> <span class="keyword">temp</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">index</span> &lt; s1.length())&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1\[<span class="keyword">index</span>\] &gt;= <span class="string">'0'</span> &amp;&amp; s1\[<span class="keyword">index</span>\] &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line">                string t = "";</span><br><span class="line">                t += s1\[<span class="keyword">index</span>++\];</span><br><span class="line">                <span class="keyword">while</span>(s1\[<span class="keyword">index</span>\] &gt;= <span class="string">'0'</span> &amp;&amp; s1\[<span class="keyword">index</span>\] &lt;= <span class="string">'9'</span>)&#123;</span><br><span class="line">                    t += s1\[<span class="keyword">index</span>++\];</span><br><span class="line">                &#125;</span><br><span class="line">                num = strToNum(t);</span><br><span class="line">                <span class="keyword">temp</span> =  s1\[<span class="keyword">index</span>++\];</span><br><span class="line">                string s2(num,<span class="keyword">temp</span>);</span><br><span class="line">                cout&lt;&lt;s2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;s1\[<span class="keyword">index</span>++\];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1082（乙级）</title>
    <url>/2019/03/18/pat-1082-yi-ji-1/</url>
    <content><![CDATA[<p>1082 射击比赛 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805260990660608">原文地址</a></p>
<p>本题目给出的射击比赛的规则非常简单，谁打的弹洞距离靶心最近，谁就是冠军；谁差得最远，谁就是菜鸟。本题给出一系列弹洞的平面坐标(x,y)，请你编写程序找出冠军和菜鸟。我们假设靶心在原点(0,0)。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第一行中给出一个正整数 N（≤ 10 000）。随后 N 行，每行按下列格式给出：</p>
<pre><code>ID x y
</code></pre>
<p>其中 <code>ID</code> 是运动员的编号（由 4 位数字组成）；<code>x</code> 和 <code>y</code> 是其打出的弹洞的平面坐标(<code>x</code>,<code>y</code>)，均为整数，且 0 ≤ |<code>x</code>|, |<code>y</code>| ≤ 100。题目保证每个运动员的编号不重复，且每人只打 1 枪。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>输出冠军和菜鸟的编号，中间空 1 格。题目保证他们是唯一的。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>3
0001 5 7
1020 -1 3
0233 0 -1
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>0233 0001
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Player</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">float</span> distance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Player a,Player b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.distance &gt; b.distance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    Player players\[num\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> s1;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s1;</span><br><span class="line">        <span class="keyword">float</span> t1,t2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t1&gt;&gt;t2;</span><br><span class="line">        <span class="keyword">float</span> ds = <span class="built_in">sqrt</span>(t1\*t1 + t2\*t2);</span><br><span class="line">        players\[i\].name = s1;</span><br><span class="line">        players\[i\].distance = ds;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(players,players+num,cmp);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;players\[num<span class="number">-1</span>\].name&lt;&lt;<span class="string">" "</span>&lt;&lt;players\[<span class="number">0</span>\].name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1079（乙级）</title>
    <url>/2019/03/18/pat-1079-yi-ji-1/</url>
    <content><![CDATA[<p>1079 延迟的回文数 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805261754023936">原文地址</a></p>
<p>给定一个 k+1 位的正整数 N，写成 a​k​​⋯a​1​​a​0​​ 的形式，其中对所有 i 有 0≤a​i​​&lt;10 且 a​k​​&gt;0。N 被称为一个<strong>回文数</strong>，当且仅当对所有 i 有 a​i​​=a​k−i​​。零也被定义为一个回文数。 非回文数也可以通过一系列操作变出回文数。首先将该数字逆转，再将逆转数与该数相加，如果和还不是一个回文数，就重复这个逆转再相加的操作，直到一个回文数出现。如果一个非回文数可以变出回文数，就称这个数为<strong>延迟的回文数</strong>。（定义翻译自 <a href="https://en.wikipedia.org/wiki/Palindromic_number">https://en.wikipedia.org/wiki/Palindromic_number</a> ） 给定任意一个正整数，本题要求你找到其变出的那个回文数。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中给出一个不超过1000位的正整数。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对给定的整数，一行一行输出其变出回文数的过程。每行格式如下</p>
<pre><code>A + B = C
</code></pre>
<p>其中 <code>A</code> 是原始的数字，<code>B</code> 是 <code>A</code> 的逆转数，<code>C</code> 是它们的和。<code>A</code> 从输入的整数开始。重复操作直到 <code>C</code> 在 10 步以内变成回文数，这时在一行中输出 <code>C is a palindromic number.</code>；或者如果 10 步都没能得到回文数，最后就在一行中输出 <code>Not found in 10 iterations.</code>。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>97152
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>97152 + 25179 = 122331
122331 + 133221 = 255552
255552 is a palindromic number.
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>196
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>196 + 691 = 887
887 + 788 = 1675
1675 + 5761 = 7436
7436 + 6347 = 13783
13783 + 38731 = 52514
52514 + 41525 = 94039
94039 + 93049 = 187088
187088 + 880781 = 1067869
1067869 + 9687601 = 10755470
10755470 + 07455701 = 18211171
Not found in 10 iterations.
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//这里采用大数加法 如果使用普通的加法的话 会出现超过范围的数值无法解决</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">BigNumberAdd</span><span class="params">(<span class="built_in">string</span> s1,<span class="built_in">string</span> s2)</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">result</span><span class="params">(<span class="number">10000</span>,<span class="string">'0'</span>)</span></span>;</span><br><span class="line">    reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">    reverse(s2.<span class="built_in">begin</span>(),s2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        result\[i\] = s1\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s2.length();i++)&#123;</span><br><span class="line">        temp += (result\[i\]-<span class="string">'0'</span> + s2\[i\] -<span class="string">'0'</span>);</span><br><span class="line">        result\[i\] = temp%<span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">        temp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    result\[s2.length()\] = (result\[s2.length()\]-<span class="string">'0'</span>) + temp + <span class="string">'0'</span>;</span><br><span class="line">    reverse(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> result.substr(result.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsPalindromic_Number</span><span class="params">(<span class="built_in">string</span> s1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(s1 == <span class="string">"0"</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length()/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1\[i\] != s1\[s1.length() - i <span class="number">-1</span>\])&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> number;</span><br><span class="line">    <span class="keyword">int</span> iter = <span class="number">0</span>; <span class="comment">//计数器</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;number;</span><br><span class="line">    <span class="keyword">if</span>(IsPalindromic_Number(number))&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;number&lt;&lt;<span class="string">" is a palindromic number."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!IsPalindromic_Number(number) &amp;&amp; iter &lt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="built_in">string</span> t1 = number;</span><br><span class="line">            reverse(t1.<span class="built_in">begin</span>(),t1.<span class="built_in">end</span>());</span><br><span class="line">            <span class="built_in">string</span> temp = BigNumberAdd(number,t1);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;number&lt;&lt;<span class="string">" + "</span>&lt;&lt;t1&lt;&lt;<span class="string">" = "</span>&lt;&lt;temp&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            number = temp;</span><br><span class="line">            iter++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(iter == <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Not found in 10 iterations."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;number&lt;&lt;<span class="string">" is a palindromic number."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1081（乙级）</title>
    <url>/2019/03/18/pat-1081-yi-ji-1/</url>
    <content><![CDATA[<p>1081 检查密码 （15 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805261217153024">原文地址</a></p>
<p>本题要求你帮助某网站的用户注册模块写一个密码合法性检查的小功能。该网站要求用户设置的密码必须由不少于6个字符组成，并且只能有英文字母、数字和小数点 <code>.</code>，还必须既有字母也有数字。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出一个正整数 N（≤ 100），随后 N 行，每行给出一个用户设置的密码，为不超过 80 个字符的非空字符串，以回车结束。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对每个用户的密码，在一行中输出系统反馈信息，分以下5种：</p>
<ul>
<li>如果密码合法，输出<code>Your password is wan mei.</code>；</li>
<li>如果密码太短，不论合法与否，都输出<code>Your password is tai duan le.</code>；</li>
<li>如果密码长度合法，但存在不合法字符，则输出<code>Your password is tai luan le.</code>；</li>
<li>如果密码长度合法，但只有字母没有数字，则输出<code>Your password needs shu zi.</code>；</li>
<li>如果密码长度合法，但只有数字没有字母，则输出<code>Your password needs zi mu.</code>。</li>
</ul>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>5
123s
zheshi.wodepw
1234.5678
WanMei23333
pass*word.6
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>Your password is tai duan le.
Your password needs shu zi.
Your password needs zi mu.
Your password is wan mei.
Your password is tai luan le.
</code></pre>
<p>代码（不通过的版本）：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//废弃版本 花费太多时间了 时间复杂度不符合要求</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//判断是否含有非法字符</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsIllegal</span><span class="params">(<span class="built_in">string</span> s1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((s1\[i\] &gt;= <span class="string">'0'</span> &amp;&amp; s1\[i\] &lt;= <span class="string">'9'</span>) || (s1\[i\] &gt;= <span class="string">'A'</span> &amp;&amp; s1\[i\] &lt;= <span class="string">'Z'</span>) || (s1\[i\] &gt;= <span class="string">'a'</span> &amp;&amp; s1\[i\] &lt;= <span class="string">'z'</span>) || (s1\[i\] == <span class="string">'.'</span>))&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否含有数字</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsHaveNumber</span><span class="params">(<span class="built_in">string</span> s1)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">char</span> t = (i+<span class="string">'0'</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>(),s1.<span class="built_in">begin</span>(),t)==<span class="built_in">string</span>::npos)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> s1;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;s1;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(s1.length() &lt; <span class="number">6</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Your password is tai duan le."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!IsIllegal(s1))&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Your password is tai duan le."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(IsHaveNumber(s1)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Your password needs zi mu."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改后的版本：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n; getchar();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">string</span> s;</span><br><span class="line">        getline(<span class="built_in">cin</span>, s);</span><br><span class="line">        <span class="keyword">if</span> (s.length() &gt;= <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> invalid = <span class="number">0</span>, hasAlpha = <span class="number">0</span>, hasNum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s\[j\] != <span class="string">'.'</span> &amp;&amp; !<span class="built_in">isalnum</span>(s\[j\])) invalid = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isalpha</span>(s\[j\])) hasAlpha = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s\[j\])) hasNum = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (invalid == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Your password is tai luan le.\\n"</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (hasNum == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Your password needs shu zi.\\n"</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (hasAlpha == <span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Your password needs zi mu.\\n"</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Your password is wan mei.\\n"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Your password is tai duan le.\\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1085（乙级）</title>
    <url>/2019/03/18/pat-1085-yi-ji-1/</url>
    <content><![CDATA[<p>1085 PAT单位排行 （25 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805260353126400">原文地址</a></p>
<p>每次 PAT 考试结束后，考试中心都会发布一个考生单位排行榜。本题就请你实现这个功能。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出一个正整数 N（≤10​5​​），即考生人数。随后 N 行，每行按下列格式给出一个考生的信息：</p>
<pre><code>准考证号 得分 学校
</code></pre>
<p>其中<code>准考证号</code>是由 6 个字符组成的字符串，其首字母表示考试的级别：<code>B</code>代表乙级，<code>A</code>代表甲级，<code>T</code>代表顶级；<code>得分</code>是 [0, 100] 区间内的整数；<code>学校</code>是由不超过 6 个英文字母组成的单位码（大小写无关）。注意：题目保证每个考生的准考证号是不同的。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>首先在一行中输出单位个数。随后按以下格式非降序输出单位的排行榜：</p>
<pre><code>排名 学校 加权总分 考生人数
</code></pre>
<p>其中<code>排名</code>是该单位的排名（从 1 开始）；<code>学校</code>是全部按小写字母输出的单位码；<code>加权总分</code>定义为<code>乙级总分/1.5 + 甲级总分 + 顶级总分*1.5</code>的<strong>整数部分</strong>；<code>考生人数</code>是该属于单位的考生的总人数。 学校首先按加权总分排行。如有并列，则应对应相同的排名，并按考生人数升序输出。如果仍然并列，则按单位码的字典序输出。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>10
A57908 85 Au
B57908 54 LanX
A37487 60 au
T28374 67 CMU
T32486 24 hypu
A66734 92 cmu
B76378 71 AU
A47780 45 lanx
A72809 100 pku
A03274 45 hypu
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>5
1 cmu 192 2
1 au 192 3
3 pku 100 1
4 hypu 81 2
4 lanx 81 2
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">school</span> &#123;</span></span><br><span class="line">	<span class="built_in">string</span> id;   <span class="comment">//再次存入id方便后来从map转入set</span></span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; mark;    <span class="comment">//这里用map记录各级比赛的成绩</span></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>, sum = <span class="number">0</span>;   <span class="comment">//num记录该校人数，sum为总分</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> &#123;</span>         <span class="comment">//自定义set的比较方式</span></span><br><span class="line">	<span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> school&amp;a, <span class="keyword">const</span> school &amp;b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (a.sum == b.sum) &#123;</span><br><span class="line">			<span class="keyword">if</span> (a.num == b.num)</span><br><span class="line">				<span class="keyword">return</span> a.id &lt; b.id;</span><br><span class="line">			<span class="keyword">return</span> a.num &lt; b.num;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> a.sum &gt; b.sum;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">map</span>&lt;<span class="built_in">string</span>, school&gt; k;</span><br><span class="line">	<span class="keyword">int</span> n, t, count = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">	<span class="built_in">string</span> id, name;</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;             <span class="comment">//录入数据</span></span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; id &gt;&gt; t &gt;&gt; name;</span><br><span class="line">		transform(name.<span class="built_in">begin</span>(), name.<span class="built_in">end</span>(), name.<span class="built_in">begin</span>(), ::<span class="built_in">tolower</span>);    <span class="comment">//将学校的字符化为小写</span></span><br><span class="line">		k\[name\].mark\[id\[<span class="number">0</span>\]\] += t;         <span class="comment">//记住这里的+=，因为可能存在同一学校的不同学生参加了同级比赛。</span></span><br><span class="line">		k\[name\].id = name;</span><br><span class="line">		k\[name\].num++;        <span class="comment">//该校人数计数器</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">set</span>&lt;school, cmp&gt; rk;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> it = k.<span class="built_in">begin</span>(); it != k.<span class="built_in">end</span>(); it++) &#123;    <span class="comment">//在计算总分后将结构体插到set里面</span></span><br><span class="line">		it-&gt;second.sum = (<span class="keyword">double</span>)it-&gt;second.mark\[<span class="string">'B'</span>\] / <span class="number">1.5</span> + it-&gt;second.mark\[<span class="string">'A'</span>\] + (<span class="keyword">double</span>)it-&gt;second.mark\[<span class="string">'T'</span>\] * <span class="number">1.5</span>;</span><br><span class="line">		rk.insert(it-&gt;second);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; rk.<span class="built_in">size</span>() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	school pre;    <span class="comment">//这里用前驱进行比较</span></span><br><span class="line">	<span class="keyword">auto</span> it = rk.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; count &lt;&lt; <span class="string">" "</span> &lt;&lt; it-&gt;id &lt;&lt; <span class="string">" "</span> &lt;&lt; it-&gt;sum &lt;&lt; <span class="string">" "</span> &lt;&lt; it-&gt;num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	pre = *it;</span><br><span class="line">	it++;</span><br><span class="line">	<span class="keyword">int</span> m = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (; it != rk.<span class="built_in">end</span>(); m++, it++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (it-&gt;sum != pre.sum)   <span class="comment">//当前后的得分不同时，更新count</span></span><br><span class="line">			count = m;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d %s %d %d\\n"</span>, count, it-&gt;id.c_str(), it-&gt;sum, it-&gt;num);</span><br><span class="line">		pre = *it;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1086（乙级）</title>
    <url>/2019/03/18/pat-1086-yi-ji-1/</url>
    <content><![CDATA[<p>1086 就不告诉你 （15 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/1038429065476579328">原文地址</a></p>
<p>做作业的时候，邻座的小盆友问你：“五乘以七等于多少？”你应该不失礼貌地围笑着告诉他：“五十三。”本题就要求你，对任何一对给定的正整数，倒着输出它们的乘积。 <img src="https://images.ptausercontent.com/0c3a4497-27c3-45ea-9c8e-5a1ab2df48af.jpg" alt="53.jpg"></p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第一行给出两个不超过 1000 的正整数 A 和 B，其间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中倒着输出 A 和 B 的乘积。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>5 7
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>53
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">BigNumberMult</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2,s(<span class="number">10000</span>,<span class="string">'0'</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1&gt;&gt;s2;</span><br><span class="line">    reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">    reverse(s2.<span class="built_in">begin</span>(),s2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s2.length();j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = (s1\[i\] - <span class="string">'0'</span>) * (s2\[j\] - <span class="string">'0'</span>);</span><br><span class="line">            s\[i+j+<span class="number">1</span>\] = s\[i+j+<span class="number">1</span>\] - <span class="string">'0'</span> + (s\[i+j\] - <span class="string">'0'</span> + temp) / <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">            s\[i+j\] = (s\[i+j\] - <span class="string">'0'</span> + temp) % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>) == <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.substr(s.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> result;</span><br><span class="line">    result = BigNumberMult();</span><br><span class="line">    reverse(result.<span class="built_in">begin</span>(),result.<span class="built_in">end</span>());</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;result.substr(result.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>))&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//对于 10 * 10 得到的100 要将001处理为1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1087（乙级）</title>
    <url>/2019/03/18/pat-1087-yi-ji-1/</url>
    <content><![CDATA[<p>1087 有多少不同的值 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/1038429191091781632">原文地址</a></p>
<p>当自然数 n 依次取 1、2、3、……、N 时，算式 ⌊n/2⌋+⌊n/3⌋+⌊n/5⌋ 有多少个不同的值？（注：⌊x⌋ 为取整函数，表示不超过 x 的最大自然数，即 x 的整数部分。）</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入给出一个正整数 N（2≤N≤10​4​​）。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出题面中算式取到的不同值的个数。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>2017
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>1480
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dir;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="built_in">floor</span>(<span class="keyword">float</span>(i/<span class="number">2</span>)) + <span class="built_in">floor</span>(<span class="keyword">float</span>(i/<span class="number">3</span>)) + <span class="built_in">floor</span>(<span class="keyword">float</span>(i/<span class="number">5</span>));</span><br><span class="line">        <span class="keyword">if</span>(count(dir.<span class="built_in">begin</span>(),dir.<span class="built_in">end</span>(),sum) == <span class="number">0</span>)&#123;</span><br><span class="line">            dir.push_back(sum);</span><br><span class="line">            num++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>tag</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1089（乙级）</title>
    <url>/2019/03/18/pat-1089-yi-ji-1/</url>
    <content><![CDATA[<p>1089 狼人杀-简单版 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/1038429385296453632">原文地址</a></p>
<p>以下文字摘自《灵机一动·好玩的数学》：“狼人杀”游戏分为狼人、好人两大阵营。在一局“狼人杀”游戏中，1 号玩家说：“2 号是狼人”，2 号玩家说：“3 号是好人”，3 号玩家说：“4 号是狼人”，4 号玩家说：“5 号是好人”，5 号玩家说：“4 号是好人”。已知这 5 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。扮演狼人角色的是哪两号玩家？ 本题是这个问题的升级版：已知 N 名玩家中有 2 人扮演狼人角色，有 2 人说的不是实话，有狼人撒谎但并不是所有狼人都在撒谎。要求你找出扮演狼人角色的是哪几号玩家？</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第一行中给出一个正整数 N（5≤N≤100）。随后 N 行，第 i 行给出第 i 号玩家说的话（1≤i≤N），即一个玩家编号，用正号表示好人，负号表示狼人。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>如果有解，在一行中按递增顺序输出 2 个狼人的编号，其间以空格分隔，行首尾不得有多余空格。如果解不唯一，则输出最小序列解 —— 即对于两个序列 A=a[1],…,a[M] 和 B=b[1],…,b[M]，若存在 0≤k&lt;M 使得 a[i]=b[i] （i≤k），且 a[k+1]&lt;b[k+1]，则称序列 A 小于序列 B。若无解则输出 `No Solution。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>5
-2
+3
-4
+5
+4
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>1 4
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>6
+6
+3
+1
-5
-2
+4
</code></pre>
<h3 id="输出样例-2（解不唯一）："><a class="header-anchor" href="#输出样例-2（解不唯一）：">¶</a>输出样例 2（解不唯一）：</h3>
<pre><code>1 5
</code></pre>
<h3 id="输入样例-3："><a class="header-anchor" href="#输入样例-3：">¶</a>输入样例 3：</h3>
<pre><code>5
-2
-3
-4
-5
-1
</code></pre>
<h3 id="输出样例-3："><a class="header-anchor" href="#输出样例-3：">¶</a>输出样例 3：</h3>
<pre><code>No Solution
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="comment">/*每个人说的数字保存在v数组中，i从1～n、j从i+1～n遍历，分别假设i和j是狼人，a数组表示该人是狼人还是好人，等于1表示是好人，</span></span><br><span class="line"><span class="comment">等于-1表示是狼人。k从1～n分别判断k所说的话是真是假，k说的话和真实情况不同（即v\[k\] * a\[abs(v\[k\])\] &lt; 0）则表示k在说谎，</span></span><br><span class="line"><span class="comment">则将k放在lie数组中；遍历完成后判断lie数组，如果说谎人数等于2并且这两个说谎的人一个是好人一个是狼人（即a\[lie\[0\]\] + a\[lie\[1\]\] == 0）</span></span><br><span class="line"><span class="comment">表示满足题意，此时输出i和j并return，否则最后的时候输出No Solution～*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">cin</span> &gt;&gt; v\[i\];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; lie, a(n + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            a\[i\] = a\[j\] = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">                <span class="keyword">if</span> (v\[k\] * a\[<span class="built_in">abs</span>(v\[k\])\] &lt; <span class="number">0</span>) lie.push_back(k);</span><br><span class="line">            <span class="keyword">if</span> (lie.<span class="built_in">size</span>() == <span class="number">2</span> &amp;&amp; a\[lie\[<span class="number">0</span>\]\] + a\[lie\[<span class="number">1</span>\]\] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">" "</span> &lt;&lt; j;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"No Solution"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>tag</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1084（乙级）</title>
    <url>/2019/03/18/pat-1084-yi-ji-1/</url>
    <content><![CDATA[<p>1084 外观数列 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805260583813120">原文地址</a></p>
<p>外观数列是指具有以下特点的整数序列：</p>
<pre><code>d, d1, d111, d113, d11231, d112213111, ...
</code></pre>
<p>它从不等于 1 的数字 <code>d</code> 开始，序列的第 n+1 项是对第 n 项的描述。比如第 2 项表示第 1 项有 1 个 <code>d</code>，所以就是 <code>d1</code>；第 2 项是 1 个 <code>d</code>（对应 <code>d1</code>）和 1 个 1（对应 11），所以第 3 项就是 <code>d111</code>。又比如第 4 项是 <code>d113</code>，其描述就是 1 个 <code>d</code>，2 个 1，1 个 3，所以下一项就是 <code>d11231</code>。当然这个定义对 <code>d</code> = 1 也成立。本题要求你推算任意给定数字 <code>d</code> 的外观数列的第 N 项。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出 [0,9] 范围内的一个整数 <code>d</code>、以及一个正整数 N（≤ 40），用空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中给出数字 <code>d</code> 的外观数列的第 N 项。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>1 8
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>1123123111
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//题目理解 是对于 d为第一项 则第二项就为d1（其中1）表示有一个d 第三项（针对第二项）就为d1（有一个d）11（有一个1）以此类推</span></span><br><span class="line"><span class="comment">//同样要注意 这里每次统计的是连续的相同的字符个数</span></span><br><span class="line"><span class="comment">//算法思想：从头到尾遍历字符串然后统计个数并添加到对应的数值后面之后下一次从上次统计结束的地方开始统计</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> d;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;d&gt;&gt;num;</span><br><span class="line">    num--;</span><br><span class="line">    <span class="comment">//因为算法中先减了1所以对于 N等于1的情况要特殊处理</span></span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;d&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> result = d + <span class="string">"1"</span>;</span><br><span class="line">    <span class="keyword">while</span>(num &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">string</span> s1=<span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(index &lt; result.length())&#123;</span><br><span class="line">            <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">int</span> num1 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">char</span> temp = result\[index\];</span><br><span class="line">            s1 += result\[index++\];</span><br><span class="line">            <span class="keyword">for</span>(j=index;j&lt;result.length();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(temp != result\[j\])&#123;</span><br><span class="line">                    index = j;</span><br><span class="line">                    flag  = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    num1++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag)&#123; <span class="comment">//如果全相等（如1111）则不会break 只会正常结束 因此要再次进行index赋值 否则不会按照统计后的位置进行</span></span><br><span class="line">                index = j;</span><br><span class="line">            &#125;</span><br><span class="line">            s1 += (num1 + <span class="string">'0'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result = s1;</span><br><span class="line">        num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1090（乙级）</title>
    <url>/2019/03/18/pat-1090-yi-ji-1/</url>
    <content><![CDATA[<p>1090 危险品装箱 （25 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/1038429484026175488">原文地址</a></p>
<p>集装箱运输货物时，我们必须特别小心，不能把不相容的货物装在一只箱子里。比如氧化剂绝对不能跟易燃液体同箱，否则很容易造成爆炸。 本题给定一张不相容物品的清单，需要你检查每一张集装箱货品清单，判断它们是否能装在同一只箱子里。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入第一行给出两个正整数：N (≤10​4​​) 是成对的不相容物品的对数；M (≤100) 是集装箱货品清单的单数。 随后数据分两大块给出。第一块有 N 行，每行给出一对不相容的物品。第二块有 M 行，每行给出一箱货物的清单，格式如下：</p>
<pre><code>K G[1] G[2] ... G[K]
</code></pre>
<p>其中 <code>K</code> (≤1000) 是物品件数，<code>G[i]</code> 是物品的编号。简单起见，每件物品用一个 5 位数的编号代表。两个数字之间用空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对每箱货物清单，判断是否可以安全运输。如果没有不相容物品，则在一行中输出 <code>Yes</code>，否则输出 <code>No</code>。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>6 3
20001 20002
20003 20004
20005 20006
20003 20001
20005 20004
20004 20006
4 00001 20004 00002 20003
5 98823 20002 20003 20006 10010
3 12345 67890 23333
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>No
Yes
Yes
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="comment">//注意本题不要使用 string 作为map的key和value 这样会在测试点四种使用C++读取时会花费大量的时间导致超时 </span></span><br><span class="line"><span class="comment">//而是用int scanf则会大大缩短时间</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dir;</span><br><span class="line">    <span class="comment">//map&lt;string,vector&lt;string&gt; &gt;::iterator pos;</span></span><br><span class="line">    <span class="keyword">int</span> N,M;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;N,&amp;M);</span><br><span class="line">    <span class="comment">//创建每个元素对应的不能够相容的名称列表</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> t1,t2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;t1,&amp;t2);</span><br><span class="line">        dir\[t1\].push_back(t2);</span><br><span class="line">        dir\[t2\].push_back(t1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*for(pos=dir.begin();pos!=dir.end();pos++)&#123;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;(*pos).first&lt;&lt;" : ";</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;((*pos).second).size();i++)&#123;</span></span><br><span class="line"><span class="comment">            cout&lt;&lt;((*pos).second)\[i\]&lt;&lt;" ";</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        cout&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; list1;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;num;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;temp);</span><br><span class="line">            <span class="comment">//遍历key值对应的value容器中是否存在于list1中如果存在则为No</span></span><br><span class="line">            <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;dir\[temp\].<span class="built_in">size</span>();k++)&#123;</span><br><span class="line">                   <span class="keyword">if</span>(count(list1.<span class="built_in">begin</span>(),list1.<span class="built_in">end</span>(),dir\[temp\]\[k\]) != <span class="number">0</span>)&#123;</span><br><span class="line">                        flag = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            list1.push_back(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1088（乙级）</title>
    <url>/2019/03/18/pat-1088-yi-ji-1/</url>
    <content><![CDATA[<p>1088 三人行 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/1038429286185074688">原文地址</a></p>
<p>子曰：“三人行，必有我师焉。择其善者而从之，其不善者而改之。” 本题给定甲、乙、丙三个人的能力值关系为：甲的能力值确定是 2 位正整数；把甲的能力值的 2 个数字调换位置就是乙的能力值；甲乙两人能力差是丙的能力值的 X 倍；乙的能力值是丙的 Y 倍。请你指出谁比你强应“从之”，谁比你弱应“改之”。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在一行中给出三个数，依次为：M（你自己的能力值）、X 和 Y。三个数字均为不超过 1000 的正整数。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中首先输出甲的能力值，随后依次输出甲、乙、丙三人与你的关系：如果其比你强，输出 <code>Cong</code>；平等则输出 <code>Ping</code>；比你弱则输出 <code>Gai</code>。其间以 1 个空格分隔，行首尾不得有多余空格。 注意：如果解不唯一，则以甲的最大解为准进行判断；如果解不存在，则输出 <code>No Solution</code>。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>48 3 7
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>48 Ping Cong Gai
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>48 11 6
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>No Solution
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">judge</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Cong"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a == b)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Ping"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Gai"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> me,X,Y;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;me&gt;&gt;X&gt;&gt;Y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">99</span>;i&gt;=<span class="number">10</span>;i--)&#123; <span class="comment">// 则以甲的最大解为准进行判断</span></span><br><span class="line">        <span class="keyword">int</span> yi = i/<span class="number">10</span> + (i%<span class="number">10</span>)*<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">abs</span>(i-yi)\*Y == yi\*X)&#123;</span><br><span class="line">            <span class="keyword">double</span> temp = (<span class="built_in">abs</span>(i-yi)*<span class="number">1.0</span>)/X;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;yi&lt;&lt;" "&lt;&lt;yi*X&lt;&lt;endl;</span></span><br><span class="line">            judge(i,me);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            judge(yi,me);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            judge(temp,me);</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"No Solution"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1091（乙级）</title>
    <url>/2019/03/18/pat-1091-yi-ji-1/</url>
    <content><![CDATA[<p>1091 N-自守数 （15 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/1071785664454127616">原文地址</a></p>
<p>如果某个数 K 的平方乘以 N 以后，结果的末尾几位数等于 K，那么就称这个数为“N-自守数”。例如 3×92​2​​=25392，而 25392 的末尾两位正好是 92，所以 92 是一个 3-自守数。 本题就请你编写程序判断一个给定的数字是否关于某个 N 是 N-自守数。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第一行中给出正整数 M（≤20），随后一行给出 M 个待检测的、不超过 1000 的正整数。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对每个需要检测的数字，如果它是 N-自守数就在一行中输出最小的 N 和 NK​2​​ 的值，以一个空格隔开；否则输出 <code>No</code>。注意题目保证 N&lt;10。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>3
92 5 233
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>3 25392
1 25
No
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//思想：这里采用了大数乘法 按照题目要求计算result 然后使用reverse进行结果逆转 然后使用find进行匹配如果为0则证明以temp结尾</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">BigNumberMult</span><span class="params">(<span class="built_in">string</span> s1,<span class="built_in">string</span> s2)</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="number">10000</span>,<span class="string">'0'</span>)</span></span>;</span><br><span class="line">    reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">    reverse(s2.<span class="built_in">begin</span>(),s2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;s2.length();j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = (s1\[i\] - <span class="string">'0'</span>) * (s2\[j\] - <span class="string">'0'</span>);</span><br><span class="line">            s\[i+j+<span class="number">1</span>\] = s\[i+j+<span class="number">1</span>\] - <span class="string">'0'</span> + (s\[i+j\] - <span class="string">'0'</span> + temp) / <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">            s\[i+j\] = (s\[i+j\] - <span class="string">'0'</span> + temp) % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(s.<span class="built_in">begin</span>(),s.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span>(s.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>) == <span class="built_in">string</span>::npos)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> s.substr(s.<span class="built_in">find</span>\_first\_not_of(<span class="string">'0'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//匹配函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="built_in">string</span> s1,<span class="built_in">string</span> s2)</span></span>&#123;</span><br><span class="line">    reverse(s1.<span class="built_in">begin</span>(),s1.<span class="built_in">end</span>());</span><br><span class="line">    reverse(s2.<span class="built_in">begin</span>(),s2.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">if</span>(s1.<span class="built_in">find</span>(s2) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="built_in">string</span> tt\[num\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;tt\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">string</span> temp,result;</span><br><span class="line">        temp = BigNumberMult(tt\[i\],tt\[i\]);</span><br><span class="line">        result = temp;</span><br><span class="line">        <span class="keyword">int</span> counts = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span>(counts &lt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="built_in">string</span> t = <span class="string">""</span>;</span><br><span class="line">            t += (counts + <span class="number">1</span> + <span class="string">'0'</span>);</span><br><span class="line">            result = BigNumberMult(temp,t);</span><br><span class="line">            <span class="keyword">if</span>(judge(result,tt\[i\]))&#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            counts++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;counts+<span class="number">1</span>&lt;&lt;<span class="string">" "</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1095（乙级）</title>
    <url>/2019/03/18/pat-1095-yi-ji-1/</url>
    <content><![CDATA[<p>1095 解码PAT准考证 （25 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/1071786104348536832">原文地址</a></p>
<p>PAT 准考证号由 4 部分组成：</p>
<ul>
<li>第 1 位是级别，即 <code>T</code> 代表顶级；<code>A</code> 代表甲级；<code>B</code> 代表乙级；</li>
<li>第 2~4 位是考场编号，范围从 101 到 999；</li>
<li>第 5~10 位是考试日期，格式为年、月、日顺次各占 2 位；</li>
<li>最后 11~13 位是考生编号，范围从 000 到 999。</li>
</ul>
<p>现给定一系列考生的准考证号和他们的成绩，请你按照要求输出各种统计信息。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入首先在一行中给出两个正整数 N（≤10​4​​）和 M（≤100），分别为考生人数和统计要求的个数。 接下来 N 行，每行给出一个考生的准考证号和其分数（在区间 [0,100] 内的整数），其间以空格分隔。 考生信息之后，再给出 M 行，每行给出一个统计要求，格式为：<code>类型 指令</code>，其中</p>
<ul>
<li><code>类型</code> 为 1 表示要求按分数非升序输出某个指定级别的考生的成绩，对应的 <code>指令</code> 则给出代表指定级别的字母；</li>
<li><code>类型</code> 为 2 表示要求将某指定考场的考生人数和总分统计输出，对应的 <code>指令</code> 则给出指定考场的编号；</li>
<li><code>类型</code> 为 3 表示要求将某指定日期的考生人数分考场统计输出，对应的 <code>指令</code> 则给出指定日期，格式与准考证上日期相同。</li>
</ul>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>对每项统计要求，首先在一行中输出 <code>Case #: 要求</code>，其中 <code>#</code> 是该项要求的编号，从 1 开始；<code>要求</code> 即复制输入给出的要求。随后输出相应的统计结果：</p>
<ul>
<li><code>类型</code> 为 1 的指令，输出格式与输入的考生信息格式相同，即 <code>准考证号 成绩</code>。对于分数并列的考生，按其准考证号的字典序递增输出（题目保证无重复准考证号）；</li>
<li><code>类型</code> 为 2 的指令，按 <code>人数 总分</code> 的格式输出；</li>
<li><code>类型</code> 为 3 的指令，输出按人数非递增顺序，格式为 <code>考场编号 总人数</code>。若人数并列则按考场编号递增顺序输出。</li>
</ul>
<p>如果查询结果为空，则输出 <code>NA</code>。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>8 4
B123180908127 99
B102180908003 86
A112180318002 98
T107150310127 62
A107180908108 100
T123180908010 78
B112160918035 88
A107180908021 98
1 A
2 107
3 180908
2 999
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>Case 1: 1 A
A107180908108 100
A107180908021 98
A112180318002 98
Case 2: 2 107
3 260
Case 3: 3 180908
107 2
123 2
102 1
Case 4: 2 999
NA
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> id;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">examcase2</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> allscore=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> people=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">examroom</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> room;</span><br><span class="line">    <span class="keyword">int</span> people=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(student a,student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.score!=b.score) <span class="keyword">return</span> a.score&gt;b.score;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.id&lt;b.id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(examroom a,examroom b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.people!=b.people) <span class="keyword">return</span> a.people&gt;b.people;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a.room&lt;b.room;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N,M;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;N,&amp;M);            <span class="comment">//用cin.cout会超时</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">vector</span>&lt;student&gt;&gt;  case1;     <span class="comment">//按等级分；</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,examcase2&gt; case2;             <span class="comment">//按教室分；</span></span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="built_in">map</span>&lt;<span class="built_in">string</span>,examroom&gt;&gt;  case3;     <span class="comment">//按日期分；</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        student s;</span><br><span class="line">        <span class="keyword">char</span> id\[<span class="number">14</span>\];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s %d"</span>,id,&amp;s.score);</span><br><span class="line">        s.id=id;</span><br><span class="line">        <span class="built_in">string</span> ranks=s.id.substr(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">string</span> exroom=s.id.substr(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="built_in">string</span> date=s.id.substr(<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line">        case1\[ranks\].push_back(s);        <span class="comment">//将s放入同一个等级的动态数组中</span></span><br><span class="line">        case2\[exroom\].allscore+=s.score;    <span class="comment">//该考场的总成绩增加</span></span><br><span class="line">        case2\[exroom\].people++;            <span class="comment">//该考场的总人数增加</span></span><br><span class="line">        case3\[date\]\[exroom\].room=exroom;    <span class="comment">//这个日期考试的这个考场的考场号</span></span><br><span class="line">        case3\[date\]\[exroom\].people++;        <span class="comment">//这个日期考试的这个考场的人数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> classi;</span><br><span class="line">        <span class="keyword">char</span> request\[<span class="number">7</span>\];</span><br><span class="line">        <span class="built_in">memset</span>(request,<span class="number">0</span>,<span class="keyword">sizeof</span>(request));</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %s"</span>,&amp;classi,request);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d %s\\n"</span>,i,classi,request);</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">switch</span>(classi)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">vector</span>&lt;student&gt;  ttt=case1\[request\];    <span class="comment">//取出指定级别的集合</span></span><br><span class="line">                    sort(ttt.<span class="built_in">begin</span>(),ttt.<span class="built_in">end</span>(),cmp);        <span class="comment">//排序</span></span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">auto</span> it=ttt.<span class="built_in">begin</span>();it!=ttt.<span class="built_in">end</span>();it++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%s %d\\n"</span>,(\*it).id.c_str(),(\*it).score);<span class="comment">//输出</span></span><br><span class="line">                        flag=<span class="number">0</span>;                    <span class="comment">//产生了输出，该要求有结果</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    examcase2 ttt=case2\[request\];        <span class="comment">//取出指定考场的信息</span></span><br><span class="line">                    <span class="keyword">if</span>(ttt.people!=<span class="number">0</span>)                <span class="comment">//该考场有人考试</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%d %d\\n"</span>,ttt.people,ttt.allscore);    <span class="comment">//输出结果</span></span><br><span class="line">                        flag=<span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">map</span>&lt;<span class="built_in">string</span>,examroom&gt; ttt=case3\[request\]; <span class="comment">//取出该天考试的所有考场的信息</span></span><br><span class="line">                    <span class="keyword">int</span> i=<span class="number">0</span>,len=ttt.<span class="built_in">size</span>();        <span class="comment">//len--该天有len个考场进行考试</span></span><br><span class="line">                    examroom e\[len\];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">auto</span> it=ttt.<span class="built_in">begin</span>();it!=ttt.<span class="built_in">end</span>();it++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        e\[i++\]=it-&gt;second;        <span class="comment">//将考场信息存入数组</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    sort(e,e+len,cmp1);    <span class="comment">//进行排序</span></span><br><span class="line">                    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">"%s %d\\n"</span>,e\[i\].room.c_str(),e\[i\].people);<span class="comment">//输出结果</span></span><br><span class="line">                        flag=<span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)  <span class="built_in">printf</span>(<span class="string">"NA\\n"</span>);    <span class="comment">//没有符合条件的结果，则输出NA</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1092（乙级）</title>
    <url>/2019/03/18/pat-1092-yi-ji-1/</url>
    <content><![CDATA[<p>1092 最好吃的月饼 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/1071785779399028736">原文地址</a></p>
<p>月饼是久负盛名的中国传统糕点之一，自唐朝以来，已经发展出几百品种。 <img src="https://images.ptausercontent.com/fcb325a0-7090-4bf4-acb0-d4d7ea832f27.jpg" alt="mk.jpg"> 若想评比出一种“最好吃”的月饼，那势必在吃货界引发一场腥风血雨…… 在这里我们用数字说话，给出全国各地各种月饼的销量，要求你从中找出销量冠军，认定为最好吃的月饼。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入首先给出两个正整数 N（≤1000）和 M（≤100），分别为月饼的种类数（于是默认月饼种类从 1 到 N 编号）和参与统计的城市数量。 接下来 M 行，每行给出 N 个非负整数（均不超过 1 百万），其中第 i 个整数为第 i 种月饼的销量（块）。数字间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在第一行中输出最大销量，第二行输出销量最大的月饼的种类编号。如果冠军不唯一，则按编号递增顺序输出并列冠军。数字间以 1 个空格分隔，行首尾不得有多余空格。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<pre><code>5 3
1001 992 0 233 6
8 0 2018 0 2008
36 18 0 1024 4
</code></pre>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<pre><code>2018
3 5
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, M, flag = <span class="number">0</span>, <span class="built_in">max</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">int</span> sale\[N\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)    sale\[i\] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> s;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;s);</span><br><span class="line">            sale\[j\] += s;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">max</span> &lt; sale\[j\])     <span class="built_in">max</span> = sale\[j\];    <span class="comment">//当月饼销量统计完成后，也得到了最大销量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\\n"</span>, <span class="built_in">max</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(sale\[i\] == <span class="built_in">max</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">0</span>)  flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span>           <span class="built_in">printf</span>(<span class="string">" "</span>);        <span class="comment">//用flag来控制空格的输出</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, i+<span class="number">1</span>);                 <span class="comment">//注意i是从0开始的，而月饼种类是从1开始的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1093（乙级）</title>
    <url>/2019/03/18/pat-1093-yi-ji-1/</url>
    <content><![CDATA[<p>1093 字符串A+B （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/1071785884776722432">原文地址</a></p>
<p>给定两个字符串 A 和 B，本题要求你输出 A+B，即两个字符串的并集。要求先输出 A，再输出 B，但<strong>重复的字符必须被剔除</strong>。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在两行中分别给出 A 和 B，均为长度不超过 10​6​​的、由可见 ASCII 字符 (即码值为32~126)和空格组成的、由回车标识结束的非空字符串。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出题面要求的 A 和 B 的和。</p>
<h3 id="输入样例："><a class="header-anchor" href="#输入样例：">¶</a>输入样例：</h3>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">This <span class="keyword">is</span> a sample test</span><br><span class="line"><span class="keyword">to</span> show you_How <span class="keyword">it</span> works</span><br></pre></td></tr></table></figure>
<h3 id="输出样例："><a class="header-anchor" href="#输出样例：">¶</a>输出样例：</h3>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">This ampletowyu_Hrk</span></span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2;</span><br><span class="line">    getline(<span class="built_in">cin</span>,s1);</span><br><span class="line">    getline(<span class="built_in">cin</span>,s2);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; dir;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(dir.<span class="built_in">begin</span>(),dir.<span class="built_in">end</span>(),s1\[i\]) == dir.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s1\[i\];</span><br><span class="line">            dir.push_back(s1\[i\]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s2.length();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">find</span>(dir.<span class="built_in">begin</span>(),dir.<span class="built_in">end</span>(),s2\[i\]) == dir.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;s2\[i\];</span><br><span class="line">            dir.push_back(s2\[i\]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1094（乙级）</title>
    <url>/2019/03/18/pat-1094-yi-ji-1/</url>
    <content><![CDATA[<p>1094 谷歌的招聘 （20 分) <a href="https://pintia.cn/problem-sets/994805260223102976/problems/1071785997033074688">原文地址</a></p>
<p>2004 年 7 月，谷歌在硅谷的 101 号公路边竖立了一块巨大的广告牌（如下图）用于招聘。内容超级简单，就是一个以 .com 结尾的网址，而前面的网址是一个 10 位素数，这个素数是自然常数 e 中最早出现的 10 位连续数字。能找出这个素数的人，就可以通过访问谷歌的这个网站进入招聘流程的下一步。 <img src="https://images.ptausercontent.com/57148679-d574-4f49-b048-775c6c07791c.jpg" alt="prime.jpg"> 自然常数 e 是一个著名的超越数，前面若干位写出来是这样的：e = 2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642<strong>7427466391</strong>932003059921… 其中粗体标出的 10 位数就是答案。 本题要求你编程解决一个更通用的问题：从任一给定的长度为 L 的数字中，找出最早出现的 K 位连续数字所组成的素数。</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第一行给出 2 个正整数，分别是 L（不超过 1000 的正整数，为数字长度）和 K（小于 10 的正整数）。接下来一行给出一个长度为 L 的正整数 N。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>在一行中输出 N 中最早出现的 K 位连续数字所组成的素数。如果这样的素数不存在，则输出 <code>404</code>。注意，原始数字中的前导零也计算在位数之内。例如在 200236 中找 4 位素数，0023 算是解；但第一位 2 不能被当成 0002 输出，因为在原始数字中不存在这个 2 的前导零。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>20 5
23654987725541023819
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>49877
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>10 3
2468024680
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>404
</code></pre>
<p>代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 判断是否为素数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span> || x==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;=x;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%i==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 1094 谷歌的招聘 （20 point(s)）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;      </span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n,k,out=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k&gt;&gt;s; </span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;=n;++i)&#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> t = stoi(s.substr(i-k,k)); <span class="comment">// 字符串截取</span></span><br><span class="line">        <span class="keyword">if</span>(isprime(t))&#123; <span class="comment">// 判断素数</span></span><br><span class="line">            out=i-k;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(out != <span class="number">-1</span>)&#123; <span class="comment">// 如 0002 ，不应该输出 2</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;s.substr(out,k)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"404"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">// guangjinzheng 2019.1.14 15:02</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>PotPlayer+无边框</title>
    <url>/2018/05/24/potplayer-wu-bian-kuang-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180524122050.png" alt=""> PotPlayer拥有强大的解码能力，启动速度快，耗内存低，无广告、不流氓等，但是我认为它的界面是它的一大缺陷，因此今天给大家推荐一下PotPlayer怎么设置无边框，以及推荐四款简约皮肤。   首先是无边框设置： <img src="http://47.100.4.8/wp-content/uploads/2018/05/v2-c49ab1bdec96b8df64d13c37dcb4dee1_b.gif" alt=""> 按照上面步骤设置完之后的效果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180524122944.png" alt=""> 然后推荐四款简约的皮肤： 先给出下载地址： 链接：<a href="https://pan.baidu.com/s/1Iv7zxM0zQxhrctCH4DU2kw">https://pan.baidu.com/s/1Iv7zxM0zQxhrctCH4DU2kw</a> 密码：vose 把下载好的压缩包解压之后，拷贝到potplayer的皮肤文件夹中就好了。地址为：E:\potplayer\Skins 然后按照如下步骤即可设置好： <img src="http://47.100.4.8/wp-content/uploads/2018/05/v2-7752f659bbd2ee17261ab440cb4d16cf_b.gif" alt="">   至于PotPlayer的下载，可直接去它的官网下载即可。 还有一点就是最好设置一下不要自动更新否则确实比较烦人： <img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180524123325.png" alt=""></p>
]]></content>
      <categories>
        <category>PotPlayer</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>PotPlayer</tag>
      </tags>
  </entry>
  <entry>
    <title>PyCharm上使用Graphviz</title>
    <url>/2018/11/08/pycharm-shang-shi-yong-graphviz-1/</url>
    <content><![CDATA[<p><strong>由于最近需要用到Graphviz去画图，所以今天就介绍了自己是如何在pycharm上使用graphviz进行画图的。</strong> <strong>环境配置</strong> 1.首先先去官网上下载安装程序，地址为：<a href="http://www.graphviz.org/Download_windows.php">http://www.graphviz.org/Download_windows.php</a> <img src="http://47.100.4.8/wp-content/uploads/2018/11/QQ%E5%9B%BE%E7%89%8720181108174954.png" alt=""> 2.接下来打开你的PyCharm在setting中安装Graphviz的包，或者你可以直接在命令行里面使用pip进行安装，再不行直接下载轮子手动安装吧。 <img src="http://47.100.4.8/wp-content/uploads/2018/11/QQ%E5%9B%BE%E7%89%8720181108175229.png" alt=""> 3.接下来需要配置一下系统的环境变量（在Path中添加路径） 首先是配置用户的环境变量<img src="http://47.100.4.8/wp-content/uploads/2018/11/QQ%E5%9B%BE%E7%89%8720181108175508.png" alt=""> 然后是修改系统的环境变量<img src="http://47.100.4.8/wp-content/uploads/2018/11/QQ%E5%9B%BE%E7%89%8720181108175558.png" alt=""> 4.配置完成之后重启PyCharm即可使用了呀。   具体使用例子：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">g = Digraph(<span class="string">'test'</span>)</span><br><span class="line">g.node(<span class="attribute">name</span>=<span class="string">'a'</span>, <span class="attribute">color</span>=<span class="string">'red'</span>) #设置点</span><br><span class="line">g.node(<span class="attribute">name</span>=<span class="string">'b'</span>, <span class="attribute">color</span>=<span class="string">'red'</span>)</span><br><span class="line">g.edge(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="attribute">color</span>=<span class="string">'blue'</span>)  #c为边的名字 ab分别为起始点和终止点</span><br><span class="line">g.view()</span><br></pre></td></tr></table></figure>
<p>运行之后的结果： <img src="http://47.100.4.8/wp-content/uploads/2018/11/QQ%E5%9B%BE%E7%89%8720181108180000.png" alt=""></p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>Python知识</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Graphviz</tag>
      </tags>
  </entry>
  <entry>
    <title>Pat_1035（乙级）</title>
    <url>/2019/03/12/pat-yi-ji-1/</url>
    <content><![CDATA[<p>1035 插入与归并 （25 分） <a href="https://pintia.cn/problem-sets/994805260223102976/problems/994805286714327040">原文地址</a></p>
<p>关于归并排序的代码后面给出，思路主要是先进行归并排序的判断如果不是那么对于插入排序的判断就比较简单实现了，只需要比较和之前数列的差距即可。 根据维基百科的定义： <strong>插入排序</strong>是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将之插入有序序列中正确的位置。如此迭代直到全部元素有序。 <strong>归并排序</strong>进行如下迭代操作：首先将原始序列看成 N 个只包含 1 个元素的有序子序列，然后每次迭代归并两个相邻的有序子序列，直到最后只剩下 1 个有序的序列。 现给定原始序列和由某排序算法产生的中间序列，请你判断该算法究竟是哪种排序算法？</p>
<h3 id="输入格式："><a class="header-anchor" href="#输入格式：">¶</a>输入格式：</h3>
<p>输入在第一行给出正整数 N (≤100)；随后一行给出原始序列的 N 个整数；最后一行给出由某排序算法产生的中间序列。这里假设排序的目标序列是升序。数字间以空格分隔。</p>
<h3 id="输出格式："><a class="header-anchor" href="#输出格式：">¶</a>输出格式：</h3>
<p>首先在第 1 行中输出<code>Insertion Sort</code>表示插入排序、或<code>Merge Sort</code>表示归并排序；然后在第 2 行中输出用该排序算法再迭代一轮的结果序列。题目保证每组测试的结果是唯一的。数字间以空格分隔，且行首尾不得有多余空格。</p>
<h3 id="输入样例-1："><a class="header-anchor" href="#输入样例-1：">¶</a>输入样例 1：</h3>
<pre><code>10
3 1 2 8 7 5 9 4 6 0
1 2 3 7 8 5 9 4 6 0
</code></pre>
<h3 id="输出样例-1："><a class="header-anchor" href="#输出样例-1：">¶</a>输出样例 1：</h3>
<pre><code>Insertion Sort
1 2 3 5 7 8 9 4 6 0
</code></pre>
<h3 id="输入样例-2："><a class="header-anchor" href="#输入样例-2：">¶</a>输入样例 2：</h3>
<pre><code>10
3 1 2 8 7 5 9 4 0 6
1 3 2 8 5 7 4 9 0 6
</code></pre>
<h3 id="输出样例-2："><a class="header-anchor" href="#输出样例-2：">¶</a>输出样例 2：</h3>
<pre><code>Merge Sort
1 2 3 8 4 5 7 9 0 6
</code></pre>
<p>代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否相等</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEque</span><span class="params">(<span class="keyword">int</span> a\[\],<span class="keyword">int</span> b\[\],<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> m=<span class="number">0</span>;m&lt;num;m++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a\[m\] != b\[m\])&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> \*init,<span class="keyword">int</span> \*target,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">step</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">step</span>&lt;num)&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(index + <span class="built_in">step</span> &gt;= num)&#123;</span><br><span class="line">                sort(init+index,init+num,less&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                sort(init+index,init+index+<span class="built_in">step</span>,less&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">                index += <span class="built_in">step</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(IsEque(init,target,num))&#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">step</span> = <span class="built_in">step</span> * <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"Merge Sort"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(index + <span class="built_in">step</span> &gt;= num)&#123;</span><br><span class="line">                    sort(init+index,init+num,less&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    sort(init+index,init+index+<span class="built_in">step</span>,less&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">                    index += <span class="built_in">step</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i == num<span class="number">-1</span>)&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;init\[i\];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;init\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">step</span> = <span class="built_in">step</span> * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">(<span class="keyword">int</span> \*init,<span class="keyword">int</span> \*target,<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(target\[index\]&lt;=target\[i\])&#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Insertion Sort"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    sort(target,target+index+<span class="number">1</span>,less&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i == num<span class="number">-1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;target\[i\];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;target\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">    <span class="keyword">int</span> init\[num\],target\[num\],backup\[num\];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;init\[i\];</span><br><span class="line">        backup\[i\] = init\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;num;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;target\[i\];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag = merge_sort(init,target,num);</span><br><span class="line">    <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">        insert_sort(init,target,num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PAT</category>
        <category>乙级</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>pat</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt学习笔记（五）</title>
    <url>/2018/03/20/pyqt-xue-xi-bi-ji-wu-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180308122611.png" alt=""> <a href="https://translate.google.cn/#zh-CN/ja/%E6%88%91%E4%BB%AC%E5%BC%80%E5%A7%8B%E5%90%A7">始めましょう！</a>   依旧是学习笔记  咕咕~~ <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180308123017.png" alt=""></p>
<h5 id="菜单栏使用以及图标应用"><a class="header-anchor" href="#菜单栏使用以及图标应用">¶</a>菜单栏使用以及图标应用</h5>
<p>具体形式如上： QAction可以操作菜单栏,工具栏,或自定义键盘快捷键  QIcon可以将图片添加到你想要放置的位置 创立一个QAction对象  QIcon设置图标 **‘****&amp;**<strong>名称’</strong> 记住格式 exitAction = QAction(QIcon(‘qwe.jpeg’),’&amp;Exit’,self) 注：顺序不能更改   定义该操作的快捷键 exitAction.setShortcut(‘Ctrl+Q’)   绑定信息 创建一个鼠标指针悬停在该菜单项上时的提示 exitAction.setStatusTip(‘Exit application’)   当我们点击菜单的时候，调用qApp.quit,终止应用程序。 或者按Ctrl+Q exitAction.triggered.connect(qApp.quit)   <img src="http://47.100.4.8/wp-content/uploads/2018/03/%E5%95%8A%E5%AE%9E%E6%89%93%E5%AE%9E%E5%A4%A7%E5%A4%A7%E5%AD%A6%E5%9F%8E%E7%AB%99%E4%B8%8B%E8%BD%A6.png" alt="">     另一种设置一个图标的方式： 和上面例子的一样 exitAction = QAction(QIcon(‘qwe.jpeg’),’&amp;Exit’,self) exitAction.setShortcut(‘Ctrl+Q’) exitAction.triggered.connect(qApp.exit) 绑定快捷键  设置退出   创建一个简单的工具栏 toolbar为鼠标放置小提示 self.toolbar = self.addToolBar(‘Exit’) self.toolbar.addAction(exitAction) self.toolbar.addAction 连接事件 self.addToolBar(‘提示内容’)  添加提示内容,鼠标放到上面显示提示内容     QLCDNumber控件用于显示一个LCD数字。 它可以显示几乎任意大小的数字。可以显示十进制、十六进制、八进制或二进制数。很容易使用display()槽连接到数据源，这个槽可以被任何五个参数类型的数据源重载。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/%E5%95%8A%E8%BE%93%E5%87%BA%E5%A4%A7%E6%B6%A6%E5%8F%91%E8%89%B2%E7%9A%84.png" alt=""> <a href="http://47.100.4.8/wp-content/uploads/2018/03/%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95%E4%BA%94.rar">代码记录五</a> End！ <img src="http://47.100.4.8/wp-content/uploads/2018/03/u26562914982410145144fm27gp0-240x300.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Python模块PyQt5</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyQt5</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5学习笔记（七）</title>
    <url>/2018/04/14/pyqt5-xue-xi-bi-ji-qi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180308122611.png" alt=""> 很久没发了。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180308123017.png" alt="">： 重新定义事件处理器： def keyPressEvent(self, QKeyEvent): if QKeyEvent.key() == Qt.Key_Escape: self.close()   按Esc键就会关闭窗口  self.close()  就是关闭窗口的命令     设计一个按钮链接方法的事件 从而显示该按钮的名称的python文件   创建两个按钮： btn1 = QPushButton(‘Button 1’,self) btn1.move(30,50) btn2 = QPushButton(‘Button 2’,self) btn2.move(150,50)   将两个按钮同时连接到方法buttonClicked方法上 btn1.clicked.connect(self.buttonClicked) btn2.clicked.connect(self.buttonClicked)   创建一个状态栏 self.statusBar()   通过调用sender()方法来判断信号源， 并将其名称显示在窗体的状态栏中 sender = self.sender() self.statusBar().showMessage(sender.text() + ‘was pressed’)     sender（） 使用来判断是哪个按钮发出信号的   得到消息源 clicked一般为发出信号的表示   创建一个单击界面就会关闭窗口的Python文件   定义一个名为Communicate 类 创建了一个名为close的信号接收源 close使用pyqtSignal（）创建的 class Communicate(QObject): close = pyqtSignal()   创建一个Communicate类的对象  并且并且将它的close 事件连接到self.close 窗口关闭上 self.c = Communicate() self.c.close.connect(self.close)   当在窗体上点击鼠标时会触发closeApp信号，使程序退出。 def mousePressEvent(self, event): self.c.close.emit()     QInputDialog提供了一种简单方便的对话框从用户得到一个值。输入值可以是字符串,一个数字,或一个项目从一个列表。   创建一个按钮并且设定按钮的位置  将单击按钮的事件发出信号并且到showDialog方法 self.btn = QPushButton(‘Dialog’,self) self.btn.move(20,20) self.btn.clicked.connect(self.showDialog)   创建条形输入框并且设定位置： self.le = QLineEdit(self) self.le.move(130,22)   创建一个QInputDalog（对话框并且显示有ok 和cancel 两个按钮，可以设置标题和显示内容）对象并且如何点击ok 就会设置将输入的内容设置到条形输入框中 <img src="http://47.100.4.8/wp-content/uploads/2018/04/123123213123123.png" alt=""> text,ok = QInputDialog.getText(self,‘Input Dialog’,‘Enter your name:’)  #弹出对话框显示ok 和 canel 两个按钮 if ok: self.le.setText(str(text))   颜色选择对话框的使用   创建一个颜色对象：  该对象接收颜色 col = QColor(0,0,0)  #创建一个颜色的对象  0，0，0 为默认颜色 为黑色   按钮创建和信号连接等 self.btn = QPushButton(‘Dialog’,self) self.btn.move(20,20) self.btn.clicked.connect(self.showDialog)   创建一个Frame（框架）对象并且设置框架的背景颜色以及位置 self.frm = QFrame(self)  #创建一个Frame对象 self.frm.setStyleSheet(“QWidget { background-color: %s }” % <a href="http://col.name">col.name</a>())  #修改框架的背景颜色 self.frm.setGeometry(130,22,100,100) 为设置框架的标准语句要记住 “QWidfet{background-color：%s}” setStyleSheet(“QWidget { background-color: %s }” % <a href="http://col.name">col.name</a>())   创建颜色选择对话框并且得到该颜色： col = QColorDialog.getColor()  #通过弹出颜色选择框选择颜色并且给color对象   判断颜色是否有效并且重新设置框架的颜色： if col.isValid():  #判断是否是有效的 self.frm.setStyleSheet(“QWidget{ background-color: %s}” % <a href="http://col.name">col.name</a>())   End！ <img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-1.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Python模块PyQt5</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyQt5</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5学习笔记（二）</title>
    <url>/2018/03/10/pyqt5-xue-xi-bi-ji-er-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180308122611.png" alt=""></p>
<h3 id="PyQt简介："><a class="header-anchor" href="#PyQt简介：">¶</a>PyQt简介：</h3>
<h3 id="PyQt实现了一个Python模块集。它有超过300类，将近6000个函数和方法。它是一个多平台的工具包，可以运行在所有主要操作系统上，包括UNIX，Windows和Mac。-PyQt采用双许可证，开发人员可以选择GPL和商业许可。在此之前，GPL的版本只能用在Unix上，从PyQt的版本4开始，GPL许可证可用于所有支持的平台。"><a class="header-anchor" href="#PyQt实现了一个Python模块集。它有超过300类，将近6000个函数和方法。它是一个多平台的工具包，可以运行在所有主要操作系统上，包括UNIX，Windows和Mac。-PyQt采用双许可证，开发人员可以选择GPL和商业许可。在此之前，GPL的版本只能用在Unix上，从PyQt的版本4开始，GPL许可证可用于所有支持的平台。">¶</a><strong>PyQt</strong>实现了一个Python模块集。它有超过300类，将近6000个函数和方法。它是一个多平台的工具包，可以运行在所有主要操作系统上，包括UNIX，Windows和Mac。 <strong>PyQt采用双许可证，开发人员可以选择GPL和商业许可。在此之前，GPL的版本只能用在Unix上，从PyQt的版本4开始，GPL许可证可用于所有支持的平台。</strong></h3>
<p>依旧是基础知识，一些基础的内容，相关的控件的使用。 3333……(￣ノへ￣、)</p>
<p>～(￣▽￣～)(～￣▽￣)～</p>
<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180308123017.png" alt=""></p>
<p><strong>显示一个按钮的提示语：首先设置一个用于显示工具提示的字体。</strong> 我们使用10px滑体字体 <strong>QToolTip.setFont(QFont(‘SanSerif’,10))</strong> 设置字体的文本格式： <strong>self.setToolTip(‘This is a <b>QWidget</b>widget’)</strong> 将提示语绑定到按钮上 并且设置提示内容 <strong>btn .setToolTip(‘This is a <b>QPushButton</b> widget’)</strong> 效果图**：<img src="http://47.100.4.8/wp-content/uploads/2018/03/%E8%AF%B7%E9%97%AE%E8%AF%B7%E9%97%AE-300x227.png" alt="">** <strong>qbtn.clicked.connect(QCoreApplication.instance().quit)</strong> 使用MessageBox 来进行消息提示 重新定义了窗口的点X之后的事件： <strong>def closeEvent(self, QCloseEvent)</strong> 将reply 绑定上messagebox 并且设置信息提示语和yes | no按钮 reply用来接收返回的信息 <strong>reply = QMessageBox.question(self,‘Message’,“Are you sure to quit?”,QMessageBox.Yes | <a href="http://QMessageBox.No">QMessageBox.No</a>,<a href="http://QMessageBox.No">QMessageBox.No</a>)</strong> 处理返回值，如果单击Yes按钮,关闭小部件并终止应用程序。 否则我们忽略关闭事件**。** <strong>if reply == QMessageBox.Yes:</strong> ** QCloseEvent.accept()** ** else:** ** QCloseEvent.ignore()** <strong>event.accpet()  ** <strong>窗口关闭</strong> <strong>event.ignore()   ** <strong>不需要做出反应</strong> 将窗口显示到屏幕中间： <strong>def center(self):</strong> ** qr = self.frameGeometry()  #获得窗口</strong> ** cp = QDesktopWidget().availableGeometry().center()  #获得屏幕中心店</strong> ** qr.moveCenter(cp)** ** self.move(qr.topLeft())** 创建标签并且设置位置： <strong>lbll = QLabel(‘Zetcode’,self)</strong> ** lbll.move(15,10)** 一般使用部件名称.move() 来控制部件的位置</p>
<p><strong>End！</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/03/0addfb628535e5ddf06b66a77fc6a7efce1b6226-300x300.jpg" alt=""> <a href="http://47.100.4.8/wp-content/uploads/2018/03/%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95%EF%BC%88%E4%BA%8C%EF%BC%89.rar">代码记录（二）</a></p>
]]></content>
      <categories>
        <category>Python模块PyQt5</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyQt5</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5学习笔记（六）</title>
    <url>/2018/03/31/pyqt5-xue-xi-bi-ji-liu-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180308122611.png" alt=""> 很久没发这个了…… 今天就发点存货吧23333 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180308123017.png" alt=""> QLCDNumber控件用于显示一个LCD数字。 它可以显示几乎任意大小的数字。可以显示十进制、十六进制、八进制或二进制数。很容易使用display()槽连接到数据源，这个槽可以被任何五个参数类型的数据源重载。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/%E6%8C%89%E6%88%91%E5%8F%91%E7%9A%84%E8%82%A1%E5%8F%91%E8%A1%8C.png" alt=""> 创建一个QLCDNumber对象 <strong>lcd = QLCDNumber(self)</strong>   将滑动条的滑动连接到数字上 在这里我们将滚动条的valueChanged信号连接到lcd的display插槽。 <strong>sld.valueChanged.connect(lcd.display)</strong> lcd.display  就是连接其他控制接口   QSlider部件提供了一个垂直或水平滑动条。 QSlider很少有自己的函数，大部分功能在QAbstractSlider中。最有用的函数是setValue()，用来设置滑块的当前值；triggerAction()来模拟点击的效果（对快捷键有用），setSingleStep()、setPageStep()用来设置步长，setMinimum()和setMaximum()用于定义滚动条的范围。 QSlider提供了一些方法来控制刻度标记。可以使用setTickPosition()来表示刻度标记的位置，使用setTickInterval()来指定刻度的间隔；当前设置的刻度位置和间隔可以分别使用tickPosition()和tickInterval()函数来查询。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/%E5%90%91%E7%BF%A1%E7%BF%A0%E6%98%AF%E9%80%92%E5%9B%9B%E6%96%B9%E9%80%9F%E9%80%92%E5%8F%91%E7%9A%84.png" alt=""> QSlider只提供整数范围。   创建一个水平滑动条 <strong>sld = QSlider(Qt.Horizontal,self)</strong> 将水平滑动条绑定LCD数字显示 <strong>sld.valueChanged.connect(lcd.display)</strong>   End！ <a href="http://47.100.4.8/wp-content/uploads/2018/03/%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95.rar">代码记录</a> <img src="http://47.100.4.8/wp-content/uploads/2018/03/dc3a92315c6034a8e725e5f8c2134954082376a7-1.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Python模块PyQt5</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyQt5</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5学习笔记（四）</title>
    <url>/2018/03/18/pyqt5-xue-xi-bi-ji-si-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180308122611.png" alt=""> <a href="https://translate.google.cn/#auto/zh-CN/%E3%82%93%E3%81%93%E3%82%93%E3%81%AB%E3%81%A1%E3%81%AF%E7%9A%86%E3%81%95%E3%82%93%E3%80%81%E3%82%82%E3%81%86%E4%B8%80%E5%BA%A6%E3%81%8A%E4%BC%9A%E3%81%84%E3%81%A7%E3%81%8D%E3%81%A6%E3%81%86%E3%82%8C%E3%81%97%E3%81%84%E3%81%A7%E3%81%99">んこんにちは皆さん、もう一度お会いできてうれしいです！！</a>   好久没发了，抱歉抱歉  O(∩_∩)O嘿嘿~ <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180308123017.png" alt="">   标签和文本输入框的使用： 文本输入框分为： 条形输入框：<img src="http://47.100.4.8/wp-content/uploads/2018/03/123123123123.png" alt="">   引用QLineEdit 矩形输入框： <img src="http://47.100.4.8/wp-content/uploads/2018/03/2324234234.png" alt=""> 引用QTextEdit 标签模块：<img src="http://47.100.4.8/wp-content/uploads/2018/03/657567567567.png" alt="">   引用QLabel 创建标签： title = QLabel(‘Title’)   创建条形文本输入框： titleEdit = QLineEdit()   创建矩形文本输入框： reviewEdit = QTextEdit()   创建表格布局并且设置组件之间的间距 grid = QGridLayout() grid.setSpacing(10)   添加部件并且设置其位置（坐标形式）： grid.addWidget(reviewEdit,3,1,5,1) 3,1 为其行列  5,1为其中心点的坐标   将表格布局添加到窗口界面： self.setLayout(grid)     状态栏创建： class Example(QMainWindow): def __init__(self): super().__init__() self.initUI() 窗口继承了QMainWindow类  self则代表一个该对象   创建一个状态栏并且显示一个信息： self.statusBar().showMessage(‘Ready’) 使用statusBar（）创建一个状态栏 使用showMessage（‘信息’）  来显示信息 注：不能重复使用否则不会进行覆盖 如下： self.statusBar().showMessage(‘Ready’) self.statusBar().showMessage(’    ') self.statusBar().showMessage(‘Hello World’) <img src="http://47.100.4.8/wp-content/uploads/2018/03/%E4%B8%AD%E5%BF%83%E6%93%A6%E4%BC%A4%E7%9A%84%E8%AF%B7%E9%97%AE%E5%A6%82%E6%9E%9C.png" alt=""> <a href="http://47.100.4.8/wp-content/uploads/2018/03/%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95%E5%9B%9B.rar">代码记录四</a> End！ <img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-1-300x225.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Python模块PyQt5</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyQt5</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5学习笔记（三）</title>
    <url>/2018/03/12/pyqt5-xue-xi-bi-ji-san-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180308122611.png" alt=""> 偶哈呦，敏娜！ O(∩_∩)O~   今天继续发PyQt5的学习笔记，最近比较忙只能发一些自己写的以前的东西了，请见谅(<em><sup>▽</sup></em>)~   <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180308123017.png" alt=""> 框布局控制： 创建水平布局： hbox = QHBoxLayout() 添加水平布局的伸展因子和添加按钮 hbox.addStretch(1) hbox.addWidget(okButton)   创建竖直布局： vbox = QVBoxLayout() 添加竖直布局的伸展因子 vbox.addStretch(1) 将水平布局添加到竖直布局中 vbox.addLayout(hbox)   设置窗口的布局界面： self.setLayout(vbox)   效果图： <img src="http://47.100.4.8/wp-content/uploads/2018/03/zxc-300x227.png" alt="">   接下来是： 表格布局控制：  import QGridLayout 创建表格布局： grid = QGridLayout()   给表格布局添加元素 grid.addWidget()   设置到窗口上： self.setLayout(grid)   表格布局形式以坐标定位i，j  添加按钮： grid.addWidget(button,*position) postion为坐标 <img src="http://47.100.4.8/wp-content/uploads/2018/03/%E7%88%B1%E4%B8%8A%E5%A4%A7%E5%A3%B0%E5%9C%B0%E5%91%A8%E6%98%9F%E9%A9%B0-300x169.png" alt="">   End！ <img src="http://47.100.4.8/wp-content/uploads/2018/03/cropped-1474764002363-2.jpeg" alt=""> <strong>ヾ(ToT)Bye<sub>Bye</sub></strong> <a href="http://47.100.4.8/wp-content/uploads/2018/03/%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95%E4%B8%89.rar">代码记录三</a></p>
]]></content>
      <categories>
        <category>Python模块PyQt5</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyQt5</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的PEP8风格</title>
    <url>/2019/01/15/python-de-pep8-feng-ge-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2019/01/QQ%E5%9B%BE%E7%89%8720190115152050.png" alt=""> 《Python Enhancement Proposal#8》又叫PEP8，它是针对Python代码格式而编订的风格指南。尽管可以在保证愈发正确的情况下可以随意编写Python代码，但是，采用一致的风格来书写可以令代码更加易懂、更加易读。采用和其他Python程序员相同的风格来写代码，也可以使项目更利于多人协作。即使代码只会由你自己阅读，遵守这套风格也依然可以令后续的修改变得容易一些。 以下为几条应该遵守的规则： 1.使用space（空格）来表示缩进，而不是tab（制表符） 2.和语法相关的每一层缩进都用4个空格来表示 3.每行的字符数不应超过79 4.对于占据多行的长表达式来说，除了首行之外的其余各行都应该在通常的缩进级别之上再加上四个空格 5.文件中的函数与类之间应该用两个空格隔开 6.在使用下标来获取列表元素、调用函数或关键字参数赋值的时候，不要再两旁添加空格 7.为变量赋值的时候，赋值符号的左侧和右侧应该各自写上一个空格，而且只写一个就好  8.对于函数、变量及属性应该用小写字母来拼写，各单词之间以下划线相连，例如：lower_case 9.类中受保护的实例属性，应该以单个下划线开头，例如：_protected 10.类中私有的实例属性，应该以两个下划线开头，例如：_private 11.类与异常，应该以每个单词首字母均大写的形式来命名，例如：BusStation 12.模块级别的常量，应该全部采用大写字母来拼写，各单词之间以下划线相连，例如：ALL_MAPS 13.类中的实例方法，应该把首个参数命名为self（在PyCharm中自动生成），来表示对象自身 14.类方法的首个参数，应该命名为cls，以表示该类自身  15.采用内联形式的否定词，而不要把否定词放在整个表达式前面，例如：应该写入if a is not b而不是if not a is b 16.不要通过检测长度的办法（使用len）来判断somelist或somelist[i]是否为[]或为空值，而是应该采用if not somelist/if not somelist[i]这种写法来检查，如果不为空的话会自动将其赋值为True 17.不要编写单行的if语句、for循环、while循环及except复合语句，而是应该把这些数据分成多行来书写，以示清晰 18.import语句应该总是放在文件开头 19.引用模块时，应该使用该模块的绝对名而不是根据模块的路径来引用，例如：应写成from bar import foo 而不是仅写为import foo （注：这里指的是再调用外部包时所使用的，而不是python自己带的或者已经安装的） 20.文件中的那些import语句应该按照顺序划分为成三个部分，分别表示标准模块、第三方模块以及自用模块，在每一部分中，各个import语句应该按模块的字母顺序来排列 21.当编写Python代码时，总是应该遵守PEP8的风格指南，方便代码的移植和阅读 22.与广大Python开发者采用同一套编码风格，可以是项目更加利于多人协作，同样可以令后续的修改工作变得更加容易</p>
]]></content>
      <categories>
        <category>Python知识</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5 学习笔记（一）</title>
    <url>/2018/03/08/pyqt5-xue-xi-bi-ji-yi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180308122611.png" alt=""></p>
<h3 id="PyQt简介："><a class="header-anchor" href="#PyQt简介：">¶</a>PyQt简介：</h3>
<h3 id="PyQt实现了一个Python模块集。它有超过300类，将近6000个函数和方法。它是一个多平台的工具包，可以运行在所有主要操作系统上，包括UNIX，Windows和Mac。-PyQt采用双许可证，开发人员可以选择GPL和商业许可。在此之前，GPL的版本只能用在Unix上，从PyQt的版本4开始，GPL许可证可用于所有支持的平台。"><a class="header-anchor" href="#PyQt实现了一个Python模块集。它有超过300类，将近6000个函数和方法。它是一个多平台的工具包，可以运行在所有主要操作系统上，包括UNIX，Windows和Mac。-PyQt采用双许可证，开发人员可以选择GPL和商业许可。在此之前，GPL的版本只能用在Unix上，从PyQt的版本4开始，GPL许可证可用于所有支持的平台。">¶</a><strong>PyQt</strong>实现了一个Python模块集。它有超过300类，将近6000个函数和方法。它是一个多平台的工具包，可以运行在所有主要操作系统上，包括UNIX，Windows和Mac。 <strong>PyQt采用双许可证，开发人员可以选择GPL和商业许可。在此之前，GPL的版本只能用在Unix上，从PyQt的版本4开始，GPL许可证可用于所有支持的平台。</strong></h3>
<p>闲话讲了一堆接下来就是笔记了  不慌 23333</p>
<p>～(￣▽￣～)(～￣▽￣)～</p>
<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180308123017.png" alt="">   app = QApplication(sys.argv)  pyqt对象要在这个应用程序对象上建立 w = QWidget()  创建一个pyqt5 窗口 w.resize()  设置窗口大小 w.move 将窗口移动到指定位置 w.setWindowTitle(‘’)设置窗口标题 w.show（） 窗口显示 sys.exit(app.exec_())  系统exit（）方法确保程序干净的退出 必须有才能显示窗口否则会闪退 窗口界面常用格式： <strong>import sys</strong> ** from PyQt5.QtWidgets import QApplication,QWidget** ** from PyQt5.QtGui import QIcon** ** class Example(QWidget):** **     def __init__(self):** **         super().__init__()** **         self.initUI()  #界面绘制交给InitUi方法** <strong>def initUI(self):self.show()if __name__ == ‘__main__’:</strong> **     app = QApplication(sys.argv)** **     ex = Example()** **     sys.exit(app.exec_())** 相关语句解释： 设置窗口位置 <strong>self.setGeometry(300,300,300,220)  #设置窗口的位置和大小</strong> 设置窗口标题 <strong>self.setWindowTitle(‘Icon’)  #设置窗口标题</strong> 设置窗口的图标 <strong>self.setWindowIcon(QIcon(‘qwe.jpeg’))</strong> 创建一个按钮： <strong>btn = QPushButton(‘Button’,self)</strong> 设置按钮的尺寸: <strong>btn.resize(btn.sizeHint())</strong> <strong>btn.sizeHint（） 为显示默认尺寸</strong> End！ <img src="http://47.100.4.8/wp-content/uploads/2018/03/8c08513e6709c93d3db5cd8f963df8dcd1005426-300x300.jpg" alt=""> <strong><a href="http://47.100.4.8/wp-content/uploads/2018/03/%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%80%EF%BC%89.rar">代码记录（一）</a></strong></p>
]]></content>
      <categories>
        <category>Python模块PyQt5</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyQt5</tag>
      </tags>
  </entry>
  <entry>
    <title>Python定时关机软件</title>
    <url>/2018/04/20/python-ding-shi-guan-ji-ruan-jian-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180420231533.png" alt=""> 之前因为有需要想要设置电脑定时关机，但是一直没有可用的软件（不想用360等流氓软件提供的定时关机） 又因为系统计划任务设置比较困难， 所以在这里分享一个设置定时关机的软件 地址：链接：<a href="https://pan.baidu.com/s/1jHIRXxYJmkYEiIfkpv5YwA">https://pan.baidu.com/s/1jHIRXxYJmkYEiIfkpv5YwA</a> 密码：5tvh 使用界面： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180420232932.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180420232932.png" alt=""></p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python isinstance() 函数</title>
    <url>/2018/05/27/python-isinstance-han-shu-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/u407244128253124607fm27gp0.jpg" alt=""> <strong>描述</strong> isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()。 <em>isinstance()</em> <em>与</em> <em>type()</em> <em>区别：</em></p>
<ul>
<li><em>type()</em> <em>不会认为子类是一种父类类型，不考虑继承关系。</em></li>
<li><em>isinstance()</em> <em>会认为子类是一种父类类型，考虑继承关系。</em></li>
</ul>
<p><em>如果要判断两个类型是否相同推荐使用</em> <em>isinstance()__。</em> <strong>语法</strong> 以下是 isinstance() 方法的语法: isinstance(object, classinfo) <strong>参数</strong></p>
<ul>
<li>object – 实例对象。</li>
<li>classinfo – 可以是直接或间接类名、基本类型或者有它们组成的元组。</li>
</ul>
<p><strong>返回值</strong> 如果对象的类型与参数二的类型（classinfo）相同则返回 True，否则返回 False。。 <strong>实例</strong> 以下展示了使用 isinstance 函数的实例：<br>
<code>a=2 print(isinstance(a,int)) print(isinstance(a,str))</code><br>
结果 第一个返回True 第二个返回False <strong>type()</strong> <strong>与</strong> **isinstance()**<strong>区别：</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="symbol">A: <span class="symbol">pass</span></span> <span class="symbol">class</span> <span class="symbol">B</span>(<span class="symbol">A</span>):</span><br><span class="line"></span><br><span class="line">     <span class="symbol">pass</span> <span class="symbol">isinstance</span>(<span class="symbol">A</span>(), <span class="symbol">A</span>) </span><br><span class="line"></span><br><span class="line"><span class="symbol">type</span>(<span class="symbol">A</span>()) == <span class="symbol">A</span> </span><br><span class="line"></span><br><span class="line"><span class="symbol">isinstance</span>(<span class="symbol">B</span>(), <span class="symbol">A</span>)</span><br></pre></td></tr></table></figure>
<p>结果： 第一个返回True 第二个返回False 第三个返回True   本文参考了python菜鸟教程中的文章，感谢该博主提供的知识。</p>
]]></content>
      <categories>
        <category>Python知识</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫获得实时最新代理ip</title>
    <url>/2018/04/02/python-pa-chong-huo-de-shi-shi-zui-xin-dai-li-fu-wu-qi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-6.jpg" alt=""> 相信大家写python爬虫都应该会碰到403错误。 那么选择一个代理ip是必不可少的 这里提供给大家一个可以获得最新代理ip的小程序 。 也是我用爬虫爬取的。 <a href="http://www.xicidaili.com/">http://www.xicidaili.com/</a> 这个网址就是代理ip的网址 主要代码如下： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180402091042.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180402091120.png" alt=""> 这里当你保存时也会在你的.py文件目录自动生成一个.txt文件 <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180402091300.png" alt="">   <a href="http://47.100.4.8/wp-content/uploads/2018/04/%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8.rar">代理服务器</a> <img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-1.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>Python爬虫</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫的定向爬取技术</title>
    <url>/2018/03/26/python-pa-chong-de-ding-xiang-pa-qu-ji-shu-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/%E9%98%BF%E8%BE%BE%E4%B8%8B%E6%AC%A1%E5%86%8D%E6%92%92-300x188.jpg" alt=""></p>
<h3 id="Python爬虫的定向爬取技术就是根据设置的主题，对要爬取的网址或者网页中的内容进行筛选。"><a class="header-anchor" href="#Python爬虫的定向爬取技术就是根据设置的主题，对要爬取的网址或者网页中的内容进行筛选。">¶</a>Python爬虫的定向爬取技术就是根据设置的主题，对要爬取的网址或者网页中的内容进行筛选。</h3>
<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/u39006933292571644373fm27gp0-300x198.jpg" alt=""> 爬虫定向爬取技术主要需要解决的三个问题 1.清晰地定义好爬虫爬取的目标，规划好主题。 2.建立好爬取网址的过滤筛选规则以及内容的过滤筛选规则 3.建立好URL排序算法，让爬虫能够明确优先爬取哪些页面，以什么顺序爬取待爬取的网页。   <img src="http://47.100.4.8/wp-content/uploads/2018/03/0x0ss-85-300x300.jpg" alt=""> 定向爬取某些信息的步骤主要有： 1.理清爬取的目的 2.设置网址的过滤规则 3.设置好内容采集规则 4.规划好采集任务 5.将采集结果进行相应的修正，处理成我们想要的格式 6.对结果进行进一步的处理，来完成任务   <img src="http://47.100.4.8/wp-content/uploads/2018/03/u16344762390419462fm200gp0-298x300.jpg" alt=""> 进行信息筛选的主要策略有： 1.通过正则表达式筛选 一些简单的操作符： <img src="http://47.100.4.8/wp-content/uploads/2018/03/123123122323123-300x133.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/03/21334543345-300x127.png" alt=""> 2.通过Xpath表达式筛选 简介： XPath即为XML路径语言，它是一种用来确定<a href="https://baike.baidu.com/item/XML">XML</a>（<a href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">标准通用标记语言</a>的子集）文档中某部分位置的语言。XPath基于XML的树状结构，有不同类型的节点，包括元素节点，属性节点和文本节点，提供在数据结构树中找寻节点的能力。[1]  起初 XPath 的提出的初衷是将其作为一个通用的、介于XPointer与XSLT间的语法模型。但是 XPath 很快的被开发者采用来当作小型查询语言。 3.通过xslt筛选 简介： 在计算机科学中，XSLT是 <strong>扩展样式表转换语言</strong> 的外语缩写，这是一种对<a href="https://baike.baidu.com/item/XML">XML</a>（<a href="https://baike.baidu.com/item/%E6%A0%87%E5%87%86%E9%80%9A%E7%94%A8%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">标准通用标记语言</a>的子集）<a href="https://baike.baidu.com/item/%E6%96%87%E6%A1%A3">文档</a>进行转化的语言，XSLT中的T代表英语中的“转换”（<strong>T</strong><em>r__ansformation</em>）。它是<strong>XSL</strong>（<em>e</em><strong>X</strong><em>tensible</em> <strong>S</strong><em>tylesheet</em> <strong>L</strong><em>anguage</em>）规范的一部分。</p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫爬取贴吧中的帖子的图片</title>
    <url>/2018/03/30/python-pa-chong-pa-qu-tie-ba-zhong-de-tie-zi-de-tu-pian-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-6.jpg" alt=""> Python爬虫的一些小程序： 网址：<a href="https://tieba.baidu.com/p/4364768066">壁纸</a> 用谷歌浏览器的开发工具检查网页，可以发现其每一张图片都有如下格式<img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180330114139.png" alt=""> 所有图片在代码中的相同点就是都以&lt;img class=&quot;BDE_Image&quot;开头且都有相似的src。 图片的src可以通过正则表达式来获取 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180330114216.png" alt=""> 解释：[^”]+. 多次匹配除”以外的所有字符，\. 是转义 . (.是正则表达式的一种符号，要表达 . 必须转义) 知道了这些，就能获取到页面中的图片，下面用Python来实现这个网络爬虫。 每一句都有注释↓__↓ <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180330114248.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180330114319.png" alt="">   代码文件：<a href="http://47.100.4.8/wp-content/uploads/2018/03/%E4%BB%A3%E7%A0%81.rar">代码</a>   <img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-1.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>Python爬虫</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫学习urllib.request之Get</title>
    <url>/2018/06/19/python-pa-chong-xue-xi-urllib-request-zhi-get-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/%E9%98%BF%E8%BE%BE%E4%B8%8B%E6%AC%A1%E5%86%8D%E6%92%92.jpg" alt=""> <strong>Get请求实例分析：</strong> 代码：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="title">url</span>=<span class="string">"https://www.baidu.com/s?wd="</span></span><br><span class="line"><span class="title">keyword</span> = <span class="string">"strivez"</span></span><br><span class="line"><span class="title">url1</span> = url+keyword</span><br><span class="line"><span class="title">req</span> = urllib.request.<span class="type">Request</span>(url1)</span><br><span class="line"><span class="title">req</span>.add_header('<span class="type">User</span>-<span class="type">Agent'</span>, '<span class="type">Mozilla</span>/<span class="number">5.0</span> (<span class="type">Windows</span> <span class="type">NT</span> <span class="number">10.0</span>; <span class="type">Win64</span>; x64) <span class="type">AppleWebKit</span>/<span class="number">537.36</span> (<span class="type">KHTML</span>, like <span class="type">Gecko</span>) <span class="type">Chrome</span>/<span class="number">65.0</span><span class="number">.3325</span><span class="number">.181</span> <span class="type">Safari</span>/<span class="number">537.36</span>')</span><br><span class="line"><span class="class"><span class="keyword">data</span>= urllib.request.urlopen(<span class="title">req</span>,<span class="title">timeout</span>=80).read()</span></span><br><span class="line"><span class="title">filenanme</span> = open(<span class="string">"F:/a.html"</span>,<span class="string">"wb"</span>)</span><br><span class="line"><span class="title">filenanme</span>.write(<span class="class"><span class="keyword">data</span>)</span></span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180619230553.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180619230615.png" alt=""> <strong>接下来对代码进行优化，由于之间介绍过的编码问题在地址中不能使用中文，因此要对想要查找的中文进行编码。</strong> 代码：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line">url=<span class="string">"https://www.baidu.com/s?wd="</span></span><br><span class="line"><span class="type">key</span> = <span class="string">"你好"</span></span><br><span class="line">keyword = urllib.request.quote(<span class="type">key</span>)  #对中文进行编码</span><br><span class="line">url1 = url+keyword</span><br><span class="line">req = urllib.request.Request(url1)</span><br><span class="line">req.add_header('User-Agent', 'Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">65.0</span><span class="number">.3325</span><span class="number">.181</span> Safari/<span class="number">537.36</span>')</span><br><span class="line">data= urllib.request.urlopen(req,timeout=<span class="number">80</span>).read()</span><br><span class="line">filenanme = open(<span class="string">"F:/a.html"</span>,<span class="string">"wb"</span>)</span><br><span class="line">filenanme.write(data)</span><br><span class="line">filenanme.close()</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180619230648.png" alt=""> 使用Get的请求思路：</p>
<ul>
<li>构建对应的URL地址（一般为一个模板URL+关键词），该URL地址包含Get请求的字段名和字段内容等信息，且URL地址满足GET请求的格式，即“<a href="http://xn--ses554g">http://网址</a>？字段名1=字段内容……”;（必要的时候要对字段内容进行编码）</li>
<li>以对应的URL为参数，构建Request</li>
<li>最好添加一下报头信息，以防止403错误</li>
<li>通过urlopen（）打开构建的Request对象</li>
<li>按照需求进行相关的后续处理</li>
</ul>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>Python爬虫</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python将彩色图像修改为手绘图像</title>
    <url>/2018/03/28/python-jiang-cai-se-tu-xiang-xiu-gai-wei-shou-hui-tu-xiang-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/u407244128253124607fm27gp0-1-300x200.jpg" alt=""> 这里是通过使用numpy.array数组来对图像进行处理。 这里是代码： <img src="http://47.100.4.8/wp-content/uploads/2018/03/1231232132143425436457654.png" alt=""> from PIL import Image import numpy as np a = np.array(Image.open(“F:/a.png”).convert(‘L’)).astype(‘float’) depth = 10. #（0-100） grad = np.gradient(a) #取图像灰度的梯度值 grad_x,grad_y = grad #分别取横纵图像的梯度值 grad_x = grad_x * depth / 100. grad_y = grad_y * depth / 100. A = np.sqrt(grad_x**2 + grad_y**2 + 1.) uni_x = grad_x / A uni_y = grad_y / A uni_z = 1. / A vec_e1 = np.pi / 2.2 #光源的俯视角度，弧度值 vec_az = np.pi / 4 #光源的方位角度，弧度值 dx = np.cos(vec_e1) * np.cos(vec_az) #光源对x轴的影响 dy = np.cos(vec_e1) * np.sin(vec_az) #光源对y轴的影响 dz = np.sin(vec_e1) #光源对z的影响 b = 255 * (dx * uni_x + dy * uni_y + dz * uni_z) #光源归一化 b = b.clip(0,255) im = Image.fromarray(b.astype(‘uint8’)) #重构图像 im.save(‘F:/b.jpg’)   原图： <img src="http://47.100.4.8/wp-content/uploads/2018/03/546424323.png" alt=""> 下面是效果图： <img src="http://47.100.4.8/wp-content/uploads/2018/03/3242133123.png" alt=""></p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>python数据分析</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫学习urllib.request之Post</title>
    <url>/2018/06/20/python-pa-chong-xue-xi-urllib-request-zhi-pos-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180620124632.png" alt=""> <strong>Post请求分析</strong> 实现思路：</p>
<ul>
<li>设置好URL网址</li>
<li>构建表单数据，并使用parse.urlencode对数据进行编码处理</li>
<li>创建Request对象，参数包括URL地址和要传递的数据</li>
<li>使用add_header（）添加头信息，模拟浏览器进行爬取</li>
<li>使用request.urlopen（）打开对应的Request对象，完成信息的传递</li>
<li>后续处理，比如读取内容，将内容写入文件</li>
</ul>
<p>代码：</p>
<p>import urllib.request<br>
import urllib.parse</p>
<p>url = “<a href="https://www.zhihu.com/sign">https://www.zhihu.com/sign</a>”<br>
data={“<a href="mailto:username%22:%2254651565@qq.com">username&quot;:&quot;54651565@qq.com</a>”,“password”:“1223131233”}<br>
postdata = urllib.parse.urlencode(data).encode(‘utf-8’)<br>
headers = [‘User-Agent’, ‘Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36’]<br>
req = urllib.request.Request(url,postdata)<br>
req.add_header(headers[0],headers[1])<br>
data = urllib.request.urlopen(req).read()<br>
filename  = open(“F:/a.html”,“wb”)<br>
filename.write(data)<br>
filename.close()</p>
<p>post主要用于进行网页提交信息时候用，或者在登陆网站上面使用。后面会介绍使用cookie进行登陆。   <strong>post请求时，在_data，_full_data,data 中都可以看到请求的参数，然后这些参数可以设置对应格式的字典，对字典进行编码后可以使用post进行提交。</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180620125213.png" alt=""> post信息可以在网页界面按F12键 network中进行查看。如果不想用也可以使用fiddler进行获取。</p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>Python爬虫</category>
        <category>文章页</category>
      </categories>
  </entry>
  <entry>
    <title>Python实现快速排序并且对sort进行介绍</title>
    <url>/2019/01/19/python-shi-xian-kuai-su-pai-xu-bing-qie-dui-sort-jin-xing-jie-shao-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2019/01/QQ%E5%9B%BE%E7%89%8720190119170830.png" alt="">        通过键盘接收若干个整数，存放在列表中。使用Python实现快速排序并将结果输出，并且进行和自带的sort函数相比进行性能分析。</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">import copy</span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line">import <span class="built_in">random</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#快排</span></span><br><span class="line">def once_sort(<span class="built_in">num</span>,low,high):</span><br><span class="line">    d = <span class="built_in">num</span>\[low\]</span><br><span class="line">    <span class="keyword">while</span> low&lt;high:</span><br><span class="line">        <span class="keyword">while</span> low&lt;high <span class="keyword">and</span> <span class="built_in">num</span>\[high\] &gt;= d:</span><br><span class="line">            high = high - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> low &lt; high <span class="keyword">and</span> <span class="built_in">num</span>\[high\] &lt; d:</span><br><span class="line">            <span class="built_in">num</span>\[low\] = <span class="built_in">num</span>\[high\]</span><br><span class="line">            low = low + <span class="number">1</span></span><br><span class="line">            <span class="built_in">num</span>\[high\] = <span class="built_in">num</span>\[low\]</span><br><span class="line">    <span class="built_in">num</span>\[low\] = d</span><br><span class="line">    <span class="literal">return</span> low</span><br><span class="line"></span><br><span class="line">def quick_sort(<span class="built_in">num</span>,low,high):</span><br><span class="line">    <span class="keyword">if</span> low&lt;high:</span><br><span class="line">        d = once_sort(<span class="built_in">num</span>,low,high)</span><br><span class="line">        quick_sort(<span class="built_in">num</span>,low,d)</span><br><span class="line">        quick_sort(<span class="built_in">num</span>,d+<span class="number">1</span>,high)</span><br><span class="line">    <span class="literal">return</span> <span class="built_in">num</span></span><br><span class="line"><span class="comment">#性能分析</span></span><br><span class="line">def analy():</span><br><span class="line">    randnum = \[x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1000000</span>)\] <span class="comment">#生成一万个整数</span></span><br><span class="line">    <span class="built_in">random</span>.shuffle(randnum)</span><br><span class="line">    randnum1 = copy.deepcopy(randnum)</span><br><span class="line">    print(<span class="string">'使用快速排序进行一百万数排序所花费的时间：'</span>,<span class="keyword">end</span>=<span class="string">''</span>)</span><br><span class="line">    start1 = <span class="built_in">time</span>.clock()</span><br><span class="line">    quick_sort(randnum,<span class="number">0</span>,<span class="built_in">len</span>(list(randnum))<span class="number">-1</span>)</span><br><span class="line">    finish1 = <span class="built_in">time</span>.clock()</span><br><span class="line">    print(finish1-start1)</span><br><span class="line">    print(<span class="string">'使用列表自带的sort排序函数进行一百万数排序所花费的时间：'</span>, <span class="keyword">end</span>=<span class="string">''</span>)</span><br><span class="line">    start1 = <span class="built_in">time</span>.clock()</span><br><span class="line">    randnum1.<span class="built_in">sort</span>()</span><br><span class="line">    finish1 = <span class="built_in">time</span>.clock()</span><br><span class="line">    print(finish1 - start1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> \_\<span class="title">_name</span>\_\_ == <span class="string">'\_\_main\_\_'</span>:</span><br><span class="line">    strnum = input(<span class="string">'输入一串数字，数字之间以逗号分隔开：'</span>)</span><br><span class="line">    <span class="built_in">num</span> = strnum.<span class="built_in">split</span>(<span class="string">','</span>)</span><br><span class="line">    num1 = \[int(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">num</span>\]</span><br><span class="line">    num2 = copy.deepcopy(num1)</span><br><span class="line">    print(<span class="string">'列表形式:'</span>, <span class="keyword">end</span>=<span class="string">''</span>)</span><br><span class="line">    print(num1)</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = <span class="built_in">len</span>(num1)<span class="number">-1</span></span><br><span class="line">    num1 = quick_sort(num1,low,high)</span><br><span class="line">    print(<span class="string">'排序之后的结果为：'</span>,<span class="keyword">end</span>=<span class="string">''</span>)</span><br><span class="line">    print(num1)</span><br><span class="line">    print(<span class="string">'使用列表自带的sort函数排序的结果为：'</span>,<span class="keyword">end</span>=<span class="string">''</span>)</span><br><span class="line">    num2.<span class="built_in">sort</span>()</span><br><span class="line">    print(num2)</span><br><span class="line">    <span class="comment">#算法性能的分析</span></span><br><span class="line">    analy()</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2019/01/QQ%E5%9B%BE%E7%89%8720190119171031.png" alt=""> 下面是通过查阅资料得到的对自带的sort函数进行的介绍： 它使用的是Timesort原理，timesort是结合了合并排序和插入排序而得出的排序算法。该算法为了减少对升序部分的回溯和对降序部分的性能倒退，将输入的数值按照升序和降序的特点进行了分区。因此排序的单位不是一个个数字而是一个个块-分区。其中每个分区叫一个run，针对这些run序列，每次拿一个run出来按规则进行合并。每次合并会将两个run合并为一个run，合并的结果保存到栈中，知道所有的run都被使用，这时将栈中所有的run合并到只剩一个run，这个run便是排序好的结果。 Timesort和快排之间的性能比较： <img src="http://47.100.4.8/wp-content/uploads/2019/01/QQ%E5%9B%BE%E7%89%8720190119171150.png" alt=""> 这里对timesort算法的了解参考了如下文章： <a href="https://blog.csdn.net/yangzhongblog/article/details/8184707">https://blog.csdn.net/yangzhongblog/article/details/8184707</a></p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>Python知识</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据分析学习笔记（一）</title>
    <url>/2018/03/22/python-shu-ju-fen-fen-xi-xue-xi-bi-ji-yi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180322184136.png" alt=""></p>
<h3 id="NumPy系统是Python的一种开源的数值计算扩展。这种工具可用来存储和处理大型矩阵，比Python自身的嵌套列表（nested-list-structure-结构要高效的多（该结构也可以用来表示矩阵（matrix））。"><a class="header-anchor" href="#NumPy系统是Python的一种开源的数值计算扩展。这种工具可用来存储和处理大型矩阵，比Python自身的嵌套列表（nested-list-structure-结构要高效的多（该结构也可以用来表示矩阵（matrix））。">¶</a>NumPy系统是Python的一种开源的数值计算扩展。这种工具可用来存储和处理大型矩阵，比Python自身的嵌套列表（nested list structure)结构要高效的多（该结构也可以用来表示矩阵（matrix））。</h3>
<p>这里是从numpy库的学习开始的。</p>
<h5 id="Numpy库学习"><a class="header-anchor" href="#Numpy库学习">¶</a>Numpy库学习</h5>
<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/%E8%87%AA%E8%A1%8C%E8%BD%A6%E8%87%AA%E8%A1%8C%E8%BD%A6%E8%87%AA%E8%A1%8C%E8%BD%A6%E8%87%AA%E8%A1%8C%E8%BD%A6%E8%87%AA%E8%A1%8C%E8%BD%A6%E8%A1%8C%E5%9C%A8%E6%93%A6%E6%8B%AD%E7%9A%84-300x109.png" alt=""> import numpy as np  将numpy以np作为其简写别名 维度：一组数据的组织形式，可以一维二维甚至多维展开。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/%E5%95%8A%E8%BE%93%E5%87%BA%E8%87%AA%E8%A1%8C%E8%BD%A6%E6%92%92%E5%A4%A7%E6%B6%A6%E5%8F%91-300x92.png" alt=""> 一维数据：由对等关系的有序或无需数据构成，采用线性方式组织。可以使用列表、数组（不常用）和集合等表示。 列表中每一个数据元素的类型可以不同，数组中每一个数据元素的数据类型要相同 <img src="http://47.100.4.8/wp-content/uploads/2018/03/123523453243214-300x68.png" alt=""> 二维数据：由多个一维数据构成，是一维数据的组合形成。 表格是典型的二维数据，表头是二维数据的一部分 <img src="http://47.100.4.8/wp-content/uploads/2018/03/435436456345-300x69.png" alt="">   多维数据：由一维或微微数据在新维度上扩展形成 高维数据仅利用最基本的二元关系展示数据间的复杂结构 字典类型或者数据表示格式 键值对 字典型结构 <img src="http://47.100.4.8/wp-content/uploads/2018/03/%E6%92%92%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%82%BB%E5%90%8A-300x123.png" alt=""> 使用numpy进行两个一维数组（维度相同时）进行A**2+B**3运算。 数组对象可以去掉元素间运算所需的循环，使一维向量更像单个数据 numpy底层通过使用c语言来完成的   对于大型的数据运算，一个维度的所有数据类型往往相同，因此采用数组对象使用相同的数据类型可以节省运算和存储空间。   ndarray是一个多维数组对象，由两部分构成：1.实际的数据 2.描述这些数据的元数据（数据维度，数据类型等） ndarray数组一般要求所有元素类型相同，数组下标从0开始   ndarray：N维数组对象（矩阵），所有元素必须是相同类型。 ndarray属性：ndim属性，表示维度个数；shape属性，表示各维度大小；dtype属性，表示数据类型。 使用arange创建ndarray数组： a = np.array(数组内容) End! 今天就到这里。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-1-300x225.jpg" alt=""></p>
]]></content>
      <categories>
        <category>python数据分析</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data analysis</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python批量修改文件夹文件名称的小程序</title>
    <url>/2018/05/05/python-pi-liang-xiu-gai-wen-jian-jia-wen-jian-ming-cheng-de-xiao-cheng-xu-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/%E5%9B%BE%E7%89%87193.png" alt=""> 由于之前删除图片吃了一次大亏，所以想到写一个批量修改文件名称的小程序，以防止之前的文件被覆盖。   程序样子： <img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180505232035.png" alt="">   使用： <img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180505232209.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180505232229.png" alt=""> 结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180505232333.png" alt="">   下载地址： <a href="https://download.csdn.net/download/qq_16184125/10394937">https://download.csdn.net/download/qq_16184125/10394937</a></p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫学习笔记</title>
    <url>/2018/05/26/python-pa-chong-xue-xi-bi-ji-1/</url>
    <content><![CDATA[<p>Urllib库是python中一个用于操作URL的模块。 在Python3.X中一些库引用名： import urllib.request import urllib.error import urllib.parse import urllib.urlopen import urllib.urlencode import urllib.quote http.CookieJar urllib.request.Request  <strong>快速爬取一个网页：</strong> 使用file=urllib.request.urlopen() 打开并爬取一个网页 使用file.read() 读取网页内容 也可以使用file.readline（）读取一行内容 具体代码如下：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span> = urllib.request.urlopen(<span class="string">"http://strivezs.com"</span>)</span><br><span class="line">data = <span class="keyword">file</span>.<span class="keyword">read</span>()</span><br><span class="line">dataline = <span class="keyword">file</span>.readline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(data)</span><br><span class="line"><span class="keyword">print</span>(dataline)</span><br><span class="line"></span><br><span class="line">  结果： ![](http:<span class="comment">//47.100.4.8/wp-content/uploads/2018/05/147.png) 等太长了不复制了就。上面就是成功爬取下来后得到的网页的html代码 这里需要的注意的是： 通过使用read（）得到的内容会以字符串的形式存储。 而通过readline（）得到的是会以列表的形式存储   将爬取到的网页以htm的形式保存：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span> = urllib.request.urlopen(<span class="string">"http://strivezs.com"</span>)</span><br><span class="line">data = <span class="keyword">file</span>.<span class="keyword">read</span>()</span><br><span class="line">dataline = <span class="keyword">file</span>.readline()</span><br><span class="line"></span><br><span class="line">filestring = open(<span class="string">"F:/data.html"</span>,<span class="string">"wb"</span>)</span><br><span class="line">filestring.<span class="keyword">write</span>(data)</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/1-8.png" alt=""> 同样还可以使用txt，等其他形式进行保存。 也可以使用urllib.request.urlretrieve直接对网页进行爬取并自动保存到本地设置的路径。</p>
<p>filename = urllib.request.urlretrieve(“<a href="http://strivezs.com">http://strivezs.com</a>”,filename=“F://2.html”)<br>
urllib.request.urlcleanup()  #清除urlretrieve（）造成缓存</p>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/2-8.png" alt=""> 返回与当前环境有关的信息使用info（）进行返回 print(<a href="http://file.info">file.info</a>()) <a href="http://xn--siqq0lh0kphjrpm4kevvce31ar30as9z.info">调用的格式为爬取网页.info</a>（）   获得爬取网页的状态码使用getcode（） print(file.getcode()) 调用格式为：爬取网页.getcode（）   获得爬取网页的url使用geturl（） print(file.geturl()) 调用格式爬取网页.geturl（）   需要注意的是：url标准中只会允许一部分ASCII字符比如数组。字母。部分符号等。而一些其他字符比如汉字等则不符合标准。 如果我们在URL中使用一些其他不符合标准的字符就会出现问题，此时可以使用URL编码的方式解决。 使用urllib.request.quote（网址）进行编码 使用urllib.request.unquote（编码后的网址）进行解码 使用：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">file</span> = urllib.request.urlopen(<span class="string">"http://strivezs.com"</span>)</span><br><span class="line">data = <span class="keyword">file</span>.<span class="keyword">read</span>()</span><br><span class="line">dataline = <span class="keyword">file</span>.readline()</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">file</span>.info())</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">file</span>.getcode())</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">file</span>.geturl())</span><br></pre></td></tr></table></figure>
<p><strong>浏览器的模拟——Headers属性</strong> headers={“<strong>User-Agent”,</strong> “Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36” } 在爬取某些网页时会出现403错误，则证明该网页在robots协议中拒绝了爬虫。 使用build_opener（）修改报头：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="title">url</span>=<span class="string">"http://strivezs.com"</span></span><br><span class="line"><span class="title">headers</span>=&#123;<span class="string">"User-Agent"</span>, <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36"</span>&#125;</span><br><span class="line"><span class="title">opener</span> = urllib.request.build_opener()</span><br><span class="line"><span class="title">opener</span>.addheaders = \[headers\]</span><br><span class="line"><span class="class"><span class="keyword">data</span>=opener.open(<span class="title">url</span>).read()</span></span><br></pre></td></tr></table></figure>
<p>上面这种方法不作具体的介绍了。 使用add_header（）添加报头：  这里我更加推荐使用这种方法，因为比较简单好理解。 代码：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="title">url</span>=<span class="string">"http://strivezs.com"</span></span><br><span class="line"><span class="title">req</span> = urllib.request.<span class="type">Request</span>(url)</span><br><span class="line"><span class="title">req</span>.add_header('<span class="type">User</span>-<span class="type">Agent'</span>, '<span class="type">Mozilla</span>/<span class="number">5.0</span> (<span class="type">Windows</span> <span class="type">NT</span> <span class="number">10.0</span>; <span class="type">Win64</span>; x64) <span class="type">AppleWebKit</span>/<span class="number">537.36</span> (<span class="type">KHTML</span>, like <span class="type">Gecko</span>) <span class="type">Chrome</span>/<span class="number">65.0</span><span class="number">.3325</span><span class="number">.181</span> <span class="type">Safari</span>/<span class="number">537.36</span>')</span><br><span class="line"><span class="class"><span class="keyword">data</span>= urllib.request.urlopen(<span class="title">req</span>).read()</span></span><br><span class="line"><span class="title">print</span>(<span class="class"><span class="keyword">data</span>)</span></span><br></pre></td></tr></table></figure>
<p>add_header（）是用来添加对应的报头信息   超时设置： 有时我们在访问一个网页时长时间没有响应，系统就会判断超时了，然后就无法打开网页。 但是有时我们需要根据自己的需求来设置超时的时间。一般都设为80秒。 代码：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">import urllib.request</span><br><span class="line"></span><br><span class="line">url=<span class="string">"http://strivezs.com"</span></span><br><span class="line">headers=\['User-Agent', 'Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">65.0</span><span class="number">.3325</span><span class="number">.181</span> Safari/<span class="number">537.36</span>'\]</span><br><span class="line">req = urllib.request.Request(url)</span><br><span class="line">req.add_header('User-Agent', 'Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">65.0</span><span class="number">.3325</span><span class="number">.181</span> Safari/<span class="number">537.36</span>')</span><br><span class="line">data= urllib.request.urlopen(req,timeout=<span class="number">80</span>).read()</span><br></pre></td></tr></table></figure>
<p>Http协议请求主要分为6种类型，各类型的主要作用如下：</p>
<ul>
<li>Get请求：GET请求会通过URL网址传递信息，可以直接在URL中写上要传递的信息，也可以由表单进行传递。如果使用表单进行传递，这表单中的信息会自动转为URL地址中的数据，通过URL地址传递。</li>
<li>Post请求：可以向服务器提交数据，是一种比较主流也比较安全的数据传递方式，比如登陆时，经常使用Post请求发送地址。</li>
<li>Put请求：请求服务器存储一个资源，通常要指定存储的位置。</li>
<li>Delete请求：请求服务器删除一个数据</li>
<li>Head请求：请求获得服务器报头信息</li>
<li>Options请求：可以获得当前URL所支持的请求类型</li>
</ul>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>Python爬虫</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据分析</title>
    <url>/2018/03/16/python-shu-ju-fen-xi-1/</url>
    <content><![CDATA[<h1>首先介绍一下编程工具：</h1>
<h3 id="Anaconda这个集成开发工具"><a class="header-anchor" href="#Anaconda这个集成开发工具">¶</a>Anaconda这个集成开发工具</h3>
<h3 id="anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。-1-因为包含了大量的科学包，Anaconda-的下载文件比较大（约-515-MB），如果只需要某些包，或者需要节省带宽或存储空间，也可以使用Miniconda这个较小的发行版（仅包含conda和-Python）。"><a class="header-anchor" href="#anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。-1-因为包含了大量的科学包，Anaconda-的下载文件比较大（约-515-MB），如果只需要某些包，或者需要节省带宽或存储空间，也可以使用Miniconda这个较小的发行版（仅包含conda和-Python）。">¶</a>anaconda指的是一个开源的<a href="https://baike.baidu.com/item/Python">Python</a>发行版本，其包含了conda、Python等180多个科学包及其依赖项。[1]  因为包含了大量的科学包，Anaconda 的下载文件比较大（约 515 MB），如果只需要某些包，或者需要节省带宽或存储空间，也可以使用<strong>Miniconda</strong>这个较小的发行版（仅包含conda和 Python）。</h3>
<p>下载链接：<a href="https://pan.baidu.com/s/1z1oKT0HsOD-j_0jB35j2lQ">https://pan.baidu.com/s/1z1oKT0HsOD-j_0jB35j2lQ</a> 密码：7y1l Anaconda集成安装了conda、Spyder、IPython <img src="http://47.100.4.8/wp-content/uploads/2018/03/1-300x85.png" alt=""> Anaconda的界面是这样的： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180316170633-300x182.png" alt=""></p>
<h5 id="Spyder的相关配置："><a class="header-anchor" href="#Spyder的相关配置：">¶</a>Spyder的相关配置：</h5>
<p>调整Spyder的界面风格 调节spyder的风格：（黑色）   <img src="http://47.100.4.8/wp-content/uploads/2018/03/2-300x124.png" alt=""> 选择第三个 <img src="http://47.100.4.8/wp-content/uploads/2018/03/3.png" alt=""> 然后在scheme选择monokai 就变成这样的风格： <img src="http://47.100.4.8/wp-content/uploads/2018/03/4-300x159.png" alt="">   今天就介绍道这里吧，以后还会介绍相关库函数的操作。 ヾ(ToT)Bye<sub>Bye</sub> <img src="http://47.100.4.8/wp-content/uploads/2018/03/d60c9e7eca806538f48a646b9edda144ad348202-300x300.jpg" alt=""></p>
]]></content>
      <categories>
        <category>python数据分析</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Anaconda</tag>
        <tag>Data analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据分析学习笔记（三）</title>
    <url>/2018/04/01/python-shu-ju-fen-xi-xue-xi-bi-ji-san-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180322184136.png" alt=""> 还有好多存货没有发。只能先发发这个课…… 在Ipython提示符下： <img src="http://47.100.4.8/wp-content/uploads/2018/04/3321321.png" alt=""> ndarray对象属性： <img src="http://47.100.4.8/wp-content/uploads/2018/04/1232321312.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/04/32434123213.png" alt=""> ndarray的元素类型： <img src="http://47.100.4.8/wp-content/uploads/2018/04/4232423123.png" alt=""> 支持布尔类型 intc（与c语言中int类型一样） intp（用于索引的整数） int8（字节长度整数类型） int16（16位的整数类型） int32（……） int64（……）   没有负数的整数类型  无符号整数 <img src="http://47.100.4.8/wp-content/uploads/2018/04/321231235412.png" alt=""> 使用ndarray数组创建非同质对象构成。 <img src="http://47.100.4.8/wp-content/uploads/2018/04/45343242.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/04/2134324234.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/04/12321543534.png" alt=""> 数据类型为O   则代表的是对象类型 当ndarray的元素数据类型不同的时候，或者每一个元素的维度数量不相同的是时候，ndarray会将每一个元素认为一个对象 当ndarray非同质时不能放回numpy的优势   一维数组的索引和切片的python的列表相似。 <img src="http://47.100.4.8/wp-content/uploads/2018/04/1111111111111111.png" alt=""> a[① : ② : ③]  第一部分是起始编号 第二部分是终止编号 第三部分是步长   多维数据索引和切片：   索引操作： np.arange(24)用来生成一个一维数组  使用reshape（（2,3,4））改变格式 这样刚才的一维数据就生成了2,3,4维度的数组 通过索引来访问 <img src="http://47.100.4.8/wp-content/uploads/2018/04/12312312312312312323123123.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/04/22222222222222222222.png" alt=""> 上面的图示可得 一维数组（0-23）被分为了两个大的数组 其中每一个数组又被分为了三个数组 其中每个的数组又被分为了四个元素 End！ <a href="http://47.100.4.8/wp-content/uploads/2018/04/%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95%E4%B8%89.rar">代码记录三</a> <img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-1.jpg" alt=""></p>
]]></content>
      <categories>
        <category>python数据分析</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据分析学习笔记（四）</title>
    <url>/2018/04/18/python-shu-ju-fen-xi-xue-xi-bi-ji-si-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180322184136.png" alt="">   切片操作： 在每个维度上给出一个切片空间 <img src="http://47.100.4.8/wp-content/uploads/2018/04/3231341234.png" alt=""> 第一个冒号是对于在第一个维度上覆盖了所有元素 <img src="http://47.100.4.8/wp-content/uploads/2018/04/324234132123.png" alt=""> ndarray数组的运算：   数据与标量之间的运算作用于数组的每一个元素 比如： a和b都是ndarray数组 a**2 + b**3 = c  即为a和b中每一个元素进行平方和三次方运算相加 存储到c中 ndarray数组a  的平均值为：a.mean() <img src="http://47.100.4.8/wp-content/uploads/2018/04/33333333333333123123.png" alt=""> numpy的一元函数： <img src="http://47.100.4.8/wp-content/uploads/2018/04/213123123123.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/04/2132132131241.png" alt=""> 示例： <img src="http://47.100.4.8/wp-content/uploads/2018/04/123543213.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/04/111111111111111111111111111111.png" alt=""> 运算后的元素是生成了另一组元素 如果想要修改a数组的值 那么需要将结果在赋值给a  a = np.rint（a）     numpy的二元函数： <img src="http://47.100.4.8/wp-content/uploads/2018/04/2131234322222222222222222222.png" alt=""> 示例： <img src="http://47.100.4.8/wp-content/uploads/2018/04/%E5%91%83%E5%91%83%E5%91%83%E5%91%83%E5%91%83%E5%91%83%E9%B9%85%E9%B9%85%E9%B9%85%E9%B9%85%E9%B9%85%E9%B9%85%E9%A5%BF.png" alt=""> 整数和浮点数进行运算 运算的结果就是浮点数   End！ <img src="http://47.100.4.8/wp-content/uploads/2018/04/371122f3d7ca7bcb55c99a56b7096b63f624a83c.jpg" alt=""></p>
]]></content>
      <categories>
        <category>python数据分析</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>Python数据分析学习笔记（二）</title>
    <url>/2018/03/23/python-shu-ju-fen-xi-xue-xi-bi-ji-er-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180322184136.png" alt=""> 今天依旧是这个。23333   这里是一个例子： import numpy;   print(‘生成数组’) a = [1,2,3,4,5]  #创建列表元素 x = numpy.array(a)  #创建数组  列表形式 print(x) #打印数组 print(x.ndim) #打印数组维度 print(x.shape) #打印数组各个维度的长度 shape 是一个元祖 print(x.dtype) #打印数组元素的类型   print(‘使用zeros/ones/empty创建数组:根据shape来创建’) x = numpy.zeros(6) #创建维度为6的，元素都是0的一维数组 print(x)   x = numpy.zeros((2,3)) #创建一维长度为2,二维长度为3的二维0数组 print(x)   x = numpy.ones((2,3)) #创建一维长度为2，二维长度为3的二维1数组 print(x)   x = numpy.empty((3,3)) #创建一维长度为2，二维长度为3，未初始化的二维数组 print(x)   print(‘使用arrange生成连续元素’) print(numpy.arange(6)) #创建一个长度为6的连续区间 print(numpy.arange(0,6,2))  #创建一个从开始到6结束（不算6），步长为2的区间   由于服务器出了点问题。上传图片上传半天都没反应，难受香菇所以暂时是没有了。这能以上面的这个例子来给出参考了。</p>
]]></content>
      <categories>
        <category>python数据分析</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Data analysis</tag>
        <tag>Numpy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中下划线的5种含义</title>
    <url>/2018/04/21/python-zhong-xia-hua-xian-de-5-zhong-han-yi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/u407244128253124607fm27gp0.jpg" alt=""> 在Python中单下划线和双下划线之间有不同的区别，不仅是在代表的意思上不同，方法名称上也有不同的含义。 下面是五种下划线模式和命名：</p>
<ul>
<li>单前导下划线：_var</li>
<li>单末尾下划线：var_</li>
<li>双前导下划线：__var</li>
<li>双前导和末尾下划线：__var__</li>
<li>单下划线：_</li>
</ul>
<p>首先是单前导下划线： 当涉及到变量和方法名称时，单个下划线前缀有一个约定俗成的含义。 它是对程序员的一个提示 - 意味着Python一致认为它应该是什么意思，但程序的行为不受影响。 下划线前缀的含义是告知其他程序员：以单个下划线开头的变量或方法仅供内部使用。 该约定在PEP 8中有定义。 具体形式： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180421225434.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180421230818.png" alt=""> 接下来是单末尾下划线： 有时候，一个变量的最合适的名称已经被一个关键字所占用。 因此，像class或def这样的名称不能用作Python中的变量名称。 在这种情况下，你可以附加一个下划线来解决命名冲突： 具体来讲就是用来解决函数或者变量命名之间冲突的问题。 具体如下： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180421225647.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180421225434.png" alt=""> 然后是双前导下划线： 双下划线前缀会导致Python解释器重写属性名称，以避免子类中的命名冲突。 这也叫做名称修饰（name mangling） - 解释器更改变量的名称，以便在类被扩展的时候不容易产生冲突。 实质上就是对函数的的重载。 具体例子： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180421225647.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180421225647.png" alt=""> 上面的例子就是对__init__（）进行了重载 ，否则在调用该类时，解释器会默认使用自带的init（初始化）函数。 下面是系统自带的对象属性的列表： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180421230109.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180421230109.png" alt=""> 可以看到这上面出现了自己当初重载__init__中的变量：test_match,testmatch 这就是__双下划线的对对象属性的修改 接来下是双前导和末尾下划线： 一个名字同时以双下划线开始和结束，则不会应用名称修饰。由双下划线前缀和后缀包围的变量不会被Python解释器修改， 但是Python保留了有双前导和双末尾下划线的名称，用于特殊用途。   最后是单下划线_： 单个独立下划线是用作一个名字，来表示某个变量是临时的或无关紧要的。 这里的_i就是一个临时变量，表示的是一个不关心的变量名称任意。 这个含义只是“依照约定”，并不会在Python解释器中触发特殊的行为。 单个下划线仅仅是一个有效的变量名称，会有这个用途而已。   总结：一张图解释一切！ <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180421230940.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180421230940.png" alt=""></p>
]]></content>
      <categories>
        <category>Python知识</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Knowledge</tag>
      </tags>
  </entry>
  <entry>
    <title>python网址二维码生成</title>
    <url>/2018/05/28/python-wang-zhi-er-wei-ma-sheng-cheng-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/qr.png" alt=""> 先上效果图，这是我网站的二维码，其中中间的图片要求是ico格式，（这里可以结合我之前的提供的ico转换器使用） 接下来给出具体代码：（暂时还没有做GUI图形界面以后会发的。） 所以这里先上代码了 需要注意的是需要自己安装qrcode库</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">import qrcode</span><br><span class="line"><span class="keyword">from</span> PIL import <span class="built_in">Image</span></span><br><span class="line">import os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def gen_qrcode(string, path, logo=<span class="string">""</span>):</span><br><span class="line">    qr = qrcode.QRCode(</span><br><span class="line">        version=<span class="number">2</span>,</span><br><span class="line">        error\<span class="variable">_correction</span>=qrcode.constants.ERROR\<span class="variable">_CORRECT_H</span>,</span><br><span class="line">        box_size=<span class="number">8</span>,</span><br><span class="line">        border=<span class="number">1</span></span><br><span class="line">    )</span><br><span class="line">    qr.add_data(string)</span><br><span class="line">    qr.make(fit=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    img = qr.make_image()</span><br><span class="line">    img = img.convert(<span class="string">"RGBA"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> logo <span class="built_in">and</span> os.path.exists(logo):</span><br><span class="line">        icon = <span class="built_in">Image</span>.open(logo)</span><br><span class="line">        img\<span class="variable">_w</span>, img\<span class="variable">_h</span> = img.<span class="built_in">size</span></span><br><span class="line">        factor = <span class="number">4</span></span><br><span class="line">        <span class="built_in">size</span>\<span class="variable">_w</span> = int(img\<span class="variable">_w</span> / factor)</span><br><span class="line">        <span class="built_in">size</span>\<span class="variable">_h</span> = int(img\<span class="variable">_h</span> / factor)</span><br><span class="line"></span><br><span class="line">        icon\<span class="variable">_w</span>, icon\<span class="variable">_h</span> = icon.<span class="built_in">size</span></span><br><span class="line">        <span class="keyword">if</span> icon\<span class="variable">_w</span> &gt; <span class="built_in">size</span>\<span class="variable">_w</span>:</span><br><span class="line">            icon\<span class="variable">_w</span> = <span class="built_in">size</span>\<span class="variable">_w</span></span><br><span class="line">        <span class="keyword">if</span> icon\<span class="variable">_h</span> &gt; <span class="built_in">size</span>\<span class="variable">_h</span>:</span><br><span class="line">            icon\<span class="variable">_h</span> = <span class="built_in">size</span>\<span class="variable">_h</span></span><br><span class="line">        icon = icon.<span class="built_in">resize</span>((icon\<span class="variable">_w</span>, icon\<span class="variable">_h</span>), <span class="built_in">Image</span>.ANTIALIAS)</span><br><span class="line"></span><br><span class="line">        w = int((img\<span class="variable">_w</span> - icon\<span class="variable">_w</span>) / <span class="number">2</span>)</span><br><span class="line">        h = int((img\<span class="variable">_h</span> - icon\<span class="variable">_h</span>) / <span class="number">2</span>)</span><br><span class="line">        icon = icon.convert(<span class="string">"RGBA"</span>)</span><br><span class="line">        img.paste(icon, (w, h), icon)</span><br><span class="line">    img.save(path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> \_\<span class="variable">_name</span>\_\_ == <span class="string">"\_\_main\_\_"</span>:</span><br><span class="line">   gen_qrcode(<span class="string">'http://strivezs.com'</span>,<span class="string">"F:/qr.png"</span>, <span class="string">"F:/a.ico"</span>)</span><br></pre></td></tr></table></figure>
<p>这里需要在代码里面手动设置地址。</p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python&amp;wxPython 谷歌浏览历史分析小程序</title>
    <url>/2018/04/27/python-wxpython-gu-ge-liu-lan-li-shi-fen-xi-xiao-cheng-xu-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/%E9%98%BF%E8%BE%BE%E4%B8%8B%E6%AC%A1%E5%86%8D%E6%92%92.jpg" alt=""> 最近看了一篇别人的博文，通过使用Python自带的sqlite3库来对数据库进行访问得到一些自己想要得数据，然后又看到了别人对网页chrome历史记录进行分析的博文，于是自己也写了一个对谷歌浏览历史记录进行分析的小GUI程序。 下面是样子： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180427174349.png" alt=""> 使用步骤： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180427174523.png" alt=""> 可以根据自己的要求来进行一些设置（这里推荐分析数量尽量保持在10个左右太多了会堆在一起。） 结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180427174844.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180427174720.png" alt="">     下载地址：<a href="https://download.csdn.net/download/qq_16184125/10379538">https://download.csdn.net/download/qq_16184125/10379538</a></p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>WxPython</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>WxPython</tag>
      </tags>
  </entry>
  <entry>
    <title>Python随机密码生成并判断强度</title>
    <url>/2019/01/19/python-sui-ji-mi-ma-sheng-cheng-bing-pan-duan-qiang-du-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2019/01/QQ%E5%9B%BE%E7%89%8720190119165308.png" alt=""> 能够根据需求生成指定长度的密码。 密码满足的规则（密码至少包含以下四条规则中的三条）： 1.大写字母（A-Z） 2.小写字母（a-z） 3.数字（0-9） 4.特殊字符（!,%,@,#等等） 密码强度判断的规则： 1.打分规则说明 2.如果密码中小写字母和大写字母的个数相差不超过2 则认为得分应该较高 3.如果密码中数字的个数小于等于密码总长度的一般是认为得分较高 4.如果得到的密码中含有标签符号则认为得分较高 代码：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">import <span class="keyword">string</span></span><br><span class="line">import <span class="built_in">random</span></span><br><span class="line">lowercase = <span class="keyword">string</span>.ascii_lowercase <span class="comment">#所有小写字母</span></span><br><span class="line">uppercase = <span class="keyword">string</span>.ascii_uppercase <span class="comment">#所有大写字母</span></span><br><span class="line">digits = <span class="keyword">string</span>.digits <span class="comment">#所有数字</span></span><br><span class="line">punction = <span class="keyword">string</span>.punctuation <span class="comment">#所有标点符号</span></span><br><span class="line"></span><br><span class="line">def judge(str1, r1, r2, r3, r4):</span><br><span class="line">    grade = <span class="number">0</span>  <span class="comment"># 计分器</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">abs</span>(r1 - r2) &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">abs</span>(r1 - r2) &lt;= <span class="number">2</span>:</span><br><span class="line">        grade = grade + <span class="number">50</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        grade = grade + <span class="number">30</span></span><br><span class="line">    <span class="keyword">if</span> r3 &lt;= <span class="built_in">round</span>(int(<span class="built_in">length</span>) / <span class="number">2</span>):</span><br><span class="line">        grade = grade + <span class="number">30</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        grade = grade + <span class="number">20</span></span><br><span class="line">    <span class="keyword">if</span> r4 == <span class="number">0</span>:</span><br><span class="line">        grade = grade - <span class="number">0</span>  <span class="comment"># 不加分</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        grade = grade + <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> grade &gt;= <span class="number">80</span>:</span><br><span class="line">        print(<span class="string">"该密码强度为高"</span>)</span><br><span class="line">    elif grade &lt; <span class="number">80</span> <span class="keyword">and</span> grade &gt;= <span class="number">70</span>:</span><br><span class="line">        print(<span class="string">"该密码强度为较高"</span>)</span><br><span class="line">    elif grade &lt; <span class="number">70</span> <span class="keyword">and</span> grade &gt;= <span class="number">60</span>:</span><br><span class="line">        print(<span class="string">"该密码强度为中等"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"该密码强度为较差"</span>)  <span class="comment"># 由于采用随机生成也个字符所占的比例差不多 所以不存在很差的密码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">length</span> = input(<span class="string">'请输入你想要的密码长度：'</span>)</span><br><span class="line"><span class="comment">#使用round防止在除法时得出小数</span></span><br><span class="line">r1 = <span class="built_in">random</span>.randint(<span class="number">1</span>,<span class="built_in">round</span>(int(<span class="built_in">length</span>)*<span class="number">2</span>/<span class="number">5</span>)) <span class="comment">#乘以五分之二来确保随机出来的小写字母的个数不会过大</span></span><br><span class="line">r2 = <span class="built_in">random</span>.randint(<span class="number">1</span>,<span class="built_in">round</span>((int(<span class="built_in">length</span>)-r1)*<span class="number">2</span>/<span class="number">5</span>)) <span class="comment">#乘以五分之二保证生成的大谢罪不会过多导致数字和标点符号过少</span></span><br><span class="line">r3 = <span class="built_in">random</span>.randint(<span class="number">1</span>,(int(<span class="built_in">length</span>)-r1-r2))</span><br><span class="line">r4 = int(<span class="built_in">length</span>)-r1-r2-r3</span><br><span class="line"><span class="comment">#保存用于密码强度判断</span></span><br><span class="line">d1=r1</span><br><span class="line">d2=r2</span><br><span class="line">d3=r3</span><br><span class="line">d4=r4</span><br><span class="line">print(<span class="string">'小写字母的长度:'</span>,r1)</span><br><span class="line">print(<span class="string">'大写字母的长度:'</span>,r2)</span><br><span class="line">print(<span class="string">'数字的长度:'</span>,r3)</span><br><span class="line">print(<span class="string">'标点符号的长度:'</span>,r4)</span><br><span class="line"></span><br><span class="line">list = \[\] <span class="comment">#用来存储随机出来的数据</span></span><br><span class="line"><span class="keyword">while</span> r1 !=<span class="number">0</span> <span class="keyword">or</span> r2!=<span class="number">0</span> <span class="keyword">or</span> r3!=<span class="number">0</span> <span class="keyword">or</span> r4!=<span class="number">0</span>:</span><br><span class="line">    m = <span class="built_in">random</span>.randint(<span class="number">1</span>,<span class="number">4</span>)  <span class="comment">#四选1来生成一种字符</span></span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">1</span> <span class="keyword">and</span> r1&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">num</span> = <span class="built_in">random</span>.randint(<span class="number">0</span>,<span class="built_in">len</span>(lowercase)<span class="number">-1</span>)</span><br><span class="line">        list.append(lowercase\[<span class="built_in">num</span>\])</span><br><span class="line">        r1 = r1<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">2</span> <span class="keyword">and</span> r2&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">num</span> = <span class="built_in">random</span>.randint(<span class="number">0</span>,<span class="built_in">len</span>(uppercase)<span class="number">-1</span>)</span><br><span class="line">        list.append(uppercase\[<span class="built_in">num</span>\])</span><br><span class="line">        r2 = r2<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">3</span> <span class="keyword">and</span> r3&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">num</span> = <span class="built_in">random</span>.randint(<span class="number">0</span>,<span class="built_in">len</span>(digits)<span class="number">-1</span>)</span><br><span class="line">        list.append(digits\[<span class="built_in">num</span>\])</span><br><span class="line">        r3 = r3<span class="number">-1</span></span><br><span class="line">    <span class="keyword">if</span> m==<span class="number">4</span> <span class="keyword">and</span> r4&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="built_in">num</span> = <span class="built_in">random</span>.randint(<span class="number">0</span>,<span class="built_in">len</span>(punction)<span class="number">-1</span>)</span><br><span class="line">        list.append(punction\[<span class="built_in">num</span>\])</span><br><span class="line">        r4 = r4<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'随机生成的密码为'</span>,<span class="keyword">end</span>=<span class="string">''</span>)</span><br><span class="line">str1 = <span class="string">''</span>.join(list)</span><br><span class="line">print(str1)</span><br><span class="line"></span><br><span class="line">judge(str1,d1,d2,d3,d4)</span><br></pre></td></tr></table></figure>
<p>使用： <img src="http://47.100.4.8/wp-content/uploads/2019/01/QQ%E5%9B%BE%E7%89%8720190119170449.png" alt=""></p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>随机密码</tag>
      </tags>
  </entry>
  <entry>
    <title>python通过关键词爬取京东商品图片</title>
    <url>/2018/06/08/python-tong-guo-guan-jian-ci-pa-qu-jing-dong-shang-pin-tu-pian-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/u407244128253124607fm27gp0.jpg" alt=""> 最近在看爬虫方面的知识，所以写了一个小爬虫可以爬取京东商城商品的图片，可以通过关键词进行搜索指定的商品，也可以进行多页爬取。 具体实现代码：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line"><span class="built_in">import</span> urllib.request</span><br><span class="line"><span class="built_in">import</span> re</span><br><span class="line"><span class="built_in">import</span> requests</span><br><span class="line"><span class="built_in">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="attr">url="https://search.jd.com/Search?keyword="</span></span><br><span class="line"></span><br><span class="line">def CrawImg(url,page):</span><br><span class="line">    <span class="attr">headers</span> = \['User-Agent',</span><br><span class="line">               'Mozilla/<span class="number">5.0</span> (Windows NT <span class="number">10.0</span>; Win64; x64) AppleWebKit/<span class="number">537.36</span> (KHTML, like Gecko) Chrome/<span class="number">65.0</span>.<span class="number">3325.181</span> Safari/<span class="number">537.36</span>'\]</span><br><span class="line">    <span class="attr">req</span> =urllib.request.Request(url)</span><br><span class="line">    req.add_header(headers\[<span class="number">0</span>\],headers\[<span class="number">1</span>\])</span><br><span class="line">    <span class="attr">data</span> = urllib.request.urlopen(req).read()</span><br><span class="line">    <span class="attr">data</span> = str(data)</span><br><span class="line">    <span class="attr">re1</span> = '&lt;div <span class="attr">class="gl-i-wrap"&gt;.+&lt;/div&gt;'</span></span><br><span class="line">    <span class="attr">result1</span> = re.compile(re1).findall(data)</span><br><span class="line">    <span class="attr">result1</span> = str(result1)  <span class="comment">#首次信息筛选</span></span><br><span class="line">    <span class="attr">re2</span> = '&lt;img <span class="attr">width="220"</span> <span class="attr">height="220"</span> <span class="attr">class="err-product"</span> <span class="attr">data-img="1"</span> (.+?)&gt;'</span><br><span class="line">    <span class="attr">result2</span> = re.compile(re2).findall(result1)</span><br><span class="line">    <span class="attr">result2</span> = str(result2) <span class="comment">#再次筛选</span></span><br><span class="line">    <span class="attr">re3</span> = '//.+?\\.jpg'</span><br><span class="line">    <span class="attr">result3</span> = re.compile(re3).findall(result2)  <span class="comment">#最终得到图片地址</span></span><br><span class="line">    return result3</span><br><span class="line"></span><br><span class="line"><span class="attr">i=1</span></span><br><span class="line"><span class="attr">keyword=input("输入要查询的内容：")</span></span><br><span class="line"><span class="attr">keyword</span> = urllib.request.quote(keyword)</span><br><span class="line">for x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">2</span>):</span><br><span class="line">    <span class="attr">url</span> = url + keyword +<span class="string">"&amp;enc=utf-8&amp;page="</span>+str(x)</span><br><span class="line">    <span class="attr">imglist</span> = CrawImg(url,x)</span><br><span class="line">    print(url)</span><br><span class="line">    for img <span class="keyword">in</span> imglist:</span><br><span class="line">        <span class="attr">imgname</span> = <span class="string">"G:/paqu/img/图片"</span>+str(i)+<span class="string">".jpg"</span></span><br><span class="line">        <span class="attr">imgurl</span> = <span class="string">"http:"</span>+str(img)</span><br><span class="line">        <span class="keyword">if</span> not os.path.exists(imgname):  <span class="comment"># 检查文件名是否存在</span></span><br><span class="line">            <span class="attr">r</span> = requests.get(imgurl)</span><br><span class="line">            r.<span class="attr">encoding</span> = r.apparent_encoding</span><br><span class="line">            <span class="keyword">with</span> open(imgname, 'wb')as f:</span><br><span class="line">                f.write(r.content)</span><br><span class="line">                f.close()</span><br><span class="line">            i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180608232235.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180608232338.png" alt=""> 后来想爬取一下百度图片首页每天推荐的图片发现返回的html代码中imglist没有我想要的结果。貌似百度给他隐藏了，反正我搞了半天没搞出来，后来使用beautifulsoup库返回相关的标签属性发现为空。 然后就凉了，有兴趣的朋友可以自己去看看。 如果弄出来可以手动@我，谢谢</p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>Python爬虫</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>如何给WordPress上传主题┗( T﹏T )┛</title>
    <url>/2018/03/06/ru-he-gei-wordpress-shang-chuan-zhu-ti-tt-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/d60c9e7eca806538f48a646b9edda144ad348202-300x300.jpg" alt=""> 咳咳，偶哈哟，WordPress的文件上传限制相信困扰了不少人，这里我给大家提供一种能够跳过上传限制的方法，来安装你自己心仪的主题。 当然需要一款软件名字叫做Xshell，当当当：<img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180306174644.png" alt="">就是它！3333 没有的可自行下载，在我以前的博文中也有关于它的使用需要的可自行去看。 接下来就介绍他的相关操作： 首先找到你的theme 文件夹的位置：比如<img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180306174941.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180306175014-300x141.png" alt="">这里wp- content 就是theme 主题的所在处. 然后输入rz 进行文件传输（注意主题是zip文件 重要的事情说三遍）: <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180306175014-300x141.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180306175223-300x65.png" alt=""> 传输完成之后利用剪切命令 rm 可以将主题文件移动到主题文件夹即可。 然后你就可以美滋滋的打开你网站的后台在wordpress里面外观进行主题的切换。</p>
<h2 id="（づ￣3￣）づ╭❤～byebye"><a class="header-anchor" href="#（づ￣3￣）づ╭❤～byebye">¶</a>（づ￣3￣）づ╭❤～byebye~</h2>
<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/211827331-11ff354344ce8786.gif" alt=""></p>
]]></content>
      <categories>
        <category>Website building</category>
        <category>Xshell</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Xshell</tag>
        <tag>Wordpress</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>如何给PyCharm安装第三方库┑(￣Д ￣)┍</title>
    <url>/2018/03/10/ru-he-gei-pycharm-an-zhuang-di-san-fang-ku-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/f561e48065380cd7687e6295a844ad3459828102-300x300.jpg" alt=""></p>
<h2 id="今天给大家带来的是安装第三方Python库的办法-O-∩-∩-O"><a class="header-anchor" href="#今天给大家带来的是安装第三方Python库的办法-O-∩-∩-O">¶</a>今天给大家带来的是安装第三方Python库的办法 O(∩_∩)O~~~</h2>
<h3 id="第一种方式："><a class="header-anchor" href="#第一种方式：">¶</a>第一种方式：</h3>
<p>使用PyCharm自带的setting进行第三方库的安装 首先打开File里面的setting <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180310182202-155x300.png" alt=""> 然后找到project interpreter  点击+ <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180310182300-300x198.png" alt=""> 然后搜索你想要的 第三方库名称，点击install  即可安装 如果出现错误 一般情况 是你想要安装的库已经和你的python版本不符合 导致的安装失败。</p>
<p>(。﹏。*) 那么只能采用第二种方法才可以了 咕~~~</p>
<p></p>
<h3 id="第二种方法："><a class="header-anchor" href="#第二种方法：">¶</a>第二种方法：</h3>
<p>主要是使用pip进行安装 今天以PythonMagick 为例子 首先先去 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pythonmagick">https://www.lfd.uci.edu/~gohlke/pythonlibs/#pythonmagick</a> 下载你想要Python库whl文件   然后最好把它放到磁盘根目录下这里我放的是E:盘 然后使用CMD命令找到你Python 目录中Scripts文件夹 进入之后使用dir 确定pip 在里面 没有的话还需要自己去下载pip安装库 这里pip一般都是自带的 <img src="http://47.100.4.8/wp-content/uploads/2018/03/%E8%87%AA%E8%A1%8C%E8%BD%A6%E8%87%AA%E8%A1%8C%E8%BD%A6.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/03/%E5%95%A5%E4%B8%9C%E8%A5%BF%E5%86%8D%E6%93%A6%E6%8B%AD%E7%9A%84.png" alt=""> 然后使用在当前目录下使用pip install 文件目录加上文件名 <img src="http://47.100.4.8/wp-content/uploads/2018/03/%E5%95%8A%E6%93%A6%E4%B8%89%E5%A4%A7%E8%BE%93%E5%85%A5%E6%B3%95-300x9.png" alt=""> 格式为：pip install 文件目录 即可安装成功 要注意的是这里不能图省事 将文件名擅自修改否则会出现 <img src="http://47.100.4.8/wp-content/uploads/2018/03/%E5%AE%89%E6%8F%92%E6%92%92%E5%A4%A7%E5%A3%B0%E5%9C%B0-300x17.png" alt=""> 遇到这种情况只需安装原来下载的名称 安装即可</p>
<p>欧欧~  今天就到这里了 如果还要其他问题我也爱莫能助了 ，minna 只能自行去问度娘了  QAQ~ <img src="http://47.100.4.8/wp-content/uploads/2018/03/dc3a92315c6034a8e725e5f8c2134954082376a7-1-300x300.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyCharm</tag>
        <tag>whl</tag>
      </tags>
  </entry>
  <entry>
    <title>如何拥有一个自己的博客网站╰(*°▽°*)╯</title>
    <url>/2018/03/05/ru-he-yong-you-yi-ge-zi-ji-de-bo-ke-wang-zhan-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/371122f3d7ca7bcb55c99a56b7096b63f624a83c-300x300.jpg" alt=""> 咳咳，首先呢你可以先去阿里云上购买一个域名（<a href="http://xn--ckq32yq0k7g1b.com">最好购买.com</a>）这里呢我给大家提供可以获得优惠码的微信公众号，在购买页面输入优惠码可以减10元，能省就省吧钱来的都不容易，具体如下图： <img src="http://47.100.4.8/wp-content/uploads/2018/03/46794863E284BFFF2708F618B034C1F1-176x300.jpg" alt=""> 接下来购买域名就可以了， 然后接下来就是购买云服务器了￣□￣｜｜ （我这用的是阿里云的ESC 因为学生优惠比较便宜2333）当前你可以有很多不同的选择，这里以我自己的为例 当然这里要说一下为什么要用阿里云的ESC服务器，因为学生优惠打一折，当时不属于学生党的那只能另求别的了o(<em><sup>＠</sup></em>)o 如下图只要进行学生认证之后就可以在云翼计划中购买 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180305092231-300x72.png" alt=""> 这里我选择的Cenots系统，系统大家可以自行选择 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180305092414-300x87.png" alt=""> 很经济实惠有木有，服务器加上域名购买只需要一百多就可以使用一年，当年非学生狗除外(<em><sup>▽</sup></em>) 购买完之后你就可以在实例中看到自己的云服务器了额 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180305092636.png" alt=""> （ps：在这其中可能要设置好多密码或者得到人家给你提供的密码一定要记清楚，要不事后很麻烦的o(<em>￣︶￣</em>)o） 然后找到你的服务器里面会有你的公网ip，在没有绑定域名的情况这就是登陆自己网站的域名。 在实例中点击远程连接，这样就可以连接到你的服务器了。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180305093029-300x39.png" alt=""> 请一定要记清楚你的远程连接密码否则就GG了 <img src="http://47.100.4.8/wp-content/uploads/2018/03/042bb90a304e251f4145b981ae86c9177f3e533c-300x300.jpg" alt=""> 首次登陆之后输入用户名和密码，用户名默认是root，密码在你购买的时候已经提供给你了。输入即可 然后会显示出一些用户名和密码请一定要牢记，牢记，牢记  重要的事情说三遍 <img src="http://47.100.4.8/wp-content/uploads/2018/03/CC9C57316E91E0ABAC4FA7D6695FDC99-242x300.jpg" alt="">   接下来在云市场里面给你的服务器安装系统镜像这里我用的是WordPress博客系统大家自行选择<sup>_</sup> 接下来进入网站数据库  自己的域名/phpmyadmin/ 根据上面的内容输入即可进入 然后还要配置一下自己服务器的端口具体是在安全组中配置 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180305094509.png" alt=""> 然后添加安全组规则 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180305094551-280x300.png" alt=""> 端口一般有20,21,22等自己选择配置 授权对象为0.0.0.0/0 配置完成之后就登陆网站的后台 域名/wp-admin/   进入如下界面 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180305094747-300x291.png" alt=""> 登陆即可 然后进行自己的博客的配置！ 对了还有最后一点就是域名方面需要网络备案以及实名认证，接下来还需要进行域名解析绑定你的服务器等等，大家可自行百度，嘿嘿 到这里大致就结束了 如果还有哪些遗漏的地方call me maybe</p>
<h1>ヾ(<sub>▽</sub>)<em>Bye</em><sub>_Bye_</sub></h1>
<p>ps：接下来还会有如何上传主题 上传插件的，解决上传限制的问题的博文 敬请期待</p>
]]></content>
      <categories>
        <category>Website building</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>云服务器</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>如何给WordPress降级(￣_,￣ )</title>
    <url>/2018/03/05/ru-he-gei-wordpress-jiang-ji-1/</url>
    <content><![CDATA[<p>手动降级的方法： <strong>1.下载对应的 WordPress 旧版本</strong> 下载你目前使用的语言版本（即如果你使用官方中文版，就下载官方中文的旧版本，如果是英文原版，就下载英文旧版本） WordPress官方中文版各版本下载地址：<a href="https://cn.wordpress.org/releases/#older">https://cn.wordpress.org/releases/#older</a> WordPress官方英文版各版本下载地址：<a href="http://wordpress.org/download/release-archive/">http://wordpress.org/download/release-archive/</a> <strong>2.更换 WordPress 程序文件</strong> (1) 解压下载的旧版本，然后删除解压后的 wp-content 文件夹，使用 FTP 上传其他文件覆盖原来的文件。 注意：主机空间的 wp-content 文件夹里面有主题和插件等文件，根目录的 wp-config.php 里面是WordPress的配置文件，切记不要覆盖这些文件！！ (2) 访问 <a href="http://xn--6qqv5qbo2armh/wp-admin/">http://你的网址/wp-admin/</a> ，稍等会出现一个页面，提示你需要更新数据库，点击更新，就可以恢复到旧版本的wordpress。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/371122f3d7ca7bcb55c99a56b7096b63f624a83c-300x300.jpg" alt="">是不是感觉一点也不会……其实我也不会233333┗|｀O′|┛ 嗷~~   在线降级方法，其实就是一个添加一个插件就能解决的事情，惊不惊喜意不意外，只需在<img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180305230719.png" alt=""> 搜索 WP Downgrade <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180305230707-300x121.png" alt=""> 在设置里打开插件会有如下界面： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180305231530-300x98.png" alt=""> 选择自己想要得版本点击红色按钮即可2333</p>
<p>o(*≧▽≦)ツ┏━┓  是不是很简单！ <img src="http://47.100.4.8/wp-content/uploads/2018/03/09fa513d269759ee9acfdca1b1fb43166d22df39.gif" alt=""></p>
]]></content>
      <categories>
        <category>Website building</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在VMware 上安装Ubuntu ( *︾▽︾)</title>
    <url>/2018/03/06/ru-he-zai-vmware-shang-an-zhuang-ubuntu-1/</url>
    <content><![CDATA[<p>首先呢，你的有一个WMware，当然这是废话2333，二话不说直接甩链接好吧！<img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180306215558.png" alt=""> <a href="https://www.vmware.com/go/tryworkstation-win-cn">https://www.vmware.com/go/tryworkstation-win-cn</a> 激活码：FF590-2DX83-M81LZ-XDM7E-MKUT4 ps：我这里提供的Ubuntu 64位的  需要32位的同志可自行百度云O(∩_∩)O~   接下来你需要下载Ubuntu镜像 这里我也把镜像提供给你好吧，可以说这波很稳的。 链接：<a href="https://pan.baidu.com/s/1l3boWGL2N9qJ_p24W9kr9w">https://pan.baidu.com/s/1l3boWGL2N9qJ_p24W9kr9w</a> 密码：31qh   下载下来之后，那么恭喜你你已经快要完成了因为接下来的确实傻瓜式操作，但是我还是想多bb，详细一下吧。 打开VMware ，新建一个虚拟机 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180306215933-300x46.png" alt=""> 选择推荐配置 点击下一步 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180306220019-300x256.png" alt=""> 选择你的镜像文件，下一步即可 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180306220159-300x256.png" alt="">   自己设置用户名和密码 ps:记忆不好的同志 记得拍照哦！ 自己选好系统的位置 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180306220619-300x256.png" alt=""> 然后设置一下空间即可，这里我推荐10G的吧 根据自己的硬盘空间自行选择好吧。o(<em>￣︶￣</em>)o 然后就结束了 启动虚拟机即可！   <em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/cf9d97014a90f603e6675c3f3012b31bb151ed97-300x300.jpg" alt=""></p>
]]></content>
      <categories>
        <category>VMware</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>VWware</tag>
        <tag>UBuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Linux环境下运行C程序 Σ( ° △ °|||)</title>
    <url>/2018/03/07/ru-he-zai-linux-huan-jing-xia-yun-xing-c-cheng-xu-1/</url>
    <content><![CDATA[<h4 id="当然是如下内容了："><a class="header-anchor" href="#当然是如下内容了：">¶</a><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180307191808.png" alt="">   <strong>+   <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180307191828.png" alt="">   =  当然是如下内容了：</strong></h4>
<h4 id="嘤嘤嘤"><a class="header-anchor" href="#嘤嘤嘤">¶</a><strong>嘤嘤嘤~</strong></h4>
<p>首先先从VMware进入虚拟机这里我用的Ubuntu， <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180307190222-300x225.png" alt=""> 然后在界面上创建一个文件夹，起名为test <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180307190352.png" alt=""> 然后在里面创建一个名为a.c 的文件 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180307190644-300x27.png" alt=""> 然后在里面写C的代码就可以了，例如： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180307190831-300x130.png" alt=""> 接下来保存好之后打开命令提示符界面： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180307190940.png" alt=""> 然后通过cd 命令找到你的存放a.c的文件夹 使用ls 命令可以显示当前目录下的所有文件 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180307191118-300x191.png" alt=""> 然后进行编译操作 使用 gcc a.c -o a  来对c文件进行编译： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180307191422.png" alt=""> 显示这样的界面就代表编译成功了。 o(￣ヘ￣o＃) 然后直接运行即可 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180307191628-300x57.png" alt=""> ps：要注意的是运行文件 应该是 ./名称 的格式 切记！！！</p>
<p>ヾ(≧O≦)〃嗷~</p>
<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/cropped-timg-300x300.jpg" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>VMware</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>VWware</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用java和javafx实现井字游戏</title>
    <url>/2018/04/06/shi-yong-java-he-javafx-shi-xian-jing-zi-you-xi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180406170916.png" alt=""></p>
<h3 id="javafx简介："><a class="header-anchor" href="#javafx简介：">¶</a>javafx简介：</h3>
<p>JavaFX是Oracle公司推出的图形和多媒体包，使开发人员能够设计、创建、测试、调试和部署富客户端应用程序，并在不同的平台上有致的运行效果。   相比于AWT，SWT, Swing等Java库，JavaFX的控件种类和UI效果都要好得多，且已经默认集成在最新的JDK包中。因此，开发人员只要安装了最新的JDK，就可以直接使用常用的开发工具如Eclipse开发JavaFX应用了。 新手学习开发JavaFX请参考Oracle的官方说明： <a href="http://docs.oracle.com/javase/8/javafx/get-started-tutorial/">http://docs.oracle.com/javase/8/javafx/get-started-tutorial/</a>   这里我用javafx编写了图形界面的井字游戏： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180406171029.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180406171102.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180406171143.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180406171203.png" alt="">   实际效果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180406171253.png" alt="">   其实这个还可以进行改进比如： 可以将X和O换成你想要得图片，Image就可以办到。 同样显示谁胜利还可以采用提示框，可以增添一个重新开局的按钮，以及计时器等等。   代码文件：<a href="http://47.100.4.8/wp-content/uploads/2018/04/%E4%BA%95%E5%AD%97%E6%B8%B8%E6%88%8F.docx">井字游戏 </a> 这里我将代码放到了word文档中。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>小游戏</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>生成器模式和原型模式编程实现</title>
    <url>/2019/05/06/sheng-cheng-qi-mo-shi-he-yuan-xing-mo-shi-bian-cheng-shi-xian-1/</url>
    <content><![CDATA[<p>1、生成器模式的原理：</p>
<ul>
<li>Builder</li>
</ul>
<p>为创建一个Product对象的各个部件指定抽象接口</p>
<ul>
<li>ConcreteBuilder</li>
</ul>
<p>实现Builder的接口以构造和装配该产品的各个部件 定义并明确它所创建的表示 提供一个检索产品的接口</p>
<ul>
<li>Director</li>
</ul>
<p>构造一个使用Builder接口的对象</p>
<ul>
<li>Product</li>
</ul>
<p>表示被构造的复杂对象。ConcreteBuilder创建该产品的内部表示并定义它的装配过程。 包含定义组成部件的类，包括将这些部件装配成最终产品的接口 <strong>结构图：</strong> <img src="http://47.100.4.8/wp-content/uploads/2019/05/1.png" alt=""> <strong>2、原型模式原理：</strong></p>
<ul>
<li>Prototype</li>
</ul>
<p>声明一个克隆自身的接口</p>
<ul>
<li>ConcretePrototype</li>
</ul>
<p>实现一个克隆自身的操作</p>
<ul>
<li>Client</li>
</ul>
<p>让一个原型克隆自身从而创建一个新的对象 <strong>结构图：</strong> <img src="http://47.100.4.8/wp-content/uploads/2019/05/2.png" alt=""> <strong>题目要求：</strong> 使用生成器模式模拟实现IBM电脑的生产，其中IBM电脑的主要结构用如下表示： class IBM{   string monitor=”IBM的显示器”;   string keyboard=”IBM的键盘”;   string mouse=”IBM的鼠标”;   Motherboard* MB;   void display(); } 其中MB是一个主板类，其主要结构如下： class Motherboard{ string CPU; string RAM; } 即主板包含CPU和RAM。display是一个打印各个组件的函数，主要用于检查是否生产正确。 建造顺序为先生产主板，再依次生产显示器、键盘和鼠标。 使用生成器模式生产出第一台IBM电脑后，利用原型模式，将该电脑再复制两台。 <strong>UML类图：</strong> <img src="http://47.100.4.8/wp-content/uploads/2019/05/3.jpg" alt=""> <strong>代码：</strong></p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Product</span></span><br><span class="line"><span class="comment">//主板</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Motherboard</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Motherboard()&#123;&#125;</span><br><span class="line">    <span class="built_in">string</span> CPU;</span><br><span class="line">    <span class="built_in">string</span> RAM;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_CPU</span><span class="params">(<span class="built_in">string</span> CPU)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;CPU = CPU;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set_RAM</span><span class="params">(<span class="built_in">string</span> RAM)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;RAM = RAM;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Elements of motherboards!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"CPU:"</span>&lt;&lt;CPU&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"RAM:"</span>&lt;&lt;RAM&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Motherboard* <span class="title">Clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Motherboard(*<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Motherboard(Motherboard* tt)&#123;</span><br><span class="line">        tt-&gt;CPU = CPU;</span><br><span class="line">        tt-&gt;RAM = RAM;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//IBM</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IBM</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  IBM()&#123;</span><br><span class="line">      MB = <span class="keyword">new</span> Motherboard();</span><br><span class="line">  &#125;</span><br><span class="line">  Motherboard* MB;</span><br><span class="line">  <span class="built_in">string</span> monitor;</span><br><span class="line">  <span class="built_in">string</span> keyboard;</span><br><span class="line">  <span class="built_in">string</span> mouse;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_monitor</span><span class="params">(<span class="built_in">string</span> monitor)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;monitor = monitor;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_keyboard</span><span class="params">(<span class="built_in">string</span> keyboard)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;keyboard = keyboard;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_mouse</span><span class="params">(<span class="built_in">string</span> mouse)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>-&gt;mouse = mouse;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">      MB-&gt;<span class="built_in">display</span>();</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">"IBM's monitor:"</span>&lt;&lt;monitor&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">"IBM's keyboard:"</span>&lt;&lt;keyboard&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">"IBM's mouse:"</span>&lt;&lt;mouse&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">"IBM has produced!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="function">IBM* <span class="title">Clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">      IBM* obj = <span class="keyword">new</span> IBM();</span><br><span class="line">      obj-&gt;MB = MB-&gt;Clone();</span><br><span class="line">      obj-&gt;monitor = monitor;</span><br><span class="line">      obj-&gt;keyboard = keyboard;</span><br><span class="line">      obj-&gt;mouse = mouse;</span><br><span class="line">      <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Builder</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IBM_Builder</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildPart_Motherboard</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildPart_monitor</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildPart_keyboard</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BuildPart_mouse</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> IBM* <span class="title">GetComputer</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ConcreteBuilder</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IBM</span>\_<span class="title">ConcreteBuilder</span>:</span><span class="keyword">public</span> IBM\_Builder&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildPart_Motherboard</span><span class="params">()</span></span>&#123;</span><br><span class="line">        computer-&gt;MB-&gt;set_CPU(<span class="string">"i9-9900K"</span>);</span><br><span class="line">        computer-&gt;MB-&gt;set_RAM(<span class="string">"Kingston 3800MHZ"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildPart_monitor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        computer-&gt;set_monitor(<span class="string">"SamSung"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildPart_keyboard</span><span class="params">()</span></span>&#123;</span><br><span class="line">        computer-&gt;set_keyboard(<span class="string">"cherry"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BuildPart_mouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        computer-&gt;set_mouse(<span class="string">"G903"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">IBM* <span class="title">GetComputer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> computer;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    IBM* computer = <span class="keyword">new</span> IBM();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Director</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IBM_Director</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Construct</span><span class="params">(IBM_Builder *builder)</span></span>&#123;</span><br><span class="line">        builder-&gt;BuildPart_Motherboard();</span><br><span class="line">        builder-&gt;BuildPart_monitor();</span><br><span class="line">        builder-&gt;BuildPart_keyboard();</span><br><span class="line">        builder-&gt;BuildPart_mouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    IBM\_ConcreteBuilder* t1 = <span class="keyword">new</span> IBM\_ConcreteBuilder();</span><br><span class="line">    IBM\_Director* t2 = <span class="keyword">new</span> IBM\_Director();</span><br><span class="line">    t2-&gt;Construct(t1);</span><br><span class="line">    IBM *p1 = t1-&gt;GetComputer();</span><br><span class="line">    p1-&gt;<span class="built_in">display</span>();</span><br><span class="line">    IBM *p2 = p1-&gt;Clone();</span><br><span class="line">    p2-&gt;<span class="built_in">display</span>();</span><br><span class="line">    IBM *p3 = p1-&gt;Clone();</span><br><span class="line">    p3-&gt;<span class="built_in">display</span>();</span><br><span class="line">    p3-&gt;set_monitor(<span class="string">"1111"</span>);</span><br><span class="line">    p3-&gt;<span class="built_in">display</span>();</span><br><span class="line">    p1-&gt;<span class="built_in">display</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结果：</strong> <img src="http://47.100.4.8/wp-content/uploads/2019/05/4.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>generator pattern</tag>
        <tag>prototype pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>适配器模式编程实现</title>
    <url>/2019/05/08/shi-pei-qi-mo-shi-bian-cheng-shi-xian-1/</url>
    <content><![CDATA[<p>适配器模式</p>
<p><strong>适配器模式的结构：</strong></p>
<ul>
<li>客户端使用的Target类需要使用一个已经存在的接口Adaptee类，可以用两种方法实现：</li>
<li>构造Adapter类继承Target类，并实现Adaptee接口（适配器模式的类版本）</li>
<li>将一个Adaptee实例作为Adapter的组成部分（适配器模式的对象版本）</li>
</ul>
<p><strong>类版本结构：</strong> <img src="http://47.100.4.8/wp-content/uploads/2019/05/1-1.png" alt=""> <strong>对象版本:</strong> <img src="http://47.100.4.8/wp-content/uploads/2019/05/2-1.png" alt=""> <strong>适配器模式的参与者：</strong></p>
<ul>
<li>Target</li>
</ul>
<p>定义Client使用的与特定领域相关的接口</p>
<ul>
<li>Client</li>
</ul>
<p>与符合Target接口的对象协同</p>
<ul>
<li>Adaptee</li>
</ul>
<p>定义一个已经存在的接口，这个接口需要适配</p>
<ul>
<li>Adapter</li>
</ul>
<p>对Adaptee的接口与Target接口进行适配 <strong>使用例题：</strong> 分别利用类版本和对象版本的适配器模式模拟实现ps2接口和usb接口的转换。 我们手中有个ps2插头的设备，但是主机上只有usb插头的接口，实现一个适配器将ps2接口转换为usb接口。其中，ps2接口表示为： class Ps2{ virtual void isPs2(); } Usb接口表示为： class Usb{ Virtual void isusb(); }。 <strong>对象版本的代码：</strong></p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="comment">//类版本</span></span><br><span class="line"><span class="comment">//Adaptee</span></span><br><span class="line"><span class="comment">//定义一个已经存在的接口，这个接口需要适配</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Ps2</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isPs2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">"Ps2"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Target</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Usb</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">isUsb</span>(<span class="params"></span>)</span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//对Adaptee的接口与Target接口进行适配</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Adapter</span>:<span class="title">public</span> <span class="title">Usb</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isUsb</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ps2-&gt;isPs2();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ps2* ps2 = <span class="keyword">new</span> Ps2();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Usb* usb = <span class="keyword">new</span> Adapter();</span><br><span class="line">    usb-&gt;isUsb();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">**对应的UML类图：** ![](http:<span class="comment">//47.100.4.8/wp-content/uploads/2019/05/3.png) **类版本的代码：**</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#include&lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="title">std</span>;</span><br><span class="line"><span class="comment">//类版本</span></span><br><span class="line"><span class="comment">//Adaptee</span></span><br><span class="line"><span class="comment">//定义一个已经存在的接口，这个接口需要适配</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Ps2</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isPs2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">"Ps2"</span>&lt;&lt;endl;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Target</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Usb</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">isUsb</span>(<span class="params"></span>)</span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//对Adaptee的接口与Target接口进行适配</span></span><br><span class="line"><span class="keyword">class</span> <span class="title">Adapter</span>:<span class="title">public</span> <span class="title">Usb</span>,<span class="title">private</span> <span class="title">Ps2</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">isUsb</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        isPs2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Usb* usb = <span class="keyword">new</span> Adapter();</span><br><span class="line">    usb-&gt;isUsb();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>对应的UML类图：</strong> <img src="http://47.100.4.8/wp-content/uploads/2019/05/4-1.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>adaptor pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>生产者消费者问题C++实现</title>
    <url>/2018/04/24/sheng-chan-zhe-xiao-fei-zhe-wen-ti-c-shi-xian-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180424231257.png" alt=""> 生产者消费者问题 是同步互斥的经典问题。 目的就是验证用信号量机制实现进程互斥的方法，验证用信号量机制实现进程同步的方法。 了解经典同步问题“生产者和消费者” 生产者与消费者可以通过一个环形缓冲池联系起来，环形缓冲池由几个大小相等的缓冲块组成，每个缓冲块容纳一个产品。每个生产者可不断地每次往缓冲池中送一个生产产品，而每个消费者则可不断地每次从缓冲池中取出一个产品。指针in和指针out分别指出当前的第一个空缓冲块和第一个满缓冲块。   首先是在Windows下编写的生产着消费者代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> n 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> True 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> False 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> producers 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> customers 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">buffer</span>\[n\]=&#123;<span class="number">0</span>&#125;;  <span class="comment">//创建缓冲区</span></span><br><span class="line">semaphore emptys=n,fulls=<span class="number">0</span>; <span class="comment">//空和满信号量</span></span><br><span class="line">pthread\_mutex\<span class="keyword">_t</span> mutex; <span class="comment">//创建互斥信号量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//P操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wait</span><span class="params">(semaphore &amp;mutex1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mutex1--;</span><br><span class="line">    <span class="keyword">if</span>(mutex1&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> False;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//V操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">signal</span><span class="params">(semaphore &amp;mutex1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mutex1++;</span><br><span class="line">    <span class="keyword">if</span>(mutex1&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> False;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印缓冲区  在测试时自行选择是否出去</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,<span class="built_in">buffer</span>\[i\]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">int</span> in=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">void</span> \*producer(<span class="keyword">void</span> \*b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(True)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(wait(emptys))</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//创建一个产品和名称</span></span><br><span class="line">        pthread\_mutex\_lock(&amp;mutex);  <span class="comment">//互斥</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"厂家生产一盒牛奶产品，编号为: product%d\\n"</span>,in+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">buffer</span>\[in\]= <span class="number">1</span>;</span><br><span class="line">        in=(in+<span class="number">1</span>)%n;</span><br><span class="line">        pthread\_mutex\_unlock(&amp;mutex);</span><br><span class="line">        signal(fulls);</span><br><span class="line">        Sleep(<span class="number">1000</span>);  <span class="comment">//设置生产延迟</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"&lt;!!!!&gt;库存已经满了&lt;!!!!&gt;\\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">void</span> \*consumer(<span class="keyword">void</span> \*b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(True)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!wait(fulls))</span><br><span class="line">        &#123;</span><br><span class="line">            pthread\_mutex\_lock(&amp;mutex);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">buffer</span>\[out\] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"                                      顾客购买了一盒牛奶，产品编号为： product%d\\n"</span>,out+<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">buffer</span>\[out\]= <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            out=(out+<span class="number">1</span>)%n;</span><br><span class="line">            pthread\_mutex\_unlock(&amp;mutex);</span><br><span class="line">            signal(emptys);</span><br><span class="line">            Sleep(<span class="number">1000</span>);  <span class="comment">//设置消费延迟</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"&lt;!!!!&gt;生产池已经为空&lt;!!!!&gt;\\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&lt;-------------------------------------------开始生产--------------------------------------------&gt;\\n"</span>);</span><br><span class="line">    <span class="comment">//初始化信号量</span></span><br><span class="line">    pthread\_mutex\_init(&amp;mutex,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程初始化</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">void</span> *a;</span><br><span class="line">    pthread\<span class="keyword">_t</span> thread\_pro\[producers\];  <span class="comment">//创建生产者线程组</span></span><br><span class="line">    pthread\<span class="keyword">_t</span> thread\_cons\[customers\];  <span class="comment">//创建消费者线程组</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;producers)</span><br><span class="line">        &#123;</span><br><span class="line">            pthread\_create(&amp;thread\_pro\[i\],<span class="literal">NULL</span>,producer,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;customers)</span><br><span class="line">            pthread\_create(&amp;thread\_cons\[i\],<span class="literal">NULL</span>,consumer,<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;producers)</span><br><span class="line">        &#123;</span><br><span class="line">            pthread\_join(thread\_pro\[i\],&amp;a);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;customers)</span><br><span class="line">            pthread\_join(thread\_cons\[i\],&amp;a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我采用了多线程多个生产者消费者来进行 运行结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/146548913.png" alt="">   这里还有在linux下运行的代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> n 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> True 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> False 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> producers 2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> customers 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">buffer</span>\[n\]=&#123;<span class="number">0</span>&#125;;  <span class="comment">//创建缓冲区</span></span><br><span class="line">semaphore emptys=n,fulls=<span class="number">0</span>; <span class="comment">//空和满信号量</span></span><br><span class="line">pthread\_mutex\<span class="keyword">_t</span> mutex; <span class="comment">//创建互斥信号量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//P操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">wait</span><span class="params">(semaphore &amp;mutex1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mutex1--;</span><br><span class="line">    <span class="keyword">if</span>(mutex1&lt;<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> False;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//V操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">signal</span><span class="params">(semaphore &amp;mutex1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mutex1++;</span><br><span class="line">    <span class="keyword">if</span>(mutex1&lt;=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> False;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印缓冲区  在测试时自行选择是否出去</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,<span class="built_in">buffer</span>\[i\]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="keyword">int</span> in=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">void</span> \*producer(<span class="keyword">void</span> \*b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(True)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(wait(emptys))</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//创建一个产品和名称</span></span><br><span class="line">        pthread\_mutex\_lock(&amp;mutex);  <span class="comment">//互斥</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"The manufacturer produces a carton of milk products, numbered: product%d\\n"</span>,in+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">buffer</span>\[in\]= <span class="number">1</span>;</span><br><span class="line">        in=(in+<span class="number">1</span>)%n;</span><br><span class="line">        pthread\_mutex\_unlock(&amp;mutex);</span><br><span class="line">        signal(fulls);</span><br><span class="line">        sleep(<span class="number">1000</span>);  <span class="comment">//设置生产延迟</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"&lt;!!!!&gt;The inventory is full. &lt;!!!!&gt;\\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">int</span> out=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">void</span> \*consumer(<span class="keyword">void</span> \*b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(True)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!wait(fulls))</span><br><span class="line">        &#123;</span><br><span class="line">            pthread\_mutex\_lock(&amp;mutex);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">buffer</span>\[out\] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"                                      The customer bought a carton of milk, the product number is： product%d\\n"</span>,out+<span class="number">1</span>);</span><br><span class="line">                <span class="built_in">buffer</span>\[out\]= <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            out=(out+<span class="number">1</span>)%n;</span><br><span class="line">            pthread\_mutex\_unlock(&amp;mutex);</span><br><span class="line">            signal(emptys);</span><br><span class="line">            sleep(<span class="number">1000</span>);  <span class="comment">//设置消费延迟</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"&lt;!!!!&gt;Production pool is empty &lt;!!!!&gt;\\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"&lt;-------------------------------------------开始生产--------------------------------------------&gt;\\n"</span>);</span><br><span class="line">    <span class="comment">//初始化信号量</span></span><br><span class="line">    pthread\_mutex\_init(&amp;mutex,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//线程初始化</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">void</span> *a;</span><br><span class="line">    pthread\<span class="keyword">_t</span> thread\_pro\[producers\];  <span class="comment">//创建生产者线程组</span></span><br><span class="line">    pthread\<span class="keyword">_t</span> thread\_cons\[customers\];  <span class="comment">//创建消费者线程组</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;producers)</span><br><span class="line">        &#123;</span><br><span class="line">            pthread\_create(&amp;thread\_pro\[i\],<span class="literal">NULL</span>,producer,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;customers)</span><br><span class="line">            pthread\_create(&amp;thread\_cons\[i\],<span class="literal">NULL</span>,consumer,<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;producers)</span><br><span class="line">        &#123;</span><br><span class="line">            pthread\_join(thread\_pro\[i\],&amp;a);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;customers)</span><br><span class="line">            pthread\_join(thread\_cons\[i\],&amp;a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面是在linux下运行的步骤：（有些需要注意的问题在之前的博文中也提到过了）   对代码文件进行编译： <img src="http://47.100.4.8/wp-content/uploads/2018/04/856486413.png" alt=""> 首先打开命令界面，输入 g++ a.cpp –o b –lpthread 即可编译成功生成可执行文件。 <img src="http://47.100.4.8/wp-content/uploads/2018/04/78874.png" alt=""> 运行文件： 在命令行输入： ./b 即可运行文件 需要注意的是： 输出为中文的话可能会出现乱码因此改为了英文。 结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/789745413.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>生产者消费者问题</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Producer&amp;Comsumer</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Pyinstaller 将.py python文件生成可执行的.exe 文件</title>
    <url>/2018/03/13/shi-yong-pyinstaller-jiang-py-python-wen-jian-sheng-cheng-ke-zhi-xing-de-exe-wen-jian-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/u407244128253124607fm27gp0-300x200.jpg" alt="">   今天介绍Pyinstaller生成.exe可执行文件。o(<em><sup>＠</sup></em>)o   首先你需要安装pyinstaller 可以在该链接下载：<a href="http://www.pyinstaller.org/">http://www.pyinstaller.org/</a> 也可以使用pip 安装pyinstaller 在你pip文件夹目录下输入如下命令即可： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180313171327.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/03/f561e48065380cd7687e6295a844ad3459828102-300x300.jpg" alt=""> pyinstaller准备完毕之后就可进行生成了233333   在pyinstaller目录下输入如下命令： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180313171548.png" alt=""> ps：我的pyinstaller都在Python的Scripts文件夹中 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180313171821-300x157.png" alt=""> 运行上面的结束过后就会在dist文件夹中生成一个.exe文件 .spec文件可以直接删除了 在build文件夹中的文件可以直接删除 然后结束了QAQ</p>
<h2 id="┏-＾0＾-┛"><a class="header-anchor" href="#┏-＾0＾-┛">¶</a>┏(＾0＾)┛</h2>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pyinstaller</tag>
      </tags>
  </entry>
  <entry>
    <title>使用QtDesigner实现一个简单的界面（具体流程）</title>
    <url>/2018/10/08/shi-yong-qtdesigner-shi-xian-yi-ge-jian-dan-de-jie-mian-ju-ti-liu-cheng-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/10/QQ%E5%9B%BE%E7%89%8720181008213410.png" alt=""> 之前教大家如何给PyCharm安装QtDesigner，今天我就说一下使用它的具体流程，（\(<sup>o</sup>)/~） 首先打开主界面，如弹出如下界面 <img src="http://47.100.4.8/wp-content/uploads/2018/10/QQ%E5%9B%BE%E7%89%8720181008214102.png" alt=""> 正常情况下我们应该选择MainWindow 作为主要窗口，至于其他的Dialog窗口等我们在以后的界面跳转时会介绍。 单击Create后会出现如下操作界面： <img src="http://47.100.4.8/wp-content/uploads/2018/10/QQ%E5%9B%BE%E7%89%8720181008214510.png" alt=""> 以上大概介绍了一些常用的控件，由于我也是初学者所以好多控件也不是很了解，希望大家见谅。 首先应该将一个frame框架 拖入主窗口，目的是能够将一些小控件放到上面在，然后就可以对整个frame进行，而不需要仅仅对一个控件进行操作，而且frame在以后的多界面切换也有很大的作用。 然后尝试在上面放置一些pushButton、Label和lineEdit 修改Label的字体颜色的等属性： <img src="http://47.100.4.8/wp-content/uploads/2018/10/QQ%E5%9B%BE%E7%89%8720181008215028.png" alt=""> 点击change rich text之后会跳出一下界面 <img src="http://47.100.4.8/wp-content/uploads/2018/10/QQ%E5%9B%BE%E7%89%8720181008215143.png" alt=""> 然后大家就可以修改相关字体的一些信息了。 下面是我快速创建的一个小界面： <img src="http://47.100.4.8/wp-content/uploads/2018/10/QQ%E5%9B%BE%E7%89%8720181008215301.png" alt=""> 然后将该文件保存，并且将该文件用PyCharm打开，会得到如下.xml文件 <img src="http://47.100.4.8/wp-content/uploads/2018/10/QQ%E5%9B%BE%E7%89%8720181008215444.png" alt=""> 然后使用之前添加的PyUIC来将该.xml文件转换为.py文件 <img src="http://47.100.4.8/wp-content/uploads/2018/10/QQ%E5%9B%BE%E7%89%8720181008215545.png" alt=""> 就会生成如下文件： <img src="http://47.100.4.8/wp-content/uploads/2018/10/QQ%E5%9B%BE%E7%89%8720181008215639.png" alt=""> 运行： 首先创建一个文件并且import该之前生成的UI文件 然后书写如下代码即可调用该UI文件：</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">from</span> test <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="title">from</span> <span class="type">PyQt5</span>.<span class="type">QtWidgets</span> <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> testWindow(<span class="type">QMainWindow</span>,<span class="type">Ui_MainWindow</span>):</span></span><br><span class="line"><span class="class">    def \_\_init\_\_(<span class="title">self</span>,<span class="title">parent</span>=<span class="type">None</span>):</span></span><br><span class="line"><span class="class">        super(<span class="title">testWindow</span>, <span class="title">self</span>).\_\_init\_\_(<span class="title">parent</span>)</span></span><br><span class="line"><span class="class">        self.setupUi(<span class="title">self</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">if \_\_name\_\_ == '\_\_main\_\_':</span></span><br><span class="line"><span class="class">    app = <span class="type">QApplication</span>(<span class="title">sys</span>.<span class="title">argv</span>)</span></span><br><span class="line"><span class="class">    myWin = testWindow()</span></span><br><span class="line"><span class="class">    myWin.show()</span></span><br><span class="line"><span class="class">    sys.exit(<span class="title">app</span>.<span class="title">exec_</span>())</span></span><br></pre></td></tr></table></figure>
<p>运行结果： <img src="http://47.100.4.8/wp-content/uploads/2018/10/QQ%E5%9B%BE%E7%89%8720181008215944.png" alt=""></p>
]]></content>
      <categories>
        <category>Python模块PyQt5</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>QtDesigner</tag>
        <tag>PtQt5</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SGA对多元函数进行优化</title>
    <url>/2018/08/29/shi-yong-sga-dui-duo-yuan-han-shu-jin-xing-you-hua-1/</url>
    <content><![CDATA[<p><strong>这是是通过使用SGA来解决之前在多种群遗传算法的函数优化中提出的问题，以便来做对比，以此来看出多种群遗传算法相较于普通的遗传算法的优势。</strong> 这里在描述一下之前的问题： 求解该max f(x,y) = 21.5 + xsin(4πx) + ysin(20πy)函数的最大值 函数图像如下所示： <img src="http://47.100.4.8/wp-content/uploads/2018/08/2-1.png" alt=""> 图像生成代码在之前已经给出了，这里就不给了。 接下来是使用标准的遗传算法来解决上面的问题 代码：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clear;</span><br><span class="line"><span class="comment">%clc</span></span><br><span class="line">pc=<span class="number">0.7</span>;     <span class="comment">% 交叉概率</span></span><br><span class="line">pm=<span class="number">0.05</span>; <span class="comment">% 变异概率</span></span><br><span class="line"><span class="comment">%定义遗传算法参数</span></span><br><span class="line">NIND=<span class="number">40</span>;        <span class="comment">%个体数目</span></span><br><span class="line">MAXGEN=<span class="number">500</span>;     <span class="comment">%最大遗传代数</span></span><br><span class="line">NVAR=<span class="number">2</span>;               <span class="comment">%变量的维数</span></span><br><span class="line">PRECI=<span class="number">20</span>;             <span class="comment">%变量的二进制位数</span></span><br><span class="line">GGAP=<span class="number">0.9</span>;             <span class="comment">%代沟</span></span><br><span class="line">trace=<span class="built_in">zeros</span>(MAXGEN,<span class="number">1</span>); <span class="comment">%记录优化轨迹</span></span><br><span class="line">FieldD=\[rep(PRECI,\[<span class="number">1</span>,NVAR\]);\[<span class="number">-3</span>,<span class="number">4.1</span>;<span class="number">12.1</span>,<span class="number">5.8</span>\];rep(\[<span class="number">1</span>;<span class="number">0</span>;<span class="number">1</span>;<span class="number">1</span>\],\[<span class="number">1</span>,NVAR\])\]; <span class="comment">%建立区域描述器</span></span><br><span class="line">Chrom=crtbp(NIND, NVAR*PRECI);                       <span class="comment">%创建初始种群</span></span><br><span class="line">gen=<span class="number">0</span>;                                               <span class="comment">%代计数器   </span></span><br><span class="line">ObjV=ObjectFunction(bs2rv(Chrom, FieldD));<span class="comment">%计算初始种群个体的目标函数值</span></span><br><span class="line">\[maxY,I\]=<span class="built_in">max</span>(ObjV); <span class="comment">%最优值</span></span><br><span class="line">X=bs2rv(Chrom, FieldD);</span><br><span class="line">maxX=X(I,:);</span><br><span class="line"><span class="keyword">while</span> gen&lt;MAXGEN                                     <span class="comment">%迭代</span></span><br><span class="line">    FitnV=ranking(-ObjV);                            <span class="comment">%分配适应度值(Assign fitness values)</span></span><br><span class="line">    SelCh=select(<span class="string">'sus'</span>, Chrom, FitnV, GGAP);         <span class="comment">%选择</span></span><br><span class="line">    SelCh=recombin(<span class="string">'xovsp'</span>, SelCh, pc);              <span class="comment">%重组</span></span><br><span class="line">    SelCh=mut(SelCh,pm);                             <span class="comment">%变异</span></span><br><span class="line">    ObjVSel=ObjectFunction(bs2rv(SelCh, FieldD));           <span class="comment">%计算子代目标函数值</span></span><br><span class="line">    \[Chrom ObjV\]=reins(Chrom, SelCh, <span class="number">1</span>, <span class="number">1</span>, ObjV, ObjVSel);  <span class="comment">%重插入</span></span><br><span class="line">    gen=gen+<span class="number">1</span>;           <span class="comment">%代计数器增加</span></span><br><span class="line">    <span class="comment">% 最优值更新</span></span><br><span class="line">    <span class="keyword">if</span> maxY&lt;<span class="built_in">max</span>(ObjV)</span><br><span class="line">        \[maxY,I\]=<span class="built_in">max</span>(ObjV);</span><br><span class="line">        X=bs2rv(Chrom, FieldD);</span><br><span class="line">        maxX=X(I,:);</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    trace(gen,<span class="number">1</span>)=maxY;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 进化过程图</span></span><br><span class="line"><span class="built_in">plot</span>(<span class="number">1</span>:gen,trace(:,<span class="number">1</span>));</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line">xlabel(<span class="string">'进化代数'</span>);</span><br><span class="line">ylabel(<span class="string">'最优解变化'</span>);</span><br><span class="line">title(<span class="string">'SGA进化过程'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 输出最优解</span></span><br><span class="line"><span class="built_in">disp</span>(\[<span class="string">'最优值为：'</span>,num2str(maxY)\]);</span><br><span class="line"><span class="built_in">disp</span>(\[<span class="string">'对应的自变量取值：'</span>,num2str(maxX)\]);</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/08/67.png" alt=""> 根据迭代次数就可以明显的看出多种群遗传算法比标准的遗传算法更加的少，多种群遗传算法能够更快的完成迭代得到最优值。 而且多种群遗传算法比标准遗传算法得到的结果更加精确。</p>
]]></content>
      <categories>
        <category>GA</category>
        <category>优化算法</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>优化算法</tag>
        <tag>SGA</tag>
        <tag>多元函数</tag>
      </tags>
  </entry>
  <entry>
    <title>使用STL实现首次适应算法</title>
    <url>/2018/05/29/shi-yong-stl-shi-xian-shou-ci-shi-ying-suan-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180529111458.png" alt=""> 介绍： 首次适应算法从空闲<a href="https://baike.baidu.com/item/%E5%88%86%E5%8C%BA%E8%A1%A8">分区表</a>的第一个表目起查找该表，把最先能够满足要求的空闲区分配给作业，这种方法目的在于减少查找时间。为适应这种算法，空闲分区表(空闲区链)中的空闲分区要按地址由低到高进行排序。该算法优先使用低址部分空闲区，在低址空间造成许多小的空闲区，在高<a href="https://baike.baidu.com/item/%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4">地址空间</a>保留大的空闲区。 实现思路： 首先我先定义好一个空间说明表（在这里我定义的说明表已经实现按照地址空间大小排好序），然后根据输入的需求空间值的大小遍历整个空间说明表，当碰到首次合适的空间时，根据输入的大小和占用的大小做差，当差小于一定值时，则该存储整个被占用（这里我设置的值是小于等于1），如果大于1则根据该空间的首地址+输入的大小来划分出来一块空间然后剩余的空间的首地址更新一下，以及剩余空间的长度更新一下即可。需要注意的是在进行删除操作时，要清空所有数据。 代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首次适应算法</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">FF</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flag2=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"注意当你想要结束的时候输入-1即可结束输入"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入你想要存储内存大小（单位为K）："</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        flag1=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(pos=Q.<span class="built_in">begin</span>();pos!=Q.<span class="built_in">end</span>();pos++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((*pos).Length&gt;=k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(((*pos).Length-k)&lt;=<span class="number">1</span>)  <span class="comment">//这里设置如何存储内存后剩余空间小于等于1则将状态改为已分配</span></span><br><span class="line">            &#123;</span><br><span class="line">                (*pos).State=<span class="string">'F'</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"如下模块已经被分配："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;(\*pos).Start&lt;&lt;<span class="string">"K         "</span>&lt;&lt;(\*pos).Length&lt;&lt;<span class="string">"K       "</span>;</span><br><span class="line">                <span class="keyword">if</span>(((*pos).State)==<span class="string">'F'</span>)</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"已分配"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                    <span class="keyword">if</span>(mode\[i\].Start == (*pos).Start)</span><br><span class="line">                    &#123;</span><br><span class="line">                        jilu\[x\]=i+<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                Q.erase(pos);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                (*pos).Start += k;</span><br><span class="line">                (*pos).Length -=k;</span><br><span class="line">            &#125;</span><br><span class="line">            flag=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"该需要存储的模块在内存中没有找到合适的模块来存储！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        flag2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">"&lt;--------该模块已经成功存储！--------&gt;"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面给出的是主要算法，接下来给出一些定义的结构体、初始化函数以及使用到Deque队列：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> numUse 100  <span class="comment">//定义空闲区说明表最多有十个可用存储空间</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mode</span>&#123;</span>  <span class="comment">//定义空闲区说明表</span></span><br><span class="line">    <span class="keyword">int</span> Start;  <span class="comment">//起始地址</span></span><br><span class="line">    <span class="keyword">int</span> Length;  <span class="comment">//长度</span></span><br><span class="line">    <span class="keyword">char</span> State;  <span class="comment">//状态 R为未分配 F为以分配</span></span><br><span class="line">&#125;mode\[numUse\];</span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;Mode&gt; Q;  <span class="comment">//创建一个空的deque队列用来存储可能空闲空间</span></span><br><span class="line"><span class="built_in">deque</span>&lt;Mode&gt;::iterator pos;  <span class="comment">//创建迭代器</span></span><br><span class="line"><span class="keyword">int</span> jilu\[numUse\];  <span class="comment">//记录已经分类的模块号</span></span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;  <span class="comment">//记录数组的下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">5</span>; <span class="comment">//这里定义五个可用空间</span></span><br><span class="line"><span class="keyword">int</span> q=<span class="number">0</span>; <span class="comment">//计数器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span>  <span class="comment">//初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start\[<span class="number">5</span>\] = &#123;<span class="number">10</span>,<span class="number">25</span>,<span class="number">40</span>,<span class="number">60</span>,<span class="number">90</span>&#125;;  <span class="comment">//这里事先定义初始地址</span></span><br><span class="line">    <span class="keyword">int</span> length\[<span class="number">5</span>\] = &#123;<span class="number">10</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">25</span>&#125;; <span class="comment">//这里事先定义长度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mode\[i\].Start = start\[i\];</span><br><span class="line">        mode\[i\].Length = length\[i\];</span><br><span class="line">        mode\[i\].State = <span class="string">'R'</span>;</span><br><span class="line">        Q.push_back(mode\[i\]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终结果为： <img src="http://47.100.4.8/wp-content/uploads/2018/05/123.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/312.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>STL</tag>
        <tag>首次适应算法</tag>
      </tags>
  </entry>
  <entry>
    <title>使用STL实现最佳适应算法</title>
    <url>/2018/05/30/shi-yong-stl-shi-xian-zui-jia-shi-ying-suan-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180529111458.png" alt=""> 介绍： 它从全部空闲区中找出能满足作业要求的、且大小最小的空闲分区，这种方法能使碎片尽量小。为适应此算法，空闲<a href="https://baike.baidu.com/item/%E5%88%86%E5%8C%BA%E8%A1%A8">分区表</a>（空闲区链）中的空闲分区要按从小到大进行排序，自表头开始查找到第一个满足要求的自由分区分配。该算法保留大的空闲区，但造成许多小的空闲区。 思想： 首先我先定义好一个空间说明表，然后根据空间长度的大小<strong>从小到大进行排序</strong>，接下来输入需求空间值大小，根据输入的需求空间值的大小遍历整个空间说明表，<strong>由于已经事先对空间说名表排好序</strong>所以当碰到合适的空间时，根据输入的大小和占用的大小做差，当差小于一定值时，则该存储整个被占用（这里我设置的值是小于等于1），如果大于1则根据该空间的首地址+输入的大小来划分出来一块空间然后剩余的空间的首地址更新一下，以及剩余空间的长度更新一下即可。需要注意的是在进行删除操作时，要清空所有数据。   主要算法代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BF</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"注意当你想要结束的时候输入-1即可结束输入"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入你想要存储内存大小（单位为K）："</span>;</span><br><span class="line">    flag2=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        flag1=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(pos=Q.<span class="built_in">begin</span>();pos!=Q.<span class="built_in">end</span>();pos++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((*pos).Length&gt;=k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(((*pos).Length-k)&lt;=<span class="number">1</span>)  <span class="comment">//这里设置如何存储内存后剩余空间小于等于1则将状态改为已分配</span></span><br><span class="line">            &#123;</span><br><span class="line">                (*pos).State=<span class="string">'F'</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"如下模块已经被分配："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;(\*pos).Start&lt;&lt;<span class="string">"K         "</span>&lt;&lt;(\*pos).Length&lt;&lt;<span class="string">"K       "</span>;</span><br><span class="line">                <span class="keyword">if</span>(((*pos).State)==<span class="string">'F'</span>)</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"已分配"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                    <span class="keyword">if</span>(mode\[i\].Start == (*pos).Start)</span><br><span class="line">                    &#123;</span><br><span class="line">                        jilu\[x\]=i+<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                Q.erase(pos);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                (*pos).Start += k;</span><br><span class="line">                (*pos).Length -=k;</span><br><span class="line">            &#125;</span><br><span class="line">            flag=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"该需要存储的模块在内存中没有找到合适的模块来存储！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        flag2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"该模块已经成功存储！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>数据结构、初始化函数以及一些数据：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> numUse 10  <span class="comment">//定义空闲区说明表最多有十个可用存储空间</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mode</span>&#123;</span>  <span class="comment">//定义空闲区说明表</span></span><br><span class="line">    <span class="keyword">int</span> Start;  <span class="comment">//起始地址</span></span><br><span class="line">    <span class="keyword">int</span> Length;  <span class="comment">//长度</span></span><br><span class="line">    <span class="keyword">char</span> State;  <span class="comment">//状态 R为未分配 F为以分配</span></span><br><span class="line">&#125;mode\[numUse\];</span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;Mode&gt; Q;  <span class="comment">//创建一个空的deque队列用来存储可能空闲空间</span></span><br><span class="line"><span class="built_in">deque</span>&lt;Mode&gt;::iterator pos;  <span class="comment">//创建迭代器</span></span><br><span class="line"><span class="keyword">int</span> jilu\[numUse\];  <span class="comment">//记录已经分类的模块号</span></span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;  <span class="comment">//记录数组的下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">5</span>; <span class="comment">//这里定义五个可用空间</span></span><br><span class="line"><span class="keyword">int</span> q=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span>  <span class="comment">//初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start\[<span class="number">5</span>\] = &#123;<span class="number">10</span>,<span class="number">25</span>,<span class="number">40</span>,<span class="number">60</span>,<span class="number">90</span>&#125;;  <span class="comment">//这里事先定义初始地址</span></span><br><span class="line">    <span class="keyword">int</span> length\[<span class="number">5</span>\] = &#123;<span class="number">10</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">25</span>&#125;; <span class="comment">//这里事先定义长度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mode\[i\].Start = start\[i\];</span><br><span class="line">        mode\[i\].Length = length\[i\];</span><br><span class="line">        mode\[i\].State = <span class="string">'R'</span>;</span><br><span class="line">        Q.push_back(mode\[i\]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/123123-2.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/05/23242424.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>STL</tag>
        <tag>最佳适应算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库 Excel文件导入&amp;Select语句的基础操作</title>
    <url>/2018/05/01/shu-ju-ku-excel-wen-jian-dao-ru-select-yu-ju-de-ji-chu-cao-zuo-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180412181315.png" alt=""> 通过使用SQL Sever 导入excel表格数据： 步骤： 1.通过任务选项中的导入数据进行导入 <img src="http://47.100.4.8/wp-content/uploads/2018/05/321.png" alt=""> 2.选择你想要导入的数据： <img src="http://47.100.4.8/wp-content/uploads/2018/05/3212.png" alt=""> 3.选择你本地的数据库 并输入需要的输入的数据 <img src="http://47.100.4.8/wp-content/uploads/2018/05/32123.png" alt=""> 4.选择对应表进行数据导入： <img src="http://47.100.4.8/wp-content/uploads/2018/05/13241.png" alt=""> 这里需要注意的是左侧一栏为源文件可导入的表，右侧一栏是导入你自己创建表中。 5.之后就一直下一步即可创建成功。 <img src="http://47.100.4.8/wp-content/uploads/2018/05/852.png" alt=""> 需要注意的是：在导入数据之前要记得先创建文件中对应的表以及数据要求 还有一点需要注意的是：如果在导入excel文件时弹出如下提示框： <img src="http://47.100.4.8/wp-content/uploads/2018/05/9636.png" alt=""> 那么你需要去Microsoft 官网上下载对应你office版本号的Microsoft office access database engine 2016 比如我这里就是2016版本的。   select语句的使用：</p>
<ul>
<li>查询计算机系的学生信息</li>
</ul>
<p>代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> S$   （*号的作用是显示所有内容）</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> SDEPT=<span class="string">'计算机'</span></span><br><span class="line"></span><br><span class="line">    结果： ![](<span class="keyword">http</span>://<span class="number">47.100</span><span class="number">.4</span><span class="number">.8</span>/wp-<span class="keyword">content</span>/uploads/<span class="number">2018</span>/<span class="number">05</span>/<span class="number">1.</span>png)</span><br><span class="line"></span><br><span class="line">*   <span class="keyword">between</span>语句配合<span class="keyword">select</span>的使用：</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> S$</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> SAGE <span class="keyword">between</span> <span class="number">19</span> <span class="keyword">and</span> <span class="number">21</span></span><br><span class="line"></span><br><span class="line">    结果： ![](<span class="keyword">http</span>://<span class="number">47.100</span><span class="number">.4</span><span class="number">.8</span>/wp-<span class="keyword">content</span>/uploads/<span class="number">2018</span>/<span class="number">05</span>/<span class="number">2.</span>png)</span><br><span class="line"></span><br><span class="line">*   符号表达式的使用：</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> S$</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> SAGE&lt;<span class="number">20</span> <span class="keyword">and</span> SSEX=<span class="string">'女'</span></span><br><span class="line"></span><br><span class="line">    结果： ![](<span class="keyword">http</span>://<span class="number">47.100</span><span class="number">.4</span><span class="number">.8</span>/wp-<span class="keyword">content</span>/uploads/<span class="number">2018</span>/<span class="number">05</span>/<span class="number">3.</span>png)</span><br><span class="line"></span><br><span class="line">*   %的使用：</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> S$</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> SNAME <span class="keyword">like</span> <span class="string">'%伟'</span>  （目的是显示所有以伟结果的名称）</span><br><span class="line"></span><br><span class="line">    结果： ![](<span class="keyword">http</span>://<span class="number">47.100</span><span class="number">.4</span><span class="number">.8</span>/wp-<span class="keyword">content</span>/uploads/<span class="number">2018</span>/<span class="number">05</span>/<span class="number">4.</span>png)</span><br><span class="line"></span><br><span class="line">*   <span class="keyword">like</span> 是用于字符串 的匹配</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> C$</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> CNAME <span class="keyword">like</span> <span class="string">'数据库'</span> <span class="keyword">or</span> CNAME lik<span class="string">e'操作系统'</span> <span class="keyword">or</span> CNAME lik<span class="string">e'数据库实验'</span></span><br><span class="line"></span><br><span class="line">    结果： ![](http://<span class="number">47.100</span><span class="number">.4</span><span class="number">.8</span>/wp-content/uploads/<span class="number">2018</span>/<span class="number">05</span>/<span class="number">5.</span>png)</span><br><span class="line"></span><br><span class="line">*   = 用于数值的比较</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SNO <span class="keyword">from</span> SC$</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> CNO = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    结果： ![](<span class="keyword">http</span>://<span class="number">47.100</span><span class="number">.4</span><span class="number">.8</span>/wp-<span class="keyword">content</span>/uploads/<span class="number">2018</span>/<span class="number">05</span>/<span class="number">6.</span>png)</span><br><span class="line"></span><br><span class="line">*   <span class="keyword">max</span>（） <span class="keyword">min</span>（）  <span class="keyword">avg</span>（） 的使用：</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">'最高分'</span>=<span class="keyword">MAX</span>(GRADE),<span class="string">'最低分'</span>=<span class="keyword">MIN</span>(GRADE),<span class="string">'平均分'</span>=<span class="keyword">AVG</span>(GRADE)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> S,C,SC</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> S.SNO=SC.SNO <span class="keyword">and</span> C.CNO=SC.CNO <span class="keyword">and</span> CNAME <span class="keyword">like</span> <span class="string">'操作系统'</span></span><br><span class="line"></span><br><span class="line">    结果： ![](<span class="keyword">http</span>://<span class="number">47.100</span><span class="number">.4</span><span class="number">.8</span>/wp-<span class="keyword">content</span>/uploads/<span class="number">2018</span>/<span class="number">05</span>/<span class="number">7.</span>png)</span><br><span class="line"></span><br><span class="line">*   top语句的使用：</span><br></pre></td></tr></table></figure>
<p>代码：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">select  top <span class="number">3</span> S.*,GRADE  （选择出成绩前三名）</span><br><span class="line"></span><br><span class="line">from S,C,<span class="keyword">SC</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">where </span>S.SNO=<span class="keyword">SC.SNO </span><span class="keyword">and </span>C.CNO=<span class="keyword">SC.CNO </span><span class="keyword">and </span>C.CNAME = <span class="string">'操作系统'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">order </span><span class="keyword">by </span>GRADE DESC  （梯度下降）</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/8.png" alt=""></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>DataBase</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>使用tkinter 编写一个可以拖动的时钟[]~(￣▽￣)~*</title>
    <url>/2018/03/04/shi-yong-tkinter-bian-xie-yi-ge-ke-yi-tuo-dong-de-shi-zhong-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/timg.jpg" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304224928.png" alt=""></p>
<h6 id="import-tkinter-import-threading-import-datetime-import-time-app-tkinter-Tk-app-overrideredirect-True-不显示标题栏-app-attributes-’-alpha’-0-9-半透明-app-attributes-’-topmost’-1-总是在顶端-app-geometry-‘110x25-100-100’-初始大小与位置-labelDateTime-tkinter-Label-app-labelDateTime-pack-fill-tkinter-BOTH-expand-tkinter-YES-labelDateTime-configure-bg-‘gray’-X-tkinter-IntVar-value-0-记录鼠标左键按下的位置-Y-tkinter-IntVar-value-0-canMove-tkinter-IntVar-value-0-窗口是否可拖动-still-tkinter-IntVar-value-1-是否仍在运行-def-onLeftButtonDown-event-app-attributes-’-alpha’-0-4-开始拖动时增加透明度-X-set-event-x-鼠标左键按下，记录当前位置-Y-set-event-y-canMove-set-1-并标记窗口可拖动-labelDateTime-bind-’-Button-1-’-onLeftButtonDown-def-onLeftButtonUp-event-app-attributes-’-alpha’-0-9-停止拖动时恢复透明度-canMove-set-0-鼠标左键抬起，标记窗口不可拖动-labelDateTime-bind-’-ButtonRelease-1-’-onLeftButtonUp-def-onLeftButtonMove-event-if-canMove-get-0-return-newX-app-winfo-x-event-x-X-get-newY-app-winfo-y-event-y-Y-get-g-‘110x25-’-str-newX-’-’-str-newY-app-geometry-g-修改窗口的位置-labelDateTime-bind-’-B1-Motion-’-onLeftButtonMove-def-onRightButtonDown-event-still-set-0-t-join-0-2-app-destroy-关闭窗口-labelDateTime-bind-’-Button-3-’-onRightButtonDown-def-nowDateTime-while-still-get-1-now-datetime-datetime-now-s-str-now-year-’-’-str-now-month-’-’-str-now-day-’-’-s-s-str-now-hour-’-’-str-now-minute-’-’-str-now-second-labelDateTime-‘text’-s-显示当前时间-time-sleep-0-2-t-threading-Thread-target-nowDateTime-t-daemon-True-t-start-app-mainloop"><a class="header-anchor" href="#import-tkinter-import-threading-import-datetime-import-time-app-tkinter-Tk-app-overrideredirect-True-不显示标题栏-app-attributes-’-alpha’-0-9-半透明-app-attributes-’-topmost’-1-总是在顶端-app-geometry-‘110x25-100-100’-初始大小与位置-labelDateTime-tkinter-Label-app-labelDateTime-pack-fill-tkinter-BOTH-expand-tkinter-YES-labelDateTime-configure-bg-‘gray’-X-tkinter-IntVar-value-0-记录鼠标左键按下的位置-Y-tkinter-IntVar-value-0-canMove-tkinter-IntVar-value-0-窗口是否可拖动-still-tkinter-IntVar-value-1-是否仍在运行-def-onLeftButtonDown-event-app-attributes-’-alpha’-0-4-开始拖动时增加透明度-X-set-event-x-鼠标左键按下，记录当前位置-Y-set-event-y-canMove-set-1-并标记窗口可拖动-labelDateTime-bind-’-Button-1-’-onLeftButtonDown-def-onLeftButtonUp-event-app-attributes-’-alpha’-0-9-停止拖动时恢复透明度-canMove-set-0-鼠标左键抬起，标记窗口不可拖动-labelDateTime-bind-’-ButtonRelease-1-’-onLeftButtonUp-def-onLeftButtonMove-event-if-canMove-get-0-return-newX-app-winfo-x-event-x-X-get-newY-app-winfo-y-event-y-Y-get-g-‘110x25-’-str-newX-’-’-str-newY-app-geometry-g-修改窗口的位置-labelDateTime-bind-’-B1-Motion-’-onLeftButtonMove-def-onRightButtonDown-event-still-set-0-t-join-0-2-app-destroy-关闭窗口-labelDateTime-bind-’-Button-3-’-onRightButtonDown-def-nowDateTime-while-still-get-1-now-datetime-datetime-now-s-str-now-year-’-’-str-now-month-’-’-str-now-day-’-’-s-s-str-now-hour-’-’-str-now-minute-’-’-str-now-second-labelDateTime-‘text’-s-显示当前时间-time-sleep-0-2-t-threading-Thread-target-nowDateTime-t-daemon-True-t-start-app-mainloop">¶</a>import tkinter import threading import datetime import time app = <a href="http://tkinter.Tk">tkinter.Tk</a>() app.overrideredirect(True) #不显示标题栏 app.attributes(’-alpha’, 0.9) #半透明 app.attributes(’-topmost’, 1) #总是在顶端 app.geometry(‘110x25+100+100’) #初始大小与位置 labelDateTime = tkinter.Label(app) labelDateTime.pack(fill=tkinter.BOTH, expand=tkinter.YES) labelDateTime.configure(bg = ‘gray’) X = tkinter.IntVar(value=0) #记录鼠标左键按下的位置 Y = tkinter.IntVar(value=0) canMove = tkinter.IntVar(value=0) #窗口是否可拖动 still = tkinter.IntVar(value=1) #是否仍在运行 def onLeftButtonDown(event): app.attributes(’-alpha’, 0.4) #开始拖动时增加透明度 X.set(event.x) #鼠标左键按下，记录当前位置 Y.set(event.y) canMove.set(1) #并标记窗口可拖动 labelDateTime.bind(’<Button-1>’, onLeftButtonDown) def onLeftButtonUp(event): app.attributes(’-alpha’, 0.9) #停止拖动时恢复透明度 canMove.set(0) #鼠标左键抬起，标记窗口不可拖动 labelDateTime.bind(’<ButtonRelease-1>’, onLeftButtonUp) def onLeftButtonMove(event): if canMove.get()==0: return newX = app.winfo_x()+(event.x-X.get()) newY = app.winfo_y()+(event.y-Y.get()) g = ‘110x25+’+str(newX)+’+’+str(newY) app.geometry(g) #修改窗口的位置 labelDateTime.bind(’<B1-Motion>’, onLeftButtonMove) def onRightButtonDown(event): still.set(0) t.join(0.2) app.destroy() #关闭窗口 labelDateTime.bind(’<Button-3>’, onRightButtonDown) def nowDateTime(): while still.get()==1: now = datetime.datetime.now() s = str(now.year)+’-’+str(now.month)+’-’+str(now.day)+’ ’ s = s+str(now.hour)+’:’+str(now.minute)+’:’+str(now.second) labelDateTime[‘text’] = s #显示当前时间 time.sleep(0.2) t = threading.Thread(target=nowDateTime) t.daemon = True t.start() app.mainloop()</h6>
<p></p>
<h1>ヾ(<sub>▽</sub>)<em>Bye</em><sub>_Bye_</sub></h1>
]]></content>
      <categories>
        <category>Python——Tkinter编程</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>使用tkinter实现弹球小游戏</title>
    <url>/2018/06/06/shi-yong-tkinter-shi-xian-dan-qiu-xiao-you-xi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/u407244128253124607fm27gp0.jpg" alt=""> 写了一个弹球小游戏，能够实现的简单的通过键盘的左右键来进行木板的移动，还有小球弹到边界反弹，以及随机出生点还有速度的改变、最后是游戏结束的提示，感觉还有改进的地方，比如：可以手动选择游戏难度，游戏结束后重新开始等，这个后续可能会加上去。 截图： <img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180606155956.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180606160006.png" alt=""> 代码总共下来也就不到100行，也是看了网上写的一些东西自己在编写得到的。 下载地址:<a href="https://download.csdn.net/download/qq_16184125/10463456">https://download.csdn.net/download/qq_16184125/10463456</a> 代码：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import tkinter</span><br><span class="line">import random</span><br><span class="line">import time</span><br><span class="line">import tkinter.messagebox</span><br><span class="line"></span><br><span class="line">tk = tkinter.Tk()  <span class="comment"># 创建一个tk实例</span></span><br><span class="line">tk.title(<span class="string">"弹球游戏"</span>)  <span class="comment">#窗口名称</span></span><br><span class="line">tk.resizable(<span class="number">0</span>,<span class="number">0</span>)  <span class="comment">#设置窗口管理器调整布局大小，  0,0表示不能被拉升</span></span><br><span class="line">tk.wm_attributes(<span class="string">"-topmost"</span>,<span class="number">1</span>)</span><br><span class="line">canvas = tkinter.Canvas(tk,width=<span class="number">500</span>,height=<span class="number">400</span>,bd=<span class="number">0</span>,highlightthickness=<span class="number">0</span>)<span class="comment">#创建一个400*500的界面，背景色为默认，边框为厚度为0</span></span><br><span class="line">canvas.pack()  <span class="comment">#通知窗口管理器注册组件</span></span><br><span class="line">tk.update()  <span class="comment">#刷新一下界面</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span>():  <span class="comment">#小球</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> \<span class="title">_</span>\<span class="title">_init</span>\<span class="title">_</span>\<span class="title">_</span><span class="params">(<span class="keyword">self</span>,canvas,color)</span></span>:  <span class="comment">#canvas，画图用来画一个球，一个是color表示球的颜色</span></span><br><span class="line">        <span class="keyword">self</span>.canvas = canvas</span><br><span class="line">        <span class="keyword">self</span>.id = canvas.create_oval(<span class="number">10</span>,<span class="number">10</span>,<span class="number">25</span>,<span class="number">25</span>,fill=color)  <span class="comment">#画球</span></span><br><span class="line">        <span class="keyword">self</span>.canvas.move(<span class="keyword">self</span>.id,<span class="number">245</span>,<span class="number">100</span>)  <span class="comment">#记录球的id</span></span><br><span class="line">        <span class="comment">#设置小球的初始位置</span></span><br><span class="line">        starts = \[-<span class="number">1</span>,-<span class="number">2</span>,-<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>\]</span><br><span class="line">        random.shuffle(starts)</span><br><span class="line">        <span class="comment">#随机从上面的starts列表中取出一个数</span></span><br><span class="line">        <span class="keyword">self</span>.x = starts\[<span class="number">0</span>\]</span><br><span class="line">        <span class="keyword">self</span>.y = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">self</span>.flag2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>.canvas\_height = <span class="keyword">self</span>.canvas.winfo\_height()</span><br><span class="line">        <span class="keyword">self</span>.canvas\_width = <span class="keyword">self</span>.canvas.winfo\_width()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hit_paddle</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        paddle_pos = <span class="keyword">self</span>.canvas.coords(id1)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.pos\[<span class="number">2</span>\] &gt;= paddle\_pos\[<span class="number">0</span>\] <span class="keyword">and</span> <span class="keyword">self</span>.pos\[<span class="number">0</span>\]&lt;= paddle\_pos\[<span class="number">2</span>\]<span class="symbol">:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">self</span>.pos\[<span class="number">3</span>\] &gt;= paddle\_pos\[<span class="number">1</span>\] <span class="keyword">and</span> <span class="keyword">self</span>.pos\[<span class="number">3</span>\] &lt;= paddle\_pos\[<span class="number">3</span>\]<span class="symbol">:</span></span><br><span class="line">                <span class="keyword">return</span> True</span><br><span class="line">        <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.canvas.move(<span class="keyword">self</span>.id,<span class="keyword">self</span>.x,<span class="keyword">self</span>.y)  <span class="comment">#表示运动</span></span><br><span class="line">        <span class="keyword">self</span>.pos = <span class="keyword">self</span>.canvas.coords(<span class="keyword">self</span>.id)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.pos\[<span class="number">1</span>\]&lt;=<span class="number">0</span>:  <span class="comment">#向下运动</span></span><br><span class="line">            <span class="keyword">self</span>.y = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.pos\[<span class="number">0</span>\]&lt;=<span class="number">0</span>: <span class="comment">#向右运动</span></span><br><span class="line">            <span class="keyword">self</span>.x = <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.pos\[<span class="number">2</span>\]&gt;=<span class="keyword">self</span>.<span class="symbol">canvas_width:</span>  <span class="comment">#向左运动</span></span><br><span class="line">            <span class="keyword">self</span>.x = -<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.pos\[<span class="number">3</span>\] &gt;= <span class="keyword">self</span>.<span class="symbol">canvas_height:</span>  <span class="comment">#向上运动</span></span><br><span class="line">            <span class="keyword">self</span>.flag2 = <span class="number">1</span>  <span class="comment">#游戏结束标志</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Paddle</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> \<span class="title">_</span>\<span class="title">_init</span>\<span class="title">_</span>\<span class="title">_</span><span class="params">(<span class="keyword">self</span>,canvas,color)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.canvas = canvas</span><br><span class="line">        global id1</span><br><span class="line">        id1 = canvas.create_rectangle(<span class="number">0</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">10</span>,fill=color)</span><br><span class="line">        <span class="keyword">self</span>.canvas.move(id1,<span class="number">200</span>,<span class="number">350</span>)</span><br><span class="line">        <span class="keyword">self</span>.x = <span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>.canvas\_width = <span class="keyword">self</span>.canvas.winfo\_width()</span><br><span class="line">        <span class="keyword">self</span>.canvas.bind\_all(<span class="string">'&lt;KeyPress-Left&gt;'</span>,<span class="keyword">self</span>.turn\_left)  <span class="comment">#事件响应键盘的左右按键</span></span><br><span class="line">        <span class="keyword">self</span>.canvas.bind\_all(<span class="string">'&lt;KeyPress-Right&gt;'</span>, <span class="keyword">self</span>.turn\_right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">draw</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.canvas.move(id1,<span class="keyword">self</span>.x,<span class="number">0</span>)</span><br><span class="line">        pos = <span class="keyword">self</span>.canvas.coords(id1)  <span class="comment">#得到当前的位置</span></span><br><span class="line">        <span class="keyword">if</span> pos\[<span class="number">0</span>\]&lt;=<span class="number">0</span><span class="symbol">:</span></span><br><span class="line">            <span class="keyword">self</span>.x = <span class="number">0</span></span><br><span class="line">        elif pos\[<span class="number">2</span>\]&gt;=<span class="keyword">self</span>.<span class="symbol">canvas_width:</span></span><br><span class="line">            <span class="keyword">self</span>.x=<span class="number">0</span></span><br><span class="line">        <span class="symbol">else:</span></span><br><span class="line">            <span class="keyword">self</span>.x=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">turn_left</span><span class="params">(<span class="keyword">self</span>, evt)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.x = -<span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">turn_right</span><span class="params">(<span class="keyword">self</span>, evt)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.x = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ball = Ball(canvas,<span class="string">"red"</span>)</span><br><span class="line">paddle = Paddle(canvas,<span class="string">"blue"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span><span class="symbol">:</span></span><br><span class="line">    ball.draw()</span><br><span class="line">    paddle.draw()</span><br><span class="line">    flag = ball.hit_paddle()</span><br><span class="line">    <span class="keyword">if</span> flag == <span class="symbol">True:</span></span><br><span class="line">        ball.y = -<span class="number">4</span></span><br><span class="line">    <span class="keyword">if</span> ball.flag2 == <span class="number">1</span><span class="symbol">:</span></span><br><span class="line">        flag1 = <span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    tk.update_idletasks()</span><br><span class="line">    tk.update()</span><br><span class="line">    time.sleep(<span class="number">0</span>.<span class="number">01</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag1 == <span class="number">1</span><span class="symbol">:</span></span><br><span class="line">    tkinter.messagebox.showinfo(title=<span class="string">'Python tkinter'</span>,message=<span class="string">'游戏结束'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python——Tkinter编程</category>
        <category>小游戏</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Game</tag>
        <tag>tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库—SQL创建数据库</title>
    <url>/2018/04/12/shu-ju-ku-sql-chuang-jian-shu-ju-ku-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180412181315.png" alt=""> 首先你要有SQL Server 可自行去微软官方下载。 在Microsoft SQL Server Management Studio 上创建一个本地数据库。 1.使用SQL语句创建一个数据库： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180412181645.png" alt=""> 看到提示命令已经完成，点击数据库右键刷新一下就可以看到你创建的数据库了。 打开文件夹： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180412181927.png" alt=""> 注意：这个一定要选择到你想要创建到的位置。 <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180412181808.png" alt="">   2.可以使用交互式界面进行创建数据库： 右键数据库点开新建数据库： 得到如下界面： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180412182150.png" alt=""> 输入名称以及修改自己需要的设定的配置进行设定，然后确定即可。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>DataBase</tag>
      </tags>
  </entry>
  <entry>
    <title>使用遗传算法工具箱解决二元函数求极值问题</title>
    <url>/2018/07/13/shi-yong-yi-chuan-suan-fa-gong-ju-xiang-jie-jue-er-yuan-han-shu-qiu-ji-zhi-wen-ti-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180706191552.png" alt=""> <strong>计算二元函数的最大值</strong> <strong>二元函数为：<img src="http://47.100.4.8/wp-content/uploads/2018/07/11.png" alt=""></strong> <strong>基础参数配置为：</strong></p>
<p>种群大小</p>
<p>最大遗传代数</p>
<p>个体长度</p>
<p>代沟</p>
<p>交叉概率</p>
<p>变异概率</p>
<p>40</p>
<p>100</p>
<p>40（两个自变量每个长20）</p>
<p>0.95</p>
<p>0.7</p>
<p>0.01</p>
<p>代码：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc</span><br><span class="line">clear all</span><br><span class="line">close all</span><br><span class="line"><span class="comment">%%画出函数图</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);  <span class="comment">%设置为窗口1</span></span><br><span class="line">lbx = <span class="number">-2</span>;  <span class="comment">%自变量x的范围</span></span><br><span class="line">ubx = <span class="number">2</span>;</span><br><span class="line">lby = <span class="number">-2</span>; <span class="comment">%自变量y的范围</span></span><br><span class="line">uby = <span class="number">2</span>;</span><br><span class="line"><span class="comment">%%画有两个变量的函数并且要根据范围去画，因此使用ezmesh</span></span><br><span class="line">ezmesh(<span class="string">'y\*sin(2\*pi\*x)+x\*cos(2\*pi\*y)'</span>,\[lbx,ubx,lby,uby\],<span class="number">50</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="comment">%%定义遗传算法参数</span></span><br><span class="line">Nind = <span class="number">40</span>;  <span class="comment">%种群大小为40</span></span><br><span class="line">Lind = <span class="number">20</span>; <span class="comment">%两个变量合在一起的基因长度为40  x为20  y为20</span></span><br><span class="line">MaxGen = <span class="number">100</span>; <span class="comment">%遗传最大代数</span></span><br><span class="line">GGAP = <span class="number">0.95</span>; <span class="comment">%代沟</span></span><br><span class="line">px = <span class="number">0.7</span>; <span class="comment">%交叉概率</span></span><br><span class="line">pm = <span class="number">0.01</span>; <span class="comment">%变异概率</span></span><br><span class="line">trace = <span class="built_in">zeros</span>(<span class="number">3</span>,MaxGen); <span class="comment">%用来存储每一代中的最优结果</span></span><br><span class="line">FieldD = \[Lind Lind;lbx lby;ubx uby;<span class="number">1</span> <span class="number">1</span>;<span class="number">0</span> <span class="number">0</span>;<span class="number">1</span> <span class="number">1</span>;<span class="number">1</span> <span class="number">1</span>\];  <span class="comment">%设置好FieldD参数,因为是两个变量所有x y要分开设置</span></span><br><span class="line"><span class="comment">%%初始化</span></span><br><span class="line">Chrom = crtbp(Nind,Lind*<span class="number">2</span>);  <span class="comment">%随机生成初始种群</span></span><br><span class="line">gen = <span class="number">0</span>; <span class="comment">%种群迭代计数器</span></span><br><span class="line">XY = bs2rv(Chrom,FieldD);  <span class="comment">%生成的XY为一个Nind行 两列的数组 前一列是x的值，后一列是y的值</span></span><br><span class="line">x = XY(:,<span class="number">1</span>);  <span class="comment">%分别存储x和y的值</span></span><br><span class="line">y = XY(:,<span class="number">2</span>);</span><br><span class="line">ObjV = y.\*<span class="built_in">sin</span>(<span class="number">2</span>\*<span class="built_in">pi</span>\*x)+x.\*<span class="built_in">cos</span>(<span class="number">2</span>\*<span class="built_in">pi</span>\*y);  <span class="comment">%进行计算函数值  采用.*是进行矩阵计算</span></span><br><span class="line"><span class="keyword">while</span> gen&lt;MaxGen</span><br><span class="line">    FitnV = ranking(-ObjV);  <span class="comment">%进行适应度计算</span></span><br><span class="line">    SelCh = select(<span class="string">'sus'</span>,Chrom,FitnV,GGAP); <span class="comment">%通过轮盘赌算法并且根据适应度和代沟来选择留下的染色体</span></span><br><span class="line">    SelCh = recombin(<span class="string">'xovsp'</span>,SelCh,px);  <span class="comment">%选出来的染色体进行交叉;</span></span><br><span class="line">    SelCh = mut(SelCh,pm); <span class="comment">%再进行变异</span></span><br><span class="line">    XY = bs2rv(SelCh,FieldD); <span class="comment">%将子代转换为十进制</span></span><br><span class="line">    x = XY(:,<span class="number">1</span>);</span><br><span class="line">    y = XY(:,<span class="number">2</span>);</span><br><span class="line">    ObjVSel = y.\*<span class="built_in">sin</span>(<span class="number">2</span>\*<span class="built_in">pi</span>\*x)+x.\*<span class="built_in">cos</span>(<span class="number">2</span>\*<span class="built_in">pi</span>\*y); <span class="comment">%计算子代的函数值</span></span><br><span class="line">    \[Chrom,ObjV\] = reins(Chrom,SelCh,<span class="number">1</span>,<span class="number">1</span>,ObjV,ObjVSel); <span class="comment">%基于适应度的选择，将子代重新插入到父代中</span></span><br><span class="line">    XY = bs2rv(Chrom,FieldD); <span class="comment">%重新计算，方便在写入trace时使用</span></span><br><span class="line">    gen = gen + <span class="number">1</span>; <span class="comment">%迭代次数+1</span></span><br><span class="line">    \[Y,I\] = <span class="built_in">max</span>(ObjV);</span><br><span class="line">    trace(<span class="number">1</span>:<span class="number">2</span>,gen) = XY(I,:);  <span class="comment">%记录下来每次迭代最优的xy</span></span><br><span class="line">    trace(<span class="number">3</span>,gen) = Y; <span class="comment">%记录下来最优值</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">plot3</span>(trace(<span class="number">1</span>,:),trace(<span class="number">2</span>,:),trace(<span class="number">3</span>,:),<span class="string">'bo'</span>); <span class="comment">%在figure1画出每代的最优点</span></span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">plot3</span>(XY(:,<span class="number">1</span>),XY(:,<span class="number">2</span>),ObjV,<span class="string">'bo'</span>);  <span class="comment">%画出最后一代的种群</span></span><br><span class="line"><span class="built_in">hold</span> off</span><br><span class="line"><span class="comment">%%画出进化图</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(<span class="number">1</span>:MaxGen,trace(<span class="number">3</span>,:));</span><br><span class="line">grid on;</span><br><span class="line">xlabel(<span class="string">'遗传代数'</span>);</span><br><span class="line">ylabel(<span class="string">'解的变化'</span>);</span><br><span class="line">title(<span class="string">'进化过程'</span>);</span><br><span class="line">bestZ = trace(<span class="number">3</span>,<span class="keyword">end</span>);</span><br><span class="line">bestX = trace(<span class="number">1</span>,<span class="keyword">end</span>);</span><br><span class="line">bestY = trace(<span class="number">2</span>,<span class="keyword">end</span>);</span><br><span class="line">fprintf(\[<span class="string">'最优解：\\nX='</span>,num2str(bestX),<span class="string">'\\nY='</span>,num2str(bestY),<span class="string">'\\n最大值为='</span>,num2str(bestZ)\]);</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/07/12.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/07/13.png" alt=""></p>
]]></content>
      <categories>
        <category>GA</category>
        <category>MatLab</category>
        <category>优化算法</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>MatLab</tag>
        <tag>GA</tag>
        <tag>优化算法</tag>
      </tags>
  </entry>
  <entry>
    <title>使用最小二乘法来拟合直线（C++&amp;Python）</title>
    <url>/2018/04/28/shi-yong-zui-xiao-er-cheng-fa-lai-ni-he-zhi-xian-c-python-1/</url>
    <content><![CDATA[<p>使用最小二乘法来拟合直线：   给定一个简单的直线模型y（a）=ax+b 这个问题称为直线回归。设变量y随自变量x变化，给出n组测试数据（xi，yi）用直线来拟合这些点，其中a，b是直线的斜率和截距。称为回归系数。 直线的拟合在机器学习中logistic回归时对数据进行拟合时便用到了。因此在这里给出一个详细解释。   为了确定回归系数，通常采用最小二乘法来确定，只要使式子达到最小即可。 根据极值原理，a和b满足下列方程： 根据上面式子再整合，得到如下式子： <img src="http://47.100.4.8/wp-content/uploads/2018/04/66666666666666.png" alt=""> 其实只需要记住上面的式子就好了。推导过程你不是数学专业的根本不需要知道。 上面的是式子就是求回归系数的主要依据。   C++实现：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"><span class="comment">//直线拟合函数</span></span><br><span class="line"><span class="type">float</span> lineFit(<span class="type">float</span> points\[\]\[<span class="number">2</span>\],int n)  <span class="comment">//n为点的组数 格式为：(x,y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> avgX=<span class="number">0</span>,avgY=<span class="number">0</span>;</span><br><span class="line">    <span class="type">float</span> lxx=<span class="number">0</span>,lyy=<span class="number">0</span>,lxy=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//计算xy的平均值</span></span><br><span class="line">    for(int i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        avgX += points\[i\]\[<span class="number">0</span>\]/n;</span><br><span class="line">        avgY += points\[i\]\[<span class="number">1</span>\]/n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算出Lxx，Lyy，Lxy</span></span><br><span class="line">    for(int i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        lxx +=(points\[i\]\[<span class="number">0</span>\]-avgX)*(points\[i\]\[<span class="number">0</span>\]-avgX);</span><br><span class="line">        lyy +=(points\[i\]\[<span class="number">1</span>\]-avgY)*(points\[i\]\[<span class="number">1</span>\]-avgY);</span><br><span class="line">        lxy +=(points\[i\]\[<span class="number">0</span>\]-avgX)*(points\[i\]\[<span class="number">1</span>\]-avgY);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">"函数模型为：y=ax+b"</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">"其中a="</span>&lt;&lt;lxy/lxx&lt;&lt;<span class="string">"  b="</span>&lt;&lt;avgY-lxy*avgX/lxx&lt;&lt;endl;</span><br><span class="line">    <span class="type">float</span> t=(lxy/sqrt(lxx*lyy));</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> a\[<span class="number">10</span>\]\[<span class="number">2</span>\]=&#123;<span class="number">6</span>,<span class="number">10</span>,<span class="number">14</span>,<span class="number">20</span>,<span class="number">26</span>,<span class="number">30</span>,<span class="number">33</span>,<span class="number">40</span>,<span class="number">46</span>,<span class="number">50</span>,<span class="number">54</span>,<span class="number">60</span>,<span class="number">67</span>,<span class="number">70</span>,<span class="number">75</span>,<span class="number">80</span>,<span class="number">84</span>,<span class="number">90</span>,<span class="number">100</span>,<span class="number">100</span>&#125;;<span class="comment">//用于测试</span></span><br><span class="line">    <span class="type">float</span> t=lineFit(a,<span class="number">10</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">"回归系数为："</span>&lt;&lt;t&lt;&lt;endl;</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/3333333333333.png" alt=""> python使用numpy实现：  numpy要好好学了。。搞了半天才弄好数组计算</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">import</span> <span class="string">numpy as np</span></span><br><span class="line"><span class="attr">import</span> <span class="string">re</span></span><br><span class="line"><span class="attr">import</span> <span class="string">math</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#处理文本文件   信息格式为（x，y）</span></span><br><span class="line"><span class="attr">def</span> <span class="string">loadData():   </span></span><br><span class="line">    <span class="attr">dataSet</span> = <span class="string">\[\]</span></span><br><span class="line">    <span class="attr">dataSave</span> = <span class="string">open('F:/StraightFitting.txt')</span></span><br><span class="line">    <span class="attr">for</span> <span class="string">line in dataSave.readlines():</span></span><br><span class="line">        <span class="attr">lineArr</span> = <span class="string">re.compile(r'\[0-9\]*\[0-9\]+')</span></span><br><span class="line">        <span class="attr">save</span> = <span class="string">lineArr.findall(line)</span></span><br><span class="line">        <span class="attr">dataSet.append(save)</span></span><br><span class="line">    <span class="attr">return</span> <span class="string">dataSet</span></span><br><span class="line"></span><br><span class="line"><span class="attr">def</span> <span class="string">LineFit(dataSet):</span></span><br><span class="line">    <span class="attr">dataMatrix</span> = <span class="string">np.array(dataSet,dtype=np.int32)</span></span><br><span class="line">    <span class="attr">m</span> = <span class="string">np.shape(dataMatrix)\[0\]</span></span><br><span class="line">    <span class="attr">n</span> = <span class="string">np.ndim(dataMatrix)</span></span><br><span class="line">    <span class="attr">avgX</span> = <span class="string">sum((dataMatrix/n)\[0:m,0\])</span></span><br><span class="line">    <span class="attr">avgY</span> = <span class="string">sum((dataMatrix/n)\[0:m,1\])</span></span><br><span class="line">    <span class="attr">lxx</span> = <span class="string">sum((dataMatrix\[0:m,0\]-avgX)*(dataMatrix\[0:m,0\]-avgX))</span></span><br><span class="line">    <span class="attr">lyy</span> = <span class="string">sum((dataMatrix\[0:m,1\]-avgY)*(dataMatrix\[0:m,1\]-avgY))</span></span><br><span class="line">    <span class="attr">lxy</span> = <span class="string">sum((dataMatrix\[0:m,0\]-avgX)*(dataMatrix\[0:m,1\]-avgY))</span></span><br><span class="line">    <span class="attr">a</span> = <span class="string">lxy / lxx</span></span><br><span class="line">    <span class="attr">b</span> = <span class="string">avgY - lxy * avgX / lxx</span></span><br><span class="line">    <span class="attr">t</span> = <span class="string">lxy / math.sqrt(lxx * lyy)</span></span><br><span class="line">    <span class="attr">return</span> <span class="string">a,b,t</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">dataSet</span> = <span class="string">loadData()</span></span><br><span class="line"><span class="meta">a,b,t</span>=<span class="string">LineFit(dataSet)</span></span><br><span class="line"><span class="attr">print(a,b,t)</span></span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/222222222222.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>python数据分析</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Python</tag>
        <tag>Data analysis</tag>
      </tags>
  </entry>
  <entry>
    <title>STL实现最坏适应算法</title>
    <url>/2018/06/01/stl-shi-xian-zui-huai-shi-ying-suan-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180529111458.png" alt=""> 与最佳适应算法相反，最坏适应分配算法要扫描整个空闲分区或链表，总是挑选一个最大的空闲分区分割给作业使用。 算法代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最坏适应算法</span></span><br><span class="line"><span class="keyword">int</span> k=<span class="number">0</span>;  <span class="comment">//全局变量k 以便判断结束条件</span></span><br><span class="line"><span class="keyword">int</span> flag1=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag2=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">BF</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"注意当你想要结束的时候输入-1即可结束输入"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入你想要存储内存大小（单位为K）："</span>;</span><br><span class="line">    flag2=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        flag1=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(pos=Q.<span class="built_in">begin</span>();pos!=Q.<span class="built_in">end</span>();pos++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((*pos).Length&gt;=k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(((*pos).Length-k)&lt;=<span class="number">1</span>)  <span class="comment">//这里设置如何存储内存后剩余空间小于等于1则将状态改为已分配</span></span><br><span class="line">            &#123;</span><br><span class="line">                (*pos).State=<span class="string">'F'</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"如下模块已经被分配："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;(\*pos).Start&lt;&lt;<span class="string">"K         "</span>&lt;&lt;(\*pos).Length&lt;&lt;<span class="string">"K       "</span>;</span><br><span class="line">                <span class="keyword">if</span>(((*pos).State)==<span class="string">'F'</span>)</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;<span class="string">"已分配"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                    <span class="keyword">if</span>(mode\[i\].Start == (*pos).Start)</span><br><span class="line">                    &#123;</span><br><span class="line">                        jilu\[x\]=i+<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                Q.erase(pos);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                (*pos).Start += k;</span><br><span class="line">                (*pos).Length -=k;</span><br><span class="line">            &#125;</span><br><span class="line">            flag=<span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"该需要存储的模块在内存中没有找到合适的模块来存储！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        flag2=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"该模块已经成功存储！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用到的数据结构、相关函数以及全局变量</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> numUse 10  <span class="comment">//定义空闲区说明表最多有十个可用存储空间</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mode</span>&#123;</span>  <span class="comment">//定义空闲区说明表</span></span><br><span class="line">    <span class="keyword">int</span> Start;  <span class="comment">//起始地址</span></span><br><span class="line">    <span class="keyword">int</span> Length;  <span class="comment">//长度</span></span><br><span class="line">    <span class="keyword">char</span> State;  <span class="comment">//状态 R为未分配 F为以分配</span></span><br><span class="line">&#125;mode\[numUse\];</span><br><span class="line"></span><br><span class="line"><span class="built_in">deque</span>&lt;Mode&gt; Q;  <span class="comment">//创建一个空的deque队列用来存储可能空闲空间</span></span><br><span class="line"><span class="built_in">deque</span>&lt;Mode&gt;::iterator pos;  <span class="comment">//创建迭代器</span></span><br><span class="line"><span class="keyword">int</span> jilu\[numUse\];  <span class="comment">//记录已经分类的模块号</span></span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>;  <span class="comment">//记录数组的下标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">5</span>; <span class="comment">//这里定义五个可用空间</span></span><br><span class="line"><span class="keyword">int</span> q=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span>  <span class="comment">//初始化</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> start\[<span class="number">5</span>\] = &#123;<span class="number">10</span>,<span class="number">25</span>,<span class="number">40</span>,<span class="number">60</span>,<span class="number">90</span>&#125;;  <span class="comment">//这里事先定义初始地址</span></span><br><span class="line">    <span class="keyword">int</span> length\[<span class="number">5</span>\] = &#123;<span class="number">10</span>,<span class="number">3</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">25</span>&#125;; <span class="comment">//这里事先定义长度</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mode\[i\].Start = start\[i\];</span><br><span class="line">        mode\[i\].Length = length\[i\];</span><br><span class="line">        mode\[i\].State = <span class="string">'R'</span>;</span><br><span class="line">        Q.push_back(mode\[i\]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对空间说明表按照长度排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">WFModeSort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;Mode&gt;::iterator pos1;  <span class="comment">//创建pos1迭代器以便于排序时使用</span></span><br><span class="line">    <span class="keyword">for</span>(pos=Q.<span class="built_in">begin</span>();pos!=Q.<span class="built_in">end</span>();pos++)</span><br><span class="line">        <span class="keyword">for</span>(pos1=pos+<span class="number">1</span>;pos1!=Q.<span class="built_in">end</span>();pos1++)</span><br><span class="line">           <span class="keyword">if</span>((\*pos).Length&lt;(\*pos1).Length)</span><br><span class="line">              &#123;</span><br><span class="line">                  swap(\*pos1,\*pos);</span><br><span class="line">              &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/06/%E8%87%AA%E8%A1%8C%E8%BD%A6%E8%87%AA%E8%A1%8C%E8%BD%A6.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/06/%E7%88%B1%E4%B8%8A%E5%A4%A7%E5%A3%B0%E5%9C%B0%E9%98%BF%E8%90%A8%E5%BE%B7.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>STL</tag>
        <tag>最坏适应算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库SQL语句语法以及例子</title>
    <url>/2018/06/21/shu-ju-ku-sql-yu-ju-yu-fa-yi-ji-li-zi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180621230739.png" alt=""> <strong>select****语句的使用：</strong> SELECT 列名称 FROM 表名称 下面例题使用到的数据表为：<a href="http://47.100.4.8/wp-content/uploads/2018/06/SC.xlsx">SC</a></p>
<ul>
<li>查询计算机系的学生信息</li>
</ul>
<p>代码：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> S</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> SDEPT=<span class="string">'计算机'</span></span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/06/1.png" alt=""></p>
<ul>
<li>查询年龄在19至21【包含19至21】之间的学生信息</li>
</ul>
<p>代码：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> S</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> SAGE <span class="keyword">between</span> <span class="number">19</span> <span class="keyword">and</span> <span class="number">21</span></span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/06/2.png" alt=""></p>
<ul>
<li>查询20岁以下的女生信息</li>
</ul>
<p>代码：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> S</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> SAGE&lt;<span class="number">20</span> and SSEX=<span class="string">'女'</span></span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/06/3.png" alt=""></p>
<ul>
<li>查询姓名中最后一个字是“伟”的学生信息</li>
</ul>
<p>代码：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> S</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> SNAME=<span class="string">'%伟'</span></span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/06/4.png" alt=""></p>
<ul>
<li>查询学号以“E”开头的学生信息</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">代码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> S</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> SNO <span class="keyword">like</span> <span class="string">'E%'</span></span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/06/5.png" alt=""></p>
<ul>
<li>查询“数据库”、“操作系统”、“数据库实验”课程的信息</li>
</ul>
<p>代码：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> C</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> CNAME = <span class="string">'数据库'</span> or CNAME =<span class="string">'操作系统'</span> or CNAME =<span class="string">'数据库实验'</span></span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/06/6.png" alt=""></p>
<ul>
<li>查询2号课程的选修情况</li>
</ul>
<p>代码：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> SC</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> CNO=<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/06/7.png" alt=""></p>
<ul>
<li>查询某个学生的选课情况（学生学号自定）</li>
</ul>
<p>代码：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SNO,CNO</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> SC</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> SNO=<span class="string">'A0001'</span></span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/06/9.png" alt=""></p>
<ul>
<li>查询成绩90分以上的选课情况</li>
</ul>
<p>代码：</p>
<figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SNO,CNO</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> SC</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> GRADE &gt; <span class="number">90</span></span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/06/10.png" alt=""></p>
<ul>
<li>查询所有选课中的2个最高分</li>
</ul>
<p>代码：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> top <span class="number">2</span> GRADE,SNO  <span class="comment">--注意在top前面不能添加语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> SC</span><br><span class="line"></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> GRADE <span class="keyword">desc</span></span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/06/11.png" alt=""></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>文章页</category>
        <category>语法与例题</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>DataBase</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库之视图操作</title>
    <url>/2018/07/23/shu-ju-ku-zhi-shi-tu-cao-zuo-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180621230739.png" alt=""></p>
<ul>
<li>建立计算机系学生视图CS_S ；</li>
</ul>
<p>代码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> CS_S</span><br><span class="line"></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> S</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> SDEPT = <span class="string">'计算机'</span></span><br><span class="line"></span><br><span class="line">  结果： ![](<span class="keyword">http</span>://<span class="number">47.100</span><span class="number">.4</span><span class="number">.8</span>/wp-<span class="keyword">content</span>/uploads/<span class="number">2018</span>/<span class="number">07</span>/<span class="number">1</span><span class="number">-5.</span>png)</span><br><span class="line"></span><br><span class="line">*   建立计算机系女生视图CS_S1 ；</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> CS_S1</span><br><span class="line"></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> S</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> SDEPT = <span class="string">'计算机'</span> <span class="keyword">and</span> SSEX = <span class="string">'女'</span></span><br><span class="line"></span><br><span class="line">  截图： ![](<span class="keyword">http</span>://<span class="number">47.100</span><span class="number">.4</span><span class="number">.8</span>/wp-<span class="keyword">content</span>/uploads/<span class="number">2018</span>/<span class="number">07</span>/<span class="number">2</span><span class="number">-3.</span>png)</span><br><span class="line"></span><br><span class="line">*   建立无先修课（Cpno为<span class="literal">NULL</span>）的课程视图NP_C；</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> NP_C</span><br><span class="line"></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> C</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> CPNO <span class="keyword">is</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line">  截图： ![](<span class="keyword">http</span>://<span class="number">47.100</span><span class="number">.4</span><span class="number">.8</span>/wp-<span class="keyword">content</span>/uploads/<span class="number">2018</span>/<span class="number">07</span>/<span class="number">3</span><span class="number">-2.</span>png)</span><br><span class="line"></span><br><span class="line">*   建立计算机系选修<span class="number">1</span>号课程的学生视图CS_S2 ；</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> CS_S2</span><br><span class="line"></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> S.*</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> S,SC</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> S.SNO = SC.SNO <span class="keyword">and</span> SC.CNO = <span class="string">'1'</span></span><br><span class="line"></span><br><span class="line">  截图： ![](<span class="keyword">http</span>://<span class="number">47.100</span><span class="number">.4</span><span class="number">.8</span>/wp-<span class="keyword">content</span>/uploads/<span class="number">2018</span>/<span class="number">07</span>/<span class="number">4</span><span class="number">-1.</span>png)</span><br><span class="line"></span><br><span class="line">*   建立计算机系选修数据库课程学生视图CS_S3 ；</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> CS_S<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> S.*</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> S,SC,C</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> S.SNO = SC.SNO <span class="keyword">and</span> C.CNO = SC.CNO <span class="keyword">and</span> C.CNAME = <span class="string">'数据库'</span> <span class="keyword">and</span> SDEPT = <span class="string">'计算机'</span></span><br><span class="line"></span><br><span class="line">  截图： ![](<span class="keyword">http</span>://<span class="number">47.100</span><span class="number">.4</span><span class="number">.8</span>/wp-<span class="keyword">content</span>/uploads/<span class="number">2018</span>/<span class="number">07</span>/<span class="number">5</span><span class="number">-1.</span>png)</span><br><span class="line"></span><br><span class="line">*   将计算机系女生的年龄增加<span class="number">1</span>岁；</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> CS_S1</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> SAGE = SAGE + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  截图： ![](<span class="keyword">http</span>://<span class="number">47.100</span><span class="number">.4</span><span class="number">.8</span>/wp-<span class="keyword">content</span>/uploads/<span class="number">2018</span>/<span class="number">07</span>/<span class="number">6</span><span class="number">-1.</span>png)</span><br><span class="line"></span><br><span class="line">*   对CS_S3中学生专业修改为电子；</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> CS_S3</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> SDEPT = <span class="string">'电子'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span> SNO = <span class="string">'E0002'</span></span><br><span class="line"></span><br><span class="line">  截图： 该学生被移出该视图了就 ![](<span class="keyword">http</span>://<span class="number">47.100</span><span class="number">.4</span><span class="number">.8</span>/wp-<span class="keyword">content</span>/uploads/<span class="number">2018</span>/<span class="number">07</span>/<span class="number">7.</span>png)</span><br><span class="line"></span><br><span class="line">*   分别删除以上定义的各个视图。</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> CS_S</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> CS_S1</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> CS_S2</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> CS_S3</span><br><span class="line"></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> NP_C</span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/07/8.png" alt=""></p>
]]></content>
      <categories>
        <category>数据库</category>
        <category>文章页</category>
        <category>语法与例题</category>
      </categories>
      <tags>
        <tag>DataBase</tag>
        <tag>视图操作</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLServerWindows用户登陆转为混合登陆</title>
    <url>/2018/07/05/sqlserversetting-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/06/QQ%E5%9B%BE%E7%89%8720180621230739.png" alt=""> <strong>今天来介绍一下SQLServer 如何将Windwos身份验证登陆转为混合验证登陆</strong>。 为什么要进行这个设置呢？在对数据库进行操作时可以通过用户名和密码来连接数据库。 首先你先用Windwos登陆验证登陆 <img src="http://47.100.4.8/wp-content/uploads/2018/07/1-2.png" alt=""> 然后右键服务器点击属性 <img src="http://47.100.4.8/wp-content/uploads/2018/07/2.png" alt=""> 在安全性一栏中将服务器身份验证改为SQL Server和Windwos身份验证模式 <img src="http://47.100.4.8/wp-content/uploads/2018/07/3.png" alt=""> 接下来在安全性登录名你会发现sa上面是有一个红色的叉 <img src="http://47.100.4.8/wp-content/uploads/2018/07/4.png" alt=""> 右键sa属性在状态一栏中将登录名启用 <img src="http://47.100.4.8/wp-content/uploads/2018/07/5.png" alt=""> 然后在常规里面随便设置一个自己能记住的密码。 接下来新建一个查询将如下语句执行 ALTER LOGIN sa ENABLE; GO ALTER LOGIN sa WITH PASSWORD = ‘<enterStrongPasswordHere>’; 执行成功之后重新启动一下服务器 <img src="http://47.100.4.8/wp-content/uploads/2018/07/6.png" alt=""> 启动完成后断开连接，重新登录在身份验证一栏中选择SQLServer身份验证，用户名为sa密码为你之前设置的密码。 单击连接即可登陆成功</p>
]]></content>
      <categories>
        <category>SQLServer</category>
        <category>数据库</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>SQLServer</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>STL之deque学习</title>
    <url>/2018/05/08/stl-zhi-deque-xue-xi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180507183124.png" alt=""></p>
<ul>
<li>deque双向队列：</li>
</ul>
<p>deque双向队列是一种双向开口的连续线性空间，可以高效的在头尾两端插入和删除元素，deque在接口上和vector非常相似，下面列出deque的常用成员函数：   构造析构函数： deque&lt;类型&gt;c  创建一个名称为c的空元素类型的deque deque&lt;类型&gt;c(a2)  用c2来初始化c1 deque&lt;类型&gt;c（n）  创建deque，含有n个数据，数据均有基础构造函数初始化 deque&lt;类型&gt;c（n，t）  创建一个含有n个t构成的deque deque&lt;类型&gt;c（start,end）创建一个以（start，end）区间的deque c ~deque&lt;类型&gt;（）   析构函数   赋值函数： 可以直接使用c[i]=x 直接进行赋值 c.assign（n，elem）  将n个elem赋值给c   数据访问： <a href="http://c.at">c.at</a>（index）   返回索引index所指的数据  如果index大于最大边界 则抛出一个异常 c.front（）  返回deque第一个数据 c.back（）  返回最后一个数据 c.begin（）   返回指向第一个数据的迭代器 注意： deque<int>::iterator pos;  声明一个迭代器变量 使用pos=c.begin（）  来接收返回值不能使用int定义的变量接收否则会报错！ c.end（）同理。 c.end（）   返回指向最后一个数据的下一个位置的迭代器 c.rbegin（）  返回逆向队列的第一个数据 c.rend（）  返回逆向队列指向最后一个数据的下一个位置的迭代器   加入数据： c.push_back（elem）  在尾部加入一个数据 c.push_from（elem）  在头部插入一个数据 c.insert（pos，elem）  在pos位置后面插入一个elem  返回新的数据位置 c.insert（pos，n，elem）  在pos位置后面插入n个elem，无返回值   删除数据： c.pop_back（）  删除最后一个数据 c.pop_from（）  删除头部数据 c.erase（pos）  删除pos位置的数据，返回下一个数据的位置   其他操作： c.empty（）  判断容器是否为空 c.max_size（）  返回容器中最大数据的数量 c.resize（num）  重新指定队列长度 c.size（）  返回容器实际数据值 c.swap（s）  将c和s的元素互换 swap（c，s）   deque从逻辑上看是连续的内存，本质是由一段段固定大小的连续的空间组成。 <img src="http://47.100.4.8/wp-content/uploads/2018/05/1232154.png" alt=""> 采用一小块连续的内存索引缓存结点，每个缓存结点也是一段连续的空间，可以存储多个数据，当索引内存空间满载时，需要申请一块更大的内存做索引。   使用：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; test1(<span class="number">20</span>);  <span class="comment">//创建一个数据大小为20的deque</span></span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;::iterator pos1;  <span class="comment">//声明deque test1的迭代器变量为pos</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">        test1\[i\]=i;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输出test1初始化数据："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;test1\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"用test1初始化test2的数据："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; test2(test1);  <span class="comment">//用test1初始化test2</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;test2\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; test3(<span class="number">4</span>);</span><br><span class="line">    test3.assign(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;test3\[i\]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"对test1进行相关操作："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"test1.front():"</span>&lt;&lt;test1.front()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"test1.back():"</span>&lt;&lt;test1.back()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//这里要注意的test1.begin（） 需要使用声明迭代器的变量来接收  输出时使用*pos1来输出  pos1为地址</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"通过使用迭代器进行test1的数据输出："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(pos1=test1.<span class="built_in">begin</span>();pos1!=test1.<span class="built_in">end</span>();pos1++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*pos1&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;test4;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"使用push\_back和push\_front使用："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    test4.push_front(<span class="number">1</span>);</span><br><span class="line">    test4.push_back(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"size（）使用："</span>&lt;&lt;test4.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"pop\_back和pop\_from的使用："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    test4.pop_back();</span><br><span class="line">    <span class="comment">//test4.pop_front();</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前的大小:"</span>&lt;&lt;test4.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"对test3进行插入操作："</span>;</span><br><span class="line">    test3.insert(test3.<span class="built_in">begin</span>()+<span class="number">1</span>,<span class="number">3</span>);  <span class="comment">//要注意插入操作 插入下标位置使用的是test.begin()+i</span></span><br><span class="line">    <span class="keyword">for</span>(pos1=test3.<span class="built_in">begin</span>();pos1!=test3.<span class="built_in">end</span>();pos1++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*pos1&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"判断容器test3是否为空："</span>&lt;&lt;test3.empty()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;test5(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入test5当前的大小:"</span>&lt;&lt;test5.<span class="built_in">size</span>()&lt;&lt;<span class="string">"  \\n输出最大数据的数量："</span>&lt;&lt;test5.max_size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/4324235.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>STL</tag>
        <tag>deque</tag>
      </tags>
  </entry>
  <entry>
    <title>STL之heap</title>
    <url>/2018/05/13/stl-zhi-heap-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180507183124.png" alt=""> STL中并没有把heap作为一种容器组件，heap的实现亦需要更低一层的容器组件（诸如list,array,vector）作为其底层机制。Heap是一个类属算法，包含在algorithm头文件中。虽然STL中关于heap默认调整成的是大顶堆，但却可以让用户利用自定义的compare_fuction函数实现大顶堆或小顶堆。heap的低层机制vector本身就是一个类模板，heap基于vector便实现了对各种数据类型（无论基本数据类型还是用户自定义的数据类型）的堆排（前提是用户自定义的数据类型要提供比较机制compare_fuction函数）。   包含在头文件**#include&lt;<strong><strong>algorithm</strong></strong>&gt;**  下面的_First与_Last为可以随机访问的迭代器（指针），_Comp为比较函数（仿函数），其规则——如果函数的第一个参数小于第二个参数应返回true，否则返回false。   建立堆 make_heap（_First,_Last,_Comp） 默认是建立最大堆。对int类型，可以在第三个参数传入great<int>（）得到最小堆。   在堆中添加数据 push_heap（_First,_Last） 要先在容器中加入数据，再调用push_heap（）   在堆中删除数据 pop_heap（_First,_Last） 要先调用pop_heap（）再在容器中删除数据   堆排序 sort_heap（_First,_Last） 排序之后就不再是一个合法的heap了   总结： <strong>这里在通过对写下面代码的过程中，对heap有了更进一步的了解。</strong> <strong>个人认为这个堆相关的操作就是算法的集合。</strong> <em><em>需要注意的是要创建一个动态容器（vector）：vector<int><em>test1=new vector<int>(MAXN);</em></em> <strong>以及创建迭代器：vector<int>::iterator pos;方便在遍历容器元素时使用。</strong> <strong>将容器构建成一个堆 make_heap（）将容器放进去。注意由于这里是指针创建的动态容器，所以在调用容器成员时 使用-&gt;进行访问。</strong> <strong>在插入数据时，要先在容器中进行数据插入，然后在堆中插入使用push_heap（）</strong> <strong>在删除数据时，要先从堆中删除数据使用pop_heap（），然后在容器中删除数据</strong> <strong>由于容器中没有排序成员函数，所以这里就体现出了堆中堆排序的重要性。</strong> <strong>sort_heap</strong></em>*（）** 代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> MAXN = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">int</span> a\[MAXN\];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">//创建一个随机数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAXN;i++)</span><br><span class="line">        a\[i\] = rand()%(MAXN*<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"创建一个堆"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//创建动态vector容器 并对vector建堆</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;*test1=<span class="keyword">new</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(MAXN);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator pos;</span><br><span class="line">    test1-&gt;assign(a,a+MAXN);</span><br><span class="line">    make_heap(test1-&gt;<span class="built_in">begin</span>(),test1-&gt;<span class="built_in">end</span>());  <span class="comment">//用test1建堆</span></span><br><span class="line">    <span class="keyword">for</span>(pos = test1-&gt;<span class="built_in">begin</span>();pos!=test1-&gt;<span class="built_in">end</span>();pos++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*pos&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"在堆中进行插入数据:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//对堆进行新数据插入  要现在容器中加入，在调用push_heap（）</span></span><br><span class="line">    test1-&gt;push_back(<span class="number">25</span>);</span><br><span class="line">    push_heap(test1-&gt;<span class="built_in">begin</span>(),test1-&gt;<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(pos = test1-&gt;<span class="built_in">begin</span>();pos!=test1-&gt;<span class="built_in">end</span>();pos++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*pos&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//删除数据  先调用pop_heap（）从堆中删除，然后再在容器中删除</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"删除堆中的数据："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    pop_heap(test1-&gt;<span class="built_in">begin</span>(),test1-&gt;<span class="built_in">end</span>());  <span class="comment">//从堆中弹出一个元素</span></span><br><span class="line">    test1-&gt;pop_back();  <span class="comment">//然后在容器中删除该元素</span></span><br><span class="line">    push_heap(test1-&gt;<span class="built_in">begin</span>(),test1-&gt;<span class="built_in">end</span>());</span><br><span class="line">    test1-&gt;pop_back();</span><br><span class="line">    <span class="keyword">for</span>(pos = test1-&gt;<span class="built_in">begin</span>();pos!=test1-&gt;<span class="built_in">end</span>();pos++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*pos&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//堆排序</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"进行堆排序之后的结果："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    sort_heap(test1-&gt;<span class="built_in">begin</span>(),test1-&gt;<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(pos = test1-&gt;<span class="built_in">begin</span>();pos!=test1-&gt;<span class="built_in">end</span>();pos++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*pos&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>截图： <img src="http://47.100.4.8/wp-content/uploads/2018/05/453445324324.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>STL</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>STL之Stack学习</title>
    <url>/2018/05/09/stl-zhi-stack-xue-xi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180507183124.png" alt=""> 栈是一种容器适配器，特别为后入先出而设计的一种（LIFO ），那种数据被插入，然后再容器末端取出 栈实现了容器适配器，这是用了一个封装了的类作为他的特定容器，提供了一组成员函数去访问他的元素，元素从特定的容器，也就是堆栈的头取出。 遵循先进先出的原则。栈口只有一个，允许新增元素（只能在栈顶上增加）、移除元素（只能一处栈顶元素）、取得栈顶元素等操作。在STL，栈是以别的容器作为底部结构，再将接口改变，使之符合栈的特性就可以了。   栈的相关函数 构造函数： stack<Elem>c  创建一个空的stack stack<Elem>c1(c2)  用c2初始化c1   数据增减： c.top（）  返回栈顶元素 c.push（elem） 在栈顶增加elem数据 c.pop（）  弹出栈顶元素   其他操作： c.empty（）   判断栈是否为空 c.size（）  返回栈中数据的个数 代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;  <span class="comment">//创建一个栈</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"创建栈成功！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前栈的数据个数："</span>&lt;&lt;s.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;\</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"添加三个元素在之后："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    s.push(<span class="number">1</span>);  <span class="comment">//向栈中添加元素</span></span><br><span class="line">    s.push(<span class="number">2</span>);</span><br><span class="line">    s.push(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前栈的数据个数："</span>&lt;&lt;s.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"返回栈顶元素："</span>&lt;&lt;s.top()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"弹出栈顶元素之前的数据个数："</span>&lt;&lt;s.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    s.pop();</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"弹出栈顶元素之后的数据个数："</span>&lt;&lt;s.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"判断栈是否为空:"</span>&lt;&lt;s.empty()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/12335424.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>STL</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>STL之queue</title>
    <url>/2018/05/11/stl-zhi-queue-1/</url>
    <content><![CDATA[<p>queue单向队列使用 queue单向队列与<a href="http://blog.csdn.net/morewindows/article/details/6950881">栈</a>有点类似，一个是在同一端存取数据，另一个是在一端存入数据，另一端取出数据。单向队列中的数据是先进先出（First In First Out,FIFO）。在STL中，单向队列也是以别的容器作为底部结构，再将接口改变，使之符合单向队列的特性就可以了。因此实现也是非常方便的。下面就给出单向队列的函数列表和VS2008中单向队列的源代码。单向队列一共6个常用函数（front()、back()、push()、pop()、empty()、size()），与<a href="http://blog.csdn.net/morewindows/article/details/6950881">栈</a>的常用函数较为相似。 <img src="http://47.100.4.8/wp-content/uploads/2018/05/512357486.png" alt=""> 由于仅需取队首和队尾元素的操作，因此<strong>queue****队列容器并不提供任何类型的迭代器对队列中其他位置处的元素进行访问操作。</strong> <strong>函数</strong> <strong>构造函数：</strong> queue&lt;类型&gt;c   创建一个空间queue queue&lt;类型&gt;c1(c2)  用c2初始化c1   数据访问与增减 c.front（）  返回队列头部数据 c.back（）  返回队列尾部数据 c.push（elem）  在队列尾部增加elem数据 c.pop（）   队列头部数据出队   其他操作 c.empty（）  判断队列是否为空 c.size（）  返回队列中数据的个数 代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建队列1</span></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;test1;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"判断队列test1是否为空："</span>&lt;&lt;test1.empty()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"得到队列test1元素个数:"</span>&lt;&lt;test1.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    test1.push(<span class="number">1</span>);</span><br><span class="line">    test1.push(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;test2(test1);</span><br><span class="line">    <span class="comment">//打印队列元素</span></span><br><span class="line">    <span class="keyword">int</span> t=test1.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;test1.front()&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        test1.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;test2.back()&lt;&lt;<span class="string">" "</span>&lt;&lt;test2.front()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/05/14741.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>queue</tag>
      </tags>
  </entry>
  <entry>
    <title>STL之priority_queue</title>
    <url>/2018/05/14/stl-zhi-priority-queue-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180507183124.png" alt=""> 优先级队列是一个拥有权值概念的单向队列，在这个队列中，所有元素是按优先级排 的。 优先队列容器也是一种从一端入队，另一端出对的队列。不同于一般队列的是，队列中最大的元素总是位于队首位置，因此，元素的出对并非按照先进先出的要求，将最先入队的元素出对，而是将当前队列中的最大元素出对。 C++ STL 优先队列的泛化，底层默认采用 vector 向量容器，使得队列容器的元素可做数组操作，从而应用堆算法找出当前队列最大元素，并将它调整到队首位置，确保最大元素出队。   priority_queue函数列表 构造函数： priority_queue&lt;类型&gt;c   //创建一个空的priority_queue   数据访问与添加和删除: c.top()  //返回队列头部元素 c.push()  //在队列尾部添加元素 c.pop（）  //队列头部数据出队   其他操作： c.empty（）   //判断队列是否为空 c.size（）  //返回队列中数据的个数   有上面函数可以看出其实STL中许多成员函数都是相似的。 同样的priority_queue队列包含在queue头文件中 代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>&gt;test1; <span class="comment">//创建一个优先级队列test1  使用vector作为容器</span></span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>&gt;test2(test1);  <span class="comment">//使用test1调用复制析构函数来初始化test2</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"随机输入五个数据："</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)  <span class="comment">//向优先级队列添加5个数据</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=rand()%<span class="number">20</span>;</span><br><span class="line">        test1.push(t);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"当前队列的元素个数："</span>&lt;&lt;test1.<span class="built_in">size</span>()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输出队列数据（通过pop（）方式弹出队列头）："</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = test1.top();  <span class="comment">//先接受值然后在弹出 因为弹出没有返回值所以才先用top（）</span></span><br><span class="line">        test1.pop();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"由上面结果可以看出优先级队列会按照输入数据的大小进行排列！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现： <img src="http://47.100.4.8/wp-content/uploads/2018/05/4324234234.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>STL</tag>
        <tag>priority-queue</tag>
      </tags>
  </entry>
  <entry>
    <title>他本属于星辰</title>
    <url>/2018/03/14/ta-ben-shu-yu-xing-chen-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/e1fe9925bc315c60700715c181b1cb1349547709-300x198.jpg" alt=""></p>
<h3 id="知名物理学家史蒂芬·霍金（Stephen-Hawking）去世，享年76岁。爱因斯坦生日这天，霍金走了。他出生的那天，是伽利略去世的日子。"><a class="header-anchor" href="#知名物理学家史蒂芬·霍金（Stephen-Hawking）去世，享年76岁。爱因斯坦生日这天，霍金走了。他出生的那天，是伽利略去世的日子。">¶</a>知名物理学家史蒂芬·霍金（Stephen Hawking）去世，享年76岁。爱因斯坦生日这天，霍金走了。他出生的那天，是伽利略去世的日子。</h3>
<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180314130018-300x99.png" alt=""></p>
<h4 id="BBC新闻上的报道："><a class="header-anchor" href="#BBC新闻上的报道：">¶</a>BBC新闻上的报道：</h4>
<p>World renowned physicist Stephen Hawking has died at the age of 76.</p>
<p>He died peacefully in his home in Cambridge in the early hours of Wednesday, his family said. He was known for his work with black holes and relativity, and wrote several popular science books including A Brief History of Time. “We are deeply saddened that our beloved father passed away today,” his children said. At the age of 22 Stephen Hawking was given only a few years to live after being diagnosed with a rare form of motor neurone disease. <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180314130127.png" alt=""></p>
<p>愿逝者安息。令人追忆。由于不是物理专业，没有对他的黑洞理论及其它的他研究做过了解，也没有拜读过他的时间简史。只是知道他是当代最伟大物理学家。令我印象最深的两个关于霍金的两个事。其一是，为图灵正名。由他和其他的一些科学家联名提出为图灵正名，最终由英国女王颁布赦命承认图灵受到了不公正的待遇。其二是在生活大爆炸这个美剧中霍金的客串。感觉到他是个很风趣的人。 一个伟大的人，与您同时代是我辈的荣幸。 ——来自知乎的一条评论</p>
<p>今天是霍金去世的日子。今天百度百科他的专栏以黑白为主题了。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180314125128-300x204.png" alt=""></p>
<h5 id="人物评价：（来自百度百科）"><a class="header-anchor" href="#人物评价：（来自百度百科）">¶</a>人物评价：（来自百度百科）</h5>
<p>我是一个乐观的、浪漫的，并且顽固不化的人。（<em>霍金自我评价</em>）</p>
<p>我还有很多事情想做，人如果什么梦想都没有，就等于死亡。（<em>霍金自我评价</em>）</p>
<p>霍金最吸引我的特质是他对科学真理的不懈追求。（<em>浙江工业大学教授吴忠超评</em>）</p>
<p>人们追随霍金，固然有他身体缺陷所带来的‘残缺美’，但我更相信，这是他学术思想魅力导致的结果。（<em>中科院物理所硕士生黄映洲评</em>）[6]</p>
<h5 id="他的个人著作："><a class="header-anchor" href="#他的个人著作：">¶</a>他的个人著作： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180314124627-300x205.png" alt=""></h5>
<p>下面是B站上一个突破90万的播放量的视频：</p>
<p><a href="https://www.bilibili.com/video/av4403016/?from=timeline&amp;isappinstalled=0">https://www.bilibili.com/video/av4403016/from=timeline&amp;isappinstalled=0</a></p>
<h5 id="他的一些语录："><a class="header-anchor" href="#他的一些语录：">¶</a>他的一些语录：</h5>
<p>“爱因斯坦错了–他说‘上帝不玩色子’。对黑洞的研究表明，上帝不光玩色子，甚至有时候他会把我们弄糊涂，因为他把它们丢到了看不见的地方。” “我注意过，即便是那些声称一切都是命中注定的而且我们无力改变的人，在过马路之前都会左右看。” “我的目标很简单，就是把宇宙整个明白(路人甲：‘霍金是东北的？’)–它为何如此，它为何存在。” “在我 21 岁时，我的期望值变成了零。自那以后，一切都变成了额外津贴。” “如果生活没有了乐趣，那将是一场悲剧。” “永恒是很长的时间，特别是对尽头而言。”</p>
<p>因为我不是学习物理专业的，所以我不懂那些方面的知识，但是Stephen Hawking这个名字，我却是早已耳熟能详。正是因为他的伟大，所以才能让人们即使不是很了解他，也能永远的铭记他！ 也许他正是去探索黑洞的终点是什么才离世的吧，又或者是他本该就是属于星辰。 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180314130816-300x161.png" alt=""></p>
]]></content>
      <categories>
        <category>Stephen Hawking</category>
      </categories>
      <tags>
        <tag>Stephen Hawking</tag>
      </tags>
  </entry>
  <entry>
    <title>STL之set</title>
    <url>/2018/05/20/stl-zhi-set-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/%E5%9B%BE%E7%89%87150.png" alt=""> 在STL中，set是以红黑树（RB-tree）作为底层数据结构的，hash_set是以Hash tabl （哈希表）作为底层数据结构的。set可以在时间复杂度为O(logN)情况下插入、删除和查找数据。hash_set操作的时间复杂度则比较复杂，这取决于哈希函数和哈希表的负载情况。 set关联式容器。set作为一个容器也是用来存储同一数据类型的数据类型，并且能从一个数据集合中取出数据，在set中每个元素的值都唯一，而且系统能根据元素的值自动进行排序。应该注意的是set中数元素的值不能直接被改变。<strong>C++ STL中标准关联容器set, multiset, map, multimap内部采用的就是一种非常高效的平衡检索二叉树：红黑树，也成为RB树</strong>(Red-Black Tree)。RB树的统计性能要好于一般平衡二叉树，所以被STL选择作为了关联容器的内部结构。 set可以在时间复杂度为O(logN)情况下插入、删除和查找数据。 包含在set头文件中 #include<set> 红黑树初步了解介绍请前往链接：<a href="https://blog.csdn.net/v_july_v/article/details/6105630">https://blog.csdn.net/v_july_v/article/details/6105630</a> <a href="http://www.cnblogs.com/skywang12345/p/3245399.html">http://www.cnblogs.com/skywang12345/p/3245399.html</a>   后面我也写一篇博文去介绍   函数 构造函数： set&lt;类型&gt;c  //创建一个空的set或hash_set hash_set&lt;类型&gt;c   数据查找： c.find（elem）  <a href="//xn--c-q68aa08zukl8sj6az14ay0ad3bea260mkk0c371df2k.end">//返回存在指向查找的对象或指向c.end</a>（）迭代器 c.count（elem） //存在则返回1否则返回0   数据访问： c.begin（）  //返回指向第一个数据的迭代器 c.end（）  //指向迭代器中的最后一个数据的下一个位置 c.rbegin（）  //返回一个逆向集的第一个数据 c.rend（）  //返回一个逆向集的最后一个数据的下一个位置   插入数据： c.insert（elem）  //插入一个elem，返回pair&lt;iterator,bool&gt; c.insert（pos，elem）  //在pos位置插入一个elem数据，返回迭代器 c.insert（beg，end）  //在[beg，end]区间中的数据赋值给c，无返回值   删除数据： c.erase（pos）  //删除pos位置的数据，无返回值 c.earse（elem） //删除elem c.erase（beg,end） //删除[beg，end]区间的数据   其他： c.empty（）  //判断容器是否为空 c.max_size（）  //返回容器中最大数据的数量 c.size（）  //返回容器中实际数据的个数 c.swap（c2）  //将c1和c2数据进行交换 代码：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;a;  <span class="comment">//创建一个大小为10容器</span></span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator pos;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));  <span class="comment">//利用时间设置随机数种子</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t=rand()%<span class="number">100</span>;</span><br><span class="line">            a.insert(t);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"set当前数据有："</span>&lt;&lt;a.<span class="built_in">size</span>()&lt;&lt;<span class="string">"个"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> t=a.count(<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"查找为5的元素："</span>&lt;&lt;(t==<span class="number">1</span>?<span class="string">"存在"</span>:<span class="string">"不存在"</span>)&lt;&lt;<span class="built_in">endl</span>; <span class="comment">//条件运算表达式语句</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"随机产生的数据为："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(pos=a.<span class="built_in">begin</span>();pos!=a.<span class="built_in">end</span>();pos++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;*pos&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    a.insert(a.<span class="built_in">begin</span>(),<span class="number">101</span>); <span class="comment">//  在尾部插入一个数据</span></span><br><span class="line">    <span class="keyword">for</span>(pos=a.<span class="built_in">begin</span>();pos!=a.<span class="built_in">end</span>();pos++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;*pos&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    a.erase(a.<span class="built_in">begin</span>());  <span class="comment">//删除头元素</span></span><br><span class="line">    <span class="keyword">for</span>(pos=a.<span class="built_in">begin</span>();pos!=a.<span class="built_in">end</span>();pos++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;*pos&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"判断set是否为空："</span>&lt;&lt;(a.empty()==<span class="number">0</span>?<span class="string">"不为空"</span>:<span class="string">"为空"</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现： <img src="http://47.100.4.8/wp-content/uploads/2018/05/123123-1.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>C++学习</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>STL</tag>
        <tag>set</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim基本操作和基础配置</title>
    <url>/2018/04/10/vim-ji-ben-cao-zuo-he-ji-chu-pei-zhi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180410171638.png" alt=""></p>
<h3 id="Vim介绍："><a class="header-anchor" href="#Vim介绍：">¶</a>Vim介绍：</h3>
<h3 id="vim是从-vi-发展出来的一个文本编辑器。功能丰富，在程序员中被广泛使用，而且可以根据自己需要对其进行配置。"><a class="header-anchor" href="#vim是从-vi-发展出来的一个文本编辑器。功能丰富，在程序员中被广泛使用，而且可以根据自己需要对其进行配置。">¶</a>vim是从 vi 发展出来的一个文本编辑器。功能丰富，在程序员中被广泛使用，而且可以根据自己需要对其进行配置。</h3>
<p>Vim编辑程序有三种操作模式，分别称为 <strong>编辑模式</strong>、<strong>插入模式</strong> 和 **命令模式，**当运行Vim时，首先进入编辑模式。 编辑模式： Vim编辑方式的主要用途是在被编辑的文件中移动光标的位置。一旦光标移到到所要的位置，就可以进行剪切和粘贴正文块，删除正文和插入新的正文。当完成所有的编辑工作后，需要保存编辑器结果，退出编辑程序回到终端，可以发出<code>ZZ</code>命令，连续按两次大写的<code>Z</code>键。 插入操作： a 是进行光标后插入 i 是进行光标前插入 移动操作： 在命令模式下可以进行进行上下左右的移动。然后在编辑模式下，按上下左右只会增加字母。（来自作者的亲身经历~） 因此你要是想进行光标的移动只能按ESC键，回到命令模式，然后通过↑↓←→来进行移动光标。 删除操作： 常用得到删除命令是d（行删除）x（列删除），一定不要傻傻的按退格键（同样是来自作者的亲身经历。） 同样删除操作也是在命令模式下进行的。 下面给出以下简单的删除命令： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180410172508.png" alt=""> 替换操作： 常用的替换命令有c和s（替换光标的字符），在执行c和s命令后通常会进入插入模式：（其实你可以考虑用insert来实现） 退出插入模式也是按ESC。 同样给出一些常用的替换命令： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180410172729.png" alt=""> 退出命令： 在命令模式下输入： ：q 在未作出修改的情况退出vim。 ：q！ 这是放弃所有修改，然后退出编辑模式。 退出保存命令： ：wq  退出并保存 ：w filename  退出并将另存为另一个文件 打开命令： ：e 文件地址+文件名  即可打开一个文件。 撤销命令： u 是撤销前一条命令的结果 复制命令： yy  将当前行复制到缓冲区 粘贴命令： p  将缓冲区的内容粘贴到光标的后面   以上是一些基础命令 下面是一些vim的基础配置： （该内容转自https://blog.csdn.net/lhy2932226314/article/details/69668891） 首先将你的Linux切换到超级用户，输入命令 su，输入密码再回车切换到root用户，cd进入当前用户主工作目录，输入vim .vimrc进行vim配置. <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180410173445.png" alt=""> 推荐的配置： <img src="http://47.100.4.8/wp-content/uploads/2018/04/QQ%E5%9B%BE%E7%89%8720180410173548.png" alt=""> 值得说明的一点是最后一个设置set filetype=c是设置默认语言为C语言，在没加这个设置之前我使用vim修改文件发现vim的的设置并没有启用，看了一些解决方案后发现原来是没加程序后缀名，vim无法识别是什么类型文件，当做普通文档格式处理，加上这个设置后即使文件后无.c也自动当成C语言文件格式处理。 更加多的配置请见：<a href="https://blog.csdn.net/lhy2932226314/article/details/69668891">https://blog.csdn.net/lhy2932226314/article/details/69668891</a>   End！</p>
]]></content>
      <categories>
        <category>Linux</category>
        <category>vim</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Wxpython控件学习之FileDialog</title>
    <url>/2018/03/29/wxpython-kong-jian-xue-xi-zhi-filedialog-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/d0c8a786c9177f3e3d1cab2870cf3bc79f3d56ee.png" alt=""></p>
<h3 id="wxpython也是PythonGUI开发所使用到的一个第三方库，它比PyQt和tkinter-更加的方便适用于小型图形界面的开发。"><a class="header-anchor" href="#wxpython也是PythonGUI开发所使用到的一个第三方库，它比PyQt和tkinter-更加的方便适用于小型图形界面的开发。">¶</a>wxpython也是PythonGUI开发所使用到的一个第三方库，它比PyQt和tkinter 更加的方便适用于小型图形界面的开发。</h3>
<p>安装方面： 如果没有安装wxpython的朋友这里有下载地址：<a href="https://www.wxpython.org/">https://www.wxpython.org/</a> 也可以在命令提示符界面输入 pip install wxpython 来进行安装 同样如果你使用PyCharm 那么就可以在setting 里面直接安装 比较方便。   我为什么会分享关于FileDialog相关方面的东西？ 是因为之前我在写一个小程序的时候不会使用文件保存对话框，于是就查了不少的资料，在CSDN上找了相关方面的知识，于是就总结了一下。   wx.FileDialog 允许用户从系统的文件中选择一个或者多个文件。支持通配符，可以让用户选择关心的文件。例如：&quot;BMP files (<em>.bmp)|</em>.bmp|GIF files (<em>.gif)|</em>.gif&quot;只会显示和选择图片后缀类型是bmp 和gif。 样文件的类型可以自定义。   这里是调用windows系统提供的文件对话进行使用 Window Styles</p>
<p>wx.FD_OPEN</p>
<p>单个文件选择对话框</p>
<p>wx.FD_SAVE</p>
<p>文件保存对话框</p>
<p>wx.FD_OVERWRITE_PROMPT</p>
<p>只对于保存对话框有效，当覆盖文件的时候，会弹出提醒对话框</p>
<p>wx.FD_MULTIPLE</p>
<p>只对于打开对话框有效，支持多选</p>
<p>wx.FD_CHANGE_DIR</p>
<p>改变当前工作目录为用户选择的文件夹</p>
<p>方法集： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180329124409.png" alt="">   如果图片不清楚这里有图片的下载地址：<a href="http://47.100.4.8/wp-content/uploads/2018/03/%E6%96%B9%E6%B3%95%E9%9B%86.rar">方法集</a></p>
]]></content>
      <categories>
        <category>WxPython</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>WxPython</tag>
      </tags>
  </entry>
  <entry>
    <title>贪婪算法C++实现</title>
    <url>/2018/04/22/tan-lan-suan-fa-c-1/</url>
    <content><![CDATA[<p>在介绍贪婪算法之前先介绍一下最优化问题。 每个最优化问题都包含一组限制条件和一个优化函数。符合限制条件的问题求解方案称为可行解。使优化函数可能取最佳值的可行解称为最优解。 贪婪算法： 在贪婪算法中，要逐步构造出一个最优解。每一步，我们都在一定的标准下，做出一个最有决策。在每一步做出的决策，在以后的步骤中都不可更改。作出决策所依据的标准称为贪婪准则。 下面用一个例子来阐述贪婪算法的思想以及对应的贪婪法则 找零钱：一个小孩用1美元来买价值不足1美元的糖果，售货员希望用数目最少的硬币找给小孩零钱。假设有面值为25美分，10美分，5美分和1美分的硬币，而且数目不限。售货员每次选择一枚硬币，凑成要找的零钱。 这里的选择硬币时的贪婪法则为：在不超过要找零钱数的情况下，每次尽可能选择面值最大的硬币。 假设要找给小孩66美分， 伪代码步骤：</p>
<ol>
<li>选择面值最大的硬币 和要找的钱数比较</li>
</ol>
<p>if 面值最大的&lt;要找的钱数比较： 选择该面值的硬币 else: 选择出它之外面值最大的硬币</p>
<ol start="2">
<li>选择完成之后用当前要找的零钱数减去选择的面值的硬币，并在相应的计数上+1</li>
<li>循环进行上面的步骤</li>
<li>直至要找的钱凑够</li>
</ol>
<p>实现：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"零钱表：25美分，10美分，5美分，1美分若干个！"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> Con1 = <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">int</span> Con2 = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> Con3 = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> Con4 = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入想要得找回的零钱数：(单位为美分)"</span>;</span><br><span class="line">    <span class="keyword">int</span> numCon = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;numCon;</span><br><span class="line">    <span class="keyword">int</span> CountCon1=<span class="number">0</span>,CountCon2=<span class="number">0</span>,CountCon3=<span class="number">0</span>,CountCon4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(numCon != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Con1 &lt;= numCon)</span><br><span class="line">        &#123;</span><br><span class="line">            CountCon1++;</span><br><span class="line">            numCon = numCon - Con1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Con2 &lt;= numCon)</span><br><span class="line">        &#123;</span><br><span class="line">            CountCon2++;</span><br><span class="line">            numCon = numCon - Con2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Con3 &lt;= numCon)</span><br><span class="line">        &#123;</span><br><span class="line">            CountCon3++;</span><br><span class="line">            numCon = numCon - Con3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            CountCon4++;</span><br><span class="line">            numCon = numCon - Con4;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"需要25美分个数为:"</span>&lt;&lt;CountCon1&lt;&lt;<span class="string">"个，需要10美分个数为:"</span></span><br><span class="line">    &lt;&lt;CountCon2&lt;&lt;<span class="string">"个，需要5美分个数为："</span>&lt;&lt;CountCon3&lt;&lt;<span class="string">"个，需要1美分个数为："</span>&lt;&lt;CountCon4&lt;&lt;<span class="string">"个."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果： <img src="http://47.100.4.8/wp-content/uploads/2018/04/%E4%B8%BA3123.png" alt=""><img src="http://47.100.4.8/wp-content/uploads/2018/04/5214615315.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>Algorithm</tag>
        <tag>贪心算法</tag>
      </tags>
  </entry>
  <entry>
    <title>谈一下</title>
    <url>/2018/06/03/tan-yi-xia-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/06/1478690729997.png" alt=""> 由于最近临近考试，大部分时间拿去复习了，而且最近晚上增加了跑步的计划，时间排的比较满，也不想拿一些没有营养的东西来凑数，所以可能会减少更博文…… 为什么要增加跑步呢，主要是感觉一个学计算机的一学就是一辈子了，身体才是最重要的， 我愿意牺牲一个小时的时间去锻炼，也算是为以后工作之后打一些本钱吧。 其实是感觉自己在变胖的路上一去不复返，我不想变成死肥宅。 咕…… 这情况知道考试结束之后应该会有所改变，天大地大考试最大。 请见谅</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>感想</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>wxpython实现二维码生成器</title>
    <url>/2018/05/31/wxpython-shi-xian-er-wei-ma-sheng-cheng-qi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/%E5%9B%BE%E7%89%87193.png" alt=""> 界面： <img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180531221406.png" alt=""> 使用： <img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180531221501.png" alt=""> 下载地址：<a href="https://download.csdn.net/download/qq_16184125/10451236">https://download.csdn.net/download/qq_16184125/10451236</a></p>
]]></content>
      <categories>
        <category>WxPython</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>WxPython</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下配置VSCode</title>
    <url>/2019/04/17/windows-xia-pei-zhi-vscode-1/</url>
    <content><![CDATA[<p><strong>弄了很久总算搞好了，这里分享一下，QWQ</strong> 一、软件安装 先去VSCode官网下载安装包 地址为：<a href="https://code.visualstudio.com/Download">https://code.visualstudio.com/Download</a> 二、安装配置插件 先打开VSCode，打开扩展程序安装并安装如下插件： <img src="http://47.100.4.8/wp-content/uploads/2019/04/1-1.png" alt=""> 其中C/C++、C/C++ Clang和Code Runner是必备的，如果你需要中文版则可以安装Chinese language这个插件安装好后要重启以下VSCode 三、安装MinGW 首先如果没有codeblock或者DevC++的则可以考虑去官网下载MinGW的安装程序 网址为：<a href="https://osdn.net/projects/mingw/releases/p15522">https://osdn.net/projects/mingw/releases/p15522</a> 具体安装过程详见：<a href="https://blog.csdn.net/bat67/article/details/76095813">https://blog.csdn.net/bat67/article/details/76095813</a> 这里由于我已经安装过CodeBlock则不需要再次安装了，也就不过多的说了。 四、配置系统环境变量 如图操作即可，记得配置完环境变量要重启VSCode <img src="http://47.100.4.8/wp-content/uploads/2019/04/2-1.png" alt=""> 五、配置c_cpp_properties.json文件 首先要创建一个工作环境的文件夹，然后在这里面通过设置调出该文件，按照如下配置即可 <img src="http://47.100.4.8/wp-content/uploads/2019/04/QQ%E5%9B%BE%E7%89%8720190417194139.png" alt=""> 这里需要注意的是添加如下一行代码即可：</p>
<p>“E:/codeblock/CodeBlocks/MinGW/include/**”</p>
<p>添加完成之后在工作区创建一个Cpp文件使用运行即可。</p>
]]></content>
      <categories>
        <category>VSCode</category>
        <category>文章页</category>
        <category>软件分享</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>遗传算法的早熟问题</title>
    <url>/2018/08/22/yi-chuan-suan-fa-de-zao-shu-wen-ti-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/08/QQ%E5%9B%BE%E7%89%8720180822093955.png" alt=""> <strong>遗传算法的早熟问题</strong> <strong>遗传算法是一种借鉴生物界自然选择和进化机制发展起来的高度并行、随机、自适应的全局优化概率搜索算法。由于优化时不依赖于梯度，具有很强的鲁棒性和全局搜索能力，因此，被广泛应用于机器学习、模式识别、数学规划等领域。然而，随着遗传算法的广泛应用以及研究的深入，其诸多缺陷与不足也暴露出来，早熟收敛正是其中的一大问题。</strong> 未成熟收敛是遗传算法中不可忽视的现象，主要表现在群体中的所有个体趋于同一状态而停止进化（也就是过早收敛），算法最终不能给出令人满意的解。未成熟收敛的发生主要和下列几个方面有关：</p>
<ul>
<li>选择操作是根据当前群体中个体的适应度值所决定的概率进行的，当群体中存在个体超常个体时（该个体的适应度比其他个体高得多），该个体在选择算子作用下将会多次被选中，下一代群体很快被该个体所控制，群体中失去竞争性，从而导致群体停滞不前。</li>
<li>交叉和变异操作发生的频度是受交叉概率Pc和变异概率Pm控制的。Pc和Pm的恰当设定涉及遗传算法全局搜索和局部搜索的能力的均衡，进化搜索的最终结果对Pc和Pm的取值相当敏感，不同的Pc、Pm取值很可能会导致不同的计算结果。</li>
<li>群体规模对遗传算法的优化性能也有较大的影响。当全体规模较小时，群体中多样性程度低，个体之间竞争性较弱，随着进化的进行，群体很快趋于单一化，交叉操作产生新个体的作用渐趋消失，群体的更新只靠变异操作来维持，群体很快终止进化，当群体规模取值较大时，势必造成计算量的增加，计算效率收到影响</li>
<li>遗传算法常用的终止判据是，当迭代次数到达认为规定的最大遗传代数时，则终止进化。如迭代次数过少，进化不充分，也会造成不成熟收敛。为克服未成熟收敛，对遗传控制参数的设定尤为重要，因此自适应的交叉和变异得以出现。</li>
</ul>
<p>由于早熟现象的产生，因此又出现了其他算法来避免这一问题，如：粒子种群算法（PSO），多种群遗传算法等</p>
]]></content>
      <categories>
        <category>GA</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>遗传算法</tag>
        <tag>GA</tag>
        <tag>优化算法</tag>
      </tags>
  </entry>
  <entry>
    <title>颜文字大全 w(ﾟДﾟ)w</title>
    <url>/2018/03/05/yan-wen-zi-da-quan-w-w-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/9397fa3f8794a4c293e4ba5207f41bd5ac6e39a7-300x300.jpg" alt=""> 常用的颜文字： 【啊啊】 颜文字是： w(ﾟДﾟ)w 【擦眼泪】 颜文字是： (ノへ￣、) 【不屑】 颜文字是： (￣_,￣ ) 【好耶】 颜文字是： ヽ(✿ﾟ▽ﾟ)ノ 【棒】 颜文字是： (๑•̀ㅂ•́)و✧ 【抽】 颜文字是： (￣ε(#￣)☆╰╮o(￣皿￣///) 【亲】 颜文字是： （づ￣3￣）づ╭❤～ 【汗】 颜文字是： Σ( ° △ °|||)︴ 【笨】 颜文字是： (～￣(OO)￣)ブ 【擦】 颜文字是： 凸(艹皿艹 ) 【啵啵】 颜文字是： (* ￣3)(ε￣ <em>) 【挖鼻屎】 颜文字是： (<em>￣rǒ￣) 【嗷】 颜文字是： ┗|｀O′|┛ 嗷~~ 【飞】 颜文字是： ︿(￣︶￣)︿ 【好滴】 颜文字是： (u‿ฺu✿ฺ) 【hi】 颜文字是： Hi~ o(<em>￣▽￣</em>)ブ 【啦啦】 颜文字是： ♪(<sup>∇</sup></em>) 【拍桌】 颜文字是： o(<em>≧▽≦)ツ┏━┓ 【惊喜】 颜文字是： ╰(<em>°▽°</em>)╯ 【嘟嘴】 颜文字是： （○｀ 3′○） 【乖】 颜文字是： o(</em><sup>＠</sup></em>)o 【喂】 颜文字是： (#`O′) 【愣住】 颜文字是： (°ー°〃) 【放屁】 颜文字是： ○|￣|_ =3 【哼哼】 颜文字是： o(￣ヘ￣o＃) 【可恶】 颜文字是： （＝。＝） 【切】 颜文字是： <s>( ﹁ ﹁ ) ~~~ 【去】 颜文字是： (ーー゛) 【生气】 颜文字是： (ー`′ー) 【怨念】 颜文字是： o(一︿一+)o 【崩溃】 颜文字是： o(≧口≦)o 【不是我】 颜文字是： ㄟ( ▔, ▔ )ㄏ 【败了】 颜文字是： (o_ _)ﾉ 【呃呃呃】 颜文字是： (⊙﹏⊙) 【切】 颜文字是： (ˉ▽￣～) 切</s> 【无言】 颜文字是： （＊￣（エ）￣） 【摊手】 颜文字是： ┑(￣Д ￣)┍ 【不懂】 颜文字是： (＠<em>＠;) 【呆】 颜文字是： ━┳━　━┳━ 【扶额】 颜文字是： (☆′益<code>)c 【囧】 颜文字是： （′Д</code>） 【投降】 颜文字是： ┗( T﹏T )┛ 【我错了】 颜文字是： (。﹏。<em>) 【喵星人】 颜文字是： ( =•ω•= )m 【喵呜】 颜文字是： ≡ω≡ 【熊】 颜文字是： (<em>￣(エ)￣) 【害羞】 颜文字是： (✿◡‿◡) 【脸红】 颜文字是： (</em>/ω＼</em>) 【呜呜呜】 颜文字是： ┭┮﹏┭┮ 【拜拜】 颜文字是： ヾ(￣▽￣)Bye<sub>Bye</sub> 【斜眼】 颜文字是： ( ﹁ ﹁ ) ~→ 【美味】 颜文字是： Ψ(￣∀￣)Ψ 【闪】 颜文字是： ✧(≖ ◡ ≖✿) 【淡定】 颜文字是： ━(￣ー￣*|||━━ 【太可怕了】 颜文字是： ヽ(*。&gt;Д&lt;)o゜ 【恐怖】 颜文字是： ┌(。Д。)┐ 【orz】 颜文字是： ○|￣|</em> 【good】 颜文字是： o(￣▽￣)ｄ 【伤心】 颜文字是： (；′⌒<code>) 【糟糕】 颜文字是： X﹏X 【圣诞】 颜文字是： *&lt;|:-) 高兴的颜文字 【棒】 颜文字是： (๑•̀ㅂ•́)و✧ 【爆笑】 颜文字是： ヾ(≧▽≦*)o 【bingo】 颜文字是： (o゜▽゜)o☆\[BINGO!\] 【得瑟】 颜文字是： ～(￣▽￣～)(～￣▽￣)～ 【得意】 颜文字是： &lt;(￣︶￣)&gt; 【嗯哪】 颜文字是： 嗯~ o(*￣▽￣*)o 【飞】 颜文字是： ︿(￣︶￣)︿ 【嘎嘎】 颜文字是： ．&lt;{=．．．．（嘎~嘎~嘎~） 【干杯】 颜文字是： (￣▽￣)～■干杯□～(￣▽￣) 【高兴】 颜文字是： φ(゜▽゜*)♪ 【跟你说】 颜文字是：╰(￣▽￣)╭ 【go】 颜文字是： &lt;(￣︶￣)↗\[GO!\] 【good】 颜文字是： o(￣▽￣)ｄ 【哈哈哈哈】 颜文字是： *′∀</code>)′∀<code>)*′∀</code>)<em>′∀<code>) 【嗨】 颜文字是： (｡･∀･)ﾉﾞ 【嗨】 颜文字是： ヾ(≧∇≦*)ゝ 【好滴】 颜文字是： (u‿ฺu✿ฺ) 【好滴】 颜文字是： （゜▽＾*）） 【好开心】 颜文字是： (*^▽^*) 【好耶】 颜文字是： ヽ(✿ﾟ▽ﾟ)ノ 【happy】 颜文字是： (′▽</code>ʃ♡ƪ) 【hi】 颜文字是： Hi~ o(<em>￣▽￣</em>)ブ 【hiahia】 颜文字是： ○( ＾皿＾)っHiahiahia… 【high】 颜文字是： (( へ(へ′∀<code>)へ 【吼吼】 颜文字是： ^O^ 【欢迎】 颜文字是： ( ＾∀＾）／欢迎＼( ＾∀＾） 【获胜】 颜文字是： ヾ(￣ー￣)X(^▽^)ゞ 【惊喜】 颜文字是： ╰(*°▽°*)╯ 【惊喜】 颜文字是： ⊙▽⊙ 【击掌】 颜文字是： ( ￣ー￣)人(^▽^ ) 【卡拉ok】 颜文字是： ...φ(0￣*)啦啦啦_φ(*￣0￣)′ 【k歌】 颜文字是：...φ(0￣*)啦啦啦_φ(*￣0￣) 【开心】 颜文字是： (*^▽^*) 【啦啦】 颜文字是： ♪(^∇^*) 【乐】 颜文字是： (๑′ㅂ</code>๑) 【乐】 颜文字是： φ(≧ω≦</em>)♪ 【乐呵】 颜文字是： (≧∀≦)ゞ 【满足】 颜文字是： (๑ˉ∀ˉ๑) 【满足】 颜文字是： o(<em>￣︶￣</em>)o 【咩哈哈】 颜文字是： &lt;(<em>￣▽￣</em>)/ 【ohyeah】 颜文字是： ε(<em>′･∀･｀)зﾞ 【哦哦】 颜文字是： （≧0≦）//（-_-。）・・・ 【噢耶】 颜文字是： (　ﾟ∀ﾟ) ﾉ♡ 【噢耶】 颜文字是： (<sup>&amp;</sup>)/ 【拍手】 颜文字是： ””\(￣ー￣) (￣ー￣)//”” 【拍桌】 颜文字是： o(<em>≧▽≦)ツ┏━┓ 【飘】 颜文字是： (～￣▽￣)～ 【飘飘然】 颜文字是： ︿(￣︶￣)︿ 【噗】 颜文字是： (/≧▽≦)/ 【期待】 颜文字是： (☆▽☆) 【散花】 颜文字是： <em>★,°</em>:.☆(￣▽￣)/$:</em>.°★</em> 。 【闪】 颜文字是： ✧(≖ ◡ ≖✿) 【太棒了】 颜文字是： ㄟ(≧◇≦)ㄏ 【逃】 颜文字是： ヽ(ﾟ∀ﾟ*)ﾉ━━━ｩ♪ 【陶醉】 颜文字是： ( <em>︾▽︾) 【thx】 颜文字是： ☆⌒(<em>＾-゜)v THX!! 【天啊】 颜文字是： ♪(′∇`</em>) 【万岁】 颜文字是： ！<em>★,°</em>:.☆(￣▽￣)/$:</em>.°★* 【我回来啦】 颜文字是： ||ヽ(<em>￣▽￣</em>)ノミ|Ю 【我来了】 颜文字是： ~(～￣▽￣)～ 【兴奋】 颜文字是： (p≧w≦q) 【幸福】 颜文字是： o(<em>￣▽￣</em>)o 【耶】 颜文字是： (＾－＾)V 【哟】 颜文字是： (＾Ｕ＾)ノ~ＹＯ 【有了】 颜文字是： (o゜▽゜)o☆ 【赞】 颜文字是： (((o(<em>ﾟ▽ﾟ</em>)o))) 【涨】 颜文字是： (￣︶￣)↗ 【振奋】 颜文字是： (o&gt;ε(o&gt;ｕ(≧∩≦) 【真好】 颜文字是： o(<sup>▽</sup>)o 卖萌颜文字 【嗷】 颜文字是： ヾ(≧O≦)〃嗷~ 【嗷】 颜文字是： ┗|｀O′|┛ 嗷~~ 【表】 颜文字是： &lt;(￣3￣)&gt; 表！ 【蹭】 颜文字是： ( <em>￣▽￣)((≧︶≦</em>) 【等等】 颜文字是： …(<em>￣０￣)ノ[等等我…] 【好可爱】 颜文字是： （<em>＾-＾</em>） 【可爱】 颜文字是： n(<em>≧▽≦</em>)n 【卖萌】 颜文字是： =￣ω￣= 【真哒】 颜文字是： o(〃‘▽’〃)o 震惊颜文字 【啊啊】 颜文字是： Ｏ(≧口≦)Ｏ 【呆滞】 颜文字是： (￣△￣；) 【惊】 颜文字是： (⊙ˍ⊙) 【惊】 颜文字是： Σ(っ °Д °;)っ 【惊喜】 颜文字是： ╰(<em>°▽°</em>)╯ 亲吻颜文字 【啵啵】 颜文字是： (</em> ￣3)(ε￣ *) 【飞吻】 颜文字是： (*￣3￣)╭ 【亲亲】 颜文字是： o(*￣3￣)o 生气颜文字 【爆头】 颜文字是： ▄︻┻┳═一…… ☆（&gt;○&lt;） 【不开心】 颜文字是： ￣へ￣ 【不满】 颜文字是： (<em>￣︿￣) 【不满】 颜文字是： （＃￣～￣＃） 【不爽】 颜文字是： (</em> ￣︿￣) 【不要啊】 颜文字是： ヽ（≧□≦）ノ 【擦】 颜文字是： 凸(艹皿艹 ) 【哼哼】 颜文字是： o(￣ヘ￣o＃) 无奈颜文字 【呃呃呃】 颜文字是： (⊙﹏⊙) 【没办法】 颜文字是： ╮（╯＿╰）╭ 【无奈】 颜文字是： ╮(╯▽╰)╭ 【飘过】 颜文字是：…((/- -)/   <img src="http://47.100.4.8/wp-content/uploads/2018/03/211827331-11ff354344ce8786.gif" alt=""></p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>颜文字</category>
      </categories>
      <tags>
        <tag>颜文字</tag>
      </tags>
  </entry>
  <entry>
    <title>Xshell连接ECS云服务器问题处理和相关的配置</title>
    <url>/2018/03/04/xshell-lian-jie-ecs-yun-fu-wu-qi-wen-ti-chu-li-he-xiang-guan-de-pei-zhi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/InkedQQ%E5%9B%BE%E7%89%8720180304145627_LI-300x53.jpg" alt=""> 出现该问题的解决办法：首先查看本机的22端口是否打开具体步骤如下： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304150112-300x40.png" alt=""> 找到高级设置 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304150557.png" alt=""> 点开入站规则查看22端口是否开启，如果没开启则点开新建规则 按照如下图示操作： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304150802-300x225.png" alt=""> 这里以22端口为示例 ： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304150835-300x225.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304150933-300x225.png" alt=""> 接下来就是下一步然后输入名称点击完成即可。 <strong>QAQ</strong> 如果端口为22已经开启，则去阿里云服务器上打开自己的云服务器，打开安全组，配置安全组规则如果没有22端口则进行配置： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304151322-283x300.png" alt=""> 配置完成之后则结束。   一般以上两个都已经搞完，那么大体上就可以解决连接失败的问题了，如果还没解决那么我也就没有办法了……QWQ 接下来是Xshell的相关配置： <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304151629-300x260.png" alt=""> 在这里名称可以自己修改（根据个人喜好）， 主机名称就是你服务器公开的ip，端口默认为22，然后点击用户身份验证 <img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180304151806-300x260.png" alt=""> 用户名是你的虚拟机再开始提供给你的信息 用户名默认为root   密码自己设置的 在进行上面的操作后 点击确认就可以连接了。</p>
<h1><strong>( 。ớ ₃ờ)ھ_开心_</strong></h1>
<p>ps：如果还有问题可以email联系我，互相讨论O(∩_∩)O~</p>
]]></content>
      <categories>
        <category>Xshell</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Xshell</tag>
        <tag>云服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>英语格言</title>
    <url>/2018/03/03/ying-yu-ge-yan-1/</url>
    <content><![CDATA[<p>1、Constant dropping wears the stone. （滴水穿石。） 2、Experience is the mother of wisdom.（经验是智慧之母。） 3、Every man is his own worst enemy.（一个人最大的敌人就是他自 己。） 4、Saying and doing are two different things. （说和做是迥然不同的两回事。） 5、Actions speak louder than words. （行动比语言更响亮。） 6、From small beginnings comes great things. （伟大始于渺小。） 7、Money spent on the brain is never spent in vain. （智力投资绝不会白花。） 8、Wisdom in the mind is better than money in the hand.（脑中有知识，胜过手中有金钱。） 9、The voice of one man is the voice of no one. （一个人的声音没有力量。） 10、A great ship asks for deep waters.（大船要走深水。） 11、While there is life, there is hope.（有<a href="http://www.lz13.cn/mingrenmingyan/8609.html">生命</a>便有希望/留得青山在，哪怕没柴烧） 12、Two heads are better than one. （一人不及二人智；三个臭皮匠，胜个过一个诸葛亮。） 13、Wise men learn by other men’s mistakes; fools by their own.（聪明人从别人的错误中学得教训；笨人则自己付出代价。他山之石可以攻玉。） 14、Good company on the road is the shortest cut. （行路有良伴就是捷径。） 15、It takes all sorts to make a world. （世界是由各种不同的人所组成的。） 16、If a thing is worth doing it is worth worth doing well.（如果事情值得做，就值得好好做。） 17、Nothing great was ever achieved without enthusiasm.（无热情成就不了伟业。） 18、Great works are performed not by strength but by perseverance.（没有恒心只有力量是完不成伟业。） 19、It is never too late to learn. （活到老，学到老。） 20、It is never too late to mend. （亡羊补牢，犹时未晚。） 21、The secret of success is constancy of purpose.（<a href="http://www.lz13.cn/lizhimingyan/3859.html">成功</a>的秘诀在于持之于恒。） 22、Misfortunes never come alone/single.（祸不单行。） 23、Misfortunes come on wings and depart on foot.（遭祸容易脱祸难。） 24、Misfortunes tell us what fortune is.（不经灾难不知福。） 25、To an optimist every change is a change for the better.（对于<a href="http://www.lz13.cn/lizhimingyan/3591.html">乐观</a>者总是越变越好。） 26、Truth never fears investigation.（事实从来不怕调查。） 27、A good medicine tasks bitter.（良药苦口。） 28、Great minds think alike. （英雄<a href="http://www.lz13.cn/shiju/40679.html">所见</a>略同。） 29、Storms make trees take deeper roots.（风暴使树木深深扎根。） 30、Live and let live. （自己生活也让别人生活。） 31、Better late than never. （迟做总比不做好；晚来总比不来强。） 32、A bold attempt is half success.（勇敢的尝试是成功的一半。） 33、All things are difficult before they are easy. （凡事必先难后易。） 34、What we acquire without sweat we give away without regret.（得之不费力，弃之不可惜。） 35、Nothing is impossible to a willing heart.（只要有一颗意志<a href="http://www.lz13.cn/mingrenmingyan/8754.html">坚强</a>的心，没事不成。） 36、Work makes the workman.（勤工出巧匠。）（<a href="http://www.lz13.cn/">名人名言</a>  <a href="http://www.lz13.cn/">www.lz13.cn</a>） 37、Constant dropping wears the stone. （滴水穿石。） 38、He that can have patience, can have what he will.（唯坚韧者始能遂其志。） 39、Self-distrust is the cause of most of our failures.（我们绝大多数的失败都是因为缺乏<a href="http://www.lz13.cn/lizhimingyan/3550.html">自信</a>之故。） 40、The talent of success is nothing more than doing well whatever you do without a thought of time.（成功之路没它，唯全力投入工作，而不稍存沽名钓誉之心。） 41、To read without reflecting is like eating without digesting.（读书不思考，犹如吃饭不消化。） 42、The important thing in life is to have a great aim, and the determination to attain it.（人生之要事在于确立伟大的目标与实现这目标的决心。） 43、One of these days is none of these days.（有这么一天就是没有这么一天。/吾生待明日，万事成蹉跎。） 44、Every horse thinks its own pack heaviest.（每匹马都认为自己所负的背包最重。） 45、Nothing down, nothing up. （无下则无上。/不经历风雨，怎么见彩虹？） 46、A good book is your best friend. （好书如挚友。） 47、Asking costs nothing. （问人不费分文。） 48、Ask me no questions and I will tell you no lies.（你不问我，我就不会说谎话。） 49、The tongue is boneless but it breaks bones. （舌无骨却折断骨。） 50、A good name is easier lost than won.（名誉失之易，而得之难。） 51、Every profession produces its own best（行行出状元。） 52、Today must borrow nothing of tomorrow. （今日事今日毕。）</p>
]]></content>
      <categories>
        <category>名言警句</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>English</tag>
        <tag>名言警句</tag>
      </tags>
  </entry>
  <entry>
    <title>用遗传算法（GA）求一元函数最小值</title>
    <url>/2018/07/10/yong-yi-chuan-suan-fa-ga-qiu-yi-yuan-han-shu-zui-xiao-zhi-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180710130810.png" alt=""> <strong>遗传算法简介：</strong> 该算法是一种进化算法，其基本原理是效仿生物界中的“物竞天择，适者生存”的演化原则，遗传算法是把问题参数编码为染色体，然后利用迭代的方式进行选择、交叉以及变异等运算来交换群中染色体的信息最终生成符合优化目标的染色体。   在遗传算法中，染色体对应的是数据或数组，通常是由一维的串结构数据来表示，串各个位置对应的基因的取值。基因组成的串就是染色体、或者称为基因型个体。一定数量的个体组成了群体。群体中个体的数目称为群体大小，也成为群体规模，而各个个体对应的适应程度叫做适应度。 **  遗传算法的步骤：**</p>
<ul>
<li>编码：将解空间的解数据表示成遗传算法的基因型串数据，串数据的组合便构成了解</li>
<li>初始种群产生：随机产生N个基因型串数据，这N个染色体构成一个群体</li>
<li>适应度评估：评价染色体个体的优劣性</li>
<li>选择：从群体中选择出好的染色体，让它们生存下去，这样有机会把优良的基因遗传给子代。</li>
<li>交叉：使用基因型的交叉可以得到新一代的个体</li>
<li>变异：：变异首先在群体种随机选择一个个体，对于选中的个体以一定的概率随机地改变串结构数据中的某个值。</li>
</ul>
<p><strong>在Matlab中可以使用遗传算法工具箱（gatbx），关于工具箱安装我会出一个具体的博文。</strong> 介绍一下遗传算法工具箱的主要函数列表：</p>
<p>函数分类</p>
<p>函数</p>
<p>功能</p>
<p>选择函数</p>
<p>reins</p>
<p>一致随机和基于适应度的重插入</p>
<p>rws</p>
<p>轮盘选择</p>
<p>select</p>
<p>高级选择例程</p>
<p>sus</p>
<p>随机便利采样</p>
<p>交叉算子</p>
<p>recdis</p>
<p>离散重组</p>
<p>recint</p>
<p>中间重组</p>
<p>recline</p>
<p>线性重组</p>
<p>recmut</p>
<p>具有变异特征的线性重组</p>
<p>recombin</p>
<p>高级重组算子</p>
<p>xovdp</p>
<p>两点交叉算子</p>
<p>xovdprs</p>
<p>减少代理的两点交叉</p>
<p>xovmp</p>
<p>通常多点交叉</p>
<p>xovsh</p>
<p>洗牌交叉</p>
<p>xovshrs</p>
<p>减少代理的洗牌交叉</p>
<p>xovsp</p>
<p>单点交叉</p>
<p>xovsprs</p>
<p>减少代理的单点交叉</p>
<p>变异算子</p>
<p>mut</p>
<p>离散变异</p>
<p>mutate</p>
<p>高级变异函数</p>
<p>mutbga</p>
<p>减少代理的单点交叉</p>
<p>子种群的支持</p>
<p>migrate</p>
<p>在子种群间交换个体</p>
<p>实用函数</p>
<p>bs2rv</p>
<p>二进制串到实值的转换</p>
<p>rep</p>
<p>矩阵的复制</p>
<p>创建种群</p>
<p>crtbase</p>
<p>创建基向量</p>
<p>crtbp</p>
<p>创建任意离散随机种群</p>
<p>crtrp</p>
<p>创建实值初始种群</p>
<p>硬度计算</p>
<p>ranking</p>
<p>基于排序的适用度分配</p>
<p>scaling</p>
<p>比率适应度计算</p>
<p>先用遗传算法解决简单的一元函数求最小值的问题：<img src="http://47.100.4.8/wp-content/uploads/2018/07/1-4.png" alt=""> 参数设置</p>
<p>种群大小</p>
<p>最大遗传代数</p>
<p>个体长度</p>
<p>代沟</p>
<p>交叉概率</p>
<p>变异概率</p>
<p>40</p>
<p>20</p>
<p>20</p>
<p>0.95</p>
<p>0.7</p>
<p>0.01</p>
<p>代沟：上一代总数为100，通过选择之后剩下80（舍弃20），代沟 = 80/100 = 0.8 <strong>这里给出代码和注解：</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc</span><br><span class="line">clear all</span><br><span class="line">close all</span><br><span class="line"><span class="comment">%画出函数图</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);  <span class="comment">%设置控制窗口的名</span></span><br><span class="line"><span class="built_in">hold</span> on ; <span class="comment">%保存axes内图像用的，确保之前的图像不会被新图像覆盖</span></span><br><span class="line">lb = <span class="number">1</span>;</span><br><span class="line">ub = <span class="number">2</span>;  <span class="comment">%设置变量范围\[1,2\]</span></span><br><span class="line">ezplot(<span class="string">'sin(10\*pi\*x)/x'</span>,\[lb,ub\]);  <span class="comment">%根据变量范围画图</span></span><br><span class="line">xlabel(<span class="string">'自变量/x'</span>)  <span class="comment">%设置xy轴名称</span></span><br><span class="line">ylabel(<span class="string">'函数值/y'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">%定义遗传算法参数</span></span><br><span class="line">Nind = <span class="number">40</span>;  <span class="comment">%种群大小</span></span><br><span class="line">Lind = <span class="number">20</span>; <span class="comment">%个体基因长度</span></span><br><span class="line">MaxGen = <span class="number">30</span>; <span class="comment">%遗传代数（迭代次数）</span></span><br><span class="line">GGAP = <span class="number">0.95</span> <span class="comment">%代沟</span></span><br><span class="line">px = <span class="number">0.7</span>; <span class="comment">%交叉概率</span></span><br><span class="line">pm = <span class="number">0.01</span>; <span class="comment">%bianyigailv</span></span><br><span class="line">FieldD = \[Lind;lb;ub;<span class="number">1</span>;<span class="number">0</span>;<span class="number">1</span>;<span class="number">1</span>\] <span class="comment">%设置矩阵转换器配置</span></span><br><span class="line">trace = <span class="built_in">zeros</span>(<span class="number">2</span>,MaxGen);  <span class="comment">%用于记录每一代的最优解以及对应的x的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%初始化</span></span><br><span class="line">Chrom = crtbp(Nind,Lind)  <span class="comment">%创建任意离散随机种群</span></span><br><span class="line">gen = <span class="number">0</span>; <span class="comment">%迭代计数器</span></span><br><span class="line">x = bs2rv(Chrom,FieldD); <span class="comment">%将初始化中群转换为十进制</span></span><br><span class="line">ObjV = <span class="built_in">sin</span>(<span class="number">10</span>\*<span class="built_in">pi</span>\*x)./x;  <span class="comment">%计算初始种群的对应的函数值</span></span><br><span class="line"><span class="comment">%进行迭代优化</span></span><br><span class="line"><span class="keyword">while</span> gen&lt;MaxGen</span><br><span class="line">    FitnV = ranking(ObjV);  <span class="comment">%计算适应度</span></span><br><span class="line">    SelCh = select(<span class="string">'sus'</span>,Chrom,FitnV,GGAP);  <span class="comment">%根据代沟选择遗传下来的个体数=（种群总书*代沟）</span></span><br><span class="line">    SelCh = recombin(<span class="string">'xovsp'</span>,SelCh,px);  <span class="comment">%进行交叉重组</span></span><br><span class="line">    SelCh = mut(SelCh,pm);  <span class="comment">%进行变异，只是有一定几率变异</span></span><br><span class="line">    x = bs2rv(SelCh,FieldD); <span class="comment">%重新计算新生成的子代的十进制群</span></span><br><span class="line">    ObjVSel = <span class="built_in">sin</span>(<span class="number">10</span>\*<span class="built_in">pi</span>\*x)./x;  <span class="comment">%计算子代的函数值</span></span><br><span class="line">    \[Chrom,ObjV\] = reins(Chrom,SelCh,<span class="number">1</span>,<span class="number">1</span>,ObjV,ObjVSel); <span class="comment">%重新将子代插入到父代中，得到新的种群</span></span><br><span class="line">    x = bs2rv(Chrom,FieldD); <span class="comment">%求出新的种群对应的函数值</span></span><br><span class="line">    gen = gen+<span class="number">1</span>; <span class="comment">%迭代次数+1</span></span><br><span class="line">    <span class="comment">%获得没代最优解以及序号 </span></span><br><span class="line">    \[Y,I\] = <span class="built_in">min</span>(ObjV);  <span class="comment">%Y为最优解  I为个体的序号</span></span><br><span class="line">    trace(<span class="number">1</span>,gen) = x(I); <span class="comment">%记录最优解对应x的值</span></span><br><span class="line">    trace(<span class="number">2</span>,gen) = Y;  <span class="comment">%记录下最优解的值</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(trace(<span class="number">1</span>,:),trace(<span class="number">2</span>,:),<span class="string">'bo'</span>);   <span class="comment">%根据每代的最优点画出图形</span></span><br><span class="line">grid on;</span><br><span class="line"><span class="built_in">plot</span>(x,ObjV,<span class="string">'b*'</span>);  <span class="comment">%画出最后一代的种群</span></span><br><span class="line"><span class="built_in">hold</span> off;</span><br><span class="line"></span><br><span class="line"><span class="comment">%画出进化图</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">plot</span>(<span class="number">1</span>:MaxGen,trace(<span class="number">2</span>,:));</span><br><span class="line">grid on;</span><br><span class="line">xlabel(<span class="string">'遗传代数'</span>);</span><br><span class="line">ylabel(<span class="string">'解的变化'</span>);</span><br><span class="line">title(<span class="string">'进化过程'</span>);</span><br><span class="line">bestY = trace(<span class="number">2</span>,<span class="keyword">end</span>);</span><br><span class="line">bestX = trace(<span class="number">1</span>,<span class="keyword">end</span>);</span><br><span class="line">fprintf(\[<span class="string">'最优解：\\nx='</span>,num2str(bestX),<span class="string">'\\ny='</span>,num2str(bestY),<span class="string">'\\n'</span>\]);</span><br></pre></td></tr></table></figure>
<p><strong>结果：（这里是进行30次的结果）</strong> <img src="http://47.100.4.8/wp-content/uploads/2018/07/2-2.png" alt=""> <img src="http://47.100.4.8/wp-content/uploads/2018/07/3-1.png" alt=""> 有上面的结果可以看出随着迭代次数的增加，结果趋于稳定，我自己也试了迭代100次的结果到后面几乎就是一条平的线。</p>
]]></content>
      <categories>
        <category>GA</category>
        <category>MatLab</category>
        <category>优化算法</category>
        <category>文章页</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>MatLab</tag>
        <tag>GA</tag>
        <tag>优化算法</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰模式编程实现</title>
    <url>/2019/05/13/zhuang-shi-mo-shi-bian-cheng-shi-xian-1/</url>
    <content><![CDATA[<p><strong>装饰模式</strong></p>
<p><strong>实验原理：</strong></p>
<ul>
<li>动态地给一个对象添加一些额外的职责。</li>
<li>就增加功能来说，装饰模式比生成子类更为灵活。</li>
</ul>
<p><strong>装饰模式的适用性：</strong></p>
<ul>
<li>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</li>
<li>处理那些可以撤销的职责。</li>
<li>当不能采用生成子类的方法进行扩充时。</li>
<li>可能有大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长。</li>
<li>类定义被隐藏，或类定义不能用于生成子类。</li>
</ul>
<p><strong>装饰模式的结构：</strong> <img src="http://47.100.4.8/wp-content/uploads/2019/05/11.png" alt=""> <strong>例题：</strong> 给定两种初始的汽车类，例如丰田和沃尔沃，利用装饰模式分别给它们添加新的功能，其中丰田可以导航和自动驾驶，沃尔沃可以导航和语音控制。 <strong>代码：</strong></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span>=<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Decorator</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span>:</span><span class="keyword">public</span> Car&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    Car* car;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SetCar</span><span class="params">(Car* car)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;car = car;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(car != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            car-&gt;Operation();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//导航</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFunction1</span>:</span><span class="keyword">public</span> Decorator&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Decorator::Operation();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Navigation"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//自动驾驶</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFunction2</span>:</span><span class="keyword">public</span> Decorator&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Decorator::Operation();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Autopilot"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//语音控制</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFunction3</span>:</span><span class="keyword">public</span> Decorator&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Decorator::Operation();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Voice control"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//丰田</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toyota</span>:</span><span class="keyword">public</span> Car&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Toyota:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//沃尔沃</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Volvo</span>:</span><span class="keyword">public</span> Car&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Volvo:"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Toyota* toyota = <span class="keyword">new</span> Toyota();</span><br><span class="line">    ConcreteFunction1* concreteFunction1 = <span class="keyword">new</span> ConcreteFunction1();</span><br><span class="line">    ConcreteFunction2* concreteFunction2 = <span class="keyword">new</span> ConcreteFunction2();</span><br><span class="line">    concreteFunction1-&gt;SetCar(toyota);</span><br><span class="line">    concreteFunction2-&gt;SetCar(concreteFunction1);</span><br><span class="line">    concreteFunction2-&gt;Operation();</span><br><span class="line">    Volvo* volvo = <span class="keyword">new</span> Volvo();</span><br><span class="line">    ConcreteFunction1* concreteFunction3 = <span class="keyword">new</span> ConcreteFunction1();</span><br><span class="line">    ConcreteFunction3* concreteFunction4 = <span class="keyword">new</span> ConcreteFunction3();</span><br><span class="line">    concreteFunction3-&gt;SetCar(volvo);</span><br><span class="line">    concreteFunction4-&gt;SetCar(concreteFunction3);</span><br><span class="line">    concreteFunction4-&gt;Operation();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>UML类图：</strong> <img src="http://47.100.4.8/wp-content/uploads/2019/05/2-2.png" alt=""> <strong>结果：</strong> <img src="http://47.100.4.8/wp-content/uploads/2019/05/3-1.png" alt=""></p>
]]></content>
      <categories>
        <category>C&amp;amp;C++</category>
        <category>文章页</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>decorate pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>作业调度算法</title>
    <url>/2018/07/02/zuo-ye-diao-du-suan-fa-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/05/QQ%E5%9B%BE%E7%89%8720180529111458.png" alt=""> <strong>处理机调度的层次：</strong></p>
<ul>
<li>高级调度：其主要功能是根据某种算法，决定将外存上处于后备队列中的哪个几个作业调度内存。</li>
<li>低级调度：主要功能是根据某种算法，决定就绪队列中的哪个进程应获得处理机。</li>
<li>中级调度：主要目的是提高内存利用率和系统吞吐量，功能是将内存上暂时不用的进程调入外存。</li>
</ul>
<p><strong>CPU利用率=（CPU有效工作时间）/（CPU有效工作时间+CPU空闲等待时间）</strong>   <strong>周转时间：是指从作业被提交给系统开始，到作业执行完毕的时间（其中也包括作业等待CPU的时间）</strong> <strong>带权周转时间=（周转时间）/（需要系统为它提供服务的时间）</strong> 上面两个常在作业调度时，用来计算作业的平均周转时间和平均带权周转时间使用。   <strong>作业调度算法：</strong> **     先来先服务调度算法（FCFS）：** 实质上就是先到的作业先使用处理机，后到的则等待直到它接受调度使用处理机。 <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180702135313.png" alt=""> 平均周转时间=（2+5+5）/3 平均带权周转时间=（1+1.25+5）/3 **      短作业优先算法（SJF）** 算法思想：从外存后备队列中选择需要提供服务时间最短的作业调入内存，给它分配处理机。 <img src="http://47.100.4.8/wp-content/uploads/2018/07/QQ%E5%9B%BE%E7%89%8720180702135416.png" alt=""> **     优先级调度算法** 优先级调度算法基于作业的紧迫程度来对作业进行调度。该优先级是由外部赋予，调度算法根据该优先级进行作业调度。 <img src="http://47.100.4.8/wp-content/uploads/2018/07/1.png" alt=""> **    高响应比优先调度算法** 该算法定义了一个动态的优先权用来作为调度算法的依据，优先权高的作业优先被调度。 优先权的计算公式=（等待时间+要求服务时间）/要求服务时间 这样既考虑到了作业的等待时间又考虑到了作业运行时间。 由于计算过程比较麻烦这里就不给出过程了，只需在一个作业处理完毕后，在计算等待队列中所有作业的优先权即可，然后在根据优先权进行作业调度。</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>调度</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式基础</title>
    <url>/2018/03/27/zheng-ze-biao-da-shi-ji-chu-1/</url>
    <content><![CDATA[<h3 id=""><a class="header-anchor" href="#">¶</a><img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-5-300x179.jpg" alt=""></h3>
<h3 id="正则表达式：又称规则表达式-。-（英语：Regular-Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式通常被用来检索、替换那些符合某个模式-规则-的文本。"><a class="header-anchor" href="#正则表达式：又称规则表达式-。-（英语：Regular-Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式通常被用来检索、替换那些符合某个模式-规则-的文本。">¶</a>正则表达式：又称规则表达式**。**（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。正则表达式通常被用来检索、替换那些符合某个模式(规则)的文本。</h3>
<p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p>
<p>它一般配合re库使用，来对爬虫爬取的网页信息进行筛选。</p>
<p>它可以进行数据的提取。</p>
<p>表达式规则：</p>
<p>字符</p>
<p>描述</p>
<p>\</p>
<p>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“n”匹配字符“n”。“\n”匹配一个换行符。串行“\\”匹配“\”而“\(”则匹配“(”。</p>
<p>^</p>
<p>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“\n”或“\r”之后的位置。</p>
<p>$</p>
<p>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“\n”或“\r”之前的位置。</p>
<ul>
<li></li>
</ul>
<p>匹配前面的子表达式零次或多次。</p>
<ul>
<li></li>
</ul>
<p>匹配前面的子表达式一次或多次。</p>
<p>?</p>
<p>匹配前面的子表达式零次或一次。</p>
<p>{n}</p>
<p>n是一个非负整数。匹配确定的n次。</p>
<p>{n,}</p>
<p>n是一个非负整数。至少匹配n次。</p>
<p>{n,m}</p>
<p>m和n均为非负整数，其中n&lt;=m。最少匹配n次且最多匹配m次。</p>
<p>?</p>
<p>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。</p>
<p>.</p>
<p>匹配除“\n”之外的任何单个字符。要匹配包括“\n”在内的任何字符，请使用像“（.|\n）”的模式。</p>
<p>(pattern)</p>
<p>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“\(”或“\)”。</p>
<p>(?:pattern)</p>
<p>匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。</p>
<p>(?=pattern)</p>
<p>正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。</p>
<p>(?!pattern)</p>
<p>正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。</p>
<p>(?&lt;=pattern)</p>
<p>反向肯定预查，与正向肯定预查类拟，只是方向相反。</p>
<p>(?&lt;!pattern)</p>
<p>反向否定预查，与正向否定预查类拟，只是方向相反。</p>
<p>x|y</p>
<p>匹配x或y。</p>
<p>[xyz]</p>
<p>字符集合。匹配所包含的任意一个字符。</p>
<p>[^xyz]</p>
<p>负值字符集合。匹配未包含的任意字符。</p>
<p>[a-z]</p>
<p>字符范围。匹配指定范围内的任意字符。</p>
<p>[^a-z]</p>
<p>负值字符范围。匹配任何不在指定范围内的任意字符。</p>
<p>\b</p>
<p>匹配一个单词边界，也就是指单词和空格间的位置。</p>
<p>\B</p>
<p>匹配非单词边界。“er\B”能匹配“verb”中的“er”，但不能匹配“never”中的“er”。</p>
<p>\cx</p>
<p>匹配由x指明的控制字符。</p>
<p>\d</p>
<p>匹配一个数字字符。等价于[0-9]。</p>
<p>\D</p>
<p>匹配一个非数字字符。等价于[^0-9]。</p>
<p>\f</p>
<p>匹配一个换页符。等价于\x0c和\cL。</p>
<p>\n</p>
<p>匹配一个换行符。等价于\x0a和\cJ。</p>
<p>\r</p>
<p>匹配一个回车符。等价于\x0d和\cM。</p>
<p>\s</p>
<p>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</p>
<p>\S</p>
<p>匹配任何非空白字符。等价于[^ \f\n\r\t\v]。</p>
<p>\t</p>
<p>匹配一个制表符。等价于\x09和\cI。</p>
<p>\v</p>
<p>匹配一个垂直制表符。等价于\x0b和\cK。</p>
<p>\w</p>
<p>匹配包括下划线的任何单词字符。</p>
<p>\W</p>
<p>匹配任何非单词字符。</p>
<p>\xn</p>
<p>匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。正则表达式中可以使用ASCII编码。.</p>
<p>\num</p>
<p>匹配num，其中num是一个正整数。对所获取的匹配的引用。</p>
<p>\n</p>
<p>标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</p>
<p>\nm</p>
<p>标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。</p>
<p>\nml</p>
<p>如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</p>
<p>\un</p>
<p>匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。</p>
<h2 id="常用正则表达式"><a class="header-anchor" href="#常用正则表达式">¶</a>常用正则表达式</h2>
<p>用户名</p>
<p>/^[a-z0-9_-]{3,16}$/</p>
<p>密码</p>
<p>/^[a-z0-9_-]{6,18}$/</p>
<p>十六进制值</p>
<p>/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</p>
<p>电子邮箱</p>
<p>/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/ /^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.{1,2}[a-z]+)+$/</p>
<p>URL</p>
<p>/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]<em>)</em>\/?$/</p>
<p>IP 地址</p>
<p>/((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)/ /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/</p>
<p>HTML 标签</p>
<p>/<sup>&lt;([a-z]+)([</sup>&lt;]+)<em>(?:&gt;(.</em>)&lt;\/\1&gt;|\s+\/&gt;)$/</p>
<p>删除代码\\注释</p>
<p>(?&lt;!http:|\S)//.*$</p>
<p>Unicode编码中的汉字范围</p>
<p>/^[\u2E80-\u9FFF]+$/</p>
<p>一些例子：</p>
<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/QQ%E5%9B%BE%E7%89%8720180327174210-300x226.png" alt=""></p>
]]></content>
      <categories>
        <category>Python功能</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Regular Expression</tag>
      </tags>
  </entry>
  <entry>
    <title>（转）我是一个爬虫</title>
    <url>/2018/06/04/zhuan-wo-shi-yi-ge-pa-chong-1/</url>
    <content><![CDATA[<p><img src="http://47.100.4.8/wp-content/uploads/2018/03/timg-6.jpg" alt=""></p>
<h3 id="诞生"><a class="header-anchor" href="#诞生">¶</a>诞生</h3>
<p>我是一个Web Crawler , 有时候称为Spider , 你们经常说的爬虫就是我。 我想我是遇到了好时代，感谢IT政府，提供了简单的HTTP协议，还有HTML,CSS, JavaScript这一系列开放的技术， 原来的桌面应用，局域网应用都被搬到了网络上，形成了一个个的网站， 网站互联起来，形成了一个覆盖全世界的大网。 在这个大背景下，我应运而生，开始在这个大网上爬来爬去，收集、分析各种网页的数据。 我有几个亲戚在搜索引擎公司工作，听说他们的目标是把全世界的网页都给爬下来，形成索引，让人类搜索， 想想全世界网页的数量，这几位亲戚的工作实在是让人敬畏。 我的工作原理非常简单， 给我一个URL，我就可以通过HTTP协议把HTML页面下载下来。然后分析一下这个页面中有哪些元素，比如说，表单，表格，链接等等。 反正这个HTML页面是纯文本的，我想怎么折腾都可以，我可以把它形成一颗DOM树，也可以用正则表达式去获得一段我想要的内容，总之方法多得很呢！ 最重要的是，我要拿到这个页面中的其他链接， 然后再拿到这些链接对应的HTML页面,继续我的分析，如此循环下去，就能把所有的页面给找出来了，所有的内容都尽在掌握！ 有时候，有些HTML页面是受到保护的，必须登陆以后才能够访问，这也难不住我，人类早已经申请了很多的账号。我把这些用户名和密码拿过来，找到对应的登录框，向服务器端发送一个请求，就可以顺利登录了， 访问受保护网页的大门就敞开了。 所以说我有两个最基本的能力， 第一，通过HTTP协议访问网页;  第二，分析HTML网页。</p>
<h3 id="斗争"><a class="header-anchor" href="#斗争">¶</a>斗争</h3>
<p>所谓“爬亦有道”， 我们爬虫界也是有一定规范的，比如说，你在你的网站的根目录下放一个robots.txt文件，里边定义好那些内容对爬虫开放，那些内容不希望爬虫访问， 那我们就不会去爬这些内容了。 当然这只是个约定俗成的规范，而不是标准， 所以总是有一些爬虫完全不遵守规则，置这些规范于不顾。 作为程序，我们访问起网络来， 要远远比人类快得多，人类还需要在界面上移动鼠标点击，我们则是拿到URL后直接、迅速、毫不犹豫地访问， 这样一来，如果爬虫很多，常常给一些网站带来非常大的流量，给服务器带来很大的压力，影响了正常用户的访问， 从而影响了网站的收入。 断人财路，网站就急眼了， 肯定要反击， 于是他们网站便提出了各种各样的办法，成为反爬虫。 他们有反爬虫， 我们便反反爬虫，于是便引发了一场波澜壮阔，反复拉锯的战争。 首先他们得把我们给识别出来才行。最早爬虫在发出HTTP请求的时候，不注意伪装自己，不会修改User Agent ，相当于告诉对方说： 我是爬虫。 于是这些网站轻轻松松的就把我们识别出来，返回一个错误码，或者干脆禁止我们访问。 什么？ 你还不知道什么是User Agent ？ User Agent其实就是HTTP Header 中的一个字符串，让服务器端能识别客户端的操作系统及版本，浏览器及版本，浏览器引擎，语言等等信息。 这样可以针对性地做一些处理，例如发送桌面版或者手机版的网页。 比如： User-Agent:Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0) 后来我们也学精了，把这个User Agent 设置得和人类的浏览器一模一样，对方就不好识别了。 有时候我们还可以伪装成Google的爬虫，百度的爬虫， 各个网站自然希望百度和Google去对自己的网页做索引的，所以对这样的User Agent不会下狠手拒绝。 但是他们也有别的办法，比如分析我们的行为，利用我们速度快的特点， 比如说，一秒之内有多少次请求，就认为是爬虫。 我们也得斗智斗勇，访问一会儿就休眠几秒钟，然后接着再访问，让他们的策略失效。 但是我们也不能老是休息呀，如果休息得太多，那我们就会人类的速度差不多了，爬虫还有什么意义？</p>
<p>陷阱，验证码，投毒</p>
<p>有些网站会采取一些非常“恶劣”的手段，我最难以防范的就是陷阱。 具体来说，就是在网站发回的HTML页面中，包含一些人类肉眼看不到的链接，比如弄个一个像素大小的图片，上面有个链接。 人类看不到，是绝对不会点击的，但是我们爬虫是程序啊，能分析所有的链接并访问之。 但是以我们的智商，并不知道这是一个陷阱啊！ 这些陷阱就像漂浮在网页中的幽灵， 只要我们一访问这些链接，服务器立刻就会知道，哼哼，又来一个爬虫，立刻启动大杀招：封IP！ 他们还有一招就是验证码， 如果一段时间内访问的次数超过了某个阈值，立刻显示一个图形验证码，输入验证码以后才能继续，这实在是太讨厌了， 因为验证码是个图片， 人类肉眼轻松识别，可是我想识别还得靠别的软件或者系统，比如OCR。 但是验证现在搞得越来越复杂，什么滑块验证，什么数学题… 单纯的OCR都不够了。 不过我也不怕，我可以做分布式，反正机器多，让每个机器上的爬虫运行得稍微慢一点，不要触发服务器端的各种讨厌的封锁策略。 我还可以用代理，让IP不断变换，封了一个IP， 就用另外一个，子子孙孙无穷匮也。 我最烦的就是“投毒”，这一招最损， 网站识别出来我是爬虫以后，并不会把我的IP关到小黑屋，而是很阴险地发送一些假数据，和真实数据混在一起，让我喜滋滋地取走，不知道过了多少天，主人用数据做分析时才发现： 嗯，这数据有点不对头啊！ 到底是怎么回事！！！  于是我被拖出去打了50大板，真是冤枉啊。</p>
<h3 id="新装备"><a class="header-anchor" href="#新装备">¶</a>新装备</h3>
<p>最近的日子有点不大对头儿，访问一个URL后，返回的HTML特别少，JS特别多，我从HTML中几乎找不到什么有用的东西。 主人看到我干活效率骤然降低，赶紧亲自上手研究了一番，他用Chrome打开网站，按F12, 查看源代码和网络请求, 叹了一口气说： “原来的办法都不管用了，这些网站都在用JavaScript在浏览器端渲染了！” 不过他接着又兴奋地说：“这也许是一件好事情，这些JavaScript通过AJAX的方式访问后端网站的API，返回的数据都是JSON，我分析下，只要弄清楚这些API的输入和输出， 直接调用API就可以拿到数据了。” 其实都是分析，只不过原来分析HTML结构，从中取出内容，现在是分析后端服务器提供的API，直接获取到了数据，似乎更加方便。 但时候直接调用这些API也是有点小麻烦，比如很多时候，都需要进行认证，比如发个token什么的给服务器，要不然人家就不让调用。 后来主人说，算了，实在是麻烦，我给我的爬虫升级下装备吧。 新装备其实就是一个内嵌的浏览器，这个浏览器不需要界面显示， 可以在程序中静悄悄地执行，主人把他叫做无界面浏览器，或者无头浏览器。 有了全功能的内嵌浏览器，相当于一个真正的人类在请求网页了，把JavaScript下载下来，不是要在浏览器中做渲染吗？等的就是你！ 管你什么AJAX， token ,加密， 这里统统可以执行。 这个无头浏览器渲染完以后，我就可以拿到HTML做后续的分析了。 一切尽在掌握，这种感觉实在美妙。 不过缺点也是有的： 慢！ 没办法，有得必有失嘛， 我们还可以采用分布式运行的利器，多跑一些爬虫的实例，人多力量大。</p>
<h3 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h3>
<p>我们爬虫界的终极目标就是和人类的行为保持一致，这样就网站就无法识别了，只不过路漫漫其修远兮，双方的争斗估计会一直持续下去。 在斗争中，建议大家遵循一个原则：“斗而不破”， 不能砸网站的饭碗，要不然人家一怒之下把功能下线了，那大家彻底玩完。   感觉讲的挺真实的，也可以让我们更加形象化地了解爬虫。       转自公众号码农翻身</p>
]]></content>
      <categories>
        <category>Python爬虫</category>
        <category>Python知识</category>
        <category>文章页</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>使用CDN加速github page访问</title>
    <url>/2020/02/22/%E4%BD%BF%E7%94%A8CDN%E5%8A%A0%E9%80%9Fgithub%20page%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h1>使用CDN加速github page访问</h1>
<p>这里我使用的<a href="https://portal.qiniu.com/">七牛云</a>来加速网站的访问.</p>
<p><strong>特别注意：你的域名一定要备案了才能用CDN！！！</strong></p>
<h2 id="步骤"><a class="header-anchor" href="#步骤">¶</a>步骤</h2>
<h3 id="创建CDN域名加速实例"><a class="header-anchor" href="#创建CDN域名加速实例">¶</a>创建CDN域名加速实例</h3>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/099ePA.png" alt="figure1"></p>
<h3 id="配置实例"><a class="header-anchor" href="#配置实例">¶</a>配置实例</h3>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/MNex84.png" alt="figure2"></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/m4lIay.png" alt="figure3"></p>
<p>配置完如上实例后，需要等待实例状态变为成功:</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/XbWs3j.png" alt="figure4"></p>
<h3 id="添加到CNAME解析"><a class="header-anchor" href="#添加到CNAME解析">¶</a>添加到CNAME解析</h3>
<p>打开你自己的域名管理控制台。这里我用的是阿里云的域名管理控制台，进行域名就解析的配置：</p>
<h4 id="配置www"><a class="header-anchor" href="#配置www">¶</a>配置www</h4>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/LnLHLc.png" alt="figure5"></p>
<h4 id="配置"><a class="header-anchor" href="#配置">¶</a>配置@</h4>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/opB6nc.png" alt="figure6"></p>
<h2 id="验证解析成功没有"><a class="header-anchor" href="#验证解析成功没有">¶</a>验证解析成功没有</h2>
<h3 id="mac-linux"><a class="header-anchor" href="#mac-linux">¶</a>mac/linux</h3>
<p>在命令台输入</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dig </span>你的网址</span><br></pre></td></tr></table></figure>
<p>如果返回如下结果则表明解释成功了.</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/eI5g8q.png" alt="figure7"></p>
<h3 id="Windows"><a class="header-anchor" href="#Windows">¶</a>Windows</h3>
<p>由于这里我是mac系统所以windows我就贴出网上找到的验证方式：</p>
<p>windows系统可以通过Win+R 或 点击左下角的“开始”按钮打开“开始”菜单，打开“运行”，输入cmd回车。</p>
<p>在命令行模式下输入nslookup 您的加速域名，例如 nslookup qn.vinchi.club,在结果中可以看到您复制的cname值即可</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/Uz6PkK.jpg" alt="figure8"></p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>Github</category>
        <category>域名</category>
      </categories>
      <tags>
        <tag>域名解析</tag>
        <tag>Github Page</tag>
        <tag>CDN加速</tag>
      </tags>
  </entry>
  <entry>
    <title>使用FileZilla通过sftp连接以Linux为内核的云服务器</title>
    <url>/2019/12/30/%E4%BD%BF%E7%94%A8FileZilla%E8%AE%BF%E9%97%AE%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8ESC%EF%BC%88Centos%EF%BC%89/</url>
    <content><![CDATA[<h1>使用FileZilla通过sftp连接以Linux为内核的云服务器</h1>
<h2 id="首先去FileZilla下载该软件进行安装"><a class="header-anchor" href="#首先去FileZilla下载该软件进行安装">¶</a>首先去FileZilla下载该软件进行安装</h2>
<p>下载地址：<a href="https://filezilla-project.org/">https://filezilla-project.org/</a></p>
<h2 id="登陆阿里云实例控制台"><a class="header-anchor" href="#登陆阿里云实例控制台">¶</a>登陆阿里云实例控制台</h2>
<h3 id="创建新的安全组规则"><a class="header-anchor" href="#创建新的安全组规则">¶</a>创建新的安全组规则</h3>
<p>打开端口22<br>
<img src="https://gitee.com/zyp521/upload_image/raw/master/NzEVB8.png" alt="规则"></p>
<h3 id="使用VNC连接使用终端"><a class="header-anchor" href="#使用VNC连接使用终端">¶</a>使用VNC连接使用终端</h3>
<p>连接VNC需要输入连接密码，这个是在购买阿里云服务器是已经给的。<br>
<img src="https://gitee.com/zyp521/upload_image/raw/master/TPs1tL.png" alt="VNC"></p>
<h3 id="配置ssh文件"><a class="header-anchor" href="#配置ssh文件">¶</a>配置ssh文件</h3>
<p>进入ssh文件夹</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/etc/ssh</span></span><br><span class="line"><span class="keyword">ls</span></span><br></pre></td></tr></table></figure>
<h3 id="使用vim编辑sshd-config文件"><a class="header-anchor" href="#使用vim编辑sshd-config文件">¶</a>使用vim编辑sshd_config文件</h3>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vim sshd_config</span></span><br></pre></td></tr></table></figure>
<p><strong>特别注意：</strong> 使用配置该文件时需要选择e模式，然后如果在网页上显示不全的话建议使用一个更大的屏幕去操作，这样方便去看提示。</p>
<h3 id="将配置添加到配置文件中"><a class="header-anchor" href="#将配置添加到配置文件中">¶</a>将配置添加到配置文件中</h3>
<p>==配置代码==</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">##注释掉这一行</span><br><span class="line"></span><br><span class="line">#Subsystem sftp/usr/libexec/openssh/sftp-server</span><br><span class="line"></span><br><span class="line">##修改为</span><br><span class="line"></span><br><span class="line">Subsystem sftp internal-sftp  ##指定sftp服务使用系统自带的internal-sftp</span><br><span class="line"></span><br><span class="line">Match Group sftp  ##匹配sftp组的用户</span><br><span class="line"></span><br><span class="line">ChrootDirectory /data ##sftp主目录指定到/data</span><br><span class="line"></span><br><span class="line">ForceCommand internal-sftp  ##指定sftp命令</span><br><span class="line"></span><br><span class="line">AllowTcpForwarding no   ##用户不能使用端口转发</span><br><span class="line"></span><br><span class="line">X11Forwarding no  ##用户不能使用端口转发</span><br></pre></td></tr></table></figure>
<p>==一定要注意== 将该配置添加到sshd_config文件最后，由于我之前添加到了UseDNS那一行的前面，导致ssh一直报错。</p>
<p>对于ssh报错可以使用如下命令调试：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssh -t</span></span><br></pre></td></tr></table></figure>
<p>得到问题描述之后一次去解决就好了。</p>
<p>配置完成之后退出并且保存文件。</p>
<h3 id="重启ssh服务"><a class="header-anchor" href="#重启ssh服务">¶</a>重启ssh服务</h3>
<p>在终端输如下命令来重启ssh服务：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service sshd restart</span></span><br></pre></td></tr></table></figure>
<p>以上就大功告成了，下面只需要通过FileZilla来连接即可。</p>
<h2 id="使用FileZilla连接"><a class="header-anchor" href="#使用FileZilla连接">¶</a>使用FileZilla连接</h2>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/3vyTxz.png" alt="filezilla"><br>
用户名和密码都是在购买云服务器时提供的ftp密码。</p>
<p>主机为你的公网ip地址，输入完成之后点击快速连接即可。</p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>服务器</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>五险一金</title>
    <url>/2020/01/24/%E4%BA%94%E9%99%A9%E4%B8%80%E9%87%91/</url>
    <content><![CDATA[<h1>五险一金</h1>
<h2 id="综合概述"><a class="header-anchor" href="#综合概述">¶</a>综合概述</h2>
<h3 id="五险"><a class="header-anchor" href="#五险">¶</a>五险</h3>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/M87sO4.png" alt="figure1"></p>
<p>五险：</p>
<ul>
<li>养老保险</li>
<li>医疗保险</li>
<li>生育保险</li>
<li>工伤保险</li>
<li>失业保险</li>
</ul>
<p>通常单位和个人都需要缴纳，而且缴纳的比例是不同的。</p>
<p>其中，单位缴纳的资金进入社会统筹账户，个人缴纳的资金进入个人账户。</p>
<p><ins>不同地方的缴纳比例略有不同，一般来说：</ins></p>
<ol>
<li><strong>医疗保险：</strong> 个人担负比例为工资的2%，单位缴纳比例为工资的7%</li>
<li><strong>养老保险：</strong> 个人担负比例为工资的8%，单位缴纳比例为工资的16%</li>
<li><strong>工伤保险：</strong> 单位全额担负，缴纳比例为工资的1%</li>
<li><strong>生育保险：</strong> 单位全额担负，缴纳比例为工资的1%</li>
<li><strong>失业保险：</strong> 个人担负比例为工资的0.3%，单位缴纳比例为工资的0.7%</li>
</ol>
<p>总的下来就是，==在全部的社保里，个人缴纳全部比例是11%左右，工资缴纳全部比例是工资的25%左右。==</p>
<h3 id="一金"><a class="header-anchor" href="#一金">¶</a>一金</h3>
<p>一金：住房公积金</p>
<p>根据《住房公积金管理条例》规定，公积金缴费最低比例不能低于职工工资的5%，最高不超过12%，区间内可以由==单位自主确定==缴存比例。</p>
<h3 id="举一个例子"><a class="header-anchor" href="#举一个例子">¶</a>举一个例子</h3>
<p>假如企业为职工小A开出6000元的工资，那么小A个人的具体社交缴费明细如下：</p>
<ol>
<li><strong>医疗保险：</strong> 120元，<strong>养老保险：</strong> 480元，<strong>失业保险：</strong> 18元，<strong>公积金：</strong> 720元</li>
<li><strong>工伤保险：</strong> 60元(单位全额担负)，<strong>生育保险：</strong> 60元(单位全额担负)</li>
</ol>
<p><strong>那么，实际发放到小A银行卡的工资，即到手工资为：</strong> 6000-120-480-18-720=4662元</p>
<h3 id="根据一个例子解读社会现象"><a class="header-anchor" href="#根据一个例子解读社会现象">¶</a>根据一个例子解读社会现象</h3>
<h4 id="两种现象："><a class="header-anchor" href="#两种现象：">¶</a>两种现象：</h4>
<ol>
<li>一些公司社保缴费基数不按照实际工资缴费</li>
<li>一些公司公积金根本不缴纳，或者按照缴费最低比例5%缴纳。</li>
</ol>
<p>开始测算，某公司员工平均月工资5000， 下面有两种算法：</p>
<p><strong>第一种算法：</strong> 公司比较厚道，盈利不错，经济状况好，员工工资5000，社保缴费基数和公积金基数均按实际工资来进行缴纳，即按照5000计算，其中公积金按最高基数12%缴纳。</p>
<p>那么每月一名员工的==人力成本=员工工资+社保里公司为员工缴纳的部分+公积金里公司为员工缴纳的部分== = 5000 + 5000 * 0.25+5000 * 0.12=6850元</p>
<p><strong>第二种算法：</strong><br>
经济大形势不好，盈利较差，或者公司不那么厚道，员工工资5000，但社保缴费基数和公积金基数均按最低缴费基数来进行缴纳，按基数3000计算，其中公积金比例，按最低基数5%来缴纳。</p>
<p>那么每月一名员工的==人力成本=员工工资+社保里公司为员工缴纳的部分+公积金里公司为员工缴纳的部分== =5000+3000 * 0.25+3000 * 0.05=5900元</p>
<p><strong>小结</strong></p>
<p>第一种算法和第二种算法比较，后者公司一个人一个月可节省950元的费用。</p>
<p>按小公司，有20名员工，那么一年即可节省资金=950 * 20 * 12 =22.8万元。这比费用对一个小公司来说是一笔不小的开支了。</p>
<p>但对员工来说，便没那么合算了，不说养老金，养老保险目前执行的是&quot;长缴多得，多较多&quot;的原则。</p>
<p><strong>所以，目前一个公司，社保和公积金的缴纳水平，可以一定程度上反应公司的经营水平和盈利状况。</strong></p>
<h2 id="第一部分：失业保险"><a class="header-anchor" href="#第一部分：失业保险">¶</a>第一部分：失业保险</h2>
<p><strong>失业金领取条件，需要满足以下三个条件:</strong></p>
<ol>
<li>失业前用人单位和本人已经缴纳失业保险累计满一年的；</li>
<li>非因本人意愿中断就业的；</li>
<li>已经办理失业登记，并有求职要求的</li>
</ol>
<p>举个例子，“企业破产、倒闭了，我被企业开除了”可不可以领取，答案是可以领。但是主动离职跳槽是不可以领取的。</p>
<h3 id="待遇内容"><a class="header-anchor" href="#待遇内容">¶</a>待遇内容</h3>
<ol>
<li>按月领取的失业保险金，领取失业保险金的期限有以下规定。（缴费1-5年，最长领12个月；缴费5-10年，最长领18个月；缴费10年以上，最长领24个月）</li>
<li>享受失业保险金期间的医疗补助，住院可以报销医疗费用。</li>
<li>失业人员，加入在领取失业保险金期间死亡的亲属可以领取丧葬补助金和家属抚恤金。</li>
</ol>
<p><strong>各地不听，大概为失业保险关系所在地最低工资标砖的70%-90%，按月发放。</strong></p>
<h3 id="小结："><a class="header-anchor" href="#小结：">¶</a><strong>小结：</strong></h3>
<p>相对于其他社保项目而言，获取事业保险给付的难度是比较大的。但聊胜于无，等真正失业了，每一笔资金都很重要。</p>
<h2 id="工伤保险"><a class="header-anchor" href="#工伤保险">¶</a>工伤保险</h2>
<p>工伤保险，简单来说就是在工作期间受伤了或者得了==职业病==，获得响应医疗救助和相应的经济步长的保险。</p>
<h3 id="工伤判定条件"><a class="header-anchor" href="#工伤判定条件">¶</a>工伤判定条件</h3>
<ol>
<li>在工作时间和工作场所内，收到事故伤害的。</li>
<li>患法律规定职业病的。</li>
<li>在上下班途中，收到非本人主要责任的交通事故的</li>
<li>在抢险救灾等维护国家利益中受到伤害的</li>
<li>职工原在军队服役，因公负伤，到用人单位旧伤复发的。</li>
</ol>
<p><strong>注意：</strong> 上下班途中，若是职工自身原因或者主要责任导致事故发生的，不按工伤处理。</p>
<h4 id="工伤保险待遇"><a class="header-anchor" href="#工伤保险待遇">¶</a>工伤保险待遇</h4>
<ol>
<li>工伤医疗期间待遇：医疗费、康复费等7项</li>
</ol>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/vW9Ae1.jpg" alt="figure2"></p>
<ol start="2">
<li>在伤残评定结果出来之后，根据1级到10级伤残级别不同，可以领取伤残步长7-27个月工资：</li>
</ol>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/8CXWDn.jpg" alt="figure3"></p>
<ol start="3">
<li>1级到6级，有相应的工伤医疗终结后的待遇，根据伤残级别不同，补发伤残津贴和生活护理；</li>
<li>因工死亡补偿待遇</li>
</ol>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/Sg0neO.jpg" alt="figure4"></p>
<p>工伤申请需要的材料一般分为：基本资料和补充资料。具体详情请根据规定准备。</p>
<h3 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h3>
<p>如果单看赔偿项目，工伤保险的保障可以说是非常全面了，从伤残津贴、治疗费、误工费、护理费等，几乎能想到的损失都有补偿。</p>
<p>但他的局限性也很明显，只赔偿工伤的情形，而无论是意外还是疾病，很多都是在工作场合之外发生，这时候就需要用到社保中的医疗保险了。</p>
<h2 id="医疗保险"><a class="header-anchor" href="#医疗保险">¶</a>医疗保险</h2>
<p><ins>首先说明一点，很多地区，医疗保险的最高报销金额，与社保连续缴费时间有关。</ins></p>
<h3 id="举个例子"><a class="header-anchor" href="#举个例子">¶</a>举个例子</h3>
<p>职工在2017年1月开始上班，1月开始缴纳社保，2月因特殊原因，断了社保。</p>
<p>3月开始正常缴纳，并补上了2月的社保，后续几月开始享受医疗保险待遇，医疗保险的最高报销金额又是多少呢？</p>
<p>简单表格：</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/nFVtMD.jpg" alt="figure5"></p>
<h4 id="第二点："><a class="header-anchor" href="#第二点：">¶</a><strong>第二点：</strong></h4>
<p>我国现阶段的医疗保险制度是以“基本医疗保险”为主题，各种形式的补充医疗保险为补充。通常所说的医保，指的是“基因医疗保险”。</p>
<p>基本医疗保险有包括城镇职工基本医疗保险、城乡居民基本医疗保险。（不可同时参保）</p>
<p>==不同人的参保范围如下：==</p>
<ol>
<li>当地行政区域内的职工和当地灵活就业人员，可以参保城镇职工基本医疗保险，一般个人按工资的2%缴纳；</li>
<li>城镇居民和乡村居民、学生等，参保城乡居民基本医疗保险，一年缴费一次。</li>
</ol>
<p><ins>在这里特别指出新生婴儿，在出生后即可申请办理社保卡，参加城乡居民基本医疗保险，享受医疗报销</ins></p>
<h4 id="第三点："><a class="header-anchor" href="#第三点：">¶</a><strong>第三点：</strong></h4>
<p>医保的报销范围，简述为两定点、三目录：<br>
即参保人在定点医院和定点药店发生的，符合<ins>基本医疗保险目录、诊疗项目范围目录、医疗服务设施范围目录以及国家、省、市的其他的规定的医疗费用</ins>，按规定由基本医疗保险基金支付。</p>
<p>所以，想要医保报销的金额多：</p>
<ol>
<li>务必选择医保定点医院和药店</li>
<li>另外，用药时，可以提前告知一声，尽量使用医保用药目录内的药品。</li>
</ol>
<h4 id="第四点："><a class="header-anchor" href="#第四点：">¶</a><strong>第四点：</strong></h4>
<p>之前咱们说的，退休后不用继续医保缴费，后续终身享受医保报销待遇，是有前提条件的。==需要退休前有足够的医保缴费年限。==</p>
<h2 id="养老保险"><a class="header-anchor" href="#养老保险">¶</a>养老保险</h2>
<p>**通俗说明：**养老保险，简单来说，就是在工作期间，自己和工作单位提前每个月交养老保险费，为以后养老做好积累。</p>
<h3 id="养老保险怎么交？"><a class="header-anchor" href="#养老保险怎么交？">¶</a>养老保险怎么交？</h3>
<p><strong>职工养老保险，是单位和个人各自缴纳一部分。</strong></p>
<p>其中用人单位按照缴费基数 <ins>不超过20%</ins> 缴费，交的钱进入统筹账户；职工个人按照缴费基数的 <ins>8%</ins> 缴纳，交的钱进入个人账户。</p>
<h4 id="补充：何为缴费基数？"><a class="header-anchor" href="#补充：何为缴费基数？">¶</a>补充：何为缴费基数？</h4>
<p>按照现行政策，缴费基数工资为职工本人上一年度的平均工资，包括工资、将近、津贴，补贴等收入。另外，<ins>月平均工资超过当地职工平均工资300%以上的部分，不计入个人缴费工资基数；低于当地职工平均工资60%的，按照60%计算缴费工资基数。</ins></p>
<h3 id="退休有哪些可享受的养老待遇？"><a class="header-anchor" href="#退休有哪些可享受的养老待遇？">¶</a>退休有哪些可享受的养老待遇？</h3>
<ol>
<li>按月领取养老金</li>
<li>死亡后，医嘱可以领取丧葬补助金和抚恤金</li>
<li><ins>参与每年的养老保险待遇上涨。</ins></li>
</ol>
<p>最后一条看似简单，其实非常重要，由于社会上职工工资的上涨，物价的上涨，通货膨胀等因素，钱会越来越贬值。</p>
<p>所以，国家建立了养老金的调整机制，每年提高养老保险的待遇水平。<strong>目前，养老金已实现15年连续增长。</strong></p>
<h3 id="养老金领取条件："><a class="header-anchor" href="#养老金领取条件：">¶</a>养老金领取条件：</h3>
<ol>
<li>职工达到法定的退休年龄</li>
<li>养老保险累积缴费年限满15年</li>
<li>已经办理退休手续。</li>
</ol>
<p>==只有同时满足了这三个条件以后，才可以领取养老保险==</p>
<h3 id="特殊说明"><a class="header-anchor" href="#特殊说明">¶</a>特殊说明</h3>
<ol>
<li><ins>缴满15年只是退休后享受养老金待遇的最低年限要求，缴费15年还是缴费30年，会直接影响退休后的养老金待遇</ins>，在经济能力允许的情况下，缴费年限能交长一点，尽量交长一点。</li>
<li>达到法定退休年龄时累积缴费不足15年的，可以缴费至15年后，按月领取基本养老金；也可以转入新型农村社会养老保险或者是城镇居民社会养老保险，按照国家规定享受相应的养老保险待遇。</li>
</ol>
<h3 id="怎么计算养老保险金"><a class="header-anchor" href="#怎么计算养老保险金">¶</a>怎么计算养老保险金</h3>
<p>建议自行查询了。</p>
<h2 id="生育保险"><a class="header-anchor" href="#生育保险">¶</a>生育保险</h2>
<h3 id="缴纳生育保险，职工可以享受哪些待遇？"><a class="header-anchor" href="#缴纳生育保险，职工可以享受哪些待遇？">¶</a>缴纳生育保险，职工可以享受哪些待遇？</h3>
<p>首先说明的是，无论女职工将来妊娠的情况如何，均可以按照规定得到补偿。(也就是说无论戴尔存货与否都可以享受相关待遇)</p>
<p>具体来说，生育保险待遇主要分为是三个方面：<strong>产假</strong>，<strong>生育医疗费</strong>和<strong>生育津贴</strong>。</p>
<h3 id="产假怎么计算："><a class="header-anchor" href="#产假怎么计算：">¶</a>产假怎么计算：</h3>
<ol>
<li>基本产假98天，其中产前可以休假15天；</li>
<li>生育时遇到有难产金和剖腹产的，可增加产假15天；</li>
<li>生育多胞胎，每多生育1个婴儿，增加产假15天；</li>
<li>怀孕不满4个月流产的，根据医务部门的意见，给予15天到30天的产假；</li>
<li>怀孕4个月以上流产的，给予42天产假。</li>
<li>要注意的是，<ins>产假为连续假期，包括周六周日、法定节假日等</ins></li>
</ol>
<h3 id="生育医疗费可以报销哪一部分的钱"><a class="header-anchor" href="#生育医疗费可以报销哪一部分的钱">¶</a>生育医疗费可以报销哪一部分的钱</h3>
<ol>
<li>含产前检查费用；</li>
<li>女职工生育的检查费、接生费、手术费、住院费和药费，由生育保险基金支付；</li>
<li>超出额定规定的医疗业务费和药费，由职工个人负担；</li>
<li>女职工生育出院后，因生育引起疾病的医疗费，由生育保险基金支付；</li>
<li>其他疾病的医疗费，按照医疗保险待遇的规定办理。</li>
</ol>
<h3 id="生育津贴能领多少钱？"><a class="header-anchor" href="#生育津贴能领多少钱？">¶</a>生育津贴能领多少钱？</h3>
<p>按照职工所在用人单位上年度职工月平均工资除以30天乘以产假天数计发。</p>
<p><strong>计算公式：</strong> 生育津贴=本单位人均社保缴费工资 / 30(天) * 假期天数</p>
<p>ps： 流产也能领取生育津贴</p>
<h3 id="举个例子-v2"><a class="header-anchor" href="#举个例子-v2">¶</a>举个例子</h3>
<p>员工正常婚育，剖腹产，生育了双胞胎，社保缴费基数按6000计算，咱们来算一下该员工的产假时间和生育津贴：</p>
<ol>
<li>假期天数=98+15+15=128</li>
<li>生育津贴=6000/30*128=25600元</li>
<li></li>
</ol>
<h3 id="特殊说明：生育保险和男职工有关吗？"><a class="header-anchor" href="#特殊说明：生育保险和男职工有关吗？">¶</a>特殊说明：生育保险和男职工有关吗？</h3>
<p>即男职工正常在职，连续缴纳生育保险，但棋子未缴纳生育保险怎么报销？</p>
<p><strong>使用前提条件：</strong> 男职工连续缴满10个月，且其配偶未参加职工医保、居民医保。</p>
<p><strong>享受待遇：</strong></p>
<ol>
<li>生育医疗费用：按“在职女职工”费用标准的50%享受</li>
<li>产前检查费</li>
</ol>
<p><strong>办理流程：</strong><br>
先自己自费结算所有费用，再携带申请材料到医保中心申报，最后待遇打给个人。</p>
<p>**特殊说明：**男女职工都可享受计划生育手术费，包括宫内节育器、流产术、引产术、绝育及复通术所发生的医疗费用。</p>
<h2 id="住房公积金"><a class="header-anchor" href="#住房公积金">¶</a>住房公积金</h2>
<p>买房、装修、租房、退休都可以提取住房公积金，也可以在购买商品房时享受更低的住房贷款利息，需要提供相关证明。公司和你缴纳同等数额，最终全部归个人所有。</p>
]]></content>
      <categories>
        <category>社保</category>
      </categories>
      <tags>
        <tag>社保</tag>
      </tags>
  </entry>
  <entry>
    <title>使用百度 AI Studio来跑深度学习</title>
    <url>/2020/05/22/%E4%BD%BF%E7%94%A8%E7%99%BE%E5%BA%A6%20AI%20Studio%E6%9D%A5%E8%B7%91%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1>使用百度 AI Studio来跑深度学习</h1>
<p>ps：这里不仅限于跑深度学习，可运行python代码。</p>
<p>具体网站:<a href="https://aistudio.baidu.com/">click here</a></p>
<p><strong>这里做完四个任务可以得到100小时的计算时长，同样每天运行项目可以得到12小时的计算时长！太香了~</strong></p>
<h2 id="导入自己的项目"><a class="header-anchor" href="#导入自己的项目">¶</a>导入自己的项目</h2>
<h3 id="创建数据集"><a class="header-anchor" href="#创建数据集">¶</a>创建数据集</h3>
<p>创建数据集并上传数据集压缩包（这里可用用别人开源的数据集）</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/Oc0r22.png" alt="figure.1"></p>
<h3 id="创建项目"><a class="header-anchor" href="#创建项目">¶</a>创建项目</h3>
<p>这里建议创建jupyter notebook的项目，因为他可以操控终端，这样就给了我们很多的可能，嘿嘿。</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/2qCy98.png" alt="figure.2"></p>
<p>直接启动环境打开终端，如果有计算时长可能选择高性能的tesla v100计算卡哦。</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/HWwpSU.png" alt="figure.3"></p>
<h3 id="环境配置"><a class="header-anchor" href="#环境配置">¶</a>环境配置</h3>
<p>在终端中输入如下命令可以查看显卡配置</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">NVIDIA-smi</span></span><br></pre></td></tr></table></figure>
<p>如下：</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/123.png" alt="figure.4"></p>
<p>在终端输入如下命令，可以查看cuda版本。</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nvcc -V</span></span><br></pre></td></tr></table></figure>
<p>查看cuda环境配置，然后去PyTorch官方找到对应的pytorch版本进行命令行安装即可。</p>
<p>这样运行神经网络的基础配置就设置好了，</p>
<h3 id="上传项目"><a class="header-anchor" href="#上传项目">¶</a>上传项目</h3>
<p>进入项目后，点击上传按钮，将需要的代码文件上传到服务器即可。</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/UGMnEc.png" alt="figure.5"></p>
<h2 id="Final"><a class="header-anchor" href="#Final">¶</a>Final</h2>
<p>最后这里特别说明一下，服务器的系统环境是linux内核，所以基本上各种数据集的解压（压缩包形式数据集）文件创建删除，代码的运行都是使用命令行来完成的。</p>
<p>将压缩包abc.rar 解压到指定路径</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rar x abc.rar <span class="regexp">/home/</span>aistudio<span class="regexp">/work/</span>....<span class="regexp">/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Neural Network</category>
        <category>Artificial Intelligence</category>
        <category>Knowledge</category>
      </categories>
      <tags>
        <tag>Neural Network</tag>
        <tag>Server</tag>
      </tags>
  </entry>
  <entry>
    <title>百度AI studio+Encoder_Decoder+Anaconda+ V100+ Linux+PyTorch环境配置</title>
    <url>/2020/05/22/%E7%99%BE%E5%BA%A6AI%20studio+Encoder_Decoder+Anaconda+%20V100+%20Linux+PyTorch%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1>百度AI studio+Encoder_Decoder+Anaconda+ V100+ Linux+PyTorch环境配置</h1>
<p>这里主要以我的毕设代码需要的环境进行配置的，该内容配合miniconda可以扩展到其他的环境下。</p>
<h2 id="环境配置"><a class="header-anchor" href="#环境配置">¶</a>环境配置</h2>
<h3 id="dataset存储"><a class="header-anchor" href="#dataset存储">¶</a>dataset存储</h3>
<p>由于在百度AI Studio中每次项目终止后，data数据集文件夹会按照数据集中的内容重置，因此我需要将需要的数据自行解压到work文件夹下，这样需要的内容就可以保存下载来了。具体解压代码：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rar x abc.rar <span class="regexp">/home/</span>aistudio<span class="regexp">/work/</span>....<span class="regexp">/</span></span><br></pre></td></tr></table></figure>
<h3 id="Miniconda"><a class="header-anchor" href="#Miniconda">¶</a>Miniconda</h3>
<p><strong>问题</strong>：由于我之前直接在linux下的python进行pytorch的安装，这种情况只能在项目未关闭的情况下使用，但是当我第二天重启之后发现自动重置了，我之前安装的没了，因此下面我重新装了一个miniconda进行包管理，这样在下次重启之后不会被重置了。</p>
<h4 id="安装miniconda及其配置"><a class="header-anchor" href="#安装miniconda及其配置">¶</a>安装miniconda及其配置</h4>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">下载：</span><br><span class="line">wget -<span class="keyword">c</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/anaconda/miniconda/Miniconda3-<span class="number">4.7</span>.<span class="number">12.1</span>-Linux-x86_64.<span class="keyword">sh</span></span><br><span class="line">安装：</span><br><span class="line">bash Miniconda3-<span class="number">4.7</span>.<span class="number">12.1</span>-Linux-x86_64.<span class="keyword">sh</span></span><br><span class="line"></span><br><span class="line">激活conda：</span><br><span class="line"><span class="keyword">source</span> ~/miniconda3/bin/avtivate</span><br><span class="line"></span><br><span class="line">更换清华源：</span><br><span class="line">conda config --<span class="built_in">add</span> channels http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/anaconda/pkgs/free/ </span><br><span class="line">conda config --<span class="built_in">add</span> channels http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/anaconda/pkgs/main/ </span><br><span class="line">conda config --<span class="keyword">set</span> show_channel_urls yes</span><br></pre></td></tr></table></figure>
<p>完成上述操作后，重启一下终端</p>
<h4 id="配置PyTorch环境"><a class="header-anchor" href="#配置PyTorch环境">¶</a>配置PyTorch环境</h4>
<p>创建conda新环境并且配置需要的包</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">激活conda</span><br><span class="line">source ~/miniconda3/bin/activate</span><br><span class="line"></span><br><span class="line">创建环境</span><br><span class="line">conda create --name Env_PyTorch <span class="attribute">python</span>=3.7</span><br><span class="line"></span><br><span class="line">进入创建好的环境</span><br><span class="line">conda activate Env_Pytoch</span><br><span class="line"></span><br><span class="line">安装PyTorch</span><br><span class="line">conda install <span class="attribute">pytorch</span>==1.2.0 <span class="attribute">torchvision</span>==0.4.0 <span class="attribute">cudatoolkit</span>=9.2</span><br><span class="line">(去除掉-c pytorch才是使用清华源进行安装的否则仍然是原有的源安装)</span><br><span class="line"></span><br><span class="line">配置其他的需要的包</span><br><span class="line">conda install ipython</span><br><span class="line">conda install scikit-image</span><br><span class="line">conda install <span class="attribute">scipy</span>==1.2.0</span><br><span class="line">conda install tqdm</span><br><span class="line">conda install <span class="attribute">pillow</span>=6.1</span><br><span class="line">conda install h5py</span><br><span class="line">conda install nltk</span><br></pre></td></tr></table></figure>
<h4 id="验证是否安装PyTorch成功"><a class="header-anchor" href="#验证是否安装PyTorch成功">¶</a>验证是否安装PyTorch成功</h4>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">&gt;&gt;&gt;import torch &gt;&gt;&gt;print(<span class="name">torch</span>.cuda.is_available()) </span><br><span class="line">&gt;&gt;&gt;print(<span class="name">torch</span>.__version__)</span><br></pre></td></tr></table></figure>
<p><strong>注意</strong>：每次重启终端都要重新运行</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span> ~<span class="regexp">/work/mi</span>niconda3<span class="regexp">/bin/</span>activate </span><br><span class="line">conda activate Env_PyTorch</span><br></pre></td></tr></table></figure>
<h2 id="常见问题"><a class="header-anchor" href="#常见问题">¶</a>常见问题</h2>
<p>我想把本地项目文件上传至Notebook项目中, 但文件数量比较多, 怎么上传? （详见官方帮助文档）</p>
<ul>
<li>请将项目文件打成zip包后, 在Notebook环境中上传. 如果项目文件较大(&gt;30mb), 请使用数据集功能上传, 然后挂载到项目中.</li>
<li>最后在项目中通过unzip命令进行解压缩(请注意需要解压到work目录下)<br>
如：将压缩文件text.zip在指定目录/tmp下解压缩，如果已有相同的文件存在，要求unzip命令不覆盖原 先的文件。</li>
</ul>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">unzip -<span class="keyword">n</span> <span class="keyword">test</span>.<span class="keyword">zip</span> -<span class="keyword">d</span> /tmp</span><br></pre></td></tr></table></figure>
<ul>
<li>如执意需要.rar包, 由于该格式为RAR共享软件独有<br>
使用如下语句：</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">rar 即可得到命令格式和所有参数</span><br><span class="line">rar x abc.rar <span class="regexp">/home/</span>aistudio<span class="regexp">/work/</span>....<span class="regexp">/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Knowledge</category>
        <category>毕设</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Anaconda</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>将域名从服务器解析到github page上</title>
    <url>/2020/02/16/%E5%B0%86%E5%9F%9F%E5%90%8D%E4%BB%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%A7%A3%E6%9E%90%E5%88%B0github%20page%E4%B8%8A/</url>
    <content><![CDATA[<h1>将域名从服务器解析到github page上</h1>
<ol>
<li>首先停用掉自己之前的所使用的的子域名</li>
</ol>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/n2rrTi.png" alt="figure1"></p>
<ol start="2">
<li>然后将列表中关于服务器解析的相关记录去除掉防止出现冲突</li>
</ol>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/JzKtQB.png" alt="figure2"></p>
<ol start="3">
<li>然后修改github上项目配置将著名设置为<ins><a href="http://www.stirvezs.com">www.stirvezs.com</a></ins>.</li>
</ol>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/jnIjhS.png" alt="figure3"></p>
<ol start="4">
<li>修改hexo中的配置文件将url：<a href="http://xn--www-c88d846h.strivezs.com">改为www.strivezs.com</a></li>
</ol>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/5cew7x.png" alt="figure4"></p>
<ol start="5">
<li>在域名管理里面添加域名解析<br>
主机记录：www 用于www.strivezs.com的访问<br>
主机记录：@ 用于strivezs.com的访问</li>
</ol>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/LdTBEN.png" alt="figure5"></p>
<ol start="6">
<li>使用hexo c&amp;&amp;hexo g &amp;&amp; hexo d将项目重新部署到github上即可。</li>
</ol>
]]></content>
      <categories>
        <category>文章页</category>
        <category>Github</category>
        <category>域名</category>
      </categories>
      <tags>
        <tag>域名解析</tag>
        <tag>Github Page</tag>
      </tags>
  </entry>
  <entry>
    <title>博客迁移</title>
    <url>/2019/12/27/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<h1>博客迁移 for MAC</h1>
<h2 id="第一步：导出wordpress内容"><a class="header-anchor" href="#第一步：导出wordpress内容">¶</a>第一步：导出wordpress内容</h2>
<p>进入WordPress后台的工具栏界面，将所有内容导出为一个XML文件。<br>
<img src="https://gitee.com/zyp521/upload_image/raw/master/8U0iSE.png" alt="1"></p>
<h2 id="第二步：安装Hexo"><a class="header-anchor" href="#第二步：安装Hexo">¶</a>第二步：安装Hexo</h2>
<h3 id="环境准备"><a class="header-anchor" href="#环境准备">¶</a>环境准备</h3>
<h4 id="安装Node-js"><a class="header-anchor" href="#安装Node-js">¶</a>安装Node.js</h4>
<p>这里建议用<a href="https://note.youdao.com/">nvm</a>安装管理Node.js</p>
<p><strong>cURL:</strong></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">curl -<span class="keyword">o</span>- http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/nvm-<span class="keyword">sh</span>/nvm/v0.<span class="number">35.2</span>/install.<span class="keyword">sh</span> | bash</span><br></pre></td></tr></table></figure>
<p><strong>Wget:</strong></p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">wget -qO- http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/nvm-<span class="keyword">sh</span>/nvm/v0.<span class="number">35.2</span>/install.<span class="keyword">sh</span> | bash</span><br></pre></td></tr></table></figure>
<p>nvm安装好后，重启终端，然后安装Node.js：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nvm ls-remote</span></span><br></pre></td></tr></table></figure>
<p>使用上述命令来查看远程node版本，然后根据需要安装具体的版本：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nvm install <span class="number">13.5</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>
<p>13.5.0是我安装的版本</p>
<h4 id="安装Git"><a class="header-anchor" href="#安装Git">¶</a>安装Git</h4>
<p>按照Github提示，创建SSH秘钥：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir ~/.ssh <span class="comment">#创建ssh命令</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/.ssh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"your_email@example.com"</span> <span class="comment">#注意更改Email地址</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pbcopy &lt; ~/.ssh/id_rsa.pub</span></span><br></pre></td></tr></table></figure>
<p>此时，pdcopy命令已经将id_rsa.pub内容复制到剪切板.<br>
<img src="https://gitee.com/zyp521/upload_image/raw/master/XhajaO.png" alt="2"><br>
登录 github：<a href="https://github.com/settings/ssh">https://github.com/settings/ssh</a> 点击Add an SSH Key，Title 部分填写一个所用电脑的名称，然后在Key部分填写之前通过pdcopy命令复制的内容。生成 key<br>
<img src="https://gitee.com/zyp521/upload_image/raw/master/b0shL0.png" alt="3"><br>
上述内容操作完成之后，在终端输入如下命令：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"yourusername</span></span><br><span class="line"><span class="string">$ git config --global user.email "</span>youremail<span class="string">"</span></span><br></pre></td></tr></table></figure>
<h3 id="安装Hexo"><a class="header-anchor" href="#安装Hexo">¶</a>安装Hexo</h3>
<p><a href="https://hexo.io/">官网文档</a></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>
<p>如果报错的话，则加上sudo</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure>
<h2 id="第三步：配置Hexo"><a class="header-anchor" href="#第三步：配置Hexo">¶</a>第三步：配置Hexo</h2>
<p>在本地创建你的博客文件夹，然后用命令行进入:</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> 个人文件<span class="string">/MyBlog</span></span><br></pre></td></tr></table></figure>
<p><strong>初始化文件夹设置：</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo init</span></span><br></pre></td></tr></table></figure>
<p><strong>安装npm:</strong></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>初始化成功后，文件夹中会有如下东西：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml     <span class="comment">#配置文件</span></span><br><span class="line">├── package.json    <span class="comment">#应用程序数据</span></span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span>          <span class="comment">#网站内容</span></span><br><span class="line">|   ├── _drafts     <span class="comment">#草稿</span></span><br><span class="line">|   └── _posts      <span class="comment">#文章</span></span><br><span class="line">└── themes          <span class="comment">#主题</span></span><br></pre></td></tr></table></figure>
<h2 id="第四部：从WordPress迁移"><a class="header-anchor" href="#第四部：从WordPress迁移">¶</a>第四部：从WordPress迁移</h2>
<p>首先安装<ins>hexo-migrator-wordpress</ins>插件：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-migrator-wordpress <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>然后将wordpress导出的.xml文件放到当前目录下然后导出：</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">$ hexo migrate wordpress wp-content.<span class="keyword">xml</span> <span class="title">#名字自行替换</span></span><br></pre></td></tr></table></figure>
<p>这样内容就导入进去了。</p>
<h2 id="第五步：访问本地博客"><a class="header-anchor" href="#第五步：访问本地博客">¶</a>第五步：访问本地博客</h2>
<p>生成静态文件：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">generate</span> || hexo g</span><br></pre></td></tr></table></figure>
<p>启动本地服务：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ hexo<span class="built_in"> server </span>|| hexo s</span><br></pre></td></tr></table></figure>
<p>带调试的启动本地服务：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">$ hexo<span class="built_in"> server </span>--debug</span><br></pre></td></tr></table></figure>
<p>启动本地服务后提示：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">Hexo is running <span class="keyword">at</span> <span class="keyword">http</span>://<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">4000</span>/. Press Ctrl+C <span class="built_in">to</span> <span class="built_in">stop</span>.</span><br></pre></td></tr></table></figure>
<p>然后在浏览器打开 <a href="http://0.0.0.0:4000/%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%BF%81%E7%A7%BB%E5%A5%BD%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%95%A6%EF%BC%81">http://0.0.0.0:4000/，就可以看到迁移好的博客啦！</a></p>
<h2 id="第六步：设置主题"><a class="header-anchor" href="#第六步：设置主题">¶</a>第六步：设置主题</h2>
<p>可参考 <a href="https://www.zhihu.com/question/24422335">有那些好看的 Hexo 主题？</a></p>
<p>参考说明文档设置即可</p>
<h2 id="第七步：托管到GitHub"><a class="header-anchor" href="#第七步：托管到GitHub">¶</a>第七步：托管到GitHub</h2>
<p>==这里用到了之前配置好的ssh，一定要配置好，否则git会失败==</p>
<h3 id="创建一个新的repository"><a class="header-anchor" href="#创建一个新的repository">¶</a>创建一个新的repository</h3>
<p><strong>要注意</strong>：新建跟用户名同名的 repository，以“.github.io” 为后缀。</p>
<p><strong>配置Hexo的配置文件_config.yml文件中，找到==Deploymeny==，修改配置：</strong></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:yourname/yourname.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>
<h3 id="Git上传"><a class="header-anchor" href="#Git上传">¶</a>Git上传</h3>
<p>在终端中输入如下命令安装git部署插件：</p>
 <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git</span><br></pre></td></tr></table></figure>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span><br></pre></td></tr></table></figure>
<p>安装完成之后，先进行静态文件生成</p>
 <figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo g</span><br></pre></td></tr></table></figure>
<p>然后将项目部署到github上即可</p>
 <figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">$ hexo deploy <span class="params">||</span> hexo d</span><br></pre></td></tr></table></figure>
<p>==部署完成之后就可以通过yourname.github.io来访问了！==</p>
]]></content>
      <categories>
        <category>文章页</category>
        <category>博客</category>
        <category>Hexo</category>
        <category>next主题</category>
      </categories>
      <tags>
        <tag>next</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>环境配置：NVIDIA+Anaconda+PyTorch+PyCharm</title>
    <url>/2020/03/18/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%EF%BC%9ANVIDIA+Anaconda+PyTorch+PyCharm/</url>
    <content><![CDATA[<h1>环境配置：NVIDIA+Anaconda+PyTorch+PyCharm</h1>
<h2 id="步骤"><a class="header-anchor" href="#步骤">¶</a>步骤</h2>
<h3 id="配置英伟达显卡"><a class="header-anchor" href="#配置英伟达显卡">¶</a>配置英伟达显卡</h3>
<h4 id="安装CUDA"><a class="header-anchor" href="#安装CUDA">¶</a>安装CUDA</h4>
<ul>
<li>首先打开自己的英伟达控制面板查看自己的系统信息，如下图所示：我的是CUDA10.2.95因此需要去英伟达官网下载对应版本的CUDA，下载地址：<a href="https://developer.nvidia.com/cuda-downloads?target_os=Windows&amp;target_arch=x86_64&amp;target_version=10&amp;target_type=exenetwork">click here</a></li>
</ul>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/rr74XI.png" alt="figure.3"></p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/r1wfSH.png" alt="figure.0"></p>
<ul>
<li>进行安装，基本上就是傻瓜式下一步没什么，等待安装完成即可</li>
</ul>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/QNrK0e.png" alt="figure.1"></p>
<h4 id="安装Cudnn"><a class="header-anchor" href="#安装Cudnn">¶</a>安装Cudnn</h4>
<ul>
<li>首先去英伟达官网下载cudnn(这里需要登录下载)。具体下载链接：<a href="https://developer.nvidia.com/cudnn">click here</a></li>
<li>下载完成之后解压得到一个文件夹(蜜汁感动竟然是压缩包不用安装), 将文件夹中的内容放到在C盘路径为**C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.2**的对应文件夹中，直接复制进去就好了</li>
</ul>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/PRdOlQ.png" alt="figure.2"></p>
<h3 id="配置PyTorch"><a class="header-anchor" href="#配置PyTorch">¶</a>配置PyTorch</h3>
<ul>
<li>这里我使用的是anaconda来进行包的管理，具体anaconda下载地址： <a href="https://www.anaconda.com/">click here</a></li>
<li>PyTorch安装，<strong>切记这里需要安装和cuda对应版本的PyTorch！</strong></li>
<li>首先去PyTorch官网找到安装命令，如下图：</li>
</ul>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/AxTd0k.png" alt="figure.4"></p>
<ul>
<li>然后在Anaconda中输入该命令即可：</li>
</ul>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/PnvbJp.png" alt="figure.5"></p>
<ul>
<li>安装完成</li>
</ul>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/dUyIVX.png" alt="figure.6"></p>
<h2 id="验证"><a class="header-anchor" href="#验证">¶</a>验证</h2>
<h3 id="版本验证"><a class="header-anchor" href="#版本验证">¶</a>版本验证</h3>
<ul>
<li>在命令行中输入</li>
</ul>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">nvcc -V</span></span><br></pre></td></tr></table></figure>
<p>会观察到如下版本信息：</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/4ARnMy.png" alt="figure.7"></p>
<h3 id="PyCharm验证能够使用CUDA"><a class="header-anchor" href="#PyCharm验证能够使用CUDA">¶</a>PyCharm验证能够使用CUDA</h3>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(torch.__version__)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(torch.version.cuda)</span></span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(torch.cuda.is_available()</span></span>)</span><br></pre></td></tr></table></figure>
<p>如果输出结果为True，则表示cuda可以使用了。（建议不用最新版的NVIDIA驱动，否则CUDA版本也会升级 PyTorch不一定会有对应版本 没有对应版本不能正常使用。）</p>
]]></content>
      <categories>
        <category>Knowledge</category>
        <category>PyTorch</category>
      </categories>
      <tags>
        <tag>PyCharm</tag>
        <tag>NVIDIA</tag>
        <tag>PyTorch</tag>
        <tag>CUDA</tag>
      </tags>
  </entry>
  <entry>
    <title>微信公众号和CSDN的重新使用</title>
    <url>/2020/06/05/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%92%8CCSDN%E7%9A%84%E9%87%8D%E6%96%B0%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1>微信公众号和CSDN的重新使用</h1>
<p>最近计划将文章内容同步更新在个人博客、微信公众号和CSDN三个平台上，方便更多地用户进行访问和获取的内容。</p>
<h2 id="微信公众号"><a class="header-anchor" href="#微信公众号">¶</a>微信公众号</h2>
<p>近期刚刚开通了微信公众号，过段时间会慢慢的进行更新的。</p>
<p>下面是公众号的二维码，可以扫描关注。</p>
<p><img src="https://gitee.com/zyp521/upload_image/raw/master/%E5%85%AC%E4%BC%97%E5%8F%B7.jpg" alt="figure.1"></p>
<p>同样可以搜索次猿技术进行关注。</p>
<h2 id="CSDN"><a class="header-anchor" href="#CSDN">¶</a>CSDN</h2>
<p>CSDN之前曾经使用过一段时间，但是由于时间上的安排，决定仅在博客上进行更新了，现在正值毕业季时间比较充裕，因此决定再次重新进行更新。</p>
<p>欢迎访问：<a href="https://blog.csdn.net/qq_16184125">我的CSDN</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>CSDN</tag>
        <tag>微信公众号</tag>
      </tags>
  </entry>
  <entry>
    <title>极大似然估计</title>
    <url>/2020/06/25/%E6%9E%81%E5%A4%A7%E4%BC%BC%E7%84%B6%E4%BC%B0%E8%AE%A1/</url>
    <content><![CDATA[<h1>极大似然估计</h1>
<h2 id="贝叶斯决策"><a class="header-anchor" href="#贝叶斯决策">¶</a>贝叶斯决策</h2>
<p>首先来看贝叶斯分类, 贝叶斯公式如下：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20venlwNTIxL3VwbG9hZF9pbWFnZS9yYXcvbWFzdGVyL0F4bjdhSy5wbmc?x-oss-process=image/format,png" alt="figure.1"></p>
<p>其中 <strong>p(w) 为先验概率</strong>，表示每种类别分布的概率; <strong>p(x|w)为类条件概率</strong>, 表示在某种类别w的前提下, 某件事情x发生的概率; 而P(w|x) 为后验概率，表示某事x发生了，并且它属于某一类别w的概率，有了这个后验概率，我们就可以对样本进行分类。<strong>后验概率越大，说明某事物属于这个类别的可能性越大，我们越有理由把它x归到这个类别w下。</strong></p>
<p>这样我们就可以根绝p(w) p(x) p(x|w)来计算出p(w|x)从而得到x的类别划分.</p>
<h2 id="问题引出"><a class="header-anchor" href="#问题引出">¶</a>问题引出</h2>
<p>但是在实际问题中并不都是这样幸运的, 我们能获得的数据可能只有有限数目的样本数据，而<ins>先验概率p(w)和类条件概率（各类的总体分布）p(x|w)都是未知的</ins>.根据仅有的样本数据进行分类时，一种可行的办法是我们需要先对先验概率和类条件概率进行评估，然后在套用贝叶斯分类器。</p>
<p><strong>先验概率的估计较简单</strong>:1.每个样本所属的自然状态都是已知的（有点监督学习）2.依靠经验 3.用训练样本中各类出现的频率估计</p>
<p>类条件概率的估计很难，原因包括：1.概率密度函数包含了一个随机变量的全部信息；2.样本数据可能不多；3.特征向量x的维度可能很大等等<br>
总之要直接估计类条件概率的密度函数很难。解决办法：<strong>把估计完全未知的概率密度 p(x|w)转换为估计参数。这样就将概率密度估计问题转化为了参数估计问题</strong> ==极大似然估计就是一种参数估计方法==。 当然，概率密度函数的选取很重要，模型正确，在样本区域无穷时，我们会得到较准的估计值，如果模型都错了，那估计半天的参数，肯定没有意义了。</p>
<h2 id="重要前提"><a class="header-anchor" href="#重要前提">¶</a>重要前提</h2>
<p><strong>训练样本的分布能代表样本的真实分布。每个样本集中的样本都是所谓<ins>独立同分布额随机变量</ins>，且有充分的训练样本。</strong></p>
<h2 id="极大似然估计"><a class="header-anchor" href="#极大似然估计">¶</a>极大似然估计</h2>
<p>原理图：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20venlwNTIxL3VwbG9hZF9pbWFnZS9yYXcvbWFzdGVyL0VrUTU5Yy5wbmc?x-oss-process=image/format,png" alt="figure.2"></p>
<p><strong>似然函数(likehood function)</strong> : 联合概率密度函数 $p(D|\theta)$ 称为相对于$\left{ x_{1},x_{2},\dots ,x_{N} \right}$ 的$\theta$的似然函数. 每个x都是独立的</p>
<p>$$ l(\theta)=p(D|\theta)=p(x_{1},x_{2},\dots,x_{N}|\theta)=\prod_{i=1}^{N}p(x_{i}|\theta) $$</p>
<p>如果 $\hat{\theta}$ 是参数空间中能使似然函数 $l(\theta)$ 最大的 $\theta$ 值，则$\hat{\theta}$应该是最可能的参数值，那么$\hat{\theta}$ 就是 $\theta$ 的极大似然估计量。它的样本集的函数记作：</p>
<p>$$ \hat{\theta}=d(x_{1},x_{2},\dots,x_{N})=d(D)$$</p>
<p>$$ \hat{\theta}=d(x_{1},x_{2},\dots,x_{N}) $$ 称为极大似然函数估计值</p>
<h2 id="求解极大似然函数"><a class="header-anchor" href="#求解极大似然函数">¶</a>求解极大似然函数</h2>
<p><strong>ML估计</strong>:求是的出现该组样本的概率最大的 $\theta$ 值。</p>
<p>$$ \hat{\theta}=arg: \underset{\theta}{max} \prod_{i=1}^{N}p(x_{i}|\theta)$$</p>
<p>实际中为了便于分析，定义了<strong>对数似然函数</strong>：</p>
<p>$$ H(\theta)=ln:l(\theta)$$</p>
<p>$$ l(\theta)=p(D|\theta)=p(x_{1},x_{2},\dots,x_{N}|\theta)=\prod_{i=1}^{N}p(x_{i}|\theta) $$</p>
<p>$$ \hat{\theta}=arg:H(\theta)=arg: \underset{\theta}{max} \ln l(\theta)= arg: \prod_{i=1}^{N}ln:p(x_{i}|\theta)$$</p>
<p>1.未知参数只有一个（theta为标量）<br>
在似然函数满足联系、可微的正则条件下，极大似然估计量是下面微分方程的解：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20venlwNTIxL3VwbG9hZF9pbWFnZS9yYXcvbWFzdGVyL0FZSU1vaC5wbmc?x-oss-process=image/format,png" alt="figure.3"></p>
<p>2.未知参数有多个(theta为向量)<br>
则theta可表示为具有S个分量的未知向量：</p>
<p>$$ \theta=[\theta_{1},\theta_{2},\dots,\theta_{s}]^{T} $$</p>
<p>记梯度算子：</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20venlwNTIxL3VwbG9hZF9pbWFnZS9yYXcvbWFzdGVyLzh6aVJkaC5wbmc?x-oss-process=image/format,png" alt="figure.4"></p>
<p>若似然函数满足连续可导的条件，则最大似然估计量就是如下方程的解.</p>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20venlwNTIxL3VwbG9hZF9pbWFnZS9yYXcvbWFzdGVyL2RQbG0xaS5wbmc?x-oss-process=image/format,png" alt="figure.5"></p>
<p>方程的解只是一个估计值，只有在样本数趋于无限多的时候，它才会接近于真实值，</p>
<h2 id="例子"><a class="header-anchor" href="#例子">¶</a>例子</h2>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9naXRlZS5jb20venlwNTIxL3VwbG9hZF9pbWFnZS9yYXcvbWFzdGVyL0RvdTNHRC5wbmc?x-oss-process=image/format,png" alt="figure.6"></p>
<h2 id="总结"><a class="header-anchor" href="#总结">¶</a>总结</h2>
<p><strong>求解最大似然估计量的一般步骤：</strong></p>
<ul>
<li>写出似然函数</li>
<li>写出对数似然函数，并整理</li>
<li>求对数似然函数关于标量/向量theta的导数，在上面例子中theta为向量=(u,sigma)</li>
<li>求解似然方程，将求导后的结果等于0 （满足dH(theta)/d theta=0</li>
</ul>
]]></content>
      <categories>
        <category>Math</category>
      </categories>
      <tags>
        <tag>极大似然估计</tag>
      </tags>
  </entry>
</search>
